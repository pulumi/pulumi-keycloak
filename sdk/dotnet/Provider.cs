// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// The provider type for the keycloak package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [KeycloakResourceType("pulumi:providers:keycloak")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        [Output("basePath")]
        public Output<string?> BasePath { get; private set; } = null!;

        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("realm")]
        public Output<string?> Realm { get; private set; } = null!;

        /// <summary>
        /// Allows x509 calls using an unknown CA certificate (for development purposes)
        /// </summary>
        [Output("rootCaCertificate")]
        public Output<string?> RootCaCertificate { get; private set; } = null!;

        /// <summary>
        /// The base URL of the Keycloak instance, before `/auth`
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("keycloak", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }

        /// <summary>
        /// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        /// </summary>
        public global::Pulumi.Output<ProviderTerraformConfigResult> TerraformConfig()
            => global::Pulumi.Deployment.Instance.Call<ProviderTerraformConfigResult>("pulumi:providers:keycloak/terraformConfig", CallArgs.Empty, this);
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalHeaders", json: true)]
        private InputMap<string>? _additionalHeaders;
        public InputMap<string> AdditionalHeaders
        {
            get => _additionalHeaders ?? (_additionalHeaders = new InputMap<string>());
            set => _additionalHeaders = value;
        }

        [Input("basePath")]
        public Input<string>? BasePath { get; set; }

        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// Timeout (in seconds) of the Keycloak client
        /// </summary>
        [Input("clientTimeout", json: true)]
        public Input<int>? ClientTimeout { get; set; }

        /// <summary>
        /// Whether or not to login to Keycloak instance on provider initialization
        /// </summary>
        [Input("initialLogin", json: true)]
        public Input<bool>? InitialLogin { get; set; }

        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("realm")]
        public Input<string>? Realm { get; set; }

        /// <summary>
        /// When true, the provider will treat the Keycloak instance as a Red Hat SSO server, specifically when parsing the version
        /// returned from the /serverinfo API endpoint.
        /// </summary>
        [Input("redHatSso", json: true)]
        public Input<bool>? RedHatSso { get; set; }

        /// <summary>
        /// Allows x509 calls using an unknown CA certificate (for development purposes)
        /// </summary>
        [Input("rootCaCertificate")]
        public Input<string>? RootCaCertificate { get; set; }

        /// <summary>
        /// Allows ignoring insecure certificates when set to true. Defaults to false. Disabling security check is dangerous and
        /// should be avoided.
        /// </summary>
        [Input("tlsInsecureSkipVerify", json: true)]
        public Input<bool>? TlsInsecureSkipVerify { get; set; }

        /// <summary>
        /// The base URL of the Keycloak instance, before `/auth`
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProviderArgs()
        {
            ClientTimeout = Utilities.GetEnvInt32("KEYCLOAK_CLIENT_TIMEOUT") ?? 5;
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }

    /// <summary>
    /// The results of the <see cref="Provider.TerraformConfig"/> method.
    /// </summary>
    [OutputType]
    public sealed class ProviderTerraformConfigResult
    {
        public readonly ImmutableDictionary<string, object> Result;

        [OutputConstructor]
        private ProviderTerraformConfigResult(ImmutableDictionary<string, object> result)
        {
            Result = result;
        }
    }
}
