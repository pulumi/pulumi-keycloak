// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Oidc
{
    public partial class IdentityProvider : Pulumi.CustomResource
    {
        /// <summary>
        /// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
        /// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
        /// returned to client, but the request with prompt=none will be forwarded to this identity provider.
        /// </summary>
        [Output("acceptsPromptNoneForwardFromClient")]
        public Output<bool?> AcceptsPromptNoneForwardFromClient { get; private set; } = null!;

        /// <summary>
        /// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        /// </summary>
        [Output("addReadTokenRoleOnCreate")]
        public Output<bool?> AddReadTokenRoleOnCreate { get; private set; } = null!;

        /// <summary>
        /// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Output("authenticateByDefault")]
        public Output<bool?> AuthenticateByDefault { get; private set; } = null!;

        /// <summary>
        /// OIDC authorization URL.
        /// </summary>
        [Output("authorizationUrl")]
        public Output<string> AuthorizationUrl { get; private set; } = null!;

        /// <summary>
        /// Does the external IDP support backchannel logout?
        /// </summary>
        [Output("backchannelSupported")]
        public Output<bool?> BackchannelSupported { get; private set; } = null!;

        /// <summary>
        /// Client ID.
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// Client Secret.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
        /// </summary>
        [Output("defaultScopes")]
        public Output<string?> DefaultScopes { get; private set; } = null!;

        /// <summary>
        /// Friendly name for Identity Providers.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this identity provider.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("extraConfig")]
        public Output<ImmutableDictionary<string, object>?> ExtraConfig { get; private set; } = null!;

        /// <summary>
        /// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
        /// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        /// </summary>
        [Output("firstBrokerLoginFlowAlias")]
        public Output<string?> FirstBrokerLoginFlowAlias { get; private set; } = null!;

        /// <summary>
        /// Hide On Login Page.
        /// </summary>
        [Output("hideOnLoginPage")]
        public Output<bool?> HideOnLoginPage { get; private set; } = null!;

        /// <summary>
        /// Internal Identity Provider Id
        /// </summary>
        [Output("internalId")]
        public Output<string> InternalId { get; private set; } = null!;

        /// <summary>
        /// JSON Web Key Set URL
        /// </summary>
        [Output("jwksUrl")]
        public Output<string?> JwksUrl { get; private set; } = null!;

        /// <summary>
        /// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
        /// want to allow login from the provider, but want to integrate with a provider
        /// </summary>
        [Output("linkOnly")]
        public Output<bool?> LinkOnly { get; private set; } = null!;

        /// <summary>
        /// Login Hint.
        /// </summary>
        [Output("loginHint")]
        public Output<string?> LoginHint { get; private set; } = null!;

        /// <summary>
        /// Logout URL
        /// </summary>
        [Output("logoutUrl")]
        public Output<string?> LogoutUrl { get; private set; } = null!;

        /// <summary>
        /// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
        /// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
        /// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
        /// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        /// </summary>
        [Output("postBrokerLoginFlowAlias")]
        public Output<string?> PostBrokerLoginFlowAlias { get; private set; } = null!;

        /// <summary>
        /// provider id, is always oidc, unless you have a custom implementation
        /// </summary>
        [Output("providerId")]
        public Output<string?> ProviderId { get; private set; } = null!;

        /// <summary>
        /// Realm Name
        /// </summary>
        [Output("realm")]
        public Output<string> Realm { get; private set; } = null!;

        /// <summary>
        /// Enable/disable if tokens must be stored after authenticating users.
        /// </summary>
        [Output("storeToken")]
        public Output<bool?> StoreToken { get; private set; } = null!;

        /// <summary>
        /// Token URL.
        /// </summary>
        [Output("tokenUrl")]
        public Output<string> TokenUrl { get; private set; } = null!;

        /// <summary>
        /// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        /// </summary>
        [Output("trustEmail")]
        public Output<bool?> TrustEmail { get; private set; } = null!;

        /// <summary>
        /// Pass current locale to identity provider
        /// </summary>
        [Output("uiLocales")]
        public Output<bool?> UiLocales { get; private set; } = null!;

        /// <summary>
        /// User Info URL
        /// </summary>
        [Output("userInfoUrl")]
        public Output<string?> UserInfoUrl { get; private set; } = null!;

        /// <summary>
        /// Enable/disable signature validation of external IDP signatures.
        /// </summary>
        [Output("validateSignature")]
        public Output<bool?> ValidateSignature { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityProvider(string name, IdentityProviderArgs args, CustomResourceOptions? options = null)
            : base("keycloak:oidc/identityProvider:IdentityProvider", name, args ?? new IdentityProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityProvider(string name, Input<string> id, IdentityProviderState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:oidc/identityProvider:IdentityProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityProvider Get(string name, Input<string> id, IdentityProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityProvider(name, id, state, options);
        }
    }

    public sealed class IdentityProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
        /// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
        /// returned to client, but the request with prompt=none will be forwarded to this identity provider.
        /// </summary>
        [Input("acceptsPromptNoneForwardFromClient")]
        public Input<bool>? AcceptsPromptNoneForwardFromClient { get; set; }

        /// <summary>
        /// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        /// </summary>
        [Input("addReadTokenRoleOnCreate")]
        public Input<bool>? AddReadTokenRoleOnCreate { get; set; }

        /// <summary>
        /// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        /// </summary>
        [Input("alias", required: true)]
        public Input<string> Alias { get; set; } = null!;

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Input("authenticateByDefault")]
        public Input<bool>? AuthenticateByDefault { get; set; }

        /// <summary>
        /// OIDC authorization URL.
        /// </summary>
        [Input("authorizationUrl", required: true)]
        public Input<string> AuthorizationUrl { get; set; } = null!;

        /// <summary>
        /// Does the external IDP support backchannel logout?
        /// </summary>
        [Input("backchannelSupported")]
        public Input<bool>? BackchannelSupported { get; set; }

        /// <summary>
        /// Client ID.
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// Client Secret.
        /// </summary>
        [Input("clientSecret", required: true)]
        public Input<string> ClientSecret { get; set; } = null!;

        /// <summary>
        /// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
        /// </summary>
        [Input("defaultScopes")]
        public Input<string>? DefaultScopes { get; set; }

        /// <summary>
        /// Friendly name for Identity Providers.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Enable/disable this identity provider.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("extraConfig")]
        private InputMap<object>? _extraConfig;
        public InputMap<object> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<object>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
        /// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        /// </summary>
        [Input("firstBrokerLoginFlowAlias")]
        public Input<string>? FirstBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// Hide On Login Page.
        /// </summary>
        [Input("hideOnLoginPage")]
        public Input<bool>? HideOnLoginPage { get; set; }

        /// <summary>
        /// JSON Web Key Set URL
        /// </summary>
        [Input("jwksUrl")]
        public Input<string>? JwksUrl { get; set; }

        /// <summary>
        /// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
        /// want to allow login from the provider, but want to integrate with a provider
        /// </summary>
        [Input("linkOnly")]
        public Input<bool>? LinkOnly { get; set; }

        /// <summary>
        /// Login Hint.
        /// </summary>
        [Input("loginHint")]
        public Input<string>? LoginHint { get; set; }

        /// <summary>
        /// Logout URL
        /// </summary>
        [Input("logoutUrl")]
        public Input<string>? LogoutUrl { get; set; }

        /// <summary>
        /// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
        /// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
        /// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
        /// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        /// </summary>
        [Input("postBrokerLoginFlowAlias")]
        public Input<string>? PostBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// provider id, is always oidc, unless you have a custom implementation
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// Realm Name
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        /// <summary>
        /// Enable/disable if tokens must be stored after authenticating users.
        /// </summary>
        [Input("storeToken")]
        public Input<bool>? StoreToken { get; set; }

        /// <summary>
        /// Token URL.
        /// </summary>
        [Input("tokenUrl", required: true)]
        public Input<string> TokenUrl { get; set; } = null!;

        /// <summary>
        /// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        /// </summary>
        [Input("trustEmail")]
        public Input<bool>? TrustEmail { get; set; }

        /// <summary>
        /// Pass current locale to identity provider
        /// </summary>
        [Input("uiLocales")]
        public Input<bool>? UiLocales { get; set; }

        /// <summary>
        /// User Info URL
        /// </summary>
        [Input("userInfoUrl")]
        public Input<string>? UserInfoUrl { get; set; }

        /// <summary>
        /// Enable/disable signature validation of external IDP signatures.
        /// </summary>
        [Input("validateSignature")]
        public Input<bool>? ValidateSignature { get; set; }

        public IdentityProviderArgs()
        {
        }
    }

    public sealed class IdentityProviderState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
        /// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
        /// returned to client, but the request with prompt=none will be forwarded to this identity provider.
        /// </summary>
        [Input("acceptsPromptNoneForwardFromClient")]
        public Input<bool>? AcceptsPromptNoneForwardFromClient { get; set; }

        /// <summary>
        /// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        /// </summary>
        [Input("addReadTokenRoleOnCreate")]
        public Input<bool>? AddReadTokenRoleOnCreate { get; set; }

        /// <summary>
        /// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Input("authenticateByDefault")]
        public Input<bool>? AuthenticateByDefault { get; set; }

        /// <summary>
        /// OIDC authorization URL.
        /// </summary>
        [Input("authorizationUrl")]
        public Input<string>? AuthorizationUrl { get; set; }

        /// <summary>
        /// Does the external IDP support backchannel logout?
        /// </summary>
        [Input("backchannelSupported")]
        public Input<bool>? BackchannelSupported { get; set; }

        /// <summary>
        /// Client ID.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Client Secret.
        /// </summary>
        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to 'openid'.
        /// </summary>
        [Input("defaultScopes")]
        public Input<string>? DefaultScopes { get; set; }

        /// <summary>
        /// Friendly name for Identity Providers.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Enable/disable this identity provider.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("extraConfig")]
        private InputMap<object>? _extraConfig;
        public InputMap<object> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<object>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
        /// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        /// </summary>
        [Input("firstBrokerLoginFlowAlias")]
        public Input<string>? FirstBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// Hide On Login Page.
        /// </summary>
        [Input("hideOnLoginPage")]
        public Input<bool>? HideOnLoginPage { get; set; }

        /// <summary>
        /// Internal Identity Provider Id
        /// </summary>
        [Input("internalId")]
        public Input<string>? InternalId { get; set; }

        /// <summary>
        /// JSON Web Key Set URL
        /// </summary>
        [Input("jwksUrl")]
        public Input<string>? JwksUrl { get; set; }

        /// <summary>
        /// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
        /// want to allow login from the provider, but want to integrate with a provider
        /// </summary>
        [Input("linkOnly")]
        public Input<bool>? LinkOnly { get; set; }

        /// <summary>
        /// Login Hint.
        /// </summary>
        [Input("loginHint")]
        public Input<string>? LoginHint { get; set; }

        /// <summary>
        /// Logout URL
        /// </summary>
        [Input("logoutUrl")]
        public Input<string>? LogoutUrl { get; set; }

        /// <summary>
        /// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
        /// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
        /// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
        /// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        /// </summary>
        [Input("postBrokerLoginFlowAlias")]
        public Input<string>? PostBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// provider id, is always oidc, unless you have a custom implementation
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// Realm Name
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        /// <summary>
        /// Enable/disable if tokens must be stored after authenticating users.
        /// </summary>
        [Input("storeToken")]
        public Input<bool>? StoreToken { get; set; }

        /// <summary>
        /// Token URL.
        /// </summary>
        [Input("tokenUrl")]
        public Input<string>? TokenUrl { get; set; }

        /// <summary>
        /// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        /// </summary>
        [Input("trustEmail")]
        public Input<bool>? TrustEmail { get; set; }

        /// <summary>
        /// Pass current locale to identity provider
        /// </summary>
        [Input("uiLocales")]
        public Input<bool>? UiLocales { get; set; }

        /// <summary>
        /// User Info URL
        /// </summary>
        [Input("userInfoUrl")]
        public Input<string>? UserInfoUrl { get; set; }

        /// <summary>
        /// Enable/disable signature validation of external IDP signatures.
        /// </summary>
        [Input("validateSignature")]
        public Input<bool>? ValidateSignature { get; set; }

        public IdentityProviderState()
        {
        }
    }
}
