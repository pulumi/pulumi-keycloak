// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Oidc
{
    /// <summary>
    /// Allows for creating and managing **GitHub**-based OIDC Identity Providers within Keycloak.
    /// 
    /// OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard.
    /// 
    /// The GitHub variant is specialized for the public GitHub instance (github.com) or GitHub Enterprise deployments.
    /// 
    /// For example, it will obtain automatically the primary email from the logged in account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var github = new Keycloak.Oidc.GithubIdentityProvider("github", new()
    ///     {
    ///         Realm = realm.Id,
    ///         ClientId = githubIdentityProviderClientId,
    ///         ClientSecret = githubIdentityProviderClientSecret,
    ///         TrustEmail = true,
    ///         SyncMode = "IMPORT",
    ///         ExtraConfig = 
    ///         {
    ///             { "myCustomConfigKey", "myValue" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GitHub Identity providers can be imported using the format {{realm_id}}/{{idp_alias}}, where idp_alias is the identity provider alias.
    /// 
    /// Example:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import keycloak:oidc/githubIdentityProvider:GithubIdentityProvider github_identity_provider my-realm/my-github-idp
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:oidc/githubIdentityProvider:GithubIdentityProvider")]
    public partial class GithubIdentityProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When `True`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `False`.
        /// </summary>
        [Output("addReadTokenRoleOnCreate")]
        public Output<bool?> AddReadTokenRoleOnCreate { get; private set; } = null!;

        /// <summary>
        /// The alias for the GitHub identity provider.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// The GitHub API URL, defaults to `https://api.github.com`.
        /// </summary>
        [Output("apiUrl")]
        public Output<string?> ApiUrl { get; private set; } = null!;

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Output("authenticateByDefault")]
        public Output<bool?> AuthenticateByDefault { get; private set; } = null!;

        /// <summary>
        /// The GitHub base URL, defaults to `https://github.com`
        /// </summary>
        [Output("baseUrl")]
        public Output<string?> BaseUrl { get; private set; } = null!;

        /// <summary>
        /// The client or client identifier registered within the identity provider.
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
        /// </summary>
        [Output("defaultScopes")]
        public Output<string?> DefaultScopes { get; private set; } = null!;

        /// <summary>
        /// Display name for the GitHub identity provider in the GUI.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// When `True`, users will be able to log in to this realm using this identity provider. Defaults to `True`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("extraConfig")]
        public Output<ImmutableDictionary<string, string>?> ExtraConfig { get; private set; } = null!;

        /// <summary>
        /// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
        /// </summary>
        [Output("firstBrokerLoginFlowAlias")]
        public Output<string?> FirstBrokerLoginFlowAlias { get; private set; } = null!;

        /// <summary>
        /// When `True`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `False`.
        /// </summary>
        [Output("githubJsonFormat")]
        public Output<bool?> GithubJsonFormat { get; private set; } = null!;

        /// <summary>
        /// A number defining the order of this identity provider in the GUI.
        /// </summary>
        [Output("guiOrder")]
        public Output<string?> GuiOrder { get; private set; } = null!;

        /// <summary>
        /// When `True`, this identity provider will be hidden on the login page. Defaults to `False`.
        /// </summary>
        [Output("hideOnLoginPage")]
        public Output<bool?> HideOnLoginPage { get; private set; } = null!;

        /// <summary>
        /// (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
        /// </summary>
        [Output("internalId")]
        public Output<string> InternalId { get; private set; } = null!;

        /// <summary>
        /// When `True`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `False`.
        /// </summary>
        [Output("linkOnly")]
        public Output<bool?> LinkOnly { get; private set; } = null!;

        [Output("orgDomain")]
        public Output<string?> OrgDomain { get; private set; } = null!;

        [Output("orgRedirectModeEmailMatches")]
        public Output<bool?> OrgRedirectModeEmailMatches { get; private set; } = null!;

        /// <summary>
        /// ID of organization with which this identity is linked.
        /// </summary>
        [Output("organizationId")]
        public Output<string?> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        /// </summary>
        [Output("postBrokerLoginFlowAlias")]
        public Output<string?> PostBrokerLoginFlowAlias { get; private set; } = null!;

        /// <summary>
        /// The ID of the identity provider to use. Defaults to `Github`, which should be used unless you have extended Keycloak and provided your own implementation.
        /// </summary>
        [Output("providerId")]
        public Output<string?> ProviderId { get; private set; } = null!;

        /// <summary>
        /// The name of the realm. This is unique across Keycloak.
        /// </summary>
        [Output("realm")]
        public Output<string> Realm { get; private set; } = null!;

        /// <summary>
        /// When `True`, tokens will be stored after authenticating users. Defaults to `True`.
        /// </summary>
        [Output("storeToken")]
        public Output<bool?> StoreToken { get; private set; } = null!;

        /// <summary>
        /// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
        /// </summary>
        [Output("syncMode")]
        public Output<string?> SyncMode { get; private set; } = null!;

        /// <summary>
        /// When `True`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `False`.
        /// </summary>
        [Output("trustEmail")]
        public Output<bool?> TrustEmail { get; private set; } = null!;


        /// <summary>
        /// Create a GithubIdentityProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GithubIdentityProvider(string name, GithubIdentityProviderArgs args, CustomResourceOptions? options = null)
            : base("keycloak:oidc/githubIdentityProvider:GithubIdentityProvider", name, args ?? new GithubIdentityProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GithubIdentityProvider(string name, Input<string> id, GithubIdentityProviderState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:oidc/githubIdentityProvider:GithubIdentityProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GithubIdentityProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GithubIdentityProvider Get(string name, Input<string> id, GithubIdentityProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new GithubIdentityProvider(name, id, state, options);
        }
    }

    public sealed class GithubIdentityProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `True`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `False`.
        /// </summary>
        [Input("addReadTokenRoleOnCreate")]
        public Input<bool>? AddReadTokenRoleOnCreate { get; set; }

        /// <summary>
        /// The alias for the GitHub identity provider.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// The GitHub API URL, defaults to `https://api.github.com`.
        /// </summary>
        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Input("authenticateByDefault")]
        public Input<bool>? AuthenticateByDefault { get; set; }

        /// <summary>
        /// The GitHub base URL, defaults to `https://github.com`
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// The client or client identifier registered within the identity provider.
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
        /// </summary>
        [Input("defaultScopes")]
        public Input<string>? DefaultScopes { get; set; }

        /// <summary>
        /// Display name for the GitHub identity provider in the GUI.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// When `True`, users will be able to log in to this realm using this identity provider. Defaults to `True`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("extraConfig")]
        private InputMap<string>? _extraConfig;
        public InputMap<string> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<string>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
        /// </summary>
        [Input("firstBrokerLoginFlowAlias")]
        public Input<string>? FirstBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// When `True`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `False`.
        /// </summary>
        [Input("githubJsonFormat")]
        public Input<bool>? GithubJsonFormat { get; set; }

        /// <summary>
        /// A number defining the order of this identity provider in the GUI.
        /// </summary>
        [Input("guiOrder")]
        public Input<string>? GuiOrder { get; set; }

        /// <summary>
        /// When `True`, this identity provider will be hidden on the login page. Defaults to `False`.
        /// </summary>
        [Input("hideOnLoginPage")]
        public Input<bool>? HideOnLoginPage { get; set; }

        /// <summary>
        /// When `True`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `False`.
        /// </summary>
        [Input("linkOnly")]
        public Input<bool>? LinkOnly { get; set; }

        [Input("orgDomain")]
        public Input<string>? OrgDomain { get; set; }

        [Input("orgRedirectModeEmailMatches")]
        public Input<bool>? OrgRedirectModeEmailMatches { get; set; }

        /// <summary>
        /// ID of organization with which this identity is linked.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        /// </summary>
        [Input("postBrokerLoginFlowAlias")]
        public Input<string>? PostBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// The ID of the identity provider to use. Defaults to `Github`, which should be used unless you have extended Keycloak and provided your own implementation.
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// The name of the realm. This is unique across Keycloak.
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        /// <summary>
        /// When `True`, tokens will be stored after authenticating users. Defaults to `True`.
        /// </summary>
        [Input("storeToken")]
        public Input<bool>? StoreToken { get; set; }

        /// <summary>
        /// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
        /// </summary>
        [Input("syncMode")]
        public Input<string>? SyncMode { get; set; }

        /// <summary>
        /// When `True`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `False`.
        /// </summary>
        [Input("trustEmail")]
        public Input<bool>? TrustEmail { get; set; }

        public GithubIdentityProviderArgs()
        {
        }
        public static new GithubIdentityProviderArgs Empty => new GithubIdentityProviderArgs();
    }

    public sealed class GithubIdentityProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `True`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `False`.
        /// </summary>
        [Input("addReadTokenRoleOnCreate")]
        public Input<bool>? AddReadTokenRoleOnCreate { get; set; }

        /// <summary>
        /// The alias for the GitHub identity provider.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// The GitHub API URL, defaults to `https://api.github.com`.
        /// </summary>
        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Input("authenticateByDefault")]
        public Input<bool>? AuthenticateByDefault { get; set; }

        /// <summary>
        /// The GitHub base URL, defaults to `https://github.com`
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// The client or client identifier registered within the identity provider.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
        /// </summary>
        [Input("defaultScopes")]
        public Input<string>? DefaultScopes { get; set; }

        /// <summary>
        /// Display name for the GitHub identity provider in the GUI.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// When `True`, users will be able to log in to this realm using this identity provider. Defaults to `True`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("extraConfig")]
        private InputMap<string>? _extraConfig;
        public InputMap<string> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<string>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
        /// </summary>
        [Input("firstBrokerLoginFlowAlias")]
        public Input<string>? FirstBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// When `True`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `False`.
        /// </summary>
        [Input("githubJsonFormat")]
        public Input<bool>? GithubJsonFormat { get; set; }

        /// <summary>
        /// A number defining the order of this identity provider in the GUI.
        /// </summary>
        [Input("guiOrder")]
        public Input<string>? GuiOrder { get; set; }

        /// <summary>
        /// When `True`, this identity provider will be hidden on the login page. Defaults to `False`.
        /// </summary>
        [Input("hideOnLoginPage")]
        public Input<bool>? HideOnLoginPage { get; set; }

        /// <summary>
        /// (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
        /// </summary>
        [Input("internalId")]
        public Input<string>? InternalId { get; set; }

        /// <summary>
        /// When `True`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `False`.
        /// </summary>
        [Input("linkOnly")]
        public Input<bool>? LinkOnly { get; set; }

        [Input("orgDomain")]
        public Input<string>? OrgDomain { get; set; }

        [Input("orgRedirectModeEmailMatches")]
        public Input<bool>? OrgRedirectModeEmailMatches { get; set; }

        /// <summary>
        /// ID of organization with which this identity is linked.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
        /// </summary>
        [Input("postBrokerLoginFlowAlias")]
        public Input<string>? PostBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// The ID of the identity provider to use. Defaults to `Github`, which should be used unless you have extended Keycloak and provided your own implementation.
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// The name of the realm. This is unique across Keycloak.
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        /// <summary>
        /// When `True`, tokens will be stored after authenticating users. Defaults to `True`.
        /// </summary>
        [Input("storeToken")]
        public Input<bool>? StoreToken { get; set; }

        /// <summary>
        /// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
        /// </summary>
        [Input("syncMode")]
        public Input<string>? SyncMode { get; set; }

        /// <summary>
        /// When `True`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `False`.
        /// </summary>
        [Input("trustEmail")]
        public Input<bool>? TrustEmail { get; set; }

        public GithubIdentityProviderState()
        {
        }
        public static new GithubIdentityProviderState Empty => new GithubIdentityProviderState();
    }
}
