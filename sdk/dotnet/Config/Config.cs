// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Keycloak
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("keycloak");

        private static readonly __Value<ImmutableDictionary<string, string>?> _additionalHeaders = new __Value<ImmutableDictionary<string, string>?>(() => __config.GetObject<ImmutableDictionary<string, string>>("additionalHeaders"));
        public static ImmutableDictionary<string, string>? AdditionalHeaders
        {
            get => _additionalHeaders.Get();
            set => _additionalHeaders.Set(value);
        }

        private static readonly __Value<string?> _basePath = new __Value<string?>(() => __config.Get("basePath"));
        public static string? BasePath
        {
            get => _basePath.Get();
            set => _basePath.Set(value);
        }

        private static readonly __Value<string?> _clientId = new __Value<string?>(() => __config.Get("clientId"));
        public static string? ClientId
        {
            get => _clientId.Get();
            set => _clientId.Set(value);
        }

        private static readonly __Value<string?> _clientSecret = new __Value<string?>(() => __config.Get("clientSecret"));
        public static string? ClientSecret
        {
            get => _clientSecret.Get();
            set => _clientSecret.Set(value);
        }

        private static readonly __Value<int?> _clientTimeout = new __Value<int?>(() => __config.GetInt32("clientTimeout") ?? Utilities.GetEnvInt32("KEYCLOAK_CLIENT_TIMEOUT") ?? 5);
        /// <summary>
        /// Timeout (in seconds) of the Keycloak client
        /// </summary>
        public static int? ClientTimeout
        {
            get => _clientTimeout.Get();
            set => _clientTimeout.Set(value);
        }

        private static readonly __Value<bool?> _initialLogin = new __Value<bool?>(() => __config.GetBoolean("initialLogin"));
        /// <summary>
        /// Whether or not to login to Keycloak instance on provider initialization
        /// </summary>
        public static bool? InitialLogin
        {
            get => _initialLogin.Get();
            set => _initialLogin.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<string?> _realm = new __Value<string?>(() => __config.Get("realm"));
        public static string? Realm
        {
            get => _realm.Get();
            set => _realm.Set(value);
        }

        private static readonly __Value<bool?> _redHatSso = new __Value<bool?>(() => __config.GetBoolean("redHatSso"));
        /// <summary>
        /// When true, the provider will treat the Keycloak instance as a Red Hat SSO server, specifically when parsing the version
        /// returned from the /serverinfo API endpoint.
        /// </summary>
        public static bool? RedHatSso
        {
            get => _redHatSso.Get();
            set => _redHatSso.Set(value);
        }

        private static readonly __Value<string?> _rootCaCertificate = new __Value<string?>(() => __config.Get("rootCaCertificate"));
        /// <summary>
        /// Allows x509 calls using an unknown CA certificate (for development purposes)
        /// </summary>
        public static string? RootCaCertificate
        {
            get => _rootCaCertificate.Get();
            set => _rootCaCertificate.Set(value);
        }

        private static readonly __Value<bool?> _tlsInsecureSkipVerify = new __Value<bool?>(() => __config.GetBoolean("tlsInsecureSkipVerify"));
        /// <summary>
        /// Allows ignoring insecure certificates when set to true. Defaults to false. Disabling security check is dangerous and
        /// should be avoided.
        /// </summary>
        public static bool? TlsInsecureSkipVerify
        {
            get => _tlsInsecureSkipVerify.Get();
            set => _tlsInsecureSkipVerify.Set(value);
        }

        private static readonly __Value<string?> _url = new __Value<string?>(() => __config.Get("url"));
        /// <summary>
        /// The base URL of the Keycloak instance, before `/auth`
        /// </summary>
        public static string? Url
        {
            get => _url.Get();
            set => _url.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username"));
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

    }
}
