// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// !&gt; **WARNING:** This resource is deprecated and will be removed in the next major version. Please use `keycloak.GenericRoleMapper` instead.
    /// 
    /// Allow for creating and managing a client's scope mappings within Keycloak.
    /// 
    /// By default, all the user role mappings of the user are added as claims within the token (OIDC) or assertion (SAML). When
    /// `full_scope_allowed` is set to `false` for a client, role scope mapping allows you to limit the roles that get declared
    /// inside an access token for a client.
    /// 
    /// ## Example Usage
    /// 
    /// ### Realm Role To Client)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var client = new Keycloak.OpenId.Client("client", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = "client",
    ///         Name = "client",
    ///         Enabled = true,
    ///         AccessType = "BEARER-ONLY",
    ///     });
    /// 
    ///     var realmRole = new Keycloak.Role("realm_role", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "my-realm-role",
    ///         Description = "My Realm Role",
    ///     });
    /// 
    ///     var clientRoleMapper = new Keycloak.GenericClientRoleMapper("client_role_mapper", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = client.Id,
    ///         RoleId = realmRole.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Client Role To Client)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var clientA = new Keycloak.OpenId.Client("client_a", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = "client-a",
    ///         Name = "client-a",
    ///         Enabled = true,
    ///         AccessType = "BEARER-ONLY",
    ///         FullScopeAllowed = false,
    ///     });
    /// 
    ///     var clientRoleA = new Keycloak.Role("client_role_a", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = clientA.Id,
    ///         Name = "my-client-role",
    ///         Description = "My Client Role",
    ///     });
    /// 
    ///     var clientB = new Keycloak.OpenId.Client("client_b", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = "client-b",
    ///         Name = "client-b",
    ///         Enabled = true,
    ///         AccessType = "BEARER-ONLY",
    ///     });
    /// 
    ///     var clientRoleB = new Keycloak.Role("client_role_b", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = clientB.Id,
    ///         Name = "my-client-role",
    ///         Description = "My Client Role",
    ///     });
    /// 
    ///     var clientBRoleMapper = new Keycloak.GenericClientRoleMapper("client_b_role_mapper", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = clientB.Id,
    ///         RoleId = clientRoleA.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Realm Role To Client Scope)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var clientScope = new Keycloak.OpenId.ClientScope("client_scope", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "my-client-scope",
    ///     });
    /// 
    ///     var realmRole = new Keycloak.Role("realm_role", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "my-realm-role",
    ///         Description = "My Realm Role",
    ///     });
    /// 
    ///     var clientRoleMapper = new Keycloak.GenericClientRoleMapper("client_role_mapper", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientScopeId = clientScope.Id,
    ///         RoleId = realmRole.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Client Role To Client Scope)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var client = new Keycloak.OpenId.Client("client", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = "client",
    ///         Name = "client",
    ///         Enabled = true,
    ///         AccessType = "BEARER-ONLY",
    ///     });
    /// 
    ///     var clientRole = new Keycloak.Role("client_role", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = client.Id,
    ///         Name = "my-client-role",
    ///         Description = "My Client Role",
    ///     });
    /// 
    ///     var clientScope = new Keycloak.OpenId.ClientScope("client_scope", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "my-client-scope",
    ///     });
    /// 
    ///     var clientBRoleMapper = new Keycloak.GenericClientRoleMapper("client_b_role_mapper", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientScopeId = clientScope.Id,
    ///         RoleId = clientRole.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Generic client role mappers can be imported using one of the following two formats:
    /// 
    /// - When mapping a role to a client, use the format `{{realmId}}/client/{{clientId}}/scope-mappings/{{roleClientId}}/{{roleId}}`
    /// 
    /// - When mapping a role to a client scope, use the format `{{realmId}}/client-scope/{{clientScopeId}}/scope-mappings/{{roleClientId}}/{{roleId}}`
    /// 
    /// Example:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import keycloak:index/genericClientRoleMapper:GenericClientRoleMapper client_role_mapper my-realm/client/23888550-5dcd-41f6-85ba-554233021e9c/scope-mappings/ce51f004-bdfb-4dd5-a963-c4487d2dec5b/ff3aa49f-bc07-4030-8783-41918c3614a3
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:index/genericClientRoleMapper:GenericClientRoleMapper")]
    public partial class GenericClientRoleMapper : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the client this role mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// The ID of the client scope this role mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
        /// </summary>
        [Output("clientScopeId")]
        public Output<string?> ClientScopeId { get; private set; } = null!;

        /// <summary>
        /// The realm this role mapper exists within.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        /// <summary>
        /// The ID of the role to be added to this role mapper.
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;


        /// <summary>
        /// Create a GenericClientRoleMapper resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GenericClientRoleMapper(string name, GenericClientRoleMapperArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/genericClientRoleMapper:GenericClientRoleMapper", name, args ?? new GenericClientRoleMapperArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GenericClientRoleMapper(string name, Input<string> id, GenericClientRoleMapperState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/genericClientRoleMapper:GenericClientRoleMapper", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GenericClientRoleMapper resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GenericClientRoleMapper Get(string name, Input<string> id, GenericClientRoleMapperState? state = null, CustomResourceOptions? options = null)
        {
            return new GenericClientRoleMapper(name, id, state, options);
        }
    }

    public sealed class GenericClientRoleMapperArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the client this role mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The ID of the client scope this role mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
        /// </summary>
        [Input("clientScopeId")]
        public Input<string>? ClientScopeId { get; set; }

        /// <summary>
        /// The realm this role mapper exists within.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        /// <summary>
        /// The ID of the role to be added to this role mapper.
        /// </summary>
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        public GenericClientRoleMapperArgs()
        {
        }
        public static new GenericClientRoleMapperArgs Empty => new GenericClientRoleMapperArgs();
    }

    public sealed class GenericClientRoleMapperState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the client this role mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The ID of the client scope this role mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
        /// </summary>
        [Input("clientScopeId")]
        public Input<string>? ClientScopeId { get; set; }

        /// <summary>
        /// The realm this role mapper exists within.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        /// <summary>
        /// The ID of the role to be added to this role mapper.
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        public GenericClientRoleMapperState()
        {
        }
        public static new GenericClientRoleMapperState Empty => new GenericClientRoleMapperState();
    }
}
