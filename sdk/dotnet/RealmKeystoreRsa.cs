// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// Allows for creating and managing `rsa` Realm keystores within Keycloak.
    /// 
    /// A realm keystore manages generated key pairs that are used by Keycloak to perform cryptographic signatures and encryption.
    /// 
    /// ## Import
    /// 
    /// Realm keys can be imported using realm name and keystore id, you can find it in web UI. Examplebash
    /// 
    /// ```sh
    ///  $ pulumi import keycloak:index/realmKeystoreRsa:RealmKeystoreRsa keystore_rsa my-realm/618cfba7-49aa-4c09-9a19-2f699b576f0b
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:index/realmKeystoreRsa:RealmKeystoreRsa")]
    public partial class RealmKeystoreRsa : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When `false`, key in not used for signing. Defaults to `true`.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// Intended algorithm for the key. Defaults to `RS256`
        /// </summary>
        [Output("algorithm")]
        public Output<string?> Algorithm { get; private set; } = null!;

        /// <summary>
        /// X509 Certificate encoded in PEM format.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// When `false`, key is not accessible in this realm. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Display name of provider when linked in admin console.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Priority for the provider. Defaults to `0`
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Private RSA Key encoded in PEM format.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The realm this keystore exists in.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;


        /// <summary>
        /// Create a RealmKeystoreRsa resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RealmKeystoreRsa(string name, RealmKeystoreRsaArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/realmKeystoreRsa:RealmKeystoreRsa", name, args ?? new RealmKeystoreRsaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RealmKeystoreRsa(string name, Input<string> id, RealmKeystoreRsaState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/realmKeystoreRsa:RealmKeystoreRsa", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RealmKeystoreRsa resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RealmKeystoreRsa Get(string name, Input<string> id, RealmKeystoreRsaState? state = null, CustomResourceOptions? options = null)
        {
            return new RealmKeystoreRsa(name, id, state, options);
        }
    }

    public sealed class RealmKeystoreRsaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `false`, key in not used for signing. Defaults to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Intended algorithm for the key. Defaults to `RS256`
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// X509 Certificate encoded in PEM format.
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// When `false`, key is not accessible in this realm. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Display name of provider when linked in admin console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority for the provider. Defaults to `0`
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Private RSA Key encoded in PEM format.
        /// </summary>
        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        /// <summary>
        /// The realm this keystore exists in.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public RealmKeystoreRsaArgs()
        {
        }
        public static new RealmKeystoreRsaArgs Empty => new RealmKeystoreRsaArgs();
    }

    public sealed class RealmKeystoreRsaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `false`, key in not used for signing. Defaults to `true`.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Intended algorithm for the key. Defaults to `RS256`
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// X509 Certificate encoded in PEM format.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// When `false`, key is not accessible in this realm. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Display name of provider when linked in admin console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority for the provider. Defaults to `0`
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Private RSA Key encoded in PEM format.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The realm this keystore exists in.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        public RealmKeystoreRsaState()
        {
        }
        public static new RealmKeystoreRsaState Empty => new RealmKeystoreRsaState();
    }
}
