// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// Allows for creating and managing Users within Keycloak.
    /// 
    /// This resource was created primarily to enable the acceptance tests for the `keycloak.Group` resource. Creating users within
    /// Keycloak is not recommended. Instead, users should be federated from external sources by configuring user federation providers
    /// or identity providers.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var realm = new Keycloak.Realm("realm", new Keycloak.RealmArgs
    ///         {
    ///             Realm = "my-realm",
    ///             Enabled = true,
    ///         });
    ///         var user = new Keycloak.User("user", new Keycloak.UserArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             Username = "bob",
    ///             Enabled = true,
    ///             Email = "bob@domain.com",
    ///             FirstName = "Bob",
    ///             LastName = "Bobson",
    ///         });
    ///         var userWithInitialPassword = new Keycloak.User("userWithInitialPassword", new Keycloak.UserArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             Username = "alice",
    ///             Enabled = true,
    ///             Email = "alice@domain.com",
    ///             FirstName = "Alice",
    ///             LastName = "Aliceberg",
    ///             Attributes = 
    ///             {
    ///                 { "foo", "bar" },
    ///             },
    ///             InitialPassword = new Keycloak.Inputs.UserInitialPasswordArgs
    ///             {
    ///                 Value = "some password",
    ///                 Temporary = true,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Users can be imported using the format `{{realm_id}}/{{user_id}}`, where `user_id` is the unique ID that Keycloak assigns to the user upon creation. This value can be found in the GUI when editing the user. Examplebash
    /// 
    /// ```sh
    ///  $ pulumi import keycloak:index/user:User user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4
    /// ```
    /// </summary>
    public partial class User : Pulumi.CustomResource
    {
        /// <summary>
        /// A map representing attributes for the user
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, object>?> Attributes { get; private set; } = null!;

        /// <summary>
        /// The user's email.
        /// </summary>
        [Output("email")]
        public Output<string?> Email { get; private set; } = null!;

        /// <summary>
        /// Whether the email address was validated or not. Default to `false`.
        /// </summary>
        [Output("emailVerified")]
        public Output<bool?> EmailVerified { get; private set; } = null!;

        /// <summary>
        /// When false, this user cannot log in. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("federatedIdentities")]
        public Output<ImmutableArray<Outputs.UserFederatedIdentity>> FederatedIdentities { get; private set; } = null!;

        /// <summary>
        /// The user's first name.
        /// </summary>
        [Output("firstName")]
        public Output<string?> FirstName { get; private set; } = null!;

        /// <summary>
        /// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
        /// </summary>
        [Output("initialPassword")]
        public Output<Outputs.UserInitialPassword?> InitialPassword { get; private set; } = null!;

        /// <summary>
        /// The user's last name.
        /// </summary>
        [Output("lastName")]
        public Output<string?> LastName { get; private set; } = null!;

        /// <summary>
        /// The realm this user belongs to.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        /// <summary>
        /// The unique username of this user.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<object>? _attributes;

        /// <summary>
        /// A map representing attributes for the user
        /// </summary>
        public InputMap<object> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<object>());
            set => _attributes = value;
        }

        /// <summary>
        /// The user's email.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Whether the email address was validated or not. Default to `false`.
        /// </summary>
        [Input("emailVerified")]
        public Input<bool>? EmailVerified { get; set; }

        /// <summary>
        /// When false, this user cannot log in. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("federatedIdentities")]
        private InputList<Inputs.UserFederatedIdentityArgs>? _federatedIdentities;
        public InputList<Inputs.UserFederatedIdentityArgs> FederatedIdentities
        {
            get => _federatedIdentities ?? (_federatedIdentities = new InputList<Inputs.UserFederatedIdentityArgs>());
            set => _federatedIdentities = value;
        }

        /// <summary>
        /// The user's first name.
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
        /// </summary>
        [Input("initialPassword")]
        public Input<Inputs.UserInitialPasswordArgs>? InitialPassword { get; set; }

        /// <summary>
        /// The user's last name.
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        /// <summary>
        /// The realm this user belongs to.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        /// <summary>
        /// The unique username of this user.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public UserArgs()
        {
        }
    }

    public sealed class UserState : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<object>? _attributes;

        /// <summary>
        /// A map representing attributes for the user
        /// </summary>
        public InputMap<object> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<object>());
            set => _attributes = value;
        }

        /// <summary>
        /// The user's email.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Whether the email address was validated or not. Default to `false`.
        /// </summary>
        [Input("emailVerified")]
        public Input<bool>? EmailVerified { get; set; }

        /// <summary>
        /// When false, this user cannot log in. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("federatedIdentities")]
        private InputList<Inputs.UserFederatedIdentityGetArgs>? _federatedIdentities;
        public InputList<Inputs.UserFederatedIdentityGetArgs> FederatedIdentities
        {
            get => _federatedIdentities ?? (_federatedIdentities = new InputList<Inputs.UserFederatedIdentityGetArgs>());
            set => _federatedIdentities = value;
        }

        /// <summary>
        /// The user's first name.
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
        /// </summary>
        [Input("initialPassword")]
        public Input<Inputs.UserInitialPasswordGetArgs>? InitialPassword { get; set; }

        /// <summary>
        /// The user's last name.
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        /// <summary>
        /// The realm this user belongs to.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        /// <summary>
        /// The unique username of this user.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public UserState()
        {
        }
    }
}
