// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Ldap
{
    /// <summary>
    /// Allows for creating and managing hardcoded attribute mappers for Keycloak users federated via LDAP.
    /// 
    /// The LDAP hardcoded attribute mapper will set the specified value to the LDAP attribute.
    /// 
    /// **NOTE**: This mapper only works when the `sync_registrations` attribute on the `keycloak.ldap.UserFederation` resource is set to `true`.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var ldapUserFederation = new Keycloak.Ldap.UserFederation("ldapUserFederation", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         UsernameLdapAttribute = "cn",
    ///         RdnLdapAttribute = "cn",
    ///         UuidLdapAttribute = "entryDN",
    ///         UserObjectClasses = new[]
    ///         {
    ///             "simpleSecurityObject",
    ///             "organizationalRole",
    ///         },
    ///         ConnectionUrl = "ldap://openldap",
    ///         UsersDn = "dc=example,dc=org",
    ///         BindDn = "cn=admin,dc=example,dc=org",
    ///         BindCredential = "admin",
    ///         SyncRegistrations = true,
    ///     });
    /// 
    ///     var assignBarToFoo = new Keycloak.Ldap.HardcodedAttributeMapper("assignBarToFoo", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         LdapUserFederationId = ldapUserFederation.Id,
    ///         AttributeName = "foo",
    ///         AttributeValue = "bar",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`.
    /// 
    /// The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs.
    /// 
    /// Example:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import keycloak:ldap/hardcodedAttributeMapper:HardcodedAttributeMapper assign_bar_to_foo my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:ldap/hardcodedAttributeMapper:HardcodedAttributeMapper")]
    public partial class HardcodedAttributeMapper : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the LDAP attribute to set.
        /// </summary>
        [Output("attributeName")]
        public Output<string> AttributeName { get; private set; } = null!;

        /// <summary>
        /// The value to set to the LDAP attribute. You can hardcode any value like 'foo'.
        /// </summary>
        [Output("attributeValue")]
        public Output<string> AttributeValue { get; private set; } = null!;

        /// <summary>
        /// The ID of the LDAP user federation provider to attach this mapper to.
        /// </summary>
        [Output("ldapUserFederationId")]
        public Output<string> LdapUserFederationId { get; private set; } = null!;

        /// <summary>
        /// Display name of this mapper when displayed in the console.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The realm that this LDAP mapper will exist in.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;


        /// <summary>
        /// Create a HardcodedAttributeMapper resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HardcodedAttributeMapper(string name, HardcodedAttributeMapperArgs args, CustomResourceOptions? options = null)
            : base("keycloak:ldap/hardcodedAttributeMapper:HardcodedAttributeMapper", name, args ?? new HardcodedAttributeMapperArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HardcodedAttributeMapper(string name, Input<string> id, HardcodedAttributeMapperState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:ldap/hardcodedAttributeMapper:HardcodedAttributeMapper", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HardcodedAttributeMapper resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HardcodedAttributeMapper Get(string name, Input<string> id, HardcodedAttributeMapperState? state = null, CustomResourceOptions? options = null)
        {
            return new HardcodedAttributeMapper(name, id, state, options);
        }
    }

    public sealed class HardcodedAttributeMapperArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the LDAP attribute to set.
        /// </summary>
        [Input("attributeName", required: true)]
        public Input<string> AttributeName { get; set; } = null!;

        /// <summary>
        /// The value to set to the LDAP attribute. You can hardcode any value like 'foo'.
        /// </summary>
        [Input("attributeValue", required: true)]
        public Input<string> AttributeValue { get; set; } = null!;

        /// <summary>
        /// The ID of the LDAP user federation provider to attach this mapper to.
        /// </summary>
        [Input("ldapUserFederationId", required: true)]
        public Input<string> LdapUserFederationId { get; set; } = null!;

        /// <summary>
        /// Display name of this mapper when displayed in the console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm that this LDAP mapper will exist in.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public HardcodedAttributeMapperArgs()
        {
        }
        public static new HardcodedAttributeMapperArgs Empty => new HardcodedAttributeMapperArgs();
    }

    public sealed class HardcodedAttributeMapperState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the LDAP attribute to set.
        /// </summary>
        [Input("attributeName")]
        public Input<string>? AttributeName { get; set; }

        /// <summary>
        /// The value to set to the LDAP attribute. You can hardcode any value like 'foo'.
        /// </summary>
        [Input("attributeValue")]
        public Input<string>? AttributeValue { get; set; }

        /// <summary>
        /// The ID of the LDAP user federation provider to attach this mapper to.
        /// </summary>
        [Input("ldapUserFederationId")]
        public Input<string>? LdapUserFederationId { get; set; }

        /// <summary>
        /// Display name of this mapper when displayed in the console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm that this LDAP mapper will exist in.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        public HardcodedAttributeMapperState()
        {
        }
        public static new HardcodedAttributeMapperState Empty => new HardcodedAttributeMapperState();
    }
}
