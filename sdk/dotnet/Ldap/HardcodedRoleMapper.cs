// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Ldap
{
    /// <summary>
    /// Allows for creating and managing hardcoded role mappers for Keycloak users federated via LDAP.
    /// 
    /// The LDAP hardcoded role mapper will grant a specified Keycloak role to each Keycloak user linked with LDAP.
    /// 
    /// ## Example Usage
    /// ### Realm Role)
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var realm = new Keycloak.Realm("realm", new Keycloak.RealmArgs
    ///         {
    ///             Realm = "my-realm",
    ///             Enabled = true,
    ///         });
    ///         var ldapUserFederation = new Keycloak.Ldap.UserFederation("ldapUserFederation", new Keycloak.Ldap.UserFederationArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             UsernameLdapAttribute = "cn",
    ///             RdnLdapAttribute = "cn",
    ///             UuidLdapAttribute = "entryDN",
    ///             UserObjectClasses = 
    ///             {
    ///                 "simpleSecurityObject",
    ///                 "organizationalRole",
    ///             },
    ///             ConnectionUrl = "ldap://openldap",
    ///             UsersDn = "dc=example,dc=org",
    ///             BindDn = "cn=admin,dc=example,dc=org",
    ///             BindCredential = "admin",
    ///         });
    ///         var realmAdminRole = new Keycloak.Role("realmAdminRole", new Keycloak.RoleArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             Description = "My Realm Role",
    ///         });
    ///         var assignAdminRoleToAllUsers = new Keycloak.Ldap.HardcodedRoleMapper("assignAdminRoleToAllUsers", new Keycloak.Ldap.HardcodedRoleMapperArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             LdapUserFederationId = ldapUserFederation.Id,
    ///             Role = realmAdminRole.Name,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Client Role)
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var realm = new Keycloak.Realm("realm", new Keycloak.RealmArgs
    ///         {
    ///             Realm = "my-realm",
    ///             Enabled = true,
    ///         });
    ///         var ldapUserFederation = new Keycloak.Ldap.UserFederation("ldapUserFederation", new Keycloak.Ldap.UserFederationArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             UsernameLdapAttribute = "cn",
    ///             RdnLdapAttribute = "cn",
    ///             UuidLdapAttribute = "entryDN",
    ///             UserObjectClasses = 
    ///             {
    ///                 "simpleSecurityObject",
    ///                 "organizationalRole",
    ///             },
    ///             ConnectionUrl = "ldap://openldap",
    ///             UsersDn = "dc=example,dc=org",
    ///             BindDn = "cn=admin,dc=example,dc=org",
    ///             BindCredential = "admin",
    ///         });
    ///         var realmManagement = Keycloak.OpenId.GetClient.Invoke(new Keycloak.OpenId.GetClientInvokeArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             ClientId = "realm-management",
    ///         });
    ///         var createClient = Output.Tuple(realm.Id, realmManagement).Apply(values =&gt;
    ///         {
    ///             var id = values.Item1;
    ///             var realmManagement = values.Item2;
    ///             return Keycloak.GetRole.Invoke(new Keycloak.GetRoleInvokeArgs
    ///             {
    ///                 RealmId = id,
    ///                 ClientId = realmManagement.Id,
    ///                 Name = "create-client",
    ///             });
    ///         });
    ///         var assignAdminRoleToAllUsers = new Keycloak.Ldap.HardcodedRoleMapper("assignAdminRoleToAllUsers", new Keycloak.Ldap.HardcodedRoleMapperArgs
    ///         {
    ///             RealmId = realm.Id,
    ///             LdapUserFederationId = ldapUserFederation.Id,
    ///             Role = Output.Tuple(realmManagement, createClient).Apply(values =&gt;
    ///             {
    ///                 var realmManagement = values.Item1;
    ///                 var createClient = values.Item2;
    ///                 return $"{realmManagement.ClientId}.{createClient.Name}";
    ///             }),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`. The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Examplebash
    /// 
    /// ```sh
    ///  $ pulumi import keycloak:ldap/hardcodedRoleMapper:HardcodedRoleMapper assign_admin_role_to_all_users my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:ldap/hardcodedRoleMapper:HardcodedRoleMapper")]
    public partial class HardcodedRoleMapper : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the LDAP user federation provider to attach this mapper to.
        /// </summary>
        [Output("ldapUserFederationId")]
        public Output<string> LdapUserFederationId { get; private set; } = null!;

        /// <summary>
        /// Display name of this mapper when displayed in the console.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The realm that this LDAP mapper will exist in.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        /// <summary>
        /// The name of the role which should be assigned to the users. Client roles should use the format `{{client_id}}.{{client_role_name}}`.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;


        /// <summary>
        /// Create a HardcodedRoleMapper resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HardcodedRoleMapper(string name, HardcodedRoleMapperArgs args, CustomResourceOptions? options = null)
            : base("keycloak:ldap/hardcodedRoleMapper:HardcodedRoleMapper", name, args ?? new HardcodedRoleMapperArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HardcodedRoleMapper(string name, Input<string> id, HardcodedRoleMapperState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:ldap/hardcodedRoleMapper:HardcodedRoleMapper", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HardcodedRoleMapper resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HardcodedRoleMapper Get(string name, Input<string> id, HardcodedRoleMapperState? state = null, CustomResourceOptions? options = null)
        {
            return new HardcodedRoleMapper(name, id, state, options);
        }
    }

    public sealed class HardcodedRoleMapperArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the LDAP user federation provider to attach this mapper to.
        /// </summary>
        [Input("ldapUserFederationId", required: true)]
        public Input<string> LdapUserFederationId { get; set; } = null!;

        /// <summary>
        /// Display name of this mapper when displayed in the console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm that this LDAP mapper will exist in.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        /// <summary>
        /// The name of the role which should be assigned to the users. Client roles should use the format `{{client_id}}.{{client_role_name}}`.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        public HardcodedRoleMapperArgs()
        {
        }
    }

    public sealed class HardcodedRoleMapperState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the LDAP user federation provider to attach this mapper to.
        /// </summary>
        [Input("ldapUserFederationId")]
        public Input<string>? LdapUserFederationId { get; set; }

        /// <summary>
        /// Display name of this mapper when displayed in the console.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm that this LDAP mapper will exist in.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        /// <summary>
        /// The name of the role which should be assigned to the users. Client roles should use the format `{{client_id}}.{{client_role_name}}`.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public HardcodedRoleMapperState()
        {
        }
    }
}
