// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Saml
{
    public static class GetClientInstallationProvider
    {
        /// <summary>
        /// This data source can be used to retrieve Installation Provider of a SAML Client.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// In the example below, we extract the SAML metadata IDPSSODescriptor to pass it to the AWS IAM SAML Provider.
        /// 
        /// ```csharp
        /// using System.IO;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var realm = new Keycloak.Realm("realm", new Keycloak.RealmArgs
        ///         {
        ///             Realm = "my-realm",
        ///             Enabled = true,
        ///         });
        ///         var samlClient = new Keycloak.Saml.Client("samlClient", new Keycloak.Saml.ClientArgs
        ///         {
        ///             RealmId = realm.Id,
        ///             ClientId = "test-saml-client",
        ///             SignDocuments = false,
        ///             SignAssertions = true,
        ///             IncludeAuthnStatement = true,
        ///             SigningCertificate = File.ReadAllText("saml-cert.pem"),
        ///             SigningPrivateKey = File.ReadAllText("saml-key.pem"),
        ///         });
        ///         var samlIdpDescriptor = Output.Tuple(realm.Id, samlClient.Id).Apply(values =&gt;
        ///         {
        ///             var realmId = values.Item1;
        ///             var samlClientId = values.Item2;
        ///             return Keycloak.Saml.GetClientInstallationProvider.InvokeAsync(new Keycloak.Saml.GetClientInstallationProviderArgs
        ///             {
        ///                 RealmId = realmId,
        ///                 ClientId = samlClientId,
        ///                 ProviderId = "saml-idp-descriptor",
        ///             });
        ///         });
        ///         var @default = new Aws.Iam.SamlProvider("default", new Aws.Iam.SamlProviderArgs
        ///         {
        ///             SamlMetadataDocument = samlIdpDescriptor.Apply(samlIdpDescriptor =&gt; samlIdpDescriptor.Value),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClientInstallationProviderResult> InvokeAsync(GetClientInstallationProviderArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClientInstallationProviderResult>("keycloak:saml/getClientInstallationProvider:getClientInstallationProvider", args ?? new GetClientInstallationProviderArgs(), options.WithVersion());
    }


    public sealed class GetClientInstallationProviderArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the SAML client. The `id` attribute of a `keycloak_client` resource should be used here.
        /// </summary>
        [Input("clientId", required: true)]
        public string ClientId { get; set; } = null!;

        /// <summary>
        /// The ID of the SAML installation provider. Could be one of `saml-idp-descriptor`, `keycloak-saml`, `saml-sp-descriptor`, `keycloak-saml-subsystem`, `mod-auth-mellon`, etc.
        /// </summary>
        [Input("providerId", required: true)]
        public string ProviderId { get; set; } = null!;

        /// <summary>
        /// The realm that the SAML client exists within.
        /// </summary>
        [Input("realmId", required: true)]
        public string RealmId { get; set; } = null!;

        public GetClientInstallationProviderArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClientInstallationProviderResult
    {
        public readonly string ClientId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProviderId;
        public readonly string RealmId;
        /// <summary>
        /// (Computed) The returned document needed for SAML installation.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private GetClientInstallationProviderResult(
            string clientId,

            string id,

            string providerId,

            string realmId,

            string value)
        {
            ClientId = clientId;
            Id = id;
            ProviderId = providerId;
            RealmId = realmId;
            Value = value;
        }
    }
}
