// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Saml
{
    public static class GetClient
    {
        /// <summary>
        /// This data source can be used to fetch properties of a Keycloak client that uses the SAML protocol.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realmManagement = Keycloak.Saml.GetClient.Invoke(new()
        ///     {
        ///         RealmId = "my-realm",
        ///         ClientId = "realm-management",
        ///     });
        /// 
        ///     // use the data source
        ///     var admin = Keycloak.GetRole.Invoke(new()
        ///     {
        ///         RealmId = "my-realm",
        ///         ClientId = realmManagement.Apply(getClientResult =&gt; getClientResult.Id),
        ///         Name = "realm-admin",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClientResult> InvokeAsync(GetClientArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClientResult>("keycloak:saml/getClient:getClient", args ?? new GetClientArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch properties of a Keycloak client that uses the SAML protocol.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realmManagement = Keycloak.Saml.GetClient.Invoke(new()
        ///     {
        ///         RealmId = "my-realm",
        ///         ClientId = "realm-management",
        ///     });
        /// 
        ///     // use the data source
        ///     var admin = Keycloak.GetRole.Invoke(new()
        ///     {
        ///         RealmId = "my-realm",
        ///         ClientId = realmManagement.Apply(getClientResult =&gt; getClientResult.Id),
        ///         Name = "realm-admin",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClientResult> Invoke(GetClientInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClientResult>("keycloak:saml/getClient:getClient", args ?? new GetClientInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch properties of a Keycloak client that uses the SAML protocol.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realmManagement = Keycloak.Saml.GetClient.Invoke(new()
        ///     {
        ///         RealmId = "my-realm",
        ///         ClientId = "realm-management",
        ///     });
        /// 
        ///     // use the data source
        ///     var admin = Keycloak.GetRole.Invoke(new()
        ///     {
        ///         RealmId = "my-realm",
        ///         ClientId = realmManagement.Apply(getClientResult =&gt; getClientResult.Id),
        ///         Name = "realm-admin",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClientResult> Invoke(GetClientInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClientResult>("keycloak:saml/getClient:getClient", args ?? new GetClientInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClientArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The client id (not its unique ID).
        /// </summary>
        [Input("clientId", required: true)]
        public string ClientId { get; set; } = null!;

        /// <summary>
        /// The realm id.
        /// </summary>
        [Input("realmId", required: true)]
        public string RealmId { get; set; } = null!;

        public GetClientArgs()
        {
        }
        public static new GetClientArgs Empty => new GetClientArgs();
    }

    public sealed class GetClientInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The client id (not its unique ID).
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// The realm id.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public GetClientInvokeArgs()
        {
        }
        public static new GetClientInvokeArgs Empty => new GetClientInvokeArgs();
    }


    [OutputType]
    public sealed class GetClientResult
    {
        public readonly bool AlwaysDisplayInConsole;
        public readonly string AssertionConsumerPostUrl;
        public readonly string AssertionConsumerRedirectUrl;
        public readonly ImmutableArray<Outputs.GetClientAuthenticationFlowBindingOverrideResult> AuthenticationFlowBindingOverrides;
        public readonly string BaseUrl;
        public readonly string CanonicalizationMethod;
        public readonly string ClientId;
        public readonly bool ClientSignatureRequired;
        public readonly bool ConsentRequired;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly bool EncryptAssertions;
        public readonly string EncryptionCertificate;
        public readonly string EncryptionCertificateSha1;
        public readonly ImmutableDictionary<string, string> ExtraConfig;
        public readonly bool ForceNameIdFormat;
        public readonly bool ForcePostBinding;
        public readonly bool FrontChannelLogout;
        public readonly bool FullScopeAllowed;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdpInitiatedSsoRelayState;
        public readonly string IdpInitiatedSsoUrlName;
        public readonly bool IncludeAuthnStatement;
        public readonly string LoginTheme;
        public readonly string LogoutServicePostBindingUrl;
        public readonly string LogoutServiceRedirectBindingUrl;
        public readonly string MasterSamlProcessingUrl;
        public readonly string Name;
        public readonly string NameIdFormat;
        public readonly string RealmId;
        public readonly string RootUrl;
        public readonly string SamlSignatureKeyName;
        public readonly bool SignAssertions;
        public readonly bool SignDocuments;
        public readonly string SignatureAlgorithm;
        public readonly string SignatureKeyName;
        public readonly string SigningCertificate;
        public readonly string SigningCertificateSha1;
        public readonly string SigningPrivateKey;
        public readonly string SigningPrivateKeySha1;
        public readonly ImmutableArray<string> ValidRedirectUris;

        [OutputConstructor]
        private GetClientResult(
            bool alwaysDisplayInConsole,

            string assertionConsumerPostUrl,

            string assertionConsumerRedirectUrl,

            ImmutableArray<Outputs.GetClientAuthenticationFlowBindingOverrideResult> authenticationFlowBindingOverrides,

            string baseUrl,

            string canonicalizationMethod,

            string clientId,

            bool clientSignatureRequired,

            bool consentRequired,

            string description,

            bool enabled,

            bool encryptAssertions,

            string encryptionCertificate,

            string encryptionCertificateSha1,

            ImmutableDictionary<string, string> extraConfig,

            bool forceNameIdFormat,

            bool forcePostBinding,

            bool frontChannelLogout,

            bool fullScopeAllowed,

            string id,

            string idpInitiatedSsoRelayState,

            string idpInitiatedSsoUrlName,

            bool includeAuthnStatement,

            string loginTheme,

            string logoutServicePostBindingUrl,

            string logoutServiceRedirectBindingUrl,

            string masterSamlProcessingUrl,

            string name,

            string nameIdFormat,

            string realmId,

            string rootUrl,

            string samlSignatureKeyName,

            bool signAssertions,

            bool signDocuments,

            string signatureAlgorithm,

            string signatureKeyName,

            string signingCertificate,

            string signingCertificateSha1,

            string signingPrivateKey,

            string signingPrivateKeySha1,

            ImmutableArray<string> validRedirectUris)
        {
            AlwaysDisplayInConsole = alwaysDisplayInConsole;
            AssertionConsumerPostUrl = assertionConsumerPostUrl;
            AssertionConsumerRedirectUrl = assertionConsumerRedirectUrl;
            AuthenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            BaseUrl = baseUrl;
            CanonicalizationMethod = canonicalizationMethod;
            ClientId = clientId;
            ClientSignatureRequired = clientSignatureRequired;
            ConsentRequired = consentRequired;
            Description = description;
            Enabled = enabled;
            EncryptAssertions = encryptAssertions;
            EncryptionCertificate = encryptionCertificate;
            EncryptionCertificateSha1 = encryptionCertificateSha1;
            ExtraConfig = extraConfig;
            ForceNameIdFormat = forceNameIdFormat;
            ForcePostBinding = forcePostBinding;
            FrontChannelLogout = frontChannelLogout;
            FullScopeAllowed = fullScopeAllowed;
            Id = id;
            IdpInitiatedSsoRelayState = idpInitiatedSsoRelayState;
            IdpInitiatedSsoUrlName = idpInitiatedSsoUrlName;
            IncludeAuthnStatement = includeAuthnStatement;
            LoginTheme = loginTheme;
            LogoutServicePostBindingUrl = logoutServicePostBindingUrl;
            LogoutServiceRedirectBindingUrl = logoutServiceRedirectBindingUrl;
            MasterSamlProcessingUrl = masterSamlProcessingUrl;
            Name = name;
            NameIdFormat = nameIdFormat;
            RealmId = realmId;
            RootUrl = rootUrl;
            SamlSignatureKeyName = samlSignatureKeyName;
            SignAssertions = signAssertions;
            SignDocuments = signDocuments;
            SignatureAlgorithm = signatureAlgorithm;
            SignatureKeyName = signatureKeyName;
            SigningCertificate = signingCertificate;
            SigningCertificateSha1 = signingCertificateSha1;
            SigningPrivateKey = signingPrivateKey;
            SigningPrivateKeySha1 = signingPrivateKeySha1;
            ValidRedirectUris = validRedirectUris;
        }
    }
}
