// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Saml
{
    /// <summary>
    /// ## # keycloak.saml.Client
    /// 
    /// Allows for creating and managing Keycloak clients that use the SAML protocol.
    /// 
    /// Clients are entities that can use Keycloak for user authentication. Typically,
    /// clients are applications that redirect users to Keycloak for authentication
    /// in order to take advantage of Keycloak's user sessions for SSO.
    /// 
    /// ### Argument Reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `realm_id` - (Required) The realm this client is attached to.
    /// - `client_id` - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.
    /// - `name` - (Optional) The display name of this client in the GUI.
    /// - `enabled` - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
    /// - `description` - (Optional) The description of this client in the GUI.
    /// - `include_authn_statement` - (Optional) When `true`, an `AuthnStatement` will be included in the SAML response.
    /// - `sign_documents` - (Optional) When `true`, the SAML document will be signed by Keycloak using the realm's private key.
    /// - `sign_assertions` - (Optional) When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.
    /// - `client_signature_required` - (Optional) When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signing_certificate` and `signing_private_key`.
    /// - `force_post_binding` - (Optional) When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding.
    /// - `front_channel_logout` - (Optional) When `true`, this client will require a browser redirect in order to perform a logout.
    /// - `name_id_format` - (Optional) Sets the Name ID format for the subject.
    /// - `root_url` - (Optional) When specified, this value is prepended to all relative URLs.
    /// - `valid_redirect_uris` - (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
    /// - `base_url` - (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client.
    /// - `master_saml_processing_url` - (Optional) When specified, this URL will be used for all SAML requests.
    /// - `signing_certificate` - (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature.
    /// - `signing_private_key` - (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature.
    /// - `idp_initiated_sso_url_name` - (Optional) URL fragment name to reference client when you want to do IDP Initiated SSO.
    /// - `idp_initiated_sso_relay_state` - (Optional) Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
    /// - `assertion_consumer_post_url` - (Optional) SAML POST Binding URL for the client's assertion consumer service (login responses).
    /// - `assertion_consumer_redirect_url` - (Optional) SAML Redirect Binding URL for the client's assertion consumer service (login responses).
    /// - `logout_service_post_binding_url` - (Optional) SAML POST Binding URL for the client's single logout service.
    /// - `logout_service_redirect_binding_url` - (Optional) SAML Redirect Binding URL for the client's single logout service.
    /// - `full_scope_allowed` - (Optional) - Allow to include all roles mappings in the access token
    /// </summary>
    public partial class Client : Pulumi.CustomResource
    {
        [Output("assertionConsumerPostUrl")]
        public Output<string?> AssertionConsumerPostUrl { get; private set; } = null!;

        [Output("assertionConsumerRedirectUrl")]
        public Output<string?> AssertionConsumerRedirectUrl { get; private set; } = null!;

        [Output("baseUrl")]
        public Output<string?> BaseUrl { get; private set; } = null!;

        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        [Output("clientSignatureRequired")]
        public Output<bool> ClientSignatureRequired { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("forcePostBinding")]
        public Output<bool> ForcePostBinding { get; private set; } = null!;

        [Output("frontChannelLogout")]
        public Output<bool> FrontChannelLogout { get; private set; } = null!;

        [Output("fullScopeAllowed")]
        public Output<bool?> FullScopeAllowed { get; private set; } = null!;

        [Output("idpInitiatedSsoRelayState")]
        public Output<string?> IdpInitiatedSsoRelayState { get; private set; } = null!;

        [Output("idpInitiatedSsoUrlName")]
        public Output<string?> IdpInitiatedSsoUrlName { get; private set; } = null!;

        [Output("includeAuthnStatement")]
        public Output<bool> IncludeAuthnStatement { get; private set; } = null!;

        [Output("logoutServicePostBindingUrl")]
        public Output<string?> LogoutServicePostBindingUrl { get; private set; } = null!;

        [Output("logoutServiceRedirectBindingUrl")]
        public Output<string?> LogoutServiceRedirectBindingUrl { get; private set; } = null!;

        [Output("masterSamlProcessingUrl")]
        public Output<string?> MasterSamlProcessingUrl { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nameIdFormat")]
        public Output<string> NameIdFormat { get; private set; } = null!;

        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        [Output("rootUrl")]
        public Output<string?> RootUrl { get; private set; } = null!;

        [Output("signAssertions")]
        public Output<bool> SignAssertions { get; private set; } = null!;

        [Output("signDocuments")]
        public Output<bool> SignDocuments { get; private set; } = null!;

        [Output("signingCertificate")]
        public Output<string?> SigningCertificate { get; private set; } = null!;

        [Output("signingPrivateKey")]
        public Output<string?> SigningPrivateKey { get; private set; } = null!;

        [Output("validRedirectUris")]
        public Output<ImmutableArray<string>> ValidRedirectUris { get; private set; } = null!;


        /// <summary>
        /// Create a Client resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Client(string name, ClientArgs args, CustomResourceOptions? options = null)
            : base("keycloak:saml/client:Client", name, args ?? new ClientArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Client(string name, Input<string> id, ClientState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:saml/client:Client", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Client resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Client Get(string name, Input<string> id, ClientState? state = null, CustomResourceOptions? options = null)
        {
            return new Client(name, id, state, options);
        }
    }

    public sealed class ClientArgs : Pulumi.ResourceArgs
    {
        [Input("assertionConsumerPostUrl")]
        public Input<string>? AssertionConsumerPostUrl { get; set; }

        [Input("assertionConsumerRedirectUrl")]
        public Input<string>? AssertionConsumerRedirectUrl { get; set; }

        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSignatureRequired")]
        public Input<bool>? ClientSignatureRequired { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("forcePostBinding")]
        public Input<bool>? ForcePostBinding { get; set; }

        [Input("frontChannelLogout")]
        public Input<bool>? FrontChannelLogout { get; set; }

        [Input("fullScopeAllowed")]
        public Input<bool>? FullScopeAllowed { get; set; }

        [Input("idpInitiatedSsoRelayState")]
        public Input<string>? IdpInitiatedSsoRelayState { get; set; }

        [Input("idpInitiatedSsoUrlName")]
        public Input<string>? IdpInitiatedSsoUrlName { get; set; }

        [Input("includeAuthnStatement")]
        public Input<bool>? IncludeAuthnStatement { get; set; }

        [Input("logoutServicePostBindingUrl")]
        public Input<string>? LogoutServicePostBindingUrl { get; set; }

        [Input("logoutServiceRedirectBindingUrl")]
        public Input<string>? LogoutServiceRedirectBindingUrl { get; set; }

        [Input("masterSamlProcessingUrl")]
        public Input<string>? MasterSamlProcessingUrl { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameIdFormat")]
        public Input<string>? NameIdFormat { get; set; }

        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        [Input("rootUrl")]
        public Input<string>? RootUrl { get; set; }

        [Input("signAssertions")]
        public Input<bool>? SignAssertions { get; set; }

        [Input("signDocuments")]
        public Input<bool>? SignDocuments { get; set; }

        [Input("signingCertificate")]
        public Input<string>? SigningCertificate { get; set; }

        [Input("signingPrivateKey")]
        public Input<string>? SigningPrivateKey { get; set; }

        [Input("validRedirectUris")]
        private InputList<string>? _validRedirectUris;
        public InputList<string> ValidRedirectUris
        {
            get => _validRedirectUris ?? (_validRedirectUris = new InputList<string>());
            set => _validRedirectUris = value;
        }

        public ClientArgs()
        {
        }
    }

    public sealed class ClientState : Pulumi.ResourceArgs
    {
        [Input("assertionConsumerPostUrl")]
        public Input<string>? AssertionConsumerPostUrl { get; set; }

        [Input("assertionConsumerRedirectUrl")]
        public Input<string>? AssertionConsumerRedirectUrl { get; set; }

        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSignatureRequired")]
        public Input<bool>? ClientSignatureRequired { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("forcePostBinding")]
        public Input<bool>? ForcePostBinding { get; set; }

        [Input("frontChannelLogout")]
        public Input<bool>? FrontChannelLogout { get; set; }

        [Input("fullScopeAllowed")]
        public Input<bool>? FullScopeAllowed { get; set; }

        [Input("idpInitiatedSsoRelayState")]
        public Input<string>? IdpInitiatedSsoRelayState { get; set; }

        [Input("idpInitiatedSsoUrlName")]
        public Input<string>? IdpInitiatedSsoUrlName { get; set; }

        [Input("includeAuthnStatement")]
        public Input<bool>? IncludeAuthnStatement { get; set; }

        [Input("logoutServicePostBindingUrl")]
        public Input<string>? LogoutServicePostBindingUrl { get; set; }

        [Input("logoutServiceRedirectBindingUrl")]
        public Input<string>? LogoutServiceRedirectBindingUrl { get; set; }

        [Input("masterSamlProcessingUrl")]
        public Input<string>? MasterSamlProcessingUrl { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameIdFormat")]
        public Input<string>? NameIdFormat { get; set; }

        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        [Input("rootUrl")]
        public Input<string>? RootUrl { get; set; }

        [Input("signAssertions")]
        public Input<bool>? SignAssertions { get; set; }

        [Input("signDocuments")]
        public Input<bool>? SignDocuments { get; set; }

        [Input("signingCertificate")]
        public Input<string>? SigningCertificate { get; set; }

        [Input("signingPrivateKey")]
        public Input<string>? SigningPrivateKey { get; set; }

        [Input("validRedirectUris")]
        private InputList<string>? _validRedirectUris;
        public InputList<string> ValidRedirectUris
        {
            get => _validRedirectUris ?? (_validRedirectUris = new InputList<string>());
            set => _validRedirectUris = value;
        }

        public ClientState()
        {
        }
    }
}
