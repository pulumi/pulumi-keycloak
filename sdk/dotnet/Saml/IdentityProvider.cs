// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Saml
{
    /// <summary>
    /// ## # keycloak.saml.IdentityProvider
    /// 
    /// Allows to create and manage SAML Identity Providers within Keycloak.
    /// 
    /// SAML (Security Assertion Markup Language) identity providers allows to authenticate through a third-party system, using SAML standard.
    /// 
    /// ### Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realmIdentityProvider = new Keycloak.Saml.IdentityProvider("realm_identity_provider", new()
    ///     {
    ///         Realm = "my-realm",
    ///         Alias = "my-idp",
    ///         SingleSignOnServiceUrl = "https://domain.com/adfs/ls/",
    ///         SingleLogoutServiceUrl = "https://domain.com/adfs/ls/?wa=wsignout1.0",
    ///         BackchannelSupported = true,
    ///         PostBindingResponse = true,
    ///         PostBindingLogout = true,
    ///         PostBindingAuthnRequest = true,
    ///         StoreToken = false,
    ///         TrustEmail = true,
    ///         ForceAuthn = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Argument Reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `realm` - (Required) The name of the realm. This is unique across Keycloak.
    /// - `alias` - (Optional) The uniq name of identity provider.
    /// - `enabled` - (Optional) When false, users and clients will not be able to access this realm. Defaults to `true`.
    /// - `display_name` - (Optional) The display name for the realm that is shown when logging in to the admin console.
    /// - `store_token` - (Optional) Enable/disable if tokens must be stored after authenticating users. Defaults to `true`.
    /// - `add_read_token_role_on_create` - (Optional) Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role. Defaults to `false`.
    /// - `trust_email` - (Optional) If enabled then email provided by this provider is not verified even if verification is enabled for the realm. Defaults to `false`.
    /// - `link_only` - (Optional) If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't want to allow login from the provider, but want to integrate with a provider. Defaults to `false`.
    /// - `hide_on_login_page` - (Optional) If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
    /// - `first_broker_login_flow_alias` - (Optional) Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
    /// - `post_broker_login_flow_alias` - (Optional) Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
    /// - `authenticate_by_default` - (Optional) Authenticate users by default. Defaults to `false`.
    /// 
    /// #### SAML Configuration
    /// 
    /// - `single_sign_on_service_url` - (Optional) The Url that must be used to send authentication requests (SAML AuthnRequest).
    /// - `single_logout_service_url` - (Optional) The Url that must be used to send logout requests.
    /// - `backchannel_supported` - (Optional) Does the external IDP support back-channel logout ?.
    /// - `name_id_policy_format` - (Optional) Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
    /// - `post_binding_response` - (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used..
    /// - `post_binding_authn_request` - (Optional) Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
    /// - `post_binding_logout` - (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
    /// - `want_assertions_signed` - (Optional) Indicates whether this service provider expects a signed Assertion.
    /// - `want_assertions_encrypted` - (Optional) Indicates whether this service provider expects an encrypted Assertion.
    /// - `force_authn` - (Optional) Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
    /// - `validate_signature` - (Optional) Enable/disable signature validation of SAML responses.
    /// - `signing_certificate` - (Optional) Signing Certificate.
    /// - `signature_algorithm` - (Optional) Signing Algorithm. Defaults to empty.
    /// - `xml_sign_key_info_key_name_transformer` - (Optional) Sign Key Transformer. Defaults to empty.
    /// 
    /// ### Import
    /// 
    /// Identity providers can be imported using the format `{{realm_id}}/{{idp_alias}}`, where `idp_alias` is the identity provider alias.
    /// 
    /// Example:
    /// </summary>
    [KeycloakResourceType("keycloak:saml/identityProvider:IdentityProvider")]
    public partial class IdentityProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        /// </summary>
        [Output("addReadTokenRoleOnCreate")]
        public Output<bool?> AddReadTokenRoleOnCreate { get; private set; } = null!;

        /// <summary>
        /// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Output("authenticateByDefault")]
        public Output<bool?> AuthenticateByDefault { get; private set; } = null!;

        /// <summary>
        /// AuthnContext ClassRefs
        /// </summary>
        [Output("authnContextClassRefs")]
        public Output<ImmutableArray<string>> AuthnContextClassRefs { get; private set; } = null!;

        /// <summary>
        /// AuthnContext Comparison
        /// </summary>
        [Output("authnContextComparisonType")]
        public Output<string?> AuthnContextComparisonType { get; private set; } = null!;

        /// <summary>
        /// AuthnContext DeclRefs
        /// </summary>
        [Output("authnContextDeclRefs")]
        public Output<ImmutableArray<string>> AuthnContextDeclRefs { get; private set; } = null!;

        /// <summary>
        /// Does the external IDP support backchannel logout?
        /// </summary>
        [Output("backchannelSupported")]
        public Output<bool?> BackchannelSupported { get; private set; } = null!;

        /// <summary>
        /// Friendly name for Identity Providers.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this identity provider.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The Entity ID that will be used to uniquely identify this SAML Service Provider.
        /// </summary>
        [Output("entityId")]
        public Output<string> EntityId { get; private set; } = null!;

        [Output("extraConfig")]
        public Output<ImmutableDictionary<string, string>?> ExtraConfig { get; private set; } = null!;

        /// <summary>
        /// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
        /// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        /// </summary>
        [Output("firstBrokerLoginFlowAlias")]
        public Output<string?> FirstBrokerLoginFlowAlias { get; private set; } = null!;

        /// <summary>
        /// Require Force Authn.
        /// </summary>
        [Output("forceAuthn")]
        public Output<bool?> ForceAuthn { get; private set; } = null!;

        /// <summary>
        /// GUI Order
        /// </summary>
        [Output("guiOrder")]
        public Output<string?> GuiOrder { get; private set; } = null!;

        /// <summary>
        /// Hide On Login Page.
        /// </summary>
        [Output("hideOnLoginPage")]
        public Output<bool?> HideOnLoginPage { get; private set; } = null!;

        /// <summary>
        /// Internal Identity Provider Id
        /// </summary>
        [Output("internalId")]
        public Output<string> InternalId { get; private set; } = null!;

        /// <summary>
        /// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
        /// want to allow login from the provider, but want to integrate with a provider
        /// </summary>
        [Output("linkOnly")]
        public Output<bool?> LinkOnly { get; private set; } = null!;

        /// <summary>
        /// Login Hint.
        /// </summary>
        [Output("loginHint")]
        public Output<string?> LoginHint { get; private set; } = null!;

        /// <summary>
        /// Name ID Policy Format.
        /// </summary>
        [Output("nameIdPolicyFormat")]
        public Output<string?> NameIdPolicyFormat { get; private set; } = null!;

        /// <summary>
        /// Post Binding Authn Request.
        /// </summary>
        [Output("postBindingAuthnRequest")]
        public Output<bool?> PostBindingAuthnRequest { get; private set; } = null!;

        /// <summary>
        /// Post Binding Logout.
        /// </summary>
        [Output("postBindingLogout")]
        public Output<bool?> PostBindingLogout { get; private set; } = null!;

        /// <summary>
        /// Post Binding Response.
        /// </summary>
        [Output("postBindingResponse")]
        public Output<bool?> PostBindingResponse { get; private set; } = null!;

        /// <summary>
        /// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
        /// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
        /// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
        /// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        /// </summary>
        [Output("postBrokerLoginFlowAlias")]
        public Output<string?> PostBrokerLoginFlowAlias { get; private set; } = null!;

        /// <summary>
        /// Principal Attribute
        /// </summary>
        [Output("principalAttribute")]
        public Output<string?> PrincipalAttribute { get; private set; } = null!;

        /// <summary>
        /// Principal Type
        /// </summary>
        [Output("principalType")]
        public Output<string?> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// provider id, is always saml, unless you have a custom implementation
        /// </summary>
        [Output("providerId")]
        public Output<string?> ProviderId { get; private set; } = null!;

        /// <summary>
        /// Realm Name
        /// </summary>
        [Output("realm")]
        public Output<string> Realm { get; private set; } = null!;

        /// <summary>
        /// Signing Algorithm.
        /// </summary>
        [Output("signatureAlgorithm")]
        public Output<string?> SignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Signing Certificate.
        /// </summary>
        [Output("signingCertificate")]
        public Output<string?> SigningCertificate { get; private set; } = null!;

        /// <summary>
        /// Logout URL.
        /// </summary>
        [Output("singleLogoutServiceUrl")]
        public Output<string?> SingleLogoutServiceUrl { get; private set; } = null!;

        /// <summary>
        /// SSO Logout URL.
        /// </summary>
        [Output("singleSignOnServiceUrl")]
        public Output<string> SingleSignOnServiceUrl { get; private set; } = null!;

        /// <summary>
        /// Enable/disable if tokens must be stored after authenticating users.
        /// </summary>
        [Output("storeToken")]
        public Output<bool?> StoreToken { get; private set; } = null!;

        /// <summary>
        /// Sync Mode
        /// </summary>
        [Output("syncMode")]
        public Output<string?> SyncMode { get; private set; } = null!;

        /// <summary>
        /// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        /// </summary>
        [Output("trustEmail")]
        public Output<bool?> TrustEmail { get; private set; } = null!;

        /// <summary>
        /// Enable/disable signature validation of SAML responses.
        /// </summary>
        [Output("validateSignature")]
        public Output<bool?> ValidateSignature { get; private set; } = null!;

        /// <summary>
        /// Want Assertions Encrypted.
        /// </summary>
        [Output("wantAssertionsEncrypted")]
        public Output<bool?> WantAssertionsEncrypted { get; private set; } = null!;

        /// <summary>
        /// Want Assertions Signed.
        /// </summary>
        [Output("wantAssertionsSigned")]
        public Output<bool?> WantAssertionsSigned { get; private set; } = null!;

        /// <summary>
        /// Sign Key Transformer.
        /// </summary>
        [Output("xmlSignKeyInfoKeyNameTransformer")]
        public Output<string?> XmlSignKeyInfoKeyNameTransformer { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityProvider(string name, IdentityProviderArgs args, CustomResourceOptions? options = null)
            : base("keycloak:saml/identityProvider:IdentityProvider", name, args ?? new IdentityProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityProvider(string name, Input<string> id, IdentityProviderState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:saml/identityProvider:IdentityProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityProvider Get(string name, Input<string> id, IdentityProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityProvider(name, id, state, options);
        }
    }

    public sealed class IdentityProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        /// </summary>
        [Input("addReadTokenRoleOnCreate")]
        public Input<bool>? AddReadTokenRoleOnCreate { get; set; }

        /// <summary>
        /// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        /// </summary>
        [Input("alias", required: true)]
        public Input<string> Alias { get; set; } = null!;

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Input("authenticateByDefault")]
        public Input<bool>? AuthenticateByDefault { get; set; }

        [Input("authnContextClassRefs")]
        private InputList<string>? _authnContextClassRefs;

        /// <summary>
        /// AuthnContext ClassRefs
        /// </summary>
        public InputList<string> AuthnContextClassRefs
        {
            get => _authnContextClassRefs ?? (_authnContextClassRefs = new InputList<string>());
            set => _authnContextClassRefs = value;
        }

        /// <summary>
        /// AuthnContext Comparison
        /// </summary>
        [Input("authnContextComparisonType")]
        public Input<string>? AuthnContextComparisonType { get; set; }

        [Input("authnContextDeclRefs")]
        private InputList<string>? _authnContextDeclRefs;

        /// <summary>
        /// AuthnContext DeclRefs
        /// </summary>
        public InputList<string> AuthnContextDeclRefs
        {
            get => _authnContextDeclRefs ?? (_authnContextDeclRefs = new InputList<string>());
            set => _authnContextDeclRefs = value;
        }

        /// <summary>
        /// Does the external IDP support backchannel logout?
        /// </summary>
        [Input("backchannelSupported")]
        public Input<bool>? BackchannelSupported { get; set; }

        /// <summary>
        /// Friendly name for Identity Providers.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Enable/disable this identity provider.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Entity ID that will be used to uniquely identify this SAML Service Provider.
        /// </summary>
        [Input("entityId", required: true)]
        public Input<string> EntityId { get; set; } = null!;

        [Input("extraConfig")]
        private InputMap<string>? _extraConfig;
        public InputMap<string> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<string>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
        /// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        /// </summary>
        [Input("firstBrokerLoginFlowAlias")]
        public Input<string>? FirstBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// Require Force Authn.
        /// </summary>
        [Input("forceAuthn")]
        public Input<bool>? ForceAuthn { get; set; }

        /// <summary>
        /// GUI Order
        /// </summary>
        [Input("guiOrder")]
        public Input<string>? GuiOrder { get; set; }

        /// <summary>
        /// Hide On Login Page.
        /// </summary>
        [Input("hideOnLoginPage")]
        public Input<bool>? HideOnLoginPage { get; set; }

        /// <summary>
        /// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
        /// want to allow login from the provider, but want to integrate with a provider
        /// </summary>
        [Input("linkOnly")]
        public Input<bool>? LinkOnly { get; set; }

        /// <summary>
        /// Login Hint.
        /// </summary>
        [Input("loginHint")]
        public Input<string>? LoginHint { get; set; }

        /// <summary>
        /// Name ID Policy Format.
        /// </summary>
        [Input("nameIdPolicyFormat")]
        public Input<string>? NameIdPolicyFormat { get; set; }

        /// <summary>
        /// Post Binding Authn Request.
        /// </summary>
        [Input("postBindingAuthnRequest")]
        public Input<bool>? PostBindingAuthnRequest { get; set; }

        /// <summary>
        /// Post Binding Logout.
        /// </summary>
        [Input("postBindingLogout")]
        public Input<bool>? PostBindingLogout { get; set; }

        /// <summary>
        /// Post Binding Response.
        /// </summary>
        [Input("postBindingResponse")]
        public Input<bool>? PostBindingResponse { get; set; }

        /// <summary>
        /// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
        /// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
        /// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
        /// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        /// </summary>
        [Input("postBrokerLoginFlowAlias")]
        public Input<string>? PostBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// Principal Attribute
        /// </summary>
        [Input("principalAttribute")]
        public Input<string>? PrincipalAttribute { get; set; }

        /// <summary>
        /// Principal Type
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        /// <summary>
        /// provider id, is always saml, unless you have a custom implementation
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// Realm Name
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        /// <summary>
        /// Signing Algorithm.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// Signing Certificate.
        /// </summary>
        [Input("signingCertificate")]
        public Input<string>? SigningCertificate { get; set; }

        /// <summary>
        /// Logout URL.
        /// </summary>
        [Input("singleLogoutServiceUrl")]
        public Input<string>? SingleLogoutServiceUrl { get; set; }

        /// <summary>
        /// SSO Logout URL.
        /// </summary>
        [Input("singleSignOnServiceUrl", required: true)]
        public Input<string> SingleSignOnServiceUrl { get; set; } = null!;

        /// <summary>
        /// Enable/disable if tokens must be stored after authenticating users.
        /// </summary>
        [Input("storeToken")]
        public Input<bool>? StoreToken { get; set; }

        /// <summary>
        /// Sync Mode
        /// </summary>
        [Input("syncMode")]
        public Input<string>? SyncMode { get; set; }

        /// <summary>
        /// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        /// </summary>
        [Input("trustEmail")]
        public Input<bool>? TrustEmail { get; set; }

        /// <summary>
        /// Enable/disable signature validation of SAML responses.
        /// </summary>
        [Input("validateSignature")]
        public Input<bool>? ValidateSignature { get; set; }

        /// <summary>
        /// Want Assertions Encrypted.
        /// </summary>
        [Input("wantAssertionsEncrypted")]
        public Input<bool>? WantAssertionsEncrypted { get; set; }

        /// <summary>
        /// Want Assertions Signed.
        /// </summary>
        [Input("wantAssertionsSigned")]
        public Input<bool>? WantAssertionsSigned { get; set; }

        /// <summary>
        /// Sign Key Transformer.
        /// </summary>
        [Input("xmlSignKeyInfoKeyNameTransformer")]
        public Input<string>? XmlSignKeyInfoKeyNameTransformer { get; set; }

        public IdentityProviderArgs()
        {
        }
        public static new IdentityProviderArgs Empty => new IdentityProviderArgs();
    }

    public sealed class IdentityProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        /// </summary>
        [Input("addReadTokenRoleOnCreate")]
        public Input<bool>? AddReadTokenRoleOnCreate { get; set; }

        /// <summary>
        /// The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Enable/disable authenticate users by default.
        /// </summary>
        [Input("authenticateByDefault")]
        public Input<bool>? AuthenticateByDefault { get; set; }

        [Input("authnContextClassRefs")]
        private InputList<string>? _authnContextClassRefs;

        /// <summary>
        /// AuthnContext ClassRefs
        /// </summary>
        public InputList<string> AuthnContextClassRefs
        {
            get => _authnContextClassRefs ?? (_authnContextClassRefs = new InputList<string>());
            set => _authnContextClassRefs = value;
        }

        /// <summary>
        /// AuthnContext Comparison
        /// </summary>
        [Input("authnContextComparisonType")]
        public Input<string>? AuthnContextComparisonType { get; set; }

        [Input("authnContextDeclRefs")]
        private InputList<string>? _authnContextDeclRefs;

        /// <summary>
        /// AuthnContext DeclRefs
        /// </summary>
        public InputList<string> AuthnContextDeclRefs
        {
            get => _authnContextDeclRefs ?? (_authnContextDeclRefs = new InputList<string>());
            set => _authnContextDeclRefs = value;
        }

        /// <summary>
        /// Does the external IDP support backchannel logout?
        /// </summary>
        [Input("backchannelSupported")]
        public Input<bool>? BackchannelSupported { get; set; }

        /// <summary>
        /// Friendly name for Identity Providers.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Enable/disable this identity provider.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Entity ID that will be used to uniquely identify this SAML Service Provider.
        /// </summary>
        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        [Input("extraConfig")]
        private InputMap<string>? _extraConfig;
        public InputMap<string> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<string>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
        /// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        /// </summary>
        [Input("firstBrokerLoginFlowAlias")]
        public Input<string>? FirstBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// Require Force Authn.
        /// </summary>
        [Input("forceAuthn")]
        public Input<bool>? ForceAuthn { get; set; }

        /// <summary>
        /// GUI Order
        /// </summary>
        [Input("guiOrder")]
        public Input<string>? GuiOrder { get; set; }

        /// <summary>
        /// Hide On Login Page.
        /// </summary>
        [Input("hideOnLoginPage")]
        public Input<bool>? HideOnLoginPage { get; set; }

        /// <summary>
        /// Internal Identity Provider Id
        /// </summary>
        [Input("internalId")]
        public Input<string>? InternalId { get; set; }

        /// <summary>
        /// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
        /// want to allow login from the provider, but want to integrate with a provider
        /// </summary>
        [Input("linkOnly")]
        public Input<bool>? LinkOnly { get; set; }

        /// <summary>
        /// Login Hint.
        /// </summary>
        [Input("loginHint")]
        public Input<string>? LoginHint { get; set; }

        /// <summary>
        /// Name ID Policy Format.
        /// </summary>
        [Input("nameIdPolicyFormat")]
        public Input<string>? NameIdPolicyFormat { get; set; }

        /// <summary>
        /// Post Binding Authn Request.
        /// </summary>
        [Input("postBindingAuthnRequest")]
        public Input<bool>? PostBindingAuthnRequest { get; set; }

        /// <summary>
        /// Post Binding Logout.
        /// </summary>
        [Input("postBindingLogout")]
        public Input<bool>? PostBindingLogout { get; set; }

        /// <summary>
        /// Post Binding Response.
        /// </summary>
        [Input("postBindingResponse")]
        public Input<bool>? PostBindingResponse { get; set; }

        /// <summary>
        /// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
        /// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
        /// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
        /// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        /// </summary>
        [Input("postBrokerLoginFlowAlias")]
        public Input<string>? PostBrokerLoginFlowAlias { get; set; }

        /// <summary>
        /// Principal Attribute
        /// </summary>
        [Input("principalAttribute")]
        public Input<string>? PrincipalAttribute { get; set; }

        /// <summary>
        /// Principal Type
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        /// <summary>
        /// provider id, is always saml, unless you have a custom implementation
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// Realm Name
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        /// <summary>
        /// Signing Algorithm.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// Signing Certificate.
        /// </summary>
        [Input("signingCertificate")]
        public Input<string>? SigningCertificate { get; set; }

        /// <summary>
        /// Logout URL.
        /// </summary>
        [Input("singleLogoutServiceUrl")]
        public Input<string>? SingleLogoutServiceUrl { get; set; }

        /// <summary>
        /// SSO Logout URL.
        /// </summary>
        [Input("singleSignOnServiceUrl")]
        public Input<string>? SingleSignOnServiceUrl { get; set; }

        /// <summary>
        /// Enable/disable if tokens must be stored after authenticating users.
        /// </summary>
        [Input("storeToken")]
        public Input<bool>? StoreToken { get; set; }

        /// <summary>
        /// Sync Mode
        /// </summary>
        [Input("syncMode")]
        public Input<string>? SyncMode { get; set; }

        /// <summary>
        /// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        /// </summary>
        [Input("trustEmail")]
        public Input<bool>? TrustEmail { get; set; }

        /// <summary>
        /// Enable/disable signature validation of SAML responses.
        /// </summary>
        [Input("validateSignature")]
        public Input<bool>? ValidateSignature { get; set; }

        /// <summary>
        /// Want Assertions Encrypted.
        /// </summary>
        [Input("wantAssertionsEncrypted")]
        public Input<bool>? WantAssertionsEncrypted { get; set; }

        /// <summary>
        /// Want Assertions Signed.
        /// </summary>
        [Input("wantAssertionsSigned")]
        public Input<bool>? WantAssertionsSigned { get; set; }

        /// <summary>
        /// Sign Key Transformer.
        /// </summary>
        [Input("xmlSignKeyInfoKeyNameTransformer")]
        public Input<string>? XmlSignKeyInfoKeyNameTransformer { get; set; }

        public IdentityProviderState()
        {
        }
        public static new IdentityProviderState Empty => new IdentityProviderState();
    }
}
