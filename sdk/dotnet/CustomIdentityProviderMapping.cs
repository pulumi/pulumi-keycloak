// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var realm = new Keycloak.Realm("realm", new Keycloak.RealmArgs
    ///         {
    ///             Realm = "my-realm",
    ///             Enabled = true,
    ///         });
    ///         var oidcIdentityProvider = new Keycloak.Oidc.IdentityProvider("oidcIdentityProvider", new Keycloak.Oidc.IdentityProviderArgs
    ///         {
    ///             Realm = realm.Id,
    ///             Alias = "oidc",
    ///             AuthorizationUrl = "https://example.com/auth",
    ///             TokenUrl = "https://example.com/token",
    ///             ClientId = "example_id",
    ///             ClientSecret = "example_token",
    ///             DefaultScopes = "openid random profile",
    ///         });
    ///         var oidcCustomIdentityProviderMapping = new Keycloak.CustomIdentityProviderMapping("oidcCustomIdentityProviderMapping", new Keycloak.CustomIdentityProviderMappingArgs
    ///         {
    ///             Realm = realm.Id,
    ///             IdentityProviderAlias = oidcIdentityProvider.Alias,
    ///             IdentityProviderMapper = "%s-user-attribute-idp-mapper",
    ///             ExtraConfig = 
    ///             {
    ///                 { "syncMode", "INHERIT" },
    ///                 { "Claim", "my-email-claim" },
    ///                 { "UserAttribute", "email" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Identity provider mappers can be imported using the format `{{realm_id}}/{{idp_alias}}/{{idp_mapper_id}}`, where `idp_alias` is the identity provider alias, and `idp_mapper_id` is the unique ID that Keycloak assigns to the mapper upon creation. This value can be found in the URI when editing this mapper in the GUI, and is typically a GUID. Examplebash
    /// 
    /// ```sh
    ///  $ pulumi import keycloak:index/customIdentityProviderMapping:CustomIdentityProviderMapping test_mapper my-realm/my-mapper/f446db98-7133-4e30-b18a-3d28fde7ca1b
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:index/customIdentityProviderMapping:CustomIdentityProviderMapping")]
    public partial class CustomIdentityProviderMapping : Pulumi.CustomResource
    {
        /// <summary>
        /// Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
        /// </summary>
        [Output("extraConfig")]
        public Output<ImmutableDictionary<string, object>?> ExtraConfig { get; private set; } = null!;

        /// <summary>
        /// The alias of the associated identity provider.
        /// </summary>
        [Output("identityProviderAlias")]
        public Output<string> IdentityProviderAlias { get; private set; } = null!;

        /// <summary>
        /// The type of the identity provider mapper. This can be a format string that includes a `%s` - this will be replaced by the provider id.
        /// </summary>
        [Output("identityProviderMapper")]
        public Output<string> IdentityProviderMapper { get; private set; } = null!;

        /// <summary>
        /// The name of the mapper.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the realm.
        /// </summary>
        [Output("realm")]
        public Output<string> Realm { get; private set; } = null!;


        /// <summary>
        /// Create a CustomIdentityProviderMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomIdentityProviderMapping(string name, CustomIdentityProviderMappingArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/customIdentityProviderMapping:CustomIdentityProviderMapping", name, args ?? new CustomIdentityProviderMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomIdentityProviderMapping(string name, Input<string> id, CustomIdentityProviderMappingState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/customIdentityProviderMapping:CustomIdentityProviderMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomIdentityProviderMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomIdentityProviderMapping Get(string name, Input<string> id, CustomIdentityProviderMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomIdentityProviderMapping(name, id, state, options);
        }
    }

    public sealed class CustomIdentityProviderMappingArgs : Pulumi.ResourceArgs
    {
        [Input("extraConfig")]
        private InputMap<object>? _extraConfig;

        /// <summary>
        /// Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
        /// </summary>
        public InputMap<object> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<object>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// The alias of the associated identity provider.
        /// </summary>
        [Input("identityProviderAlias", required: true)]
        public Input<string> IdentityProviderAlias { get; set; } = null!;

        /// <summary>
        /// The type of the identity provider mapper. This can be a format string that includes a `%s` - this will be replaced by the provider id.
        /// </summary>
        [Input("identityProviderMapper", required: true)]
        public Input<string> IdentityProviderMapper { get; set; } = null!;

        /// <summary>
        /// The name of the mapper.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the realm.
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        public CustomIdentityProviderMappingArgs()
        {
        }
    }

    public sealed class CustomIdentityProviderMappingState : Pulumi.ResourceArgs
    {
        [Input("extraConfig")]
        private InputMap<object>? _extraConfig;

        /// <summary>
        /// Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
        /// </summary>
        public InputMap<object> ExtraConfig
        {
            get => _extraConfig ?? (_extraConfig = new InputMap<object>());
            set => _extraConfig = value;
        }

        /// <summary>
        /// The alias of the associated identity provider.
        /// </summary>
        [Input("identityProviderAlias")]
        public Input<string>? IdentityProviderAlias { get; set; }

        /// <summary>
        /// The type of the identity provider mapper. This can be a format string that includes a `%s` - this will be replaced by the provider id.
        /// </summary>
        [Input("identityProviderMapper")]
        public Input<string>? IdentityProviderMapper { get; set; }

        /// <summary>
        /// The name of the mapper.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the realm.
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        public CustomIdentityProviderMappingState()
        {
        }
    }
}
