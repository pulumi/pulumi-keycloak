// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    public partial class Realm : Pulumi.CustomResource
    {
        [Output("accessCodeLifespan")]
        public Output<string> AccessCodeLifespan { get; private set; } = null!;

        [Output("accessCodeLifespanLogin")]
        public Output<string> AccessCodeLifespanLogin { get; private set; } = null!;

        [Output("accessCodeLifespanUserAction")]
        public Output<string> AccessCodeLifespanUserAction { get; private set; } = null!;

        [Output("accessTokenLifespan")]
        public Output<string> AccessTokenLifespan { get; private set; } = null!;

        [Output("accessTokenLifespanForImplicitFlow")]
        public Output<string> AccessTokenLifespanForImplicitFlow { get; private set; } = null!;

        [Output("accountTheme")]
        public Output<string?> AccountTheme { get; private set; } = null!;

        [Output("actionTokenGeneratedByAdminLifespan")]
        public Output<string> ActionTokenGeneratedByAdminLifespan { get; private set; } = null!;

        [Output("actionTokenGeneratedByUserLifespan")]
        public Output<string> ActionTokenGeneratedByUserLifespan { get; private set; } = null!;

        [Output("adminTheme")]
        public Output<string?> AdminTheme { get; private set; } = null!;

        [Output("attributes")]
        public Output<ImmutableDictionary<string, object>?> Attributes { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for BrowserFlow
        /// </summary>
        [Output("browserFlow")]
        public Output<string?> BrowserFlow { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for ClientAuthenticationFlow
        /// </summary>
        [Output("clientAuthenticationFlow")]
        public Output<string?> ClientAuthenticationFlow { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for DirectGrantFlow
        /// </summary>
        [Output("directGrantFlow")]
        public Output<string?> DirectGrantFlow { get; private set; } = null!;

        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        [Output("displayNameHtml")]
        public Output<string?> DisplayNameHtml { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for DockerAuthenticationFlow
        /// </summary>
        [Output("dockerAuthenticationFlow")]
        public Output<string?> DockerAuthenticationFlow { get; private set; } = null!;

        [Output("duplicateEmailsAllowed")]
        public Output<bool> DuplicateEmailsAllowed { get; private set; } = null!;

        [Output("editUsernameAllowed")]
        public Output<bool> EditUsernameAllowed { get; private set; } = null!;

        [Output("emailTheme")]
        public Output<string?> EmailTheme { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("internalId")]
        public Output<string> InternalId { get; private set; } = null!;

        [Output("internationalization")]
        public Output<Outputs.RealmInternationalization?> Internationalization { get; private set; } = null!;

        [Output("loginTheme")]
        public Output<string?> LoginTheme { get; private set; } = null!;

        [Output("loginWithEmailAllowed")]
        public Output<bool> LoginWithEmailAllowed { get; private set; } = null!;

        [Output("offlineSessionIdleTimeout")]
        public Output<string> OfflineSessionIdleTimeout { get; private set; } = null!;

        [Output("offlineSessionMaxLifespan")]
        public Output<string> OfflineSessionMaxLifespan { get; private set; } = null!;

        /// <summary>
        /// String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
        /// can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
        /// and notUsername(undefined)"
        /// </summary>
        [Output("passwordPolicy")]
        public Output<string?> PasswordPolicy { get; private set; } = null!;

        [Output("realm")]
        public Output<string> RealmName { get; private set; } = null!;

        [Output("refreshTokenMaxReuse")]
        public Output<int?> RefreshTokenMaxReuse { get; private set; } = null!;

        [Output("registrationAllowed")]
        public Output<bool> RegistrationAllowed { get; private set; } = null!;

        [Output("registrationEmailAsUsername")]
        public Output<bool> RegistrationEmailAsUsername { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for RegistrationFlow
        /// </summary>
        [Output("registrationFlow")]
        public Output<string?> RegistrationFlow { get; private set; } = null!;

        [Output("rememberMe")]
        public Output<bool> RememberMe { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for ResetCredentialsFlow
        /// </summary>
        [Output("resetCredentialsFlow")]
        public Output<string?> ResetCredentialsFlow { get; private set; } = null!;

        [Output("resetPasswordAllowed")]
        public Output<bool> ResetPasswordAllowed { get; private set; } = null!;

        [Output("revokeRefreshToken")]
        public Output<bool?> RevokeRefreshToken { get; private set; } = null!;

        [Output("securityDefenses")]
        public Output<Outputs.RealmSecurityDefenses?> SecurityDefenses { get; private set; } = null!;

        [Output("smtpServer")]
        public Output<Outputs.RealmSmtpServer?> SmtpServer { get; private set; } = null!;

        /// <summary>
        /// SSL Required: Values can be 'none', 'external' or 'all'.
        /// </summary>
        [Output("sslRequired")]
        public Output<string?> SslRequired { get; private set; } = null!;

        [Output("ssoSessionIdleTimeout")]
        public Output<string> SsoSessionIdleTimeout { get; private set; } = null!;

        [Output("ssoSessionMaxLifespan")]
        public Output<string> SsoSessionMaxLifespan { get; private set; } = null!;

        [Output("userManagedAccess")]
        public Output<bool?> UserManagedAccess { get; private set; } = null!;

        [Output("verifyEmail")]
        public Output<bool> VerifyEmail { get; private set; } = null!;


        /// <summary>
        /// Create a Realm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Realm(string name, RealmArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/realm:Realm", name, args ?? new RealmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Realm(string name, Input<string> id, RealmState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/realm:Realm", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Realm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Realm Get(string name, Input<string> id, RealmState? state = null, CustomResourceOptions? options = null)
        {
            return new Realm(name, id, state, options);
        }
    }

    public sealed class RealmArgs : Pulumi.ResourceArgs
    {
        [Input("accessCodeLifespan")]
        public Input<string>? AccessCodeLifespan { get; set; }

        [Input("accessCodeLifespanLogin")]
        public Input<string>? AccessCodeLifespanLogin { get; set; }

        [Input("accessCodeLifespanUserAction")]
        public Input<string>? AccessCodeLifespanUserAction { get; set; }

        [Input("accessTokenLifespan")]
        public Input<string>? AccessTokenLifespan { get; set; }

        [Input("accessTokenLifespanForImplicitFlow")]
        public Input<string>? AccessTokenLifespanForImplicitFlow { get; set; }

        [Input("accountTheme")]
        public Input<string>? AccountTheme { get; set; }

        [Input("actionTokenGeneratedByAdminLifespan")]
        public Input<string>? ActionTokenGeneratedByAdminLifespan { get; set; }

        [Input("actionTokenGeneratedByUserLifespan")]
        public Input<string>? ActionTokenGeneratedByUserLifespan { get; set; }

        [Input("adminTheme")]
        public Input<string>? AdminTheme { get; set; }

        [Input("attributes")]
        private InputMap<object>? _attributes;
        public InputMap<object> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<object>());
            set => _attributes = value;
        }

        /// <summary>
        /// Which flow should be used for BrowserFlow
        /// </summary>
        [Input("browserFlow")]
        public Input<string>? BrowserFlow { get; set; }

        /// <summary>
        /// Which flow should be used for ClientAuthenticationFlow
        /// </summary>
        [Input("clientAuthenticationFlow")]
        public Input<string>? ClientAuthenticationFlow { get; set; }

        /// <summary>
        /// Which flow should be used for DirectGrantFlow
        /// </summary>
        [Input("directGrantFlow")]
        public Input<string>? DirectGrantFlow { get; set; }

        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("displayNameHtml")]
        public Input<string>? DisplayNameHtml { get; set; }

        /// <summary>
        /// Which flow should be used for DockerAuthenticationFlow
        /// </summary>
        [Input("dockerAuthenticationFlow")]
        public Input<string>? DockerAuthenticationFlow { get; set; }

        [Input("duplicateEmailsAllowed")]
        public Input<bool>? DuplicateEmailsAllowed { get; set; }

        [Input("editUsernameAllowed")]
        public Input<bool>? EditUsernameAllowed { get; set; }

        [Input("emailTheme")]
        public Input<string>? EmailTheme { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("internationalization")]
        public Input<Inputs.RealmInternationalizationArgs>? Internationalization { get; set; }

        [Input("loginTheme")]
        public Input<string>? LoginTheme { get; set; }

        [Input("loginWithEmailAllowed")]
        public Input<bool>? LoginWithEmailAllowed { get; set; }

        [Input("offlineSessionIdleTimeout")]
        public Input<string>? OfflineSessionIdleTimeout { get; set; }

        [Input("offlineSessionMaxLifespan")]
        public Input<string>? OfflineSessionMaxLifespan { get; set; }

        /// <summary>
        /// String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
        /// can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
        /// and notUsername(undefined)"
        /// </summary>
        [Input("passwordPolicy")]
        public Input<string>? PasswordPolicy { get; set; }

        [Input("realm", required: true)]
        public Input<string> RealmName { get; set; } = null!;

        [Input("refreshTokenMaxReuse")]
        public Input<int>? RefreshTokenMaxReuse { get; set; }

        [Input("registrationAllowed")]
        public Input<bool>? RegistrationAllowed { get; set; }

        [Input("registrationEmailAsUsername")]
        public Input<bool>? RegistrationEmailAsUsername { get; set; }

        /// <summary>
        /// Which flow should be used for RegistrationFlow
        /// </summary>
        [Input("registrationFlow")]
        public Input<string>? RegistrationFlow { get; set; }

        [Input("rememberMe")]
        public Input<bool>? RememberMe { get; set; }

        /// <summary>
        /// Which flow should be used for ResetCredentialsFlow
        /// </summary>
        [Input("resetCredentialsFlow")]
        public Input<string>? ResetCredentialsFlow { get; set; }

        [Input("resetPasswordAllowed")]
        public Input<bool>? ResetPasswordAllowed { get; set; }

        [Input("revokeRefreshToken")]
        public Input<bool>? RevokeRefreshToken { get; set; }

        [Input("securityDefenses")]
        public Input<Inputs.RealmSecurityDefensesArgs>? SecurityDefenses { get; set; }

        [Input("smtpServer")]
        public Input<Inputs.RealmSmtpServerArgs>? SmtpServer { get; set; }

        /// <summary>
        /// SSL Required: Values can be 'none', 'external' or 'all'.
        /// </summary>
        [Input("sslRequired")]
        public Input<string>? SslRequired { get; set; }

        [Input("ssoSessionIdleTimeout")]
        public Input<string>? SsoSessionIdleTimeout { get; set; }

        [Input("ssoSessionMaxLifespan")]
        public Input<string>? SsoSessionMaxLifespan { get; set; }

        [Input("userManagedAccess")]
        public Input<bool>? UserManagedAccess { get; set; }

        [Input("verifyEmail")]
        public Input<bool>? VerifyEmail { get; set; }

        public RealmArgs()
        {
        }
    }

    public sealed class RealmState : Pulumi.ResourceArgs
    {
        [Input("accessCodeLifespan")]
        public Input<string>? AccessCodeLifespan { get; set; }

        [Input("accessCodeLifespanLogin")]
        public Input<string>? AccessCodeLifespanLogin { get; set; }

        [Input("accessCodeLifespanUserAction")]
        public Input<string>? AccessCodeLifespanUserAction { get; set; }

        [Input("accessTokenLifespan")]
        public Input<string>? AccessTokenLifespan { get; set; }

        [Input("accessTokenLifespanForImplicitFlow")]
        public Input<string>? AccessTokenLifespanForImplicitFlow { get; set; }

        [Input("accountTheme")]
        public Input<string>? AccountTheme { get; set; }

        [Input("actionTokenGeneratedByAdminLifespan")]
        public Input<string>? ActionTokenGeneratedByAdminLifespan { get; set; }

        [Input("actionTokenGeneratedByUserLifespan")]
        public Input<string>? ActionTokenGeneratedByUserLifespan { get; set; }

        [Input("adminTheme")]
        public Input<string>? AdminTheme { get; set; }

        [Input("attributes")]
        private InputMap<object>? _attributes;
        public InputMap<object> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<object>());
            set => _attributes = value;
        }

        /// <summary>
        /// Which flow should be used for BrowserFlow
        /// </summary>
        [Input("browserFlow")]
        public Input<string>? BrowserFlow { get; set; }

        /// <summary>
        /// Which flow should be used for ClientAuthenticationFlow
        /// </summary>
        [Input("clientAuthenticationFlow")]
        public Input<string>? ClientAuthenticationFlow { get; set; }

        /// <summary>
        /// Which flow should be used for DirectGrantFlow
        /// </summary>
        [Input("directGrantFlow")]
        public Input<string>? DirectGrantFlow { get; set; }

        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("displayNameHtml")]
        public Input<string>? DisplayNameHtml { get; set; }

        /// <summary>
        /// Which flow should be used for DockerAuthenticationFlow
        /// </summary>
        [Input("dockerAuthenticationFlow")]
        public Input<string>? DockerAuthenticationFlow { get; set; }

        [Input("duplicateEmailsAllowed")]
        public Input<bool>? DuplicateEmailsAllowed { get; set; }

        [Input("editUsernameAllowed")]
        public Input<bool>? EditUsernameAllowed { get; set; }

        [Input("emailTheme")]
        public Input<string>? EmailTheme { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("internalId")]
        public Input<string>? InternalId { get; set; }

        [Input("internationalization")]
        public Input<Inputs.RealmInternationalizationGetArgs>? Internationalization { get; set; }

        [Input("loginTheme")]
        public Input<string>? LoginTheme { get; set; }

        [Input("loginWithEmailAllowed")]
        public Input<bool>? LoginWithEmailAllowed { get; set; }

        [Input("offlineSessionIdleTimeout")]
        public Input<string>? OfflineSessionIdleTimeout { get; set; }

        [Input("offlineSessionMaxLifespan")]
        public Input<string>? OfflineSessionMaxLifespan { get; set; }

        /// <summary>
        /// String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
        /// can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
        /// and notUsername(undefined)"
        /// </summary>
        [Input("passwordPolicy")]
        public Input<string>? PasswordPolicy { get; set; }

        [Input("realm")]
        public Input<string>? RealmName { get; set; }

        [Input("refreshTokenMaxReuse")]
        public Input<int>? RefreshTokenMaxReuse { get; set; }

        [Input("registrationAllowed")]
        public Input<bool>? RegistrationAllowed { get; set; }

        [Input("registrationEmailAsUsername")]
        public Input<bool>? RegistrationEmailAsUsername { get; set; }

        /// <summary>
        /// Which flow should be used for RegistrationFlow
        /// </summary>
        [Input("registrationFlow")]
        public Input<string>? RegistrationFlow { get; set; }

        [Input("rememberMe")]
        public Input<bool>? RememberMe { get; set; }

        /// <summary>
        /// Which flow should be used for ResetCredentialsFlow
        /// </summary>
        [Input("resetCredentialsFlow")]
        public Input<string>? ResetCredentialsFlow { get; set; }

        [Input("resetPasswordAllowed")]
        public Input<bool>? ResetPasswordAllowed { get; set; }

        [Input("revokeRefreshToken")]
        public Input<bool>? RevokeRefreshToken { get; set; }

        [Input("securityDefenses")]
        public Input<Inputs.RealmSecurityDefensesGetArgs>? SecurityDefenses { get; set; }

        [Input("smtpServer")]
        public Input<Inputs.RealmSmtpServerGetArgs>? SmtpServer { get; set; }

        /// <summary>
        /// SSL Required: Values can be 'none', 'external' or 'all'.
        /// </summary>
        [Input("sslRequired")]
        public Input<string>? SslRequired { get; set; }

        [Input("ssoSessionIdleTimeout")]
        public Input<string>? SsoSessionIdleTimeout { get; set; }

        [Input("ssoSessionMaxLifespan")]
        public Input<string>? SsoSessionMaxLifespan { get; set; }

        [Input("userManagedAccess")]
        public Input<bool>? UserManagedAccess { get; set; }

        [Input("verifyEmail")]
        public Input<bool>? VerifyEmail { get; set; }

        public RealmState()
        {
        }
    }
}
