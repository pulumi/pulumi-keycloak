// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// Allows for creating and managing Realms within Keycloak.
    /// 
    /// A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated
    /// from multiple sources.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///         DisplayName = "my realm",
    ///         DisplayNameHtml = "&lt;b&gt;my realm&lt;/b&gt;",
    ///         LoginTheme = "base",
    ///         AccessCodeLifespan = "1h",
    ///         SslRequired = "external",
    ///         PasswordPolicy = "upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername",
    ///         Attributes = 
    ///         {
    ///             { "mycustomAttribute", "myCustomValue" },
    ///         },
    ///         SmtpServer = new Keycloak.Inputs.RealmSmtpServerArgs
    ///         {
    ///             Host = "smtp.example.com",
    ///             From = "example@example.com",
    ///             Auth = new Keycloak.Inputs.RealmSmtpServerAuthArgs
    ///             {
    ///                 Username = "tom",
    ///                 Password = "password",
    ///             },
    ///         },
    ///         Internationalization = new Keycloak.Inputs.RealmInternationalizationArgs
    ///         {
    ///             SupportedLocales = new[]
    ///             {
    ///                 "en",
    ///                 "de",
    ///                 "es",
    ///             },
    ///             DefaultLocale = "en",
    ///         },
    ///         SecurityDefenses = new Keycloak.Inputs.RealmSecurityDefensesArgs
    ///         {
    ///             Headers = new Keycloak.Inputs.RealmSecurityDefensesHeadersArgs
    ///             {
    ///                 XFrameOptions = "DENY",
    ///                 ContentSecurityPolicy = "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
    ///                 ContentSecurityPolicyReportOnly = "",
    ///                 XContentTypeOptions = "nosniff",
    ///                 XRobotsTag = "none",
    ///                 XXssProtection = "1; mode=block",
    ///                 StrictTransportSecurity = "max-age=31536000; includeSubDomains",
    ///             },
    ///             BruteForceDetection = new Keycloak.Inputs.RealmSecurityDefensesBruteForceDetectionArgs
    ///             {
    ///                 PermanentLockout = false,
    ///                 MaxLoginFailures = 30,
    ///                 WaitIncrementSeconds = 60,
    ///                 QuickLoginCheckMilliSeconds = 1000,
    ///                 MinimumQuickLoginWaitSeconds = 60,
    ///                 MaxFailureWaitSeconds = 900,
    ///                 FailureResetTimeSeconds = 43200,
    ///             },
    ///         },
    ///         WebAuthnPolicy = new Keycloak.Inputs.RealmWebAuthnPolicyArgs
    ///         {
    ///             RelyingPartyEntityName = "Example",
    ///             RelyingPartyId = "keycloak.example.com",
    ///             SignatureAlgorithms = new[]
    ///             {
    ///                 "ES256",
    ///                 "RS256",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Default Client Scopes
    /// 
    /// - `default_default_client_scopes` - (Optional) A list of default `default client scopes` to be used for client definitions. Defaults to `[]` or keycloak's built-in default `default client-scopes`.
    /// - `default_optional_client_scopes` - (Optional) A list of default `optional client scopes` to be used for client definitions. Defaults to `[]` or keycloak's built-in default `optional client-scopes`.
    /// 
    /// ## Import
    /// 
    /// Realms can be imported using their name.
    /// 
    /// Example:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import keycloak:index/realm:Realm realm my-realm
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:index/realm:Realm")]
    public partial class Realm : global::Pulumi.CustomResource
    {
        [Output("accessCodeLifespan")]
        public Output<string> AccessCodeLifespan { get; private set; } = null!;

        [Output("accessCodeLifespanLogin")]
        public Output<string> AccessCodeLifespanLogin { get; private set; } = null!;

        [Output("accessCodeLifespanUserAction")]
        public Output<string> AccessCodeLifespanUserAction { get; private set; } = null!;

        [Output("accessTokenLifespan")]
        public Output<string> AccessTokenLifespan { get; private set; } = null!;

        [Output("accessTokenLifespanForImplicitFlow")]
        public Output<string> AccessTokenLifespanForImplicitFlow { get; private set; } = null!;

        [Output("accountTheme")]
        public Output<string?> AccountTheme { get; private set; } = null!;

        [Output("actionTokenGeneratedByAdminLifespan")]
        public Output<string> ActionTokenGeneratedByAdminLifespan { get; private set; } = null!;

        [Output("actionTokenGeneratedByUserLifespan")]
        public Output<string> ActionTokenGeneratedByUserLifespan { get; private set; } = null!;

        [Output("adminTheme")]
        public Output<string?> AdminTheme { get; private set; } = null!;

        /// <summary>
        /// A map of custom attributes to add to the realm.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, string>?> Attributes { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for BrowserFlow
        /// </summary>
        [Output("browserFlow")]
        public Output<string> BrowserFlow { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for ClientAuthenticationFlow
        /// </summary>
        [Output("clientAuthenticationFlow")]
        public Output<string> ClientAuthenticationFlow { get; private set; } = null!;

        [Output("clientSessionIdleTimeout")]
        public Output<string> ClientSessionIdleTimeout { get; private set; } = null!;

        [Output("clientSessionMaxLifespan")]
        public Output<string> ClientSessionMaxLifespan { get; private set; } = null!;

        [Output("defaultDefaultClientScopes")]
        public Output<ImmutableArray<string>> DefaultDefaultClientScopes { get; private set; } = null!;

        [Output("defaultOptionalClientScopes")]
        public Output<ImmutableArray<string>> DefaultOptionalClientScopes { get; private set; } = null!;

        [Output("defaultSignatureAlgorithm")]
        public Output<string?> DefaultSignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for DirectGrantFlow
        /// </summary>
        [Output("directGrantFlow")]
        public Output<string> DirectGrantFlow { get; private set; } = null!;

        /// <summary>
        /// The display name for the realm that is shown when logging in to the admin console.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
        /// </summary>
        [Output("displayNameHtml")]
        public Output<string?> DisplayNameHtml { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for DockerAuthenticationFlow
        /// </summary>
        [Output("dockerAuthenticationFlow")]
        public Output<string> DockerAuthenticationFlow { get; private set; } = null!;

        [Output("duplicateEmailsAllowed")]
        public Output<bool> DuplicateEmailsAllowed { get; private set; } = null!;

        [Output("editUsernameAllowed")]
        public Output<bool> EditUsernameAllowed { get; private set; } = null!;

        [Output("emailTheme")]
        public Output<string?> EmailTheme { get; private set; } = null!;

        /// <summary>
        /// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
        /// </summary>
        [Output("internalId")]
        public Output<string> InternalId { get; private set; } = null!;

        [Output("internationalization")]
        public Output<Outputs.RealmInternationalization?> Internationalization { get; private set; } = null!;

        [Output("loginTheme")]
        public Output<string?> LoginTheme { get; private set; } = null!;

        [Output("loginWithEmailAllowed")]
        public Output<bool> LoginWithEmailAllowed { get; private set; } = null!;

        [Output("oauth2DeviceCodeLifespan")]
        public Output<string> Oauth2DeviceCodeLifespan { get; private set; } = null!;

        [Output("oauth2DevicePollingInterval")]
        public Output<int> Oauth2DevicePollingInterval { get; private set; } = null!;

        [Output("offlineSessionIdleTimeout")]
        public Output<string> OfflineSessionIdleTimeout { get; private set; } = null!;

        [Output("offlineSessionMaxLifespan")]
        public Output<string> OfflineSessionMaxLifespan { get; private set; } = null!;

        [Output("offlineSessionMaxLifespanEnabled")]
        public Output<bool?> OfflineSessionMaxLifespanEnabled { get; private set; } = null!;

        [Output("otpPolicy")]
        public Output<Outputs.RealmOtpPolicy> OtpPolicy { get; private set; } = null!;

        /// <summary>
        /// String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
        /// can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
        /// and notUsername(undefined)"
        /// </summary>
        [Output("passwordPolicy")]
        public Output<string?> PasswordPolicy { get; private set; } = null!;

        /// <summary>
        /// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
        /// </summary>
        [Output("realm")]
        public Output<string> RealmName { get; private set; } = null!;

        [Output("refreshTokenMaxReuse")]
        public Output<int?> RefreshTokenMaxReuse { get; private set; } = null!;

        [Output("registrationAllowed")]
        public Output<bool> RegistrationAllowed { get; private set; } = null!;

        [Output("registrationEmailAsUsername")]
        public Output<bool> RegistrationEmailAsUsername { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for RegistrationFlow
        /// </summary>
        [Output("registrationFlow")]
        public Output<string> RegistrationFlow { get; private set; } = null!;

        [Output("rememberMe")]
        public Output<bool> RememberMe { get; private set; } = null!;

        /// <summary>
        /// Which flow should be used for ResetCredentialsFlow
        /// </summary>
        [Output("resetCredentialsFlow")]
        public Output<string> ResetCredentialsFlow { get; private set; } = null!;

        [Output("resetPasswordAllowed")]
        public Output<bool> ResetPasswordAllowed { get; private set; } = null!;

        [Output("revokeRefreshToken")]
        public Output<bool?> RevokeRefreshToken { get; private set; } = null!;

        [Output("securityDefenses")]
        public Output<Outputs.RealmSecurityDefenses?> SecurityDefenses { get; private set; } = null!;

        [Output("smtpServer")]
        public Output<Outputs.RealmSmtpServer?> SmtpServer { get; private set; } = null!;

        /// <summary>
        /// SSL Required: Values can be 'none', 'external' or 'all'.
        /// </summary>
        [Output("sslRequired")]
        public Output<string?> SslRequired { get; private set; } = null!;

        [Output("ssoSessionIdleTimeout")]
        public Output<string> SsoSessionIdleTimeout { get; private set; } = null!;

        [Output("ssoSessionIdleTimeoutRememberMe")]
        public Output<string> SsoSessionIdleTimeoutRememberMe { get; private set; } = null!;

        [Output("ssoSessionMaxLifespan")]
        public Output<string> SsoSessionMaxLifespan { get; private set; } = null!;

        [Output("ssoSessionMaxLifespanRememberMe")]
        public Output<string> SsoSessionMaxLifespanRememberMe { get; private set; } = null!;

        /// <summary>
        /// When `true`, users are allowed to manage their own resources. Defaults to `false`.
        /// </summary>
        [Output("userManagedAccess")]
        public Output<bool?> UserManagedAccess { get; private set; } = null!;

        [Output("verifyEmail")]
        public Output<bool> VerifyEmail { get; private set; } = null!;

        [Output("webAuthnPasswordlessPolicy")]
        public Output<Outputs.RealmWebAuthnPasswordlessPolicy> WebAuthnPasswordlessPolicy { get; private set; } = null!;

        [Output("webAuthnPolicy")]
        public Output<Outputs.RealmWebAuthnPolicy> WebAuthnPolicy { get; private set; } = null!;


        /// <summary>
        /// Create a Realm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Realm(string name, RealmArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/realm:Realm", name, args ?? new RealmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Realm(string name, Input<string> id, RealmState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/realm:Realm", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Realm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Realm Get(string name, Input<string> id, RealmState? state = null, CustomResourceOptions? options = null)
        {
            return new Realm(name, id, state, options);
        }
    }

    public sealed class RealmArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessCodeLifespan")]
        public Input<string>? AccessCodeLifespan { get; set; }

        [Input("accessCodeLifespanLogin")]
        public Input<string>? AccessCodeLifespanLogin { get; set; }

        [Input("accessCodeLifespanUserAction")]
        public Input<string>? AccessCodeLifespanUserAction { get; set; }

        [Input("accessTokenLifespan")]
        public Input<string>? AccessTokenLifespan { get; set; }

        [Input("accessTokenLifespanForImplicitFlow")]
        public Input<string>? AccessTokenLifespanForImplicitFlow { get; set; }

        [Input("accountTheme")]
        public Input<string>? AccountTheme { get; set; }

        [Input("actionTokenGeneratedByAdminLifespan")]
        public Input<string>? ActionTokenGeneratedByAdminLifespan { get; set; }

        [Input("actionTokenGeneratedByUserLifespan")]
        public Input<string>? ActionTokenGeneratedByUserLifespan { get; set; }

        [Input("adminTheme")]
        public Input<string>? AdminTheme { get; set; }

        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A map of custom attributes to add to the realm.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// Which flow should be used for BrowserFlow
        /// </summary>
        [Input("browserFlow")]
        public Input<string>? BrowserFlow { get; set; }

        /// <summary>
        /// Which flow should be used for ClientAuthenticationFlow
        /// </summary>
        [Input("clientAuthenticationFlow")]
        public Input<string>? ClientAuthenticationFlow { get; set; }

        [Input("clientSessionIdleTimeout")]
        public Input<string>? ClientSessionIdleTimeout { get; set; }

        [Input("clientSessionMaxLifespan")]
        public Input<string>? ClientSessionMaxLifespan { get; set; }

        [Input("defaultDefaultClientScopes")]
        private InputList<string>? _defaultDefaultClientScopes;
        public InputList<string> DefaultDefaultClientScopes
        {
            get => _defaultDefaultClientScopes ?? (_defaultDefaultClientScopes = new InputList<string>());
            set => _defaultDefaultClientScopes = value;
        }

        [Input("defaultOptionalClientScopes")]
        private InputList<string>? _defaultOptionalClientScopes;
        public InputList<string> DefaultOptionalClientScopes
        {
            get => _defaultOptionalClientScopes ?? (_defaultOptionalClientScopes = new InputList<string>());
            set => _defaultOptionalClientScopes = value;
        }

        [Input("defaultSignatureAlgorithm")]
        public Input<string>? DefaultSignatureAlgorithm { get; set; }

        /// <summary>
        /// Which flow should be used for DirectGrantFlow
        /// </summary>
        [Input("directGrantFlow")]
        public Input<string>? DirectGrantFlow { get; set; }

        /// <summary>
        /// The display name for the realm that is shown when logging in to the admin console.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
        /// </summary>
        [Input("displayNameHtml")]
        public Input<string>? DisplayNameHtml { get; set; }

        /// <summary>
        /// Which flow should be used for DockerAuthenticationFlow
        /// </summary>
        [Input("dockerAuthenticationFlow")]
        public Input<string>? DockerAuthenticationFlow { get; set; }

        [Input("duplicateEmailsAllowed")]
        public Input<bool>? DuplicateEmailsAllowed { get; set; }

        [Input("editUsernameAllowed")]
        public Input<bool>? EditUsernameAllowed { get; set; }

        [Input("emailTheme")]
        public Input<string>? EmailTheme { get; set; }

        /// <summary>
        /// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
        /// </summary>
        [Input("internalId")]
        public Input<string>? InternalId { get; set; }

        [Input("internationalization")]
        public Input<Inputs.RealmInternationalizationArgs>? Internationalization { get; set; }

        [Input("loginTheme")]
        public Input<string>? LoginTheme { get; set; }

        [Input("loginWithEmailAllowed")]
        public Input<bool>? LoginWithEmailAllowed { get; set; }

        [Input("oauth2DeviceCodeLifespan")]
        public Input<string>? Oauth2DeviceCodeLifespan { get; set; }

        [Input("oauth2DevicePollingInterval")]
        public Input<int>? Oauth2DevicePollingInterval { get; set; }

        [Input("offlineSessionIdleTimeout")]
        public Input<string>? OfflineSessionIdleTimeout { get; set; }

        [Input("offlineSessionMaxLifespan")]
        public Input<string>? OfflineSessionMaxLifespan { get; set; }

        [Input("offlineSessionMaxLifespanEnabled")]
        public Input<bool>? OfflineSessionMaxLifespanEnabled { get; set; }

        [Input("otpPolicy")]
        public Input<Inputs.RealmOtpPolicyArgs>? OtpPolicy { get; set; }

        /// <summary>
        /// String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
        /// can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
        /// and notUsername(undefined)"
        /// </summary>
        [Input("passwordPolicy")]
        public Input<string>? PasswordPolicy { get; set; }

        /// <summary>
        /// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> RealmName { get; set; } = null!;

        [Input("refreshTokenMaxReuse")]
        public Input<int>? RefreshTokenMaxReuse { get; set; }

        [Input("registrationAllowed")]
        public Input<bool>? RegistrationAllowed { get; set; }

        [Input("registrationEmailAsUsername")]
        public Input<bool>? RegistrationEmailAsUsername { get; set; }

        /// <summary>
        /// Which flow should be used for RegistrationFlow
        /// </summary>
        [Input("registrationFlow")]
        public Input<string>? RegistrationFlow { get; set; }

        [Input("rememberMe")]
        public Input<bool>? RememberMe { get; set; }

        /// <summary>
        /// Which flow should be used for ResetCredentialsFlow
        /// </summary>
        [Input("resetCredentialsFlow")]
        public Input<string>? ResetCredentialsFlow { get; set; }

        [Input("resetPasswordAllowed")]
        public Input<bool>? ResetPasswordAllowed { get; set; }

        [Input("revokeRefreshToken")]
        public Input<bool>? RevokeRefreshToken { get; set; }

        [Input("securityDefenses")]
        public Input<Inputs.RealmSecurityDefensesArgs>? SecurityDefenses { get; set; }

        [Input("smtpServer")]
        public Input<Inputs.RealmSmtpServerArgs>? SmtpServer { get; set; }

        /// <summary>
        /// SSL Required: Values can be 'none', 'external' or 'all'.
        /// </summary>
        [Input("sslRequired")]
        public Input<string>? SslRequired { get; set; }

        [Input("ssoSessionIdleTimeout")]
        public Input<string>? SsoSessionIdleTimeout { get; set; }

        [Input("ssoSessionIdleTimeoutRememberMe")]
        public Input<string>? SsoSessionIdleTimeoutRememberMe { get; set; }

        [Input("ssoSessionMaxLifespan")]
        public Input<string>? SsoSessionMaxLifespan { get; set; }

        [Input("ssoSessionMaxLifespanRememberMe")]
        public Input<string>? SsoSessionMaxLifespanRememberMe { get; set; }

        /// <summary>
        /// When `true`, users are allowed to manage their own resources. Defaults to `false`.
        /// </summary>
        [Input("userManagedAccess")]
        public Input<bool>? UserManagedAccess { get; set; }

        [Input("verifyEmail")]
        public Input<bool>? VerifyEmail { get; set; }

        [Input("webAuthnPasswordlessPolicy")]
        public Input<Inputs.RealmWebAuthnPasswordlessPolicyArgs>? WebAuthnPasswordlessPolicy { get; set; }

        [Input("webAuthnPolicy")]
        public Input<Inputs.RealmWebAuthnPolicyArgs>? WebAuthnPolicy { get; set; }

        public RealmArgs()
        {
        }
        public static new RealmArgs Empty => new RealmArgs();
    }

    public sealed class RealmState : global::Pulumi.ResourceArgs
    {
        [Input("accessCodeLifespan")]
        public Input<string>? AccessCodeLifespan { get; set; }

        [Input("accessCodeLifespanLogin")]
        public Input<string>? AccessCodeLifespanLogin { get; set; }

        [Input("accessCodeLifespanUserAction")]
        public Input<string>? AccessCodeLifespanUserAction { get; set; }

        [Input("accessTokenLifespan")]
        public Input<string>? AccessTokenLifespan { get; set; }

        [Input("accessTokenLifespanForImplicitFlow")]
        public Input<string>? AccessTokenLifespanForImplicitFlow { get; set; }

        [Input("accountTheme")]
        public Input<string>? AccountTheme { get; set; }

        [Input("actionTokenGeneratedByAdminLifespan")]
        public Input<string>? ActionTokenGeneratedByAdminLifespan { get; set; }

        [Input("actionTokenGeneratedByUserLifespan")]
        public Input<string>? ActionTokenGeneratedByUserLifespan { get; set; }

        [Input("adminTheme")]
        public Input<string>? AdminTheme { get; set; }

        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A map of custom attributes to add to the realm.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// Which flow should be used for BrowserFlow
        /// </summary>
        [Input("browserFlow")]
        public Input<string>? BrowserFlow { get; set; }

        /// <summary>
        /// Which flow should be used for ClientAuthenticationFlow
        /// </summary>
        [Input("clientAuthenticationFlow")]
        public Input<string>? ClientAuthenticationFlow { get; set; }

        [Input("clientSessionIdleTimeout")]
        public Input<string>? ClientSessionIdleTimeout { get; set; }

        [Input("clientSessionMaxLifespan")]
        public Input<string>? ClientSessionMaxLifespan { get; set; }

        [Input("defaultDefaultClientScopes")]
        private InputList<string>? _defaultDefaultClientScopes;
        public InputList<string> DefaultDefaultClientScopes
        {
            get => _defaultDefaultClientScopes ?? (_defaultDefaultClientScopes = new InputList<string>());
            set => _defaultDefaultClientScopes = value;
        }

        [Input("defaultOptionalClientScopes")]
        private InputList<string>? _defaultOptionalClientScopes;
        public InputList<string> DefaultOptionalClientScopes
        {
            get => _defaultOptionalClientScopes ?? (_defaultOptionalClientScopes = new InputList<string>());
            set => _defaultOptionalClientScopes = value;
        }

        [Input("defaultSignatureAlgorithm")]
        public Input<string>? DefaultSignatureAlgorithm { get; set; }

        /// <summary>
        /// Which flow should be used for DirectGrantFlow
        /// </summary>
        [Input("directGrantFlow")]
        public Input<string>? DirectGrantFlow { get; set; }

        /// <summary>
        /// The display name for the realm that is shown when logging in to the admin console.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
        /// </summary>
        [Input("displayNameHtml")]
        public Input<string>? DisplayNameHtml { get; set; }

        /// <summary>
        /// Which flow should be used for DockerAuthenticationFlow
        /// </summary>
        [Input("dockerAuthenticationFlow")]
        public Input<string>? DockerAuthenticationFlow { get; set; }

        [Input("duplicateEmailsAllowed")]
        public Input<bool>? DuplicateEmailsAllowed { get; set; }

        [Input("editUsernameAllowed")]
        public Input<bool>? EditUsernameAllowed { get; set; }

        [Input("emailTheme")]
        public Input<string>? EmailTheme { get; set; }

        /// <summary>
        /// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
        /// </summary>
        [Input("internalId")]
        public Input<string>? InternalId { get; set; }

        [Input("internationalization")]
        public Input<Inputs.RealmInternationalizationGetArgs>? Internationalization { get; set; }

        [Input("loginTheme")]
        public Input<string>? LoginTheme { get; set; }

        [Input("loginWithEmailAllowed")]
        public Input<bool>? LoginWithEmailAllowed { get; set; }

        [Input("oauth2DeviceCodeLifespan")]
        public Input<string>? Oauth2DeviceCodeLifespan { get; set; }

        [Input("oauth2DevicePollingInterval")]
        public Input<int>? Oauth2DevicePollingInterval { get; set; }

        [Input("offlineSessionIdleTimeout")]
        public Input<string>? OfflineSessionIdleTimeout { get; set; }

        [Input("offlineSessionMaxLifespan")]
        public Input<string>? OfflineSessionMaxLifespan { get; set; }

        [Input("offlineSessionMaxLifespanEnabled")]
        public Input<bool>? OfflineSessionMaxLifespanEnabled { get; set; }

        [Input("otpPolicy")]
        public Input<Inputs.RealmOtpPolicyGetArgs>? OtpPolicy { get; set; }

        /// <summary>
        /// String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
        /// can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
        /// and notUsername(undefined)"
        /// </summary>
        [Input("passwordPolicy")]
        public Input<string>? PasswordPolicy { get; set; }

        /// <summary>
        /// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
        /// </summary>
        [Input("realm")]
        public Input<string>? RealmName { get; set; }

        [Input("refreshTokenMaxReuse")]
        public Input<int>? RefreshTokenMaxReuse { get; set; }

        [Input("registrationAllowed")]
        public Input<bool>? RegistrationAllowed { get; set; }

        [Input("registrationEmailAsUsername")]
        public Input<bool>? RegistrationEmailAsUsername { get; set; }

        /// <summary>
        /// Which flow should be used for RegistrationFlow
        /// </summary>
        [Input("registrationFlow")]
        public Input<string>? RegistrationFlow { get; set; }

        [Input("rememberMe")]
        public Input<bool>? RememberMe { get; set; }

        /// <summary>
        /// Which flow should be used for ResetCredentialsFlow
        /// </summary>
        [Input("resetCredentialsFlow")]
        public Input<string>? ResetCredentialsFlow { get; set; }

        [Input("resetPasswordAllowed")]
        public Input<bool>? ResetPasswordAllowed { get; set; }

        [Input("revokeRefreshToken")]
        public Input<bool>? RevokeRefreshToken { get; set; }

        [Input("securityDefenses")]
        public Input<Inputs.RealmSecurityDefensesGetArgs>? SecurityDefenses { get; set; }

        [Input("smtpServer")]
        public Input<Inputs.RealmSmtpServerGetArgs>? SmtpServer { get; set; }

        /// <summary>
        /// SSL Required: Values can be 'none', 'external' or 'all'.
        /// </summary>
        [Input("sslRequired")]
        public Input<string>? SslRequired { get; set; }

        [Input("ssoSessionIdleTimeout")]
        public Input<string>? SsoSessionIdleTimeout { get; set; }

        [Input("ssoSessionIdleTimeoutRememberMe")]
        public Input<string>? SsoSessionIdleTimeoutRememberMe { get; set; }

        [Input("ssoSessionMaxLifespan")]
        public Input<string>? SsoSessionMaxLifespan { get; set; }

        [Input("ssoSessionMaxLifespanRememberMe")]
        public Input<string>? SsoSessionMaxLifespanRememberMe { get; set; }

        /// <summary>
        /// When `true`, users are allowed to manage their own resources. Defaults to `false`.
        /// </summary>
        [Input("userManagedAccess")]
        public Input<bool>? UserManagedAccess { get; set; }

        [Input("verifyEmail")]
        public Input<bool>? VerifyEmail { get; set; }

        [Input("webAuthnPasswordlessPolicy")]
        public Input<Inputs.RealmWebAuthnPasswordlessPolicyGetArgs>? WebAuthnPasswordlessPolicy { get; set; }

        [Input("webAuthnPolicy")]
        public Input<Inputs.RealmWebAuthnPolicyGetArgs>? WebAuthnPolicy { get; set; }

        public RealmState()
        {
        }
        public static new RealmState Empty => new RealmState();
    }
}
