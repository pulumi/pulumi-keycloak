// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    public static class GetOrganization
    {
        /// <summary>
        /// This data source can be used to fetch properties of a Keycloak organization for
        /// usage with other resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realm = Keycloak.GetRealm.Invoke(new()
        ///     {
        ///         Realm = "my-realm",
        ///     });
        /// 
        ///     var organization = Keycloak.GetOrganization.Invoke(new()
        ///     {
        ///         Realm = realm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Name = "my-org",
        ///     });
        /// 
        ///     // use the data source
        ///     var realmIdentityProvider = new Keycloak.Oidc.IdentityProvider("realm_identity_provider", new()
        ///     {
        ///         Realm = realm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Alias = "my-idp",
        ///         AuthorizationUrl = "https://authorizationurl.com",
        ///         ClientId = "clientID",
        ///         ClientSecret = "clientSecret",
        ///         TokenUrl = "https://tokenurl.com",
        ///         OrganizationId = organization.Apply(getOrganizationResult =&gt; getOrganizationResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOrganizationResult> InvokeAsync(GetOrganizationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationResult>("keycloak:index/getOrganization:getOrganization", args ?? new GetOrganizationArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch properties of a Keycloak organization for
        /// usage with other resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realm = Keycloak.GetRealm.Invoke(new()
        ///     {
        ///         Realm = "my-realm",
        ///     });
        /// 
        ///     var organization = Keycloak.GetOrganization.Invoke(new()
        ///     {
        ///         Realm = realm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Name = "my-org",
        ///     });
        /// 
        ///     // use the data source
        ///     var realmIdentityProvider = new Keycloak.Oidc.IdentityProvider("realm_identity_provider", new()
        ///     {
        ///         Realm = realm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Alias = "my-idp",
        ///         AuthorizationUrl = "https://authorizationurl.com",
        ///         ClientId = "clientID",
        ///         ClientSecret = "clientSecret",
        ///         TokenUrl = "https://tokenurl.com",
        ///         OrganizationId = organization.Apply(getOrganizationResult =&gt; getOrganizationResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrganizationResult> Invoke(GetOrganizationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationResult>("keycloak:index/getOrganization:getOrganization", args ?? new GetOrganizationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch properties of a Keycloak organization for
        /// usage with other resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realm = Keycloak.GetRealm.Invoke(new()
        ///     {
        ///         Realm = "my-realm",
        ///     });
        /// 
        ///     var organization = Keycloak.GetOrganization.Invoke(new()
        ///     {
        ///         Realm = realm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Name = "my-org",
        ///     });
        /// 
        ///     // use the data source
        ///     var realmIdentityProvider = new Keycloak.Oidc.IdentityProvider("realm_identity_provider", new()
        ///     {
        ///         Realm = realm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Alias = "my-idp",
        ///         AuthorizationUrl = "https://authorizationurl.com",
        ///         ClientId = "clientID",
        ///         ClientSecret = "clientSecret",
        ///         TokenUrl = "https://tokenurl.com",
        ///         OrganizationId = organization.Apply(getOrganizationResult =&gt; getOrganizationResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrganizationResult> Invoke(GetOrganizationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationResult>("keycloak:index/getOrganization:getOrganization", args ?? new GetOrganizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The organization name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the realm this organization exists within.
        /// </summary>
        [Input("realm", required: true)]
        public string Realm { get; set; } = null!;

        public GetOrganizationArgs()
        {
        }
        public static new GetOrganizationArgs Empty => new GetOrganizationArgs();
    }

    public sealed class GetOrganizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The organization name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the realm this organization exists within.
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        public GetOrganizationInvokeArgs()
        {
        }
        public static new GetOrganizationInvokeArgs Empty => new GetOrganizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationResult
    {
        public readonly string Alias;
        public readonly ImmutableDictionary<string, string> Attributes;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetOrganizationDomainResult> Domains;
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string Realm;
        public readonly string RedirectUrl;

        [OutputConstructor]
        private GetOrganizationResult(
            string alias,

            ImmutableDictionary<string, string> attributes,

            string description,

            ImmutableArray<Outputs.GetOrganizationDomainResult> domains,

            bool enabled,

            string id,

            string name,

            string realm,

            string redirectUrl)
        {
            Alias = alias;
            Attributes = attributes;
            Description = description;
            Domains = domains;
            Enabled = enabled;
            Id = id;
            Name = name;
            Realm = realm;
            RedirectUrl = redirectUrl;
        }
    }
}
