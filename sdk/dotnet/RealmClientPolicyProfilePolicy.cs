// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// Allows for managing Realm Client Policy Profile Policies.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///     });
    /// 
    ///     var profile = new Keycloak.RealmClientPolicyProfile("profile", new()
    ///     {
    ///         Name = "my-profile",
    ///         RealmId = realm.Id,
    ///         Description = "Some desc",
    ///         Executors = new[]
    ///         {
    ///             new Keycloak.Inputs.RealmClientPolicyProfileExecutorArgs
    ///             {
    ///                 Name = "intent-client-bind-checker",
    ///                 Configuration = 
    ///                 {
    ///                     { "auto-configure", "true" },
    ///                 },
    ///             },
    ///             new Keycloak.Inputs.RealmClientPolicyProfileExecutorArgs
    ///             {
    ///                 Name = "secret-rotation",
    ///                 Configuration = 
    ///                 {
    ///                     { "expiration-period", "2505600" },
    ///                     { "rotated-expiration-period", "172800" },
    ///                     { "remaining-rotation-period", "864000" },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var policy = new Keycloak.RealmClientPolicyProfilePolicy("policy", new()
    ///     {
    ///         Name = "my-profile",
    ///         RealmId = realm.Id,
    ///         Description = "Some desc",
    ///         Profiles = new[]
    ///         {
    ///             profile.Name,
    ///         },
    ///         Conditions = new[]
    ///         {
    ///             new Keycloak.Inputs.RealmClientPolicyProfilePolicyConditionArgs
    ///             {
    ///                 Name = "client-type",
    ///                 Configuration = 
    ///                 {
    ///                     { "protocol", "openid-connect" },
    ///                 },
    ///             },
    ///             new Keycloak.Inputs.RealmClientPolicyProfilePolicyConditionArgs
    ///             {
    ///                 Name = "client-attributes",
    ///                 Configuration = 
    ///                 {
    ///                     { "is-negative-logic", "false" },
    ///                     { "attributes", JsonSerializer.Serialize(new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["key"] = "test-key",
    ///                             ["value"] = "test-value",
    ///                         },
    ///                     }) },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Attribute Arguments
    /// 
    /// - `Name` - (Required) The name of the attribute.
    /// - `RealmId` - (Required) The realm id.
    /// - `Condition` - (Optional) An ordered list of condition
    /// 
    /// #### Condition Arguments
    /// 
    /// - `Name` - (Required) The name of the executor. NOTE! The executor needs to exist
    /// - `Configuration` - (Optional) - A map of configuration values
    /// 
    /// ## Import
    /// 
    /// This resource currently does not support importing.
    /// </summary>
    [KeycloakResourceType("keycloak:index/realmClientPolicyProfilePolicy:RealmClientPolicyProfilePolicy")]
    public partial class RealmClientPolicyProfilePolicy : global::Pulumi.CustomResource
    {
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.RealmClientPolicyProfilePolicyCondition>> Conditions { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("profiles")]
        public Output<ImmutableArray<string>> Profiles { get; private set; } = null!;

        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;


        /// <summary>
        /// Create a RealmClientPolicyProfilePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RealmClientPolicyProfilePolicy(string name, RealmClientPolicyProfilePolicyArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/realmClientPolicyProfilePolicy:RealmClientPolicyProfilePolicy", name, args ?? new RealmClientPolicyProfilePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RealmClientPolicyProfilePolicy(string name, Input<string> id, RealmClientPolicyProfilePolicyState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/realmClientPolicyProfilePolicy:RealmClientPolicyProfilePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RealmClientPolicyProfilePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RealmClientPolicyProfilePolicy Get(string name, Input<string> id, RealmClientPolicyProfilePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new RealmClientPolicyProfilePolicy(name, id, state, options);
        }
    }

    public sealed class RealmClientPolicyProfilePolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.RealmClientPolicyProfilePolicyConditionArgs>? _conditions;
        public InputList<Inputs.RealmClientPolicyProfilePolicyConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.RealmClientPolicyProfilePolicyConditionArgs>());
            set => _conditions = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("profiles", required: true)]
        private InputList<string>? _profiles;
        public InputList<string> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<string>());
            set => _profiles = value;
        }

        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public RealmClientPolicyProfilePolicyArgs()
        {
        }
        public static new RealmClientPolicyProfilePolicyArgs Empty => new RealmClientPolicyProfilePolicyArgs();
    }

    public sealed class RealmClientPolicyProfilePolicyState : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.RealmClientPolicyProfilePolicyConditionGetArgs>? _conditions;
        public InputList<Inputs.RealmClientPolicyProfilePolicyConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.RealmClientPolicyProfilePolicyConditionGetArgs>());
            set => _conditions = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("profiles")]
        private InputList<string>? _profiles;
        public InputList<string> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<string>());
            set => _profiles = value;
        }

        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        public RealmClientPolicyProfilePolicyState()
        {
        }
        public static new RealmClientPolicyProfilePolicyState Empty => new RealmClientPolicyProfilePolicyState();
    }
}
