// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// Allow for creating and managing Organizations within Keycloak.
    /// 
    /// Attributes can also be defined on Groups.
    /// 
    /// Linkage with identity providers is managed with the identity provider resources.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var @this = new Keycloak.Organization("this", new()
    ///     {
    ///         Realm = realm.Name,
    ///         Name = "org",
    ///         Alias = "org",
    ///         Enabled = true,
    ///         Domains = new[]
    ///         {
    ///             new Keycloak.Inputs.OrganizationDomainArgs
    ///             {
    ///                 Name = "example.com",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var thisIdentityProvider = new Keycloak.Oidc.IdentityProvider("this", new()
    ///     {
    ///         Realm = realm.Name,
    ///         Alias = "my-idp",
    ///         AuthorizationUrl = "https://authorizationurl.com",
    ///         ClientId = "clientID",
    ///         ClientSecret = "clientSecret",
    ///         TokenUrl = "https://tokenurl.com",
    ///         OrganizationId = @this.Id,
    ///         OrgDomain = "example.com",
    ///         OrgRedirectModeEmailMatches = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Organizations can be imported using the format `{{realm_id}}/{{organization_id}}`, where `organization_id` is the unique ID that Keycloak
    /// 
    /// assigns to the organizations upon creation. This value can be found in the URI when editing this organization in the GUI, and is typically a GUID.
    /// 
    /// Example:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import keycloak:index/organization:Organization this my-realm/cec54914-b702-4c7b-9431-b407817d059a
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:index/organization:Organization")]
    public partial class Organization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, string>> Attributes { get; private set; } = null!;

        /// <summary>
        /// The description of the organization.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of domains. At least one domain is required.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.OrganizationDomain>> Domains { get; private set; } = null!;

        /// <summary>
        /// Enable/disable this organization.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The realm this organization exists in.
        /// </summary>
        [Output("realm")]
        public Output<string> Realm { get; private set; } = null!;

        /// <summary>
        /// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
        /// </summary>
        [Output("redirectUrl")]
        public Output<string?> RedirectUrl { get; private set; } = null!;


        /// <summary>
        /// Create a Organization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Organization(string name, OrganizationArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/organization:Organization", name, args ?? new OrganizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Organization(string name, Input<string> id, OrganizationState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/organization:Organization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Organization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Organization Get(string name, Input<string> id, OrganizationState? state = null, CustomResourceOptions? options = null)
        {
            return new Organization(name, id, state, options);
        }
    }

    public sealed class OrganizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// The description of the organization.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domains", required: true)]
        private InputList<Inputs.OrganizationDomainArgs>? _domains;

        /// <summary>
        /// A list of domains. At least one domain is required.
        /// </summary>
        public InputList<Inputs.OrganizationDomainArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.OrganizationDomainArgs>());
            set => _domains = value;
        }

        /// <summary>
        /// Enable/disable this organization.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm this organization exists in.
        /// </summary>
        [Input("realm", required: true)]
        public Input<string> Realm { get; set; } = null!;

        /// <summary>
        /// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        public OrganizationArgs()
        {
        }
        public static new OrganizationArgs Empty => new OrganizationArgs();
    }

    public sealed class OrganizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// The description of the organization.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domains")]
        private InputList<Inputs.OrganizationDomainGetArgs>? _domains;

        /// <summary>
        /// A list of domains. At least one domain is required.
        /// </summary>
        public InputList<Inputs.OrganizationDomainGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.OrganizationDomainGetArgs>());
            set => _domains = value;
        }

        /// <summary>
        /// Enable/disable this organization.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm this organization exists in.
        /// </summary>
        [Input("realm")]
        public Input<string>? Realm { get; set; }

        /// <summary>
        /// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
        /// </summary>
        [Input("redirectUrl")]
        public Input<string>? RedirectUrl { get; set; }

        public OrganizationState()
        {
        }
        public static new OrganizationState Empty => new OrganizationState();
    }
}
