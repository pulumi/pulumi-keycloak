// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    public static class GetAuthenticationFlow
    {
        /// <summary>
        /// This data source can be used to fetch the ID of an authentication flow within Keycloak.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realm = new Keycloak.Realm("realm", new()
        ///     {
        ///         RealmName = "my-realm",
        ///         Enabled = true,
        ///     });
        /// 
        ///     var browserAuthCookie = Keycloak.GetAuthenticationFlow.Invoke(new()
        ///     {
        ///         RealmId = realm.Id,
        ///         Alias = "browser",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetAuthenticationFlowResult> InvokeAsync(GetAuthenticationFlowArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthenticationFlowResult>("keycloak:index/getAuthenticationFlow:getAuthenticationFlow", args ?? new GetAuthenticationFlowArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch the ID of an authentication flow within Keycloak.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var realm = new Keycloak.Realm("realm", new()
        ///     {
        ///         RealmName = "my-realm",
        ///         Enabled = true,
        ///     });
        /// 
        ///     var browserAuthCookie = Keycloak.GetAuthenticationFlow.Invoke(new()
        ///     {
        ///         RealmId = realm.Id,
        ///         Alias = "browser",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetAuthenticationFlowResult> Invoke(GetAuthenticationFlowInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthenticationFlowResult>("keycloak:index/getAuthenticationFlow:getAuthenticationFlow", args ?? new GetAuthenticationFlowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthenticationFlowArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The alias of the flow.
        /// </summary>
        [Input("alias", required: true)]
        public string Alias { get; set; } = null!;

        /// <summary>
        /// The realm the authentication flow exists in.
        /// </summary>
        [Input("realmId", required: true)]
        public string RealmId { get; set; } = null!;

        public GetAuthenticationFlowArgs()
        {
        }
        public static new GetAuthenticationFlowArgs Empty => new GetAuthenticationFlowArgs();
    }

    public sealed class GetAuthenticationFlowInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The alias of the flow.
        /// </summary>
        [Input("alias", required: true)]
        public Input<string> Alias { get; set; } = null!;

        /// <summary>
        /// The realm the authentication flow exists in.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public GetAuthenticationFlowInvokeArgs()
        {
        }
        public static new GetAuthenticationFlowInvokeArgs Empty => new GetAuthenticationFlowInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthenticationFlowResult
    {
        public readonly string Alias;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RealmId;

        [OutputConstructor]
        private GetAuthenticationFlowResult(
            string alias,

            string id,

            string realmId)
        {
            Alias = alias;
            Id = id;
            RealmId = realmId;
        }
    }
}
