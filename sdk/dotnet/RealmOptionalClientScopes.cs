// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    /// <summary>
    /// Allows you to manage the set of optional client scopes for a Keycloak realm, which are used when new clients are created.
    /// 
    /// Note that this resource attempts to be an **authoritative** source over the optional client scopes for a Keycloak realm,
    /// so any Keycloak defaults and manual adjustments will be overwritten.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var clientScope = new Keycloak.OpenId.ClientScope("client_scope", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "test-client-scope",
    ///     });
    /// 
    ///     var optionalScopes = new Keycloak.RealmOptionalClientScopes("optional_scopes", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         OptionalScopes = new[]
    ///         {
    ///             "address",
    ///             "phone",
    ///             "offline_access",
    ///             "microprofile-jwt",
    ///             clientScope.Name,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// This resource does not support import. Instead of importing, feel free to create this resource
    /// 
    /// as if it did not already exist on the server.
    /// </summary>
    [KeycloakResourceType("keycloak:index/realmOptionalClientScopes:RealmOptionalClientScopes")]
    public partial class RealmOptionalClientScopes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An array of optional client scope names that should be used when creating new Keycloak clients.
        /// </summary>
        [Output("optionalScopes")]
        public Output<ImmutableArray<string>> OptionalScopes { get; private set; } = null!;

        /// <summary>
        /// The realm this client and scopes exists in.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;


        /// <summary>
        /// Create a RealmOptionalClientScopes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RealmOptionalClientScopes(string name, RealmOptionalClientScopesArgs args, CustomResourceOptions? options = null)
            : base("keycloak:index/realmOptionalClientScopes:RealmOptionalClientScopes", name, args ?? new RealmOptionalClientScopesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RealmOptionalClientScopes(string name, Input<string> id, RealmOptionalClientScopesState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:index/realmOptionalClientScopes:RealmOptionalClientScopes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RealmOptionalClientScopes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RealmOptionalClientScopes Get(string name, Input<string> id, RealmOptionalClientScopesState? state = null, CustomResourceOptions? options = null)
        {
            return new RealmOptionalClientScopes(name, id, state, options);
        }
    }

    public sealed class RealmOptionalClientScopesArgs : global::Pulumi.ResourceArgs
    {
        [Input("optionalScopes", required: true)]
        private InputList<string>? _optionalScopes;

        /// <summary>
        /// An array of optional client scope names that should be used when creating new Keycloak clients.
        /// </summary>
        public InputList<string> OptionalScopes
        {
            get => _optionalScopes ?? (_optionalScopes = new InputList<string>());
            set => _optionalScopes = value;
        }

        /// <summary>
        /// The realm this client and scopes exists in.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public RealmOptionalClientScopesArgs()
        {
        }
        public static new RealmOptionalClientScopesArgs Empty => new RealmOptionalClientScopesArgs();
    }

    public sealed class RealmOptionalClientScopesState : global::Pulumi.ResourceArgs
    {
        [Input("optionalScopes")]
        private InputList<string>? _optionalScopes;

        /// <summary>
        /// An array of optional client scope names that should be used when creating new Keycloak clients.
        /// </summary>
        public InputList<string> OptionalScopes
        {
            get => _optionalScopes ?? (_optionalScopes = new InputList<string>());
            set => _optionalScopes = value;
        }

        /// <summary>
        /// The realm this client and scopes exists in.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        public RealmOptionalClientScopesState()
        {
        }
        public static new RealmOptionalClientScopesState Empty => new RealmOptionalClientScopesState();
    }
}
