// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.OpenId
{
    /// <summary>
    /// Allows you to manage openid Client Authorization Client Scope type Policies.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var test = new Keycloak.OpenId.Client("test", new()
    ///     {
    ///         ClientId = "client_id",
    ///         RealmId = realm.Id,
    ///         AccessType = "CONFIDENTIAL",
    ///         ServiceAccountsEnabled = true,
    ///         Authorization = new Keycloak.OpenId.Inputs.ClientAuthorizationArgs
    ///         {
    ///             PolicyEnforcementMode = "ENFORCING",
    ///         },
    ///     });
    /// 
    ///     var test1 = new Keycloak.OpenId.ClientScope("test1", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "test1",
    ///         Description = "test1",
    ///     });
    /// 
    ///     var test2 = new Keycloak.OpenId.ClientScope("test2", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "test2",
    ///         Description = "test2",
    ///     });
    /// 
    ///     var testClientAuthorizationClientScopePolicy = new Keycloak.OpenId.ClientAuthorizationClientScopePolicy("test", new()
    ///     {
    ///         ResourceServerId = test.ResourceServerId,
    ///         RealmId = realm.Id,
    ///         Name = "test_policy_single",
    ///         Description = "test",
    ///         DecisionStrategy = "AFFIRMATIVE",
    ///         Logic = "POSITIVE",
    ///         Scopes = new[]
    ///         {
    ///             new Keycloak.OpenId.Inputs.ClientAuthorizationClientScopePolicyScopeArgs
    ///             {
    ///                 Id = test1.Id,
    ///                 Required = false,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testMultiple = new Keycloak.OpenId.ClientAuthorizationClientScopePolicy("test_multiple", new()
    ///     {
    ///         ResourceServerId = test.ResourceServerId,
    ///         RealmId = realm.Id,
    ///         Name = "test_policy_multiple",
    ///         Description = "test",
    ///         DecisionStrategy = "AFFIRMATIVE",
    ///         Logic = "POSITIVE",
    ///         Scopes = new[]
    ///         {
    ///             new Keycloak.OpenId.Inputs.ClientAuthorizationClientScopePolicyScopeArgs
    ///             {
    ///                 Id = test1.Id,
    ///                 Required = false,
    ///             },
    ///             new Keycloak.OpenId.Inputs.ClientAuthorizationClientScopePolicyScopeArgs
    ///             {
    ///                 Id = test2.Id,
    ///                 Required = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Argument Reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `realm_id` - (Required) The realm this group exists in.
    /// - `resource_server_id` - (Required) The ID of the resource server.
    /// - `name` - (Required) The name of the policy.
    /// - `description` - (Optional) A description for the authorization policy.
    /// - `decision_strategy` - (Optional) The decision strategy, can be one of `UNANIMOUS`, `AFFIRMATIVE`, or `CONSENSUS`. Defaults to `UNANIMOUS`.
    /// - `logic` - (Optional) The logic, can be one of `POSITIVE` or `NEGATIVE`. Defaults to `POSITIVE`.
    /// - `scope` - An client scope to add client scope. At least one should be defined.
    /// 
    /// ### Scope Arguments
    /// 
    /// - `id` - (Required) Id of client scope.
    /// - `required` - (Optional) When `true`, then this client scope will be set as required. Defaults to `false`.
    /// 
    /// ### Attributes Reference
    /// 
    /// In addition to the arguments listed above, the following computed attributes are exported:
    /// 
    /// - `id` - Policy ID representing the policy.
    /// 
    /// ## Import
    /// 
    /// Client authorization policies can be imported using the format: `{{realmId}}/{{resourceServerId}}/{{policyId}}`.
    /// 
    /// Example:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import keycloak:openid/clientAuthorizationClientScopePolicy:ClientAuthorizationClientScopePolicy test my-realm/3bd4a686-1062-4b59-97b8-e4e3f10b99da/63b3cde8-987d-4cd9-9306-1955579281d9
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:openid/clientAuthorizationClientScopePolicy:ClientAuthorizationClientScopePolicy")]
    public partial class ClientAuthorizationClientScopePolicy : global::Pulumi.CustomResource
    {
        [Output("decisionStrategy")]
        public Output<string?> DecisionStrategy { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("logic")]
        public Output<string?> Logic { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        [Output("resourceServerId")]
        public Output<string> ResourceServerId { get; private set; } = null!;

        [Output("scopes")]
        public Output<ImmutableArray<Outputs.ClientAuthorizationClientScopePolicyScope>> Scopes { get; private set; } = null!;


        /// <summary>
        /// Create a ClientAuthorizationClientScopePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClientAuthorizationClientScopePolicy(string name, ClientAuthorizationClientScopePolicyArgs args, CustomResourceOptions? options = null)
            : base("keycloak:openid/clientAuthorizationClientScopePolicy:ClientAuthorizationClientScopePolicy", name, args ?? new ClientAuthorizationClientScopePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClientAuthorizationClientScopePolicy(string name, Input<string> id, ClientAuthorizationClientScopePolicyState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:openid/clientAuthorizationClientScopePolicy:ClientAuthorizationClientScopePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClientAuthorizationClientScopePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClientAuthorizationClientScopePolicy Get(string name, Input<string> id, ClientAuthorizationClientScopePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ClientAuthorizationClientScopePolicy(name, id, state, options);
        }
    }

    public sealed class ClientAuthorizationClientScopePolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("decisionStrategy")]
        public Input<string>? DecisionStrategy { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("logic")]
        public Input<string>? Logic { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        [Input("resourceServerId", required: true)]
        public Input<string> ResourceServerId { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<Inputs.ClientAuthorizationClientScopePolicyScopeArgs>? _scopes;
        public InputList<Inputs.ClientAuthorizationClientScopePolicyScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.ClientAuthorizationClientScopePolicyScopeArgs>());
            set => _scopes = value;
        }

        public ClientAuthorizationClientScopePolicyArgs()
        {
        }
        public static new ClientAuthorizationClientScopePolicyArgs Empty => new ClientAuthorizationClientScopePolicyArgs();
    }

    public sealed class ClientAuthorizationClientScopePolicyState : global::Pulumi.ResourceArgs
    {
        [Input("decisionStrategy")]
        public Input<string>? DecisionStrategy { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("logic")]
        public Input<string>? Logic { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        [Input("resourceServerId")]
        public Input<string>? ResourceServerId { get; set; }

        [Input("scopes")]
        private InputList<Inputs.ClientAuthorizationClientScopePolicyScopeGetArgs>? _scopes;
        public InputList<Inputs.ClientAuthorizationClientScopePolicyScopeGetArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.ClientAuthorizationClientScopePolicyScopeGetArgs>());
            set => _scopes = value;
        }

        public ClientAuthorizationClientScopePolicyState()
        {
        }
        public static new ClientAuthorizationClientScopePolicyState Empty => new ClientAuthorizationClientScopePolicyState();
    }
}
