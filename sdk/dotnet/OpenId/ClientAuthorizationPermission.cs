// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.OpenId
{
    /// <summary>
    /// ## # keycloak.openid.ClientAuthorizationPermission
    /// 
    /// Allows you to manage openid Client Authorization Permissions.
    /// 
    /// ### Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var testClient = new Keycloak.OpenId.Client("testClient", new()
    ///     {
    ///         ClientId = "client_id",
    ///         RealmId = realm.Id,
    ///         AccessType = "CONFIDENTIAL",
    ///         ServiceAccountsEnabled = true,
    ///         Authorization = new Keycloak.OpenId.Inputs.ClientAuthorizationArgs
    ///         {
    ///             PolicyEnforcementMode = "ENFORCING",
    ///         },
    ///     });
    /// 
    ///     var @default = Keycloak.OpenId.GetClientAuthorizationPolicy.Invoke(new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ResourceServerId = testClient.ResourceServerId,
    ///         Name = "default",
    ///     });
    /// 
    ///     var testClientAuthorizationResource = new Keycloak.OpenId.ClientAuthorizationResource("testClientAuthorizationResource", new()
    ///     {
    ///         ResourceServerId = testClient.ResourceServerId,
    ///         RealmId = realm.Id,
    ///         Uris = new[]
    ///         {
    ///             "/endpoint/*",
    ///         },
    ///     });
    /// 
    ///     var testClientAuthorizationScope = new Keycloak.OpenId.ClientAuthorizationScope("testClientAuthorizationScope", new()
    ///     {
    ///         ResourceServerId = testClient.ResourceServerId,
    ///         RealmId = realm.Id,
    ///     });
    /// 
    ///     var testClientAuthorizationPermission = new Keycloak.OpenId.ClientAuthorizationPermission("testClientAuthorizationPermission", new()
    ///     {
    ///         ResourceServerId = testClient.ResourceServerId,
    ///         RealmId = realm.Id,
    ///         Policies = new[]
    ///         {
    ///             @default.Apply(@default =&gt; @default.Apply(getClientAuthorizationPolicyResult =&gt; getClientAuthorizationPolicyResult.Id)),
    ///         },
    ///         Resources = new[]
    ///         {
    ///             testClientAuthorizationResource.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Argument Reference
    /// 
    /// The following arguments are supported:
    /// 
    /// - `realm_id` - (Required) The realm this group exists in.
    /// - `resource_server_id` - (Required) The ID of the resource server.
    /// - `name` - (Required) The name of the permission.
    /// - `description` - (Optional) A description for the authorization permission.
    /// - `decision_strategy` - (Optional) The decision strategy, can be one of `UNANIMOUS`, `AFFIRMATIVE`, or `CONSENSUS`. Defaults to `UNANIMOUS`.
    /// - `policies` - (Optional) A list of policy IDs that must be applied to the scopes defined by this permission.
    /// - `resources` - (Optional) A list of resource IDs that this permission must be applied to. Conflicts with `resource_type`.
    /// - `resource_type` - (Optional) When specified, this permission will be evaluated for all instances of a given resource type. Conflicts with `resources`.
    /// - `scopes` - (Optional) A list of scope IDs that this permission must be applied to.
    /// - `type` - (Optional) The type of permission, can be one of `resource` or `scope`.
    /// 
    /// ### Attributes Reference
    /// 
    /// In addition to the arguments listed above, the following computed attributes are exported:
    /// 
    /// - `id` - Permission ID representing the permission.
    /// 
    /// ## Import
    /// 
    /// Client authorization permissions can be imported using the format`{{realmId}}/{{resourceServerId}}/{{permissionId}}`. Examplebash
    /// 
    /// ```sh
    ///  $ pulumi import keycloak:openid/clientAuthorizationPermission:ClientAuthorizationPermission test my-realm/3bd4a686-1062-4b59-97b8-e4e3f10b99da/63b3cde8-987d-4cd9-9306-1955579281d9
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:openid/clientAuthorizationPermission:ClientAuthorizationPermission")]
    public partial class ClientAuthorizationPermission : global::Pulumi.CustomResource
    {
        [Output("decisionStrategy")]
        public Output<string?> DecisionStrategy { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("policies")]
        public Output<ImmutableArray<string>> Policies { get; private set; } = null!;

        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;

        [Output("resourceServerId")]
        public Output<string> ResourceServerId { get; private set; } = null!;

        [Output("resourceType")]
        public Output<string?> ResourceType { get; private set; } = null!;

        [Output("resources")]
        public Output<ImmutableArray<string>> Resources { get; private set; } = null!;

        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ClientAuthorizationPermission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClientAuthorizationPermission(string name, ClientAuthorizationPermissionArgs args, CustomResourceOptions? options = null)
            : base("keycloak:openid/clientAuthorizationPermission:ClientAuthorizationPermission", name, args ?? new ClientAuthorizationPermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClientAuthorizationPermission(string name, Input<string> id, ClientAuthorizationPermissionState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:openid/clientAuthorizationPermission:ClientAuthorizationPermission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClientAuthorizationPermission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClientAuthorizationPermission Get(string name, Input<string> id, ClientAuthorizationPermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new ClientAuthorizationPermission(name, id, state, options);
        }
    }

    public sealed class ClientAuthorizationPermissionArgs : global::Pulumi.ResourceArgs
    {
        [Input("decisionStrategy")]
        public Input<string>? DecisionStrategy { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        [Input("resourceServerId", required: true)]
        public Input<string> ResourceServerId { get; set; } = null!;

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("resources")]
        private InputList<string>? _resources;
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        [Input("scopes")]
        private InputList<string>? _scopes;
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ClientAuthorizationPermissionArgs()
        {
        }
        public static new ClientAuthorizationPermissionArgs Empty => new ClientAuthorizationPermissionArgs();
    }

    public sealed class ClientAuthorizationPermissionState : global::Pulumi.ResourceArgs
    {
        [Input("decisionStrategy")]
        public Input<string>? DecisionStrategy { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policies")]
        private InputList<string>? _policies;
        public InputList<string> Policies
        {
            get => _policies ?? (_policies = new InputList<string>());
            set => _policies = value;
        }

        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        [Input("resourceServerId")]
        public Input<string>? ResourceServerId { get; set; }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("resources")]
        private InputList<string>? _resources;
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        [Input("scopes")]
        private InputList<string>? _scopes;
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ClientAuthorizationPermissionState()
        {
        }
        public static new ClientAuthorizationPermissionState Empty => new ClientAuthorizationPermissionState();
    }
}
