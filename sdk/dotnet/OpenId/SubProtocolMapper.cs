// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.OpenId
{
    /// <summary>
    /// Allows for creating and managing sub protocol mappers within Keycloak.
    /// 
    /// Sub protocol mappers add the Subject (sub) claim to tokens. The sub claim contains the user ID and is a standard claim in OpenID Connect tokens.
    /// 
    /// Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between
    /// multiple different clients.
    /// 
    /// ## Example Usage
    /// 
    /// ### Client)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var openidClient = new Keycloak.OpenId.Client("openid_client", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = "client",
    ///         Name = "client",
    ///         Enabled = true,
    ///         AccessType = "CONFIDENTIAL",
    ///         ValidRedirectUris = new[]
    ///         {
    ///             "http://localhost:8080/openid-callback",
    ///         },
    ///     });
    /// 
    ///     var subMapper = new Keycloak.OpenId.SubProtocolMapper("sub_mapper", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientId = openidClient.Id,
    ///         Name = "sub-mapper",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Client Scope)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Keycloak = Pulumi.Keycloak;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var realm = new Keycloak.Realm("realm", new()
    ///     {
    ///         RealmName = "my-realm",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var clientScope = new Keycloak.OpenId.ClientScope("client_scope", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         Name = "client-scope",
    ///     });
    /// 
    ///     var subMapper = new Keycloak.OpenId.SubProtocolMapper("sub_mapper", new()
    ///     {
    ///         RealmId = realm.Id,
    ///         ClientScopeId = clientScope.Id,
    ///         Name = "sub-mapper",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Protocol mappers can be imported using one of the following formats:
    /// 
    /// - Client: `{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}`
    /// 
    /// - Client Scope: `{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}`
    /// 
    /// Example:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import keycloak:openid/subProtocolMapper:SubProtocolMapper sub_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import keycloak:openid/subProtocolMapper:SubProtocolMapper sub_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4
    /// ```
    /// </summary>
    [KeycloakResourceType("keycloak:openid/subProtocolMapper:SubProtocolMapper")]
    public partial class SubProtocolMapper : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates if the sub claim should be added to the access token. Defaults to `True`.
        /// </summary>
        [Output("addToAccessToken")]
        public Output<bool?> AddToAccessToken { get; private set; } = null!;

        /// <summary>
        /// Indicates if the sub claim should be added to the token introspection response. Defaults to `True`.
        /// </summary>
        [Output("addToTokenIntrospection")]
        public Output<bool?> AddToTokenIntrospection { get; private set; } = null!;

        /// <summary>
        /// The client this protocol mapper should be attached to. Conflicts with `ClientScopeId`. One of `ClientId` or `ClientScopeId` must be specified.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// The client scope this protocol mapper should be attached to. Conflicts with `ClientId`. One of `ClientId` or `ClientScopeId` must be specified.
        /// </summary>
        [Output("clientScopeId")]
        public Output<string?> ClientScopeId { get; private set; } = null!;

        /// <summary>
        /// The display name of this protocol mapper in the GUI.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The realm this protocol mapper exists within.
        /// </summary>
        [Output("realmId")]
        public Output<string> RealmId { get; private set; } = null!;


        /// <summary>
        /// Create a SubProtocolMapper resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubProtocolMapper(string name, SubProtocolMapperArgs args, CustomResourceOptions? options = null)
            : base("keycloak:openid/subProtocolMapper:SubProtocolMapper", name, args ?? new SubProtocolMapperArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubProtocolMapper(string name, Input<string> id, SubProtocolMapperState? state = null, CustomResourceOptions? options = null)
            : base("keycloak:openid/subProtocolMapper:SubProtocolMapper", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubProtocolMapper resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubProtocolMapper Get(string name, Input<string> id, SubProtocolMapperState? state = null, CustomResourceOptions? options = null)
        {
            return new SubProtocolMapper(name, id, state, options);
        }
    }

    public sealed class SubProtocolMapperArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if the sub claim should be added to the access token. Defaults to `True`.
        /// </summary>
        [Input("addToAccessToken")]
        public Input<bool>? AddToAccessToken { get; set; }

        /// <summary>
        /// Indicates if the sub claim should be added to the token introspection response. Defaults to `True`.
        /// </summary>
        [Input("addToTokenIntrospection")]
        public Input<bool>? AddToTokenIntrospection { get; set; }

        /// <summary>
        /// The client this protocol mapper should be attached to. Conflicts with `ClientScopeId`. One of `ClientId` or `ClientScopeId` must be specified.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The client scope this protocol mapper should be attached to. Conflicts with `ClientId`. One of `ClientId` or `ClientScopeId` must be specified.
        /// </summary>
        [Input("clientScopeId")]
        public Input<string>? ClientScopeId { get; set; }

        /// <summary>
        /// The display name of this protocol mapper in the GUI.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm this protocol mapper exists within.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public SubProtocolMapperArgs()
        {
        }
        public static new SubProtocolMapperArgs Empty => new SubProtocolMapperArgs();
    }

    public sealed class SubProtocolMapperState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if the sub claim should be added to the access token. Defaults to `True`.
        /// </summary>
        [Input("addToAccessToken")]
        public Input<bool>? AddToAccessToken { get; set; }

        /// <summary>
        /// Indicates if the sub claim should be added to the token introspection response. Defaults to `True`.
        /// </summary>
        [Input("addToTokenIntrospection")]
        public Input<bool>? AddToTokenIntrospection { get; set; }

        /// <summary>
        /// The client this protocol mapper should be attached to. Conflicts with `ClientScopeId`. One of `ClientId` or `ClientScopeId` must be specified.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The client scope this protocol mapper should be attached to. Conflicts with `ClientId`. One of `ClientId` or `ClientScopeId` must be specified.
        /// </summary>
        [Input("clientScopeId")]
        public Input<string>? ClientScopeId { get; set; }

        /// <summary>
        /// The display name of this protocol mapper in the GUI.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The realm this protocol mapper exists within.
        /// </summary>
        [Input("realmId")]
        public Input<string>? RealmId { get; set; }

        public SubProtocolMapperState()
        {
        }
        public static new SubProtocolMapperState Empty => new SubProtocolMapperState();
    }
}
