// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    public static class GetUserRealmRoles
    {
        /// <summary>
        /// This data source can be used to fetch the realm roles of a user within Keycloak.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var masterRealm = Keycloak.GetRealm.Invoke(new()
        ///     {
        ///         Realm = "master",
        ///     });
        /// 
        ///     var defaultAdminUser = Keycloak.GetUser.Invoke(new()
        ///     {
        ///         RealmId = masterRealm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Username = "keycloak",
        ///     });
        /// 
        ///     var userRealmRoles = Keycloak.GetUserRealmRoles.Invoke(new()
        ///     {
        ///         RealmId = masterRealm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         UserId = defaultAdminUser.Apply(getUserResult =&gt; getUserResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["keycloakUserRoleNames"] = userRealmRoles.Apply(getUserRealmRolesResult =&gt; getUserRealmRolesResult.RoleNames),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserRealmRolesResult> InvokeAsync(GetUserRealmRolesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserRealmRolesResult>("keycloak:index/getUserRealmRoles:getUserRealmRoles", args ?? new GetUserRealmRolesArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can be used to fetch the realm roles of a user within Keycloak.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var masterRealm = Keycloak.GetRealm.Invoke(new()
        ///     {
        ///         Realm = "master",
        ///     });
        /// 
        ///     var defaultAdminUser = Keycloak.GetUser.Invoke(new()
        ///     {
        ///         RealmId = masterRealm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         Username = "keycloak",
        ///     });
        /// 
        ///     var userRealmRoles = Keycloak.GetUserRealmRoles.Invoke(new()
        ///     {
        ///         RealmId = masterRealm.Apply(getRealmResult =&gt; getRealmResult.Id),
        ///         UserId = defaultAdminUser.Apply(getUserResult =&gt; getUserResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["keycloakUserRoleNames"] = userRealmRoles.Apply(getUserRealmRolesResult =&gt; getUserRealmRolesResult.RoleNames),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserRealmRolesResult> Invoke(GetUserRealmRolesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserRealmRolesResult>("keycloak:index/getUserRealmRoles:getUserRealmRoles", args ?? new GetUserRealmRolesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserRealmRolesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The realm this user belongs to.
        /// </summary>
        [Input("realmId", required: true)]
        public string RealmId { get; set; } = null!;

        /// <summary>
        /// The ID of the user to query realm roles for.
        /// </summary>
        [Input("userId", required: true)]
        public string UserId { get; set; } = null!;

        public GetUserRealmRolesArgs()
        {
        }
        public static new GetUserRealmRolesArgs Empty => new GetUserRealmRolesArgs();
    }

    public sealed class GetUserRealmRolesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The realm this user belongs to.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        /// <summary>
        /// The ID of the user to query realm roles for.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public GetUserRealmRolesInvokeArgs()
        {
        }
        public static new GetUserRealmRolesInvokeArgs Empty => new GetUserRealmRolesInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserRealmRolesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RealmId;
        /// <summary>
        /// (Computed) A list of realm roles that belong to this user.
        /// </summary>
        public readonly ImmutableArray<string> RoleNames;
        public readonly string UserId;

        [OutputConstructor]
        private GetUserRealmRolesResult(
            string id,

            string realmId,

            ImmutableArray<string> roleNames,

            string userId)
        {
            Id = id;
            RealmId = realmId;
            RoleNames = roleNames;
            UserId = userId;
        }
    }
}
