// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    public static class GetClientDescriptionConverter
    {
        /// <summary>
        /// This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/6.0/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
        /// client. This data can then be used to manage the client within Keycloak.
        /// </summary>
        public static Task<GetClientDescriptionConverterResult> InvokeAsync(GetClientDescriptionConverterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClientDescriptionConverterResult>("keycloak:index/getClientDescriptionConverter:getClientDescriptionConverter", args ?? new GetClientDescriptionConverterArgs(), options.WithDefaults());

        /// <summary>
        /// This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/6.0/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
        /// client. This data can then be used to manage the client within Keycloak.
        /// </summary>
        public static Output<GetClientDescriptionConverterResult> Invoke(GetClientDescriptionConverterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClientDescriptionConverterResult>("keycloak:index/getClientDescriptionConverter:getClientDescriptionConverter", args ?? new GetClientDescriptionConverterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClientDescriptionConverterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The body of the request to convert.
        /// </summary>
        [Input("body", required: true)]
        public string Body { get; set; } = null!;

        /// <summary>
        /// The realm to use for the client description converter API call.
        /// </summary>
        [Input("realmId", required: true)]
        public string RealmId { get; set; } = null!;

        public GetClientDescriptionConverterArgs()
        {
        }
        public static new GetClientDescriptionConverterArgs Empty => new GetClientDescriptionConverterArgs();
    }

    public sealed class GetClientDescriptionConverterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The body of the request to convert.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The realm to use for the client description converter API call.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public GetClientDescriptionConverterInvokeArgs()
        {
        }
        public static new GetClientDescriptionConverterInvokeArgs Empty => new GetClientDescriptionConverterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClientDescriptionConverterResult
    {
        public readonly ImmutableDictionary<string, object> Access;
        public readonly string AdminUrl;
        public readonly ImmutableDictionary<string, object> Attributes;
        public readonly ImmutableDictionary<string, object> AuthenticationFlowBindingOverrides;
        public readonly bool AuthorizationServicesEnabled;
        public readonly ImmutableDictionary<string, object> AuthorizationSettings;
        public readonly string BaseUrl;
        public readonly bool BearerOnly;
        public readonly string Body;
        public readonly string ClientAuthenticatorType;
        public readonly string ClientId;
        public readonly string ConsentRequired;
        public readonly ImmutableArray<string> DefaultClientScopes;
        public readonly ImmutableArray<string> DefaultRoles;
        public readonly string Description;
        public readonly bool DirectAccessGrantsEnabled;
        public readonly bool Enabled;
        public readonly bool FrontchannelLogout;
        public readonly bool FullScopeAllowed;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool ImplicitFlowEnabled;
        public readonly string Name;
        public readonly int NotBefore;
        public readonly ImmutableArray<string> OptionalClientScopes;
        public readonly string Origin;
        public readonly string Protocol;
        public readonly ImmutableArray<Outputs.GetClientDescriptionConverterProtocolMapperResult> ProtocolMappers;
        public readonly bool PublicClient;
        public readonly string RealmId;
        public readonly ImmutableArray<string> RedirectUris;
        public readonly ImmutableDictionary<string, object> RegisteredNodes;
        public readonly string RegistrationAccessToken;
        public readonly string RootUrl;
        public readonly string Secret;
        public readonly bool ServiceAccountsEnabled;
        public readonly bool StandardFlowEnabled;
        public readonly bool SurrogateAuthRequired;
        public readonly ImmutableArray<string> WebOrigins;

        [OutputConstructor]
        private GetClientDescriptionConverterResult(
            ImmutableDictionary<string, object> access,

            string adminUrl,

            ImmutableDictionary<string, object> attributes,

            ImmutableDictionary<string, object> authenticationFlowBindingOverrides,

            bool authorizationServicesEnabled,

            ImmutableDictionary<string, object> authorizationSettings,

            string baseUrl,

            bool bearerOnly,

            string body,

            string clientAuthenticatorType,

            string clientId,

            string consentRequired,

            ImmutableArray<string> defaultClientScopes,

            ImmutableArray<string> defaultRoles,

            string description,

            bool directAccessGrantsEnabled,

            bool enabled,

            bool frontchannelLogout,

            bool fullScopeAllowed,

            string id,

            bool implicitFlowEnabled,

            string name,

            int notBefore,

            ImmutableArray<string> optionalClientScopes,

            string origin,

            string protocol,

            ImmutableArray<Outputs.GetClientDescriptionConverterProtocolMapperResult> protocolMappers,

            bool publicClient,

            string realmId,

            ImmutableArray<string> redirectUris,

            ImmutableDictionary<string, object> registeredNodes,

            string registrationAccessToken,

            string rootUrl,

            string secret,

            bool serviceAccountsEnabled,

            bool standardFlowEnabled,

            bool surrogateAuthRequired,

            ImmutableArray<string> webOrigins)
        {
            Access = access;
            AdminUrl = adminUrl;
            Attributes = attributes;
            AuthenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            AuthorizationServicesEnabled = authorizationServicesEnabled;
            AuthorizationSettings = authorizationSettings;
            BaseUrl = baseUrl;
            BearerOnly = bearerOnly;
            Body = body;
            ClientAuthenticatorType = clientAuthenticatorType;
            ClientId = clientId;
            ConsentRequired = consentRequired;
            DefaultClientScopes = defaultClientScopes;
            DefaultRoles = defaultRoles;
            Description = description;
            DirectAccessGrantsEnabled = directAccessGrantsEnabled;
            Enabled = enabled;
            FrontchannelLogout = frontchannelLogout;
            FullScopeAllowed = fullScopeAllowed;
            Id = id;
            ImplicitFlowEnabled = implicitFlowEnabled;
            Name = name;
            NotBefore = notBefore;
            OptionalClientScopes = optionalClientScopes;
            Origin = origin;
            Protocol = protocol;
            ProtocolMappers = protocolMappers;
            PublicClient = publicClient;
            RealmId = realmId;
            RedirectUris = redirectUris;
            RegisteredNodes = registeredNodes;
            RegistrationAccessToken = registrationAccessToken;
            RootUrl = rootUrl;
            Secret = secret;
            ServiceAccountsEnabled = serviceAccountsEnabled;
            StandardFlowEnabled = standardFlowEnabled;
            SurrogateAuthRequired = surrogateAuthRequired;
            WebOrigins = webOrigins;
        }
    }
}
