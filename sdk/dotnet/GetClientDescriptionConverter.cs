// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak
{
    public static class GetClientDescriptionConverter
    {
        /// <summary>
        /// This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/6.0/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
        /// client. This data can then be used to manage the client within Keycloak.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var realm = new Keycloak.Realm("realm", new Keycloak.RealmArgs
        ///         {
        ///             Realm = "my-realm",
        ///             Enabled = true,
        ///         });
        ///         var samlClientClientDescriptionConverter = Keycloak.GetClientDescriptionConverter.Invoke(new Keycloak.GetClientDescriptionConverterInvokeArgs
        ///         {
        ///             RealmId = realm.Id,
        ///             Body = @"	&lt;md:EntityDescriptor xmlns:md=""urn:oasis:names:tc:SAML:2.0:metadata"" validUntil=""2021-04-17T12:41:46Z"" cacheDuration=""PT604800S"" entityID=""FakeEntityId""&gt;
        ///     &lt;md:SPSSODescriptor AuthnRequestsSigned=""false"" WantAssertionsSigned=""false"" protocolSupportEnumeration=""urn:oasis:names:tc:SAML:2.0:protocol""&gt;
        ///         &lt;md:KeyDescriptor use=""signing""&gt;
        /// 			&lt;ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#""&gt;
        /// 				&lt;ds:X509Data&gt;
        /// 					&lt;ds:X509Certificate&gt;MIICyDCCAjGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADCBgDELMAkGA1UEBhMCdXMx
        /// 					CzAJBgNVBAgMAklBMSQwIgYDVQQKDBt0ZXJyYWZvcm0tcHJvdmlkZXIta2V5Y2xv
        /// 					YWsxHDAaBgNVBAMME21ycGFya2Vycy5naXRodWIuaW8xIDAeBgkqhkiG9w0BCQEW
        /// 					EW1pY2hhZWxAcGFya2VyLmdnMB4XDTE5MDEwODE0NDYzNloXDTI5MDEwNTE0NDYz
        /// 					NlowgYAxCzAJBgNVBAYTAnVzMQswCQYDVQQIDAJJQTEkMCIGA1UECgwbdGVycmFm
        /// 					b3JtLXByb3ZpZGVyLWtleWNsb2FrMRwwGgYDVQQDDBNtcnBhcmtlcnMuZ2l0aHVi
        /// 					LmlvMSAwHgYJKoZIhvcNAQkBFhFtaWNoYWVsQHBhcmtlci5nZzCBnzANBgkqhkiG
        /// 					9w0BAQEFAAOBjQAwgYkCgYEAxuZny7uyYxGVPtpie14gNQC4tT9sAvO2sVNDhuoe
        /// 					qIKLRpNwkHnwQmwe5OxSh9K0BPHp/DNuuVWUqvo4tniEYn3jBr7FwLYLTKojQIxj
        /// 					53S1UTT9EXq3eP5HsHMD0QnTuca2nlNYUDBm6ud2fQj0Jt5qLx86EbEC28N56IRv
        /// 					GX8CAwEAAaNQME4wHQYDVR0OBBYEFMLnbQh77j7vhGTpAhKpDhCrBsPZMB8GA1Ud
        /// 					IwQYMBaAFMLnbQh77j7vhGTpAhKpDhCrBsPZMAwGA1UdEwQFMAMBAf8wDQYJKoZI
        /// 					hvcNAQENBQADgYEAB8wGrAQY0pAfwbnYSyBt4STbebeRTu1/q1ucfrtc3qsegcd5
        /// 					n01xTR+T2uZJwqHFPpFjr4IPORiHx3+4BWCweslPD53qBjKUPXcbMO1Revjef6Tj
        /// 					K3K0AuJ94fxgXVoT61Nzu/a6Lj6RhzU/Dao9mlSbJY+YSbm+ZBpsuRUQ84s=&lt;/ds:X509Certificate&gt;
        /// 				&lt;/ds:X509Data&gt;
        /// 			&lt;/ds:KeyInfo&gt;
        /// 		&lt;/md:KeyDescriptor&gt;
        /// 		&lt;md:NameIDFormat&gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified&lt;/md:NameIDFormat&gt;
        ///         &lt;md:AssertionConsumerService Binding=""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"" Location=""https://localhost/acs/saml/"" index=""1""/&gt;
        ///     &lt;/md:SPSSODescriptor&gt;
        /// &lt;/md:EntityDescriptor&gt;
        /// ",
        ///         });
        ///         var samlClientClient = new Keycloak.Saml.Client("samlClientClient", new Keycloak.Saml.ClientArgs
        ///         {
        ///             RealmId = realm.Id,
        ///             ClientId = samlClientClientDescriptionConverter.Apply(samlClientClientDescriptionConverter =&gt; samlClientClientDescriptionConverter.ClientId),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClientDescriptionConverterResult> InvokeAsync(GetClientDescriptionConverterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClientDescriptionConverterResult>("keycloak:index/getClientDescriptionConverter:getClientDescriptionConverter", args ?? new GetClientDescriptionConverterArgs(), options.WithDefaults());

        /// <summary>
        /// This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/6.0/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
        /// client. This data can then be used to manage the client within Keycloak.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Keycloak = Pulumi.Keycloak;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var realm = new Keycloak.Realm("realm", new Keycloak.RealmArgs
        ///         {
        ///             Realm = "my-realm",
        ///             Enabled = true,
        ///         });
        ///         var samlClientClientDescriptionConverter = Keycloak.GetClientDescriptionConverter.Invoke(new Keycloak.GetClientDescriptionConverterInvokeArgs
        ///         {
        ///             RealmId = realm.Id,
        ///             Body = @"	&lt;md:EntityDescriptor xmlns:md=""urn:oasis:names:tc:SAML:2.0:metadata"" validUntil=""2021-04-17T12:41:46Z"" cacheDuration=""PT604800S"" entityID=""FakeEntityId""&gt;
        ///     &lt;md:SPSSODescriptor AuthnRequestsSigned=""false"" WantAssertionsSigned=""false"" protocolSupportEnumeration=""urn:oasis:names:tc:SAML:2.0:protocol""&gt;
        ///         &lt;md:KeyDescriptor use=""signing""&gt;
        /// 			&lt;ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#""&gt;
        /// 				&lt;ds:X509Data&gt;
        /// 					&lt;ds:X509Certificate&gt;MIICyDCCAjGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADCBgDELMAkGA1UEBhMCdXMx
        /// 					CzAJBgNVBAgMAklBMSQwIgYDVQQKDBt0ZXJyYWZvcm0tcHJvdmlkZXIta2V5Y2xv
        /// 					YWsxHDAaBgNVBAMME21ycGFya2Vycy5naXRodWIuaW8xIDAeBgkqhkiG9w0BCQEW
        /// 					EW1pY2hhZWxAcGFya2VyLmdnMB4XDTE5MDEwODE0NDYzNloXDTI5MDEwNTE0NDYz
        /// 					NlowgYAxCzAJBgNVBAYTAnVzMQswCQYDVQQIDAJJQTEkMCIGA1UECgwbdGVycmFm
        /// 					b3JtLXByb3ZpZGVyLWtleWNsb2FrMRwwGgYDVQQDDBNtcnBhcmtlcnMuZ2l0aHVi
        /// 					LmlvMSAwHgYJKoZIhvcNAQkBFhFtaWNoYWVsQHBhcmtlci5nZzCBnzANBgkqhkiG
        /// 					9w0BAQEFAAOBjQAwgYkCgYEAxuZny7uyYxGVPtpie14gNQC4tT9sAvO2sVNDhuoe
        /// 					qIKLRpNwkHnwQmwe5OxSh9K0BPHp/DNuuVWUqvo4tniEYn3jBr7FwLYLTKojQIxj
        /// 					53S1UTT9EXq3eP5HsHMD0QnTuca2nlNYUDBm6ud2fQj0Jt5qLx86EbEC28N56IRv
        /// 					GX8CAwEAAaNQME4wHQYDVR0OBBYEFMLnbQh77j7vhGTpAhKpDhCrBsPZMB8GA1Ud
        /// 					IwQYMBaAFMLnbQh77j7vhGTpAhKpDhCrBsPZMAwGA1UdEwQFMAMBAf8wDQYJKoZI
        /// 					hvcNAQENBQADgYEAB8wGrAQY0pAfwbnYSyBt4STbebeRTu1/q1ucfrtc3qsegcd5
        /// 					n01xTR+T2uZJwqHFPpFjr4IPORiHx3+4BWCweslPD53qBjKUPXcbMO1Revjef6Tj
        /// 					K3K0AuJ94fxgXVoT61Nzu/a6Lj6RhzU/Dao9mlSbJY+YSbm+ZBpsuRUQ84s=&lt;/ds:X509Certificate&gt;
        /// 				&lt;/ds:X509Data&gt;
        /// 			&lt;/ds:KeyInfo&gt;
        /// 		&lt;/md:KeyDescriptor&gt;
        /// 		&lt;md:NameIDFormat&gt;urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified&lt;/md:NameIDFormat&gt;
        ///         &lt;md:AssertionConsumerService Binding=""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"" Location=""https://localhost/acs/saml/"" index=""1""/&gt;
        ///     &lt;/md:SPSSODescriptor&gt;
        /// &lt;/md:EntityDescriptor&gt;
        /// ",
        ///         });
        ///         var samlClientClient = new Keycloak.Saml.Client("samlClientClient", new Keycloak.Saml.ClientArgs
        ///         {
        ///             RealmId = realm.Id,
        ///             ClientId = samlClientClientDescriptionConverter.Apply(samlClientClientDescriptionConverter =&gt; samlClientClientDescriptionConverter.ClientId),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClientDescriptionConverterResult> Invoke(GetClientDescriptionConverterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetClientDescriptionConverterResult>("keycloak:index/getClientDescriptionConverter:getClientDescriptionConverter", args ?? new GetClientDescriptionConverterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClientDescriptionConverterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The body of the request to convert.
        /// </summary>
        [Input("body", required: true)]
        public string Body { get; set; } = null!;

        /// <summary>
        /// The realm to use for the client description converter API call.
        /// </summary>
        [Input("realmId", required: true)]
        public string RealmId { get; set; } = null!;

        public GetClientDescriptionConverterArgs()
        {
        }
    }

    public sealed class GetClientDescriptionConverterInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The body of the request to convert.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The realm to use for the client description converter API call.
        /// </summary>
        [Input("realmId", required: true)]
        public Input<string> RealmId { get; set; } = null!;

        public GetClientDescriptionConverterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClientDescriptionConverterResult
    {
        public readonly ImmutableDictionary<string, object> Access;
        public readonly string AdminUrl;
        public readonly ImmutableDictionary<string, object> Attributes;
        public readonly ImmutableDictionary<string, object> AuthenticationFlowBindingOverrides;
        public readonly bool AuthorizationServicesEnabled;
        public readonly ImmutableDictionary<string, object> AuthorizationSettings;
        public readonly string BaseUrl;
        public readonly bool BearerOnly;
        public readonly string Body;
        public readonly string ClientAuthenticatorType;
        public readonly string ClientId;
        public readonly string ConsentRequired;
        public readonly ImmutableArray<string> DefaultClientScopes;
        public readonly ImmutableArray<string> DefaultRoles;
        public readonly string Description;
        public readonly bool DirectAccessGrantsEnabled;
        public readonly bool Enabled;
        public readonly bool FrontchannelLogout;
        public readonly bool FullScopeAllowed;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool ImplicitFlowEnabled;
        public readonly string Name;
        public readonly int NotBefore;
        public readonly ImmutableArray<string> OptionalClientScopes;
        public readonly string Origin;
        public readonly string Protocol;
        public readonly ImmutableArray<Outputs.GetClientDescriptionConverterProtocolMapperResult> ProtocolMappers;
        public readonly bool PublicClient;
        public readonly string RealmId;
        public readonly ImmutableArray<string> RedirectUris;
        public readonly ImmutableDictionary<string, object> RegisteredNodes;
        public readonly string RegistrationAccessToken;
        public readonly string RootUrl;
        public readonly string Secret;
        public readonly bool ServiceAccountsEnabled;
        public readonly bool StandardFlowEnabled;
        public readonly bool SurrogateAuthRequired;
        public readonly ImmutableArray<string> WebOrigins;

        [OutputConstructor]
        private GetClientDescriptionConverterResult(
            ImmutableDictionary<string, object> access,

            string adminUrl,

            ImmutableDictionary<string, object> attributes,

            ImmutableDictionary<string, object> authenticationFlowBindingOverrides,

            bool authorizationServicesEnabled,

            ImmutableDictionary<string, object> authorizationSettings,

            string baseUrl,

            bool bearerOnly,

            string body,

            string clientAuthenticatorType,

            string clientId,

            string consentRequired,

            ImmutableArray<string> defaultClientScopes,

            ImmutableArray<string> defaultRoles,

            string description,

            bool directAccessGrantsEnabled,

            bool enabled,

            bool frontchannelLogout,

            bool fullScopeAllowed,

            string id,

            bool implicitFlowEnabled,

            string name,

            int notBefore,

            ImmutableArray<string> optionalClientScopes,

            string origin,

            string protocol,

            ImmutableArray<Outputs.GetClientDescriptionConverterProtocolMapperResult> protocolMappers,

            bool publicClient,

            string realmId,

            ImmutableArray<string> redirectUris,

            ImmutableDictionary<string, object> registeredNodes,

            string registrationAccessToken,

            string rootUrl,

            string secret,

            bool serviceAccountsEnabled,

            bool standardFlowEnabled,

            bool surrogateAuthRequired,

            ImmutableArray<string> webOrigins)
        {
            Access = access;
            AdminUrl = adminUrl;
            Attributes = attributes;
            AuthenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            AuthorizationServicesEnabled = authorizationServicesEnabled;
            AuthorizationSettings = authorizationSettings;
            BaseUrl = baseUrl;
            BearerOnly = bearerOnly;
            Body = body;
            ClientAuthenticatorType = clientAuthenticatorType;
            ClientId = clientId;
            ConsentRequired = consentRequired;
            DefaultClientScopes = defaultClientScopes;
            DefaultRoles = defaultRoles;
            Description = description;
            DirectAccessGrantsEnabled = directAccessGrantsEnabled;
            Enabled = enabled;
            FrontchannelLogout = frontchannelLogout;
            FullScopeAllowed = fullScopeAllowed;
            Id = id;
            ImplicitFlowEnabled = implicitFlowEnabled;
            Name = name;
            NotBefore = notBefore;
            OptionalClientScopes = optionalClientScopes;
            Origin = origin;
            Protocol = protocol;
            ProtocolMappers = protocolMappers;
            PublicClient = publicClient;
            RealmId = realmId;
            RedirectUris = redirectUris;
            RegisteredNodes = registeredNodes;
            RegistrationAccessToken = registrationAccessToken;
            RootUrl = rootUrl;
            Secret = secret;
            ServiceAccountsEnabled = serviceAccountsEnabled;
            StandardFlowEnabled = standardFlowEnabled;
            SurrogateAuthRequired = surrogateAuthRequired;
            WebOrigins = webOrigins;
        }
    }
}
