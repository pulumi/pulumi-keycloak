// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Keycloak.Outputs
{

    [OutputType]
    public sealed class RealmSecurityDefensesBruteForceDetection
    {
        /// <summary>
        /// When will failure count be reset?
        /// </summary>
        public readonly int? FailureResetTimeSeconds;
        public readonly int? MaxFailureWaitSeconds;
        /// <summary>
        /// How many failures before wait is triggered.
        /// </summary>
        public readonly int? MaxLoginFailures;
        /// <summary>
        /// How long to wait after a quick login failure.
        /// - `max_failure_wait_seconds ` - (Optional) Max. time a user will be locked out.
        /// </summary>
        public readonly int? MinimumQuickLoginWaitSeconds;
        /// <summary>
        /// When `true`, this will lock the user permanently when the user exceeds the maximum login failures.
        /// </summary>
        public readonly bool? PermanentLockout;
        /// <summary>
        /// Configures the amount of time, in milliseconds, for consecutive failures to lock a user out.
        /// </summary>
        public readonly int? QuickLoginCheckMilliSeconds;
        /// <summary>
        /// This represents the amount of time a user should be locked out when the login failure threshold has been met.
        /// </summary>
        public readonly int? WaitIncrementSeconds;

        [OutputConstructor]
        private RealmSecurityDefensesBruteForceDetection(
            int? failureResetTimeSeconds,

            int? maxFailureWaitSeconds,

            int? maxLoginFailures,

            int? minimumQuickLoginWaitSeconds,

            bool? permanentLockout,

            int? quickLoginCheckMilliSeconds,

            int? waitIncrementSeconds)
        {
            FailureResetTimeSeconds = failureResetTimeSeconds;
            MaxFailureWaitSeconds = maxFailureWaitSeconds;
            MaxLoginFailures = maxLoginFailures;
            MinimumQuickLoginWaitSeconds = minimumQuickLoginWaitSeconds;
            PermanentLockout = permanentLockout;
            QuickLoginCheckMilliSeconds = quickLoginCheckMilliSeconds;
            WaitIncrementSeconds = waitIncrementSeconds;
        }
    }
}
