// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.keycloak.outputs.RealmSmtpServerAuth;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RealmSmtpServer {
    /**
     * @return Enables authentication to the SMTP server.  This block supports the following arguments:
     * 
     */
    private @Nullable RealmSmtpServerAuth auth;
    /**
     * @return The email address uses for bounces.
     * 
     */
    private @Nullable String envelopeFrom;
    /**
     * @return The email address for the sender.
     * 
     */
    private String from;
    /**
     * @return The display name of the sender email address.
     * 
     */
    private @Nullable String fromDisplayName;
    /**
     * @return The host of the SMTP server.
     * 
     */
    private String host;
    /**
     * @return The port of the SMTP server (defaults to 25).
     * 
     */
    private @Nullable String port;
    /**
     * @return The &#34;reply to&#34; email address.
     * 
     */
    private @Nullable String replyTo;
    /**
     * @return The display name of the &#34;reply to&#34; email address.
     * 
     */
    private @Nullable String replyToDisplayName;
    /**
     * @return When `true`, enables SSL. Defaults to `false`.
     * 
     */
    private @Nullable Boolean ssl;
    /**
     * @return When `true`, enables StartTLS. Defaults to `false`.
     * 
     */
    private @Nullable Boolean starttls;

    private RealmSmtpServer() {}
    /**
     * @return Enables authentication to the SMTP server.  This block supports the following arguments:
     * 
     */
    public Optional<RealmSmtpServerAuth> auth() {
        return Optional.ofNullable(this.auth);
    }
    /**
     * @return The email address uses for bounces.
     * 
     */
    public Optional<String> envelopeFrom() {
        return Optional.ofNullable(this.envelopeFrom);
    }
    /**
     * @return The email address for the sender.
     * 
     */
    public String from() {
        return this.from;
    }
    /**
     * @return The display name of the sender email address.
     * 
     */
    public Optional<String> fromDisplayName() {
        return Optional.ofNullable(this.fromDisplayName);
    }
    /**
     * @return The host of the SMTP server.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The port of the SMTP server (defaults to 25).
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The &#34;reply to&#34; email address.
     * 
     */
    public Optional<String> replyTo() {
        return Optional.ofNullable(this.replyTo);
    }
    /**
     * @return The display name of the &#34;reply to&#34; email address.
     * 
     */
    public Optional<String> replyToDisplayName() {
        return Optional.ofNullable(this.replyToDisplayName);
    }
    /**
     * @return When `true`, enables SSL. Defaults to `false`.
     * 
     */
    public Optional<Boolean> ssl() {
        return Optional.ofNullable(this.ssl);
    }
    /**
     * @return When `true`, enables StartTLS. Defaults to `false`.
     * 
     */
    public Optional<Boolean> starttls() {
        return Optional.ofNullable(this.starttls);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RealmSmtpServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable RealmSmtpServerAuth auth;
        private @Nullable String envelopeFrom;
        private String from;
        private @Nullable String fromDisplayName;
        private String host;
        private @Nullable String port;
        private @Nullable String replyTo;
        private @Nullable String replyToDisplayName;
        private @Nullable Boolean ssl;
        private @Nullable Boolean starttls;
        public Builder() {}
        public Builder(RealmSmtpServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auth = defaults.auth;
    	      this.envelopeFrom = defaults.envelopeFrom;
    	      this.from = defaults.from;
    	      this.fromDisplayName = defaults.fromDisplayName;
    	      this.host = defaults.host;
    	      this.port = defaults.port;
    	      this.replyTo = defaults.replyTo;
    	      this.replyToDisplayName = defaults.replyToDisplayName;
    	      this.ssl = defaults.ssl;
    	      this.starttls = defaults.starttls;
        }

        @CustomType.Setter
        public Builder auth(@Nullable RealmSmtpServerAuth auth) {

            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder envelopeFrom(@Nullable String envelopeFrom) {

            this.envelopeFrom = envelopeFrom;
            return this;
        }
        @CustomType.Setter
        public Builder from(String from) {
            if (from == null) {
              throw new MissingRequiredPropertyException("RealmSmtpServer", "from");
            }
            this.from = from;
            return this;
        }
        @CustomType.Setter
        public Builder fromDisplayName(@Nullable String fromDisplayName) {

            this.fromDisplayName = fromDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("RealmSmtpServer", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder replyTo(@Nullable String replyTo) {

            this.replyTo = replyTo;
            return this;
        }
        @CustomType.Setter
        public Builder replyToDisplayName(@Nullable String replyToDisplayName) {

            this.replyToDisplayName = replyToDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(@Nullable Boolean ssl) {

            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder starttls(@Nullable Boolean starttls) {

            this.starttls = starttls;
            return this;
        }
        public RealmSmtpServer build() {
            final var _resultValue = new RealmSmtpServer();
            _resultValue.auth = auth;
            _resultValue.envelopeFrom = envelopeFrom;
            _resultValue.from = from;
            _resultValue.fromDisplayName = fromDisplayName;
            _resultValue.host = host;
            _resultValue.port = port;
            _resultValue.replyTo = replyTo;
            _resultValue.replyToDisplayName = replyToDisplayName;
            _resultValue.ssl = ssl;
            _resultValue.starttls = starttls;
            return _resultValue;
        }
    }
}
