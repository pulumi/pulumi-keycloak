// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientAuthorizationArgs Empty = new ClientAuthorizationArgs();

    /**
     * When `true`, resources can be managed remotely by the resource server. Defaults to `false`.
     * 
     */
    @Import(name="allowRemoteResourceManagement")
    private @Nullable Output<Boolean> allowRemoteResourceManagement;

    /**
     * @return When `true`, resources can be managed remotely by the resource server. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> allowRemoteResourceManagement() {
        return Optional.ofNullable(this.allowRemoteResourceManagement);
    }

    /**
     * Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     * 
     */
    @Import(name="decisionStrategy")
    private @Nullable Output<String> decisionStrategy;

    /**
     * @return Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     * 
     */
    public Optional<Output<String>> decisionStrategy() {
        return Optional.ofNullable(this.decisionStrategy);
    }

    /**
     * When `true`, defaults set by Keycloak will be respected. Defaults to `false`.
     * 
     */
    @Import(name="keepDefaults")
    private @Nullable Output<Boolean> keepDefaults;

    /**
     * @return When `true`, defaults set by Keycloak will be respected. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> keepDefaults() {
        return Optional.ofNullable(this.keepDefaults);
    }

    /**
     * Dictates how policies are enforced when evaluating authorization requests. Can be one of `ENFORCING`, `PERMISSIVE`, or `DISABLED`.
     * 
     */
    @Import(name="policyEnforcementMode", required=true)
    private Output<String> policyEnforcementMode;

    /**
     * @return Dictates how policies are enforced when evaluating authorization requests. Can be one of `ENFORCING`, `PERMISSIVE`, or `DISABLED`.
     * 
     */
    public Output<String> policyEnforcementMode() {
        return this.policyEnforcementMode;
    }

    private ClientAuthorizationArgs() {}

    private ClientAuthorizationArgs(ClientAuthorizationArgs $) {
        this.allowRemoteResourceManagement = $.allowRemoteResourceManagement;
        this.decisionStrategy = $.decisionStrategy;
        this.keepDefaults = $.keepDefaults;
        this.policyEnforcementMode = $.policyEnforcementMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientAuthorizationArgs $;

        public Builder() {
            $ = new ClientAuthorizationArgs();
        }

        public Builder(ClientAuthorizationArgs defaults) {
            $ = new ClientAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowRemoteResourceManagement When `true`, resources can be managed remotely by the resource server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowRemoteResourceManagement(@Nullable Output<Boolean> allowRemoteResourceManagement) {
            $.allowRemoteResourceManagement = allowRemoteResourceManagement;
            return this;
        }

        /**
         * @param allowRemoteResourceManagement When `true`, resources can be managed remotely by the resource server. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder allowRemoteResourceManagement(Boolean allowRemoteResourceManagement) {
            return allowRemoteResourceManagement(Output.of(allowRemoteResourceManagement));
        }

        /**
         * @param decisionStrategy Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
         * 
         * @return builder
         * 
         */
        public Builder decisionStrategy(@Nullable Output<String> decisionStrategy) {
            $.decisionStrategy = decisionStrategy;
            return this;
        }

        /**
         * @param decisionStrategy Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
         * 
         * @return builder
         * 
         */
        public Builder decisionStrategy(String decisionStrategy) {
            return decisionStrategy(Output.of(decisionStrategy));
        }

        /**
         * @param keepDefaults When `true`, defaults set by Keycloak will be respected. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder keepDefaults(@Nullable Output<Boolean> keepDefaults) {
            $.keepDefaults = keepDefaults;
            return this;
        }

        /**
         * @param keepDefaults When `true`, defaults set by Keycloak will be respected. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder keepDefaults(Boolean keepDefaults) {
            return keepDefaults(Output.of(keepDefaults));
        }

        /**
         * @param policyEnforcementMode Dictates how policies are enforced when evaluating authorization requests. Can be one of `ENFORCING`, `PERMISSIVE`, or `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder policyEnforcementMode(Output<String> policyEnforcementMode) {
            $.policyEnforcementMode = policyEnforcementMode;
            return this;
        }

        /**
         * @param policyEnforcementMode Dictates how policies are enforced when evaluating authorization requests. Can be one of `ENFORCING`, `PERMISSIVE`, or `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder policyEnforcementMode(String policyEnforcementMode) {
            return policyEnforcementMode(Output.of(policyEnforcementMode));
        }

        public ClientAuthorizationArgs build() {
            if ($.policyEnforcementMode == null) {
                throw new MissingRequiredPropertyException("ClientAuthorizationArgs", "policyEnforcementMode");
            }
            return $;
        }
    }

}
