// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubProtocolMapperArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubProtocolMapperArgs Empty = new SubProtocolMapperArgs();

    /**
     * Indicates if the sub claim should be added to the access token. Defaults to `true`.
     * 
     */
    @Import(name="addToAccessToken")
    private @Nullable Output<Boolean> addToAccessToken;

    /**
     * @return Indicates if the sub claim should be added to the access token. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> addToAccessToken() {
        return Optional.ofNullable(this.addToAccessToken);
    }

    /**
     * Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
     * 
     */
    @Import(name="addToTokenIntrospection")
    private @Nullable Output<Boolean> addToTokenIntrospection;

    /**
     * @return Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> addToTokenIntrospection() {
        return Optional.ofNullable(this.addToTokenIntrospection);
    }

    /**
     * The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     * 
     */
    @Import(name="clientScopeId")
    private @Nullable Output<String> clientScopeId;

    /**
     * @return The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     * 
     */
    public Optional<Output<String>> clientScopeId() {
        return Optional.ofNullable(this.clientScopeId);
    }

    /**
     * The display name of this protocol mapper in the GUI.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of this protocol mapper in the GUI.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The realm this protocol mapper exists within.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm this protocol mapper exists within.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    private SubProtocolMapperArgs() {}

    private SubProtocolMapperArgs(SubProtocolMapperArgs $) {
        this.addToAccessToken = $.addToAccessToken;
        this.addToTokenIntrospection = $.addToTokenIntrospection;
        this.clientId = $.clientId;
        this.clientScopeId = $.clientScopeId;
        this.name = $.name;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubProtocolMapperArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubProtocolMapperArgs $;

        public Builder() {
            $ = new SubProtocolMapperArgs();
        }

        public Builder(SubProtocolMapperArgs defaults) {
            $ = new SubProtocolMapperArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addToAccessToken Indicates if the sub claim should be added to the access token. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder addToAccessToken(@Nullable Output<Boolean> addToAccessToken) {
            $.addToAccessToken = addToAccessToken;
            return this;
        }

        /**
         * @param addToAccessToken Indicates if the sub claim should be added to the access token. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder addToAccessToken(Boolean addToAccessToken) {
            return addToAccessToken(Output.of(addToAccessToken));
        }

        /**
         * @param addToTokenIntrospection Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder addToTokenIntrospection(@Nullable Output<Boolean> addToTokenIntrospection) {
            $.addToTokenIntrospection = addToTokenIntrospection;
            return this;
        }

        /**
         * @param addToTokenIntrospection Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder addToTokenIntrospection(Boolean addToTokenIntrospection) {
            return addToTokenIntrospection(Output.of(addToTokenIntrospection));
        }

        /**
         * @param clientId The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientScopeId The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder clientScopeId(@Nullable Output<String> clientScopeId) {
            $.clientScopeId = clientScopeId;
            return this;
        }

        /**
         * @param clientScopeId The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder clientScopeId(String clientScopeId) {
            return clientScopeId(Output.of(clientScopeId));
        }

        /**
         * @param name The display name of this protocol mapper in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of this protocol mapper in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param realmId The realm this protocol mapper exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm this protocol mapper exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public SubProtocolMapperArgs build() {
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("SubProtocolMapperArgs", "realmId");
            }
            return $;
        }
    }

}
