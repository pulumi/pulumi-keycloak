// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.ldap;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.ldap.GroupMapperArgs;
import com.pulumi.keycloak.ldap.inputs.GroupMapperState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # keycloak.ldap.GroupMapper
 * 
 * Allows for creating and managing group mappers for Keycloak users federated
 * via LDAP.
 * 
 * The LDAP group mapper can be used to map an LDAP user&#39;s groups from some DN
 * to Keycloak groups. This group mapper will also create the groups within Keycloak
 * if they do not already exist.
 * 
 * ### Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.ldap.UserFederation;
 * import com.pulumi.keycloak.ldap.UserFederationArgs;
 * import com.pulumi.keycloak.ldap.GroupMapper;
 * import com.pulumi.keycloak.ldap.GroupMapperArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm("realm", RealmArgs.builder()        
 *             .realm("test")
 *             .enabled(true)
 *             .build());
 * 
 *         var ldapUserFederation = new UserFederation("ldapUserFederation", UserFederationArgs.builder()        
 *             .name("openldap")
 *             .realmId(realm.id())
 *             .usernameLdapAttribute("cn")
 *             .rdnLdapAttribute("cn")
 *             .uuidLdapAttribute("entryDN")
 *             .userObjectClasses(            
 *                 "simpleSecurityObject",
 *                 "organizationalRole")
 *             .connectionUrl("ldap://openldap")
 *             .usersDn("dc=example,dc=org")
 *             .bindDn("cn=admin,dc=example,dc=org")
 *             .bindCredential("admin")
 *             .build());
 * 
 *         var ldapGroupMapper = new GroupMapper("ldapGroupMapper", GroupMapperArgs.builder()        
 *             .realmId(realm.id())
 *             .ldapUserFederationId(ldapUserFederation.id())
 *             .name("group-mapper")
 *             .ldapGroupsDn("dc=example,dc=org")
 *             .groupNameLdapAttribute("cn")
 *             .groupObjectClasses("groupOfNames")
 *             .membershipAttributeType("DN")
 *             .membershipLdapAttribute("member")
 *             .membershipUserLdapAttribute("cn")
 *             .memberofLdapAttribute("memberOf")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Argument Reference
 * 
 * The following arguments are supported:
 * 
 * - `realm_id` - (Required) The realm that this LDAP mapper will exist in.
 * - `ldap_user_federation_id` - (Required) The ID of the LDAP user federation provider to attach this mapper to.
 * - `name` - (Required) Display name of this mapper when displayed in the console.
 * - `ldap_groups_dn` - (Required) The LDAP DN where groups can be found.
 * - `group_name_ldap_attribute` - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically `cn`.
 * - `group_object_classes` - (Required) Array of strings representing the object classes for the group. Must contain at least one.
 * - `preserve_group_inheritance` - (Optional) When `true`, group inheritance will be propagated from LDAP to Keycloak. When `false`, all LDAP groups will be propagated as top level groups within Keycloak.
 * - `ignore_missing_groups` - (Optional) When `true`, missing groups in the hierarchy will be ignored.
 * - `membership_ldap_attribute` - (Required) The name of the LDAP attribute that is used for membership mappings.
 * - `membership_attribute_type` - (Optional) Can be one of `DN` or `UID`. Defaults to `DN`.
 * - `membership_user_ldap_attribute` - (Required) The name of the LDAP attribute on a user that is used for membership mappings.
 * - `groups_ldap_filter` - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with `(` and end with `)`.
 * - `mode` - (Optional) Can be one of `READ_ONLY` or `LDAP_ONLY`. Defaults to `READ_ONLY`.
 * - `user_roles_retrieve_strategy` - (Optional) Can be one of `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`, `GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`.
 * - `memberof_ldap_attribute` - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to `memberOf`.
 * - `mapped_group_attributes` - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
 * - `drop_non_existing_groups_during_sync` - (Optional) When `true`, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to `false`.
 * 
 * ### Import
 * 
 * LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`.
 * The ID of the LDAP user federation provider and the mapper can be found within
 * the Keycloak GUI, and they are typically GUIDs:
 * 
 */
@ResourceType(type="keycloak:ldap/groupMapper:GroupMapper")
public class GroupMapper extends com.pulumi.resources.CustomResource {
    @Export(name="dropNonExistingGroupsDuringSync", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dropNonExistingGroupsDuringSync;

    public Output<Optional<Boolean>> dropNonExistingGroupsDuringSync() {
        return Codegen.optional(this.dropNonExistingGroupsDuringSync);
    }
    @Export(name="groupNameLdapAttribute", refs={String.class}, tree="[0]")
    private Output<String> groupNameLdapAttribute;

    public Output<String> groupNameLdapAttribute() {
        return this.groupNameLdapAttribute;
    }
    @Export(name="groupObjectClasses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> groupObjectClasses;

    public Output<List<String>> groupObjectClasses() {
        return this.groupObjectClasses;
    }
    @Export(name="groupsLdapFilter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> groupsLdapFilter;

    public Output<Optional<String>> groupsLdapFilter() {
        return Codegen.optional(this.groupsLdapFilter);
    }
    @Export(name="groupsPath", refs={String.class}, tree="[0]")
    private Output<String> groupsPath;

    public Output<String> groupsPath() {
        return this.groupsPath;
    }
    @Export(name="ignoreMissingGroups", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ignoreMissingGroups;

    public Output<Optional<Boolean>> ignoreMissingGroups() {
        return Codegen.optional(this.ignoreMissingGroups);
    }
    @Export(name="ldapGroupsDn", refs={String.class}, tree="[0]")
    private Output<String> ldapGroupsDn;

    public Output<String> ldapGroupsDn() {
        return this.ldapGroupsDn;
    }
    /**
     * The ldap user federation provider to attach this mapper to.
     * 
     */
    @Export(name="ldapUserFederationId", refs={String.class}, tree="[0]")
    private Output<String> ldapUserFederationId;

    /**
     * @return The ldap user federation provider to attach this mapper to.
     * 
     */
    public Output<String> ldapUserFederationId() {
        return this.ldapUserFederationId;
    }
    @Export(name="mappedGroupAttributes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> mappedGroupAttributes;

    public Output<Optional<List<String>>> mappedGroupAttributes() {
        return Codegen.optional(this.mappedGroupAttributes);
    }
    @Export(name="memberofLdapAttribute", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> memberofLdapAttribute;

    public Output<Optional<String>> memberofLdapAttribute() {
        return Codegen.optional(this.memberofLdapAttribute);
    }
    @Export(name="membershipAttributeType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> membershipAttributeType;

    public Output<Optional<String>> membershipAttributeType() {
        return Codegen.optional(this.membershipAttributeType);
    }
    @Export(name="membershipLdapAttribute", refs={String.class}, tree="[0]")
    private Output<String> membershipLdapAttribute;

    public Output<String> membershipLdapAttribute() {
        return this.membershipLdapAttribute;
    }
    @Export(name="membershipUserLdapAttribute", refs={String.class}, tree="[0]")
    private Output<String> membershipUserLdapAttribute;

    public Output<String> membershipUserLdapAttribute() {
        return this.membershipUserLdapAttribute;
    }
    @Export(name="mode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mode;

    public Output<Optional<String>> mode() {
        return Codegen.optional(this.mode);
    }
    /**
     * Display name of the mapper when displayed in the console.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Display name of the mapper when displayed in the console.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="preserveGroupInheritance", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> preserveGroupInheritance;

    public Output<Optional<Boolean>> preserveGroupInheritance() {
        return Codegen.optional(this.preserveGroupInheritance);
    }
    /**
     * The realm in which the ldap user federation provider exists.
     * 
     */
    @Export(name="realmId", refs={String.class}, tree="[0]")
    private Output<String> realmId;

    /**
     * @return The realm in which the ldap user federation provider exists.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }
    @Export(name="userRolesRetrieveStrategy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> userRolesRetrieveStrategy;

    public Output<Optional<String>> userRolesRetrieveStrategy() {
        return Codegen.optional(this.userRolesRetrieveStrategy);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GroupMapper(String name) {
        this(name, GroupMapperArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GroupMapper(String name, GroupMapperArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GroupMapper(String name, GroupMapperArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:ldap/groupMapper:GroupMapper", name, args == null ? GroupMapperArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GroupMapper(String name, Output<String> id, @Nullable GroupMapperState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:ldap/groupMapper:GroupMapper", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GroupMapper get(String name, Output<String> id, @Nullable GroupMapperState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GroupMapper(name, id, state, options);
    }
}
