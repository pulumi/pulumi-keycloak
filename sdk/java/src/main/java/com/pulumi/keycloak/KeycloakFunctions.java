// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.inputs.GetAuthenticationExecutionArgs;
import com.pulumi.keycloak.inputs.GetAuthenticationExecutionPlainArgs;
import com.pulumi.keycloak.inputs.GetAuthenticationFlowArgs;
import com.pulumi.keycloak.inputs.GetAuthenticationFlowPlainArgs;
import com.pulumi.keycloak.inputs.GetClientDescriptionConverterArgs;
import com.pulumi.keycloak.inputs.GetClientDescriptionConverterPlainArgs;
import com.pulumi.keycloak.inputs.GetGroupArgs;
import com.pulumi.keycloak.inputs.GetGroupPlainArgs;
import com.pulumi.keycloak.inputs.GetRealmArgs;
import com.pulumi.keycloak.inputs.GetRealmKeysArgs;
import com.pulumi.keycloak.inputs.GetRealmKeysPlainArgs;
import com.pulumi.keycloak.inputs.GetRealmPlainArgs;
import com.pulumi.keycloak.inputs.GetRoleArgs;
import com.pulumi.keycloak.inputs.GetRolePlainArgs;
import com.pulumi.keycloak.inputs.GetUserArgs;
import com.pulumi.keycloak.inputs.GetUserPlainArgs;
import com.pulumi.keycloak.inputs.GetUserRealmRolesArgs;
import com.pulumi.keycloak.inputs.GetUserRealmRolesPlainArgs;
import com.pulumi.keycloak.outputs.GetAuthenticationExecutionResult;
import com.pulumi.keycloak.outputs.GetAuthenticationFlowResult;
import com.pulumi.keycloak.outputs.GetClientDescriptionConverterResult;
import com.pulumi.keycloak.outputs.GetGroupResult;
import com.pulumi.keycloak.outputs.GetRealmKeysResult;
import com.pulumi.keycloak.outputs.GetRealmResult;
import com.pulumi.keycloak.outputs.GetRoleResult;
import com.pulumi.keycloak.outputs.GetUserRealmRolesResult;
import com.pulumi.keycloak.outputs.GetUserResult;
import java.util.concurrent.CompletableFuture;

public final class KeycloakFunctions {
    /**
     * This data source can be used to fetch the ID of an authentication execution within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationExecutionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationExecution(GetAuthenticationExecutionArgs.builder()
     *             .realmId(realm.id())
     *             .parentFlowAlias("browser")
     *             .providerId("auth-cookie")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuthenticationExecutionResult> getAuthenticationExecution(GetAuthenticationExecutionArgs args) {
        return getAuthenticationExecution(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch the ID of an authentication execution within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationExecutionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationExecution(GetAuthenticationExecutionArgs.builder()
     *             .realmId(realm.id())
     *             .parentFlowAlias("browser")
     *             .providerId("auth-cookie")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAuthenticationExecutionResult> getAuthenticationExecutionPlain(GetAuthenticationExecutionPlainArgs args) {
        return getAuthenticationExecutionPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch the ID of an authentication execution within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationExecutionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationExecution(GetAuthenticationExecutionArgs.builder()
     *             .realmId(realm.id())
     *             .parentFlowAlias("browser")
     *             .providerId("auth-cookie")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuthenticationExecutionResult> getAuthenticationExecution(GetAuthenticationExecutionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getAuthenticationExecution:getAuthenticationExecution", TypeShape.of(GetAuthenticationExecutionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the ID of an authentication execution within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationExecutionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationExecution(GetAuthenticationExecutionArgs.builder()
     *             .realmId(realm.id())
     *             .parentFlowAlias("browser")
     *             .providerId("auth-cookie")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuthenticationExecutionResult> getAuthenticationExecution(GetAuthenticationExecutionArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getAuthenticationExecution:getAuthenticationExecution", TypeShape.of(GetAuthenticationExecutionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the ID of an authentication execution within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationExecutionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationExecution(GetAuthenticationExecutionArgs.builder()
     *             .realmId(realm.id())
     *             .parentFlowAlias("browser")
     *             .providerId("auth-cookie")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAuthenticationExecutionResult> getAuthenticationExecutionPlain(GetAuthenticationExecutionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getAuthenticationExecution:getAuthenticationExecution", TypeShape.of(GetAuthenticationExecutionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the ID of an authentication flow within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationFlowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationFlow(GetAuthenticationFlowArgs.builder()
     *             .realmId(realm.id())
     *             .alias("browser")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuthenticationFlowResult> getAuthenticationFlow(GetAuthenticationFlowArgs args) {
        return getAuthenticationFlow(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch the ID of an authentication flow within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationFlowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationFlow(GetAuthenticationFlowArgs.builder()
     *             .realmId(realm.id())
     *             .alias("browser")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAuthenticationFlowResult> getAuthenticationFlowPlain(GetAuthenticationFlowPlainArgs args) {
        return getAuthenticationFlowPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch the ID of an authentication flow within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationFlowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationFlow(GetAuthenticationFlowArgs.builder()
     *             .realmId(realm.id())
     *             .alias("browser")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuthenticationFlowResult> getAuthenticationFlow(GetAuthenticationFlowArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getAuthenticationFlow:getAuthenticationFlow", TypeShape.of(GetAuthenticationFlowResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the ID of an authentication flow within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationFlowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationFlow(GetAuthenticationFlowArgs.builder()
     *             .realmId(realm.id())
     *             .alias("browser")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuthenticationFlowResult> getAuthenticationFlow(GetAuthenticationFlowArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getAuthenticationFlow:getAuthenticationFlow", TypeShape.of(GetAuthenticationFlowResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the ID of an authentication flow within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetAuthenticationFlowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var browserAuthCookie = KeycloakFunctions.getAuthenticationFlow(GetAuthenticationFlowArgs.builder()
     *             .realmId(realm.id())
     *             .alias("browser")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAuthenticationFlowResult> getAuthenticationFlowPlain(GetAuthenticationFlowPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getAuthenticationFlow:getAuthenticationFlow", TypeShape.of(GetAuthenticationFlowResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/latest/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
     * client. This data can then be used to manage the client within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetClientDescriptionConverterArgs;
     * import com.pulumi.keycloak.saml.Client;
     * import com.pulumi.keycloak.saml.ClientArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var samlClient = KeycloakFunctions.getClientDescriptionConverter(GetClientDescriptionConverterArgs.builder()
     *             .realmId(realm.id())
     *             .body("""
     * 	<md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" validUntil="2021-04-17T12:41:46Z" cacheDuration="PT604800S" entityID="FakeEntityId">
     *     <md:SPSSODescriptor AuthnRequestsSigned="false" WantAssertionsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
     *         <md:KeyDescriptor use="signing">
     * 			<ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
     * 				<ds:X509Data>
     * 					<ds:X509Certificate>MIICyDCCAjGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADCBgDELMAkGA1UEBhMCdXMx
     * 					CzAJBgNVBAgMAklBMSQwIgYDVQQKDBt0ZXJyYWZvcm0tcHJvdmlkZXIta2V5Y2xv
     * 					YWsxHDAaBgNVBAMME21ycGFya2Vycy5naXRodWIuaW8xIDAeBgkqhkiG9w0BCQEW
     * 					EW1pY2hhZWxAcGFya2VyLmdnMB4XDTE5MDEwODE0NDYzNloXDTI5MDEwNTE0NDYz
     * 					NlowgYAxCzAJBgNVBAYTAnVzMQswCQYDVQQIDAJJQTEkMCIGA1UECgwbdGVycmFm
     * 					b3JtLXByb3ZpZGVyLWtleWNsb2FrMRwwGgYDVQQDDBNtcnBhcmtlcnMuZ2l0aHVi
     * 					LmlvMSAwHgYJKoZIhvcNAQkBFhFtaWNoYWVsQHBhcmtlci5nZzCBnzANBgkqhkiG
     * 					9w0BAQEFAAOBjQAwgYkCgYEAxuZny7uyYxGVPtpie14gNQC4tT9sAvO2sVNDhuoe
     * 					qIKLRpNwkHnwQmwe5OxSh9K0BPHp/DNuuVWUqvo4tniEYn3jBr7FwLYLTKojQIxj
     * 					53S1UTT9EXq3eP5HsHMD0QnTuca2nlNYUDBm6ud2fQj0Jt5qLx86EbEC28N56IRv
     * 					GX8CAwEAAaNQME4wHQYDVR0OBBYEFMLnbQh77j7vhGTpAhKpDhCrBsPZMB8GA1Ud
     * 					IwQYMBaAFMLnbQh77j7vhGTpAhKpDhCrBsPZMAwGA1UdEwQFMAMBAf8wDQYJKoZI
     * 					hvcNAQENBQADgYEAB8wGrAQY0pAfwbnYSyBt4STbebeRTu1/q1ucfrtc3qsegcd5
     * 					n01xTR+T2uZJwqHFPpFjr4IPORiHx3+4BWCweslPD53qBjKUPXcbMO1Revjef6Tj
     * 					K3K0AuJ94fxgXVoT61Nzu/a6Lj6RhzU/Dao9mlSbJY+YSbm+ZBpsuRUQ84s=</ds:X509Certificate>
     * 				</ds:X509Data>
     * 			</ds:KeyInfo>
     * 		</md:KeyDescriptor>
     * 		<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
     *         <md:AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://localhost/acs/saml/" index="1"/>
     *     </md:SPSSODescriptor>
     * </md:EntityDescriptor>
     *             """)
     *             .build());
     * 
     *         var samlClientClient = new Client("samlClientClient", ClientArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(samlClient.applyValue(_samlClient -> _samlClient.clientId()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientDescriptionConverterResult> getClientDescriptionConverter(GetClientDescriptionConverterArgs args) {
        return getClientDescriptionConverter(args, InvokeOptions.Empty);
    }
    /**
     * This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/latest/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
     * client. This data can then be used to manage the client within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetClientDescriptionConverterArgs;
     * import com.pulumi.keycloak.saml.Client;
     * import com.pulumi.keycloak.saml.ClientArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var samlClient = KeycloakFunctions.getClientDescriptionConverter(GetClientDescriptionConverterArgs.builder()
     *             .realmId(realm.id())
     *             .body("""
     * 	<md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" validUntil="2021-04-17T12:41:46Z" cacheDuration="PT604800S" entityID="FakeEntityId">
     *     <md:SPSSODescriptor AuthnRequestsSigned="false" WantAssertionsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
     *         <md:KeyDescriptor use="signing">
     * 			<ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
     * 				<ds:X509Data>
     * 					<ds:X509Certificate>MIICyDCCAjGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADCBgDELMAkGA1UEBhMCdXMx
     * 					CzAJBgNVBAgMAklBMSQwIgYDVQQKDBt0ZXJyYWZvcm0tcHJvdmlkZXIta2V5Y2xv
     * 					YWsxHDAaBgNVBAMME21ycGFya2Vycy5naXRodWIuaW8xIDAeBgkqhkiG9w0BCQEW
     * 					EW1pY2hhZWxAcGFya2VyLmdnMB4XDTE5MDEwODE0NDYzNloXDTI5MDEwNTE0NDYz
     * 					NlowgYAxCzAJBgNVBAYTAnVzMQswCQYDVQQIDAJJQTEkMCIGA1UECgwbdGVycmFm
     * 					b3JtLXByb3ZpZGVyLWtleWNsb2FrMRwwGgYDVQQDDBNtcnBhcmtlcnMuZ2l0aHVi
     * 					LmlvMSAwHgYJKoZIhvcNAQkBFhFtaWNoYWVsQHBhcmtlci5nZzCBnzANBgkqhkiG
     * 					9w0BAQEFAAOBjQAwgYkCgYEAxuZny7uyYxGVPtpie14gNQC4tT9sAvO2sVNDhuoe
     * 					qIKLRpNwkHnwQmwe5OxSh9K0BPHp/DNuuVWUqvo4tniEYn3jBr7FwLYLTKojQIxj
     * 					53S1UTT9EXq3eP5HsHMD0QnTuca2nlNYUDBm6ud2fQj0Jt5qLx86EbEC28N56IRv
     * 					GX8CAwEAAaNQME4wHQYDVR0OBBYEFMLnbQh77j7vhGTpAhKpDhCrBsPZMB8GA1Ud
     * 					IwQYMBaAFMLnbQh77j7vhGTpAhKpDhCrBsPZMAwGA1UdEwQFMAMBAf8wDQYJKoZI
     * 					hvcNAQENBQADgYEAB8wGrAQY0pAfwbnYSyBt4STbebeRTu1/q1ucfrtc3qsegcd5
     * 					n01xTR+T2uZJwqHFPpFjr4IPORiHx3+4BWCweslPD53qBjKUPXcbMO1Revjef6Tj
     * 					K3K0AuJ94fxgXVoT61Nzu/a6Lj6RhzU/Dao9mlSbJY+YSbm+ZBpsuRUQ84s=</ds:X509Certificate>
     * 				</ds:X509Data>
     * 			</ds:KeyInfo>
     * 		</md:KeyDescriptor>
     * 		<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
     *         <md:AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://localhost/acs/saml/" index="1"/>
     *     </md:SPSSODescriptor>
     * </md:EntityDescriptor>
     *             """)
     *             .build());
     * 
     *         var samlClientClient = new Client("samlClientClient", ClientArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(samlClient.applyValue(_samlClient -> _samlClient.clientId()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientDescriptionConverterResult> getClientDescriptionConverterPlain(GetClientDescriptionConverterPlainArgs args) {
        return getClientDescriptionConverterPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/latest/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
     * client. This data can then be used to manage the client within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetClientDescriptionConverterArgs;
     * import com.pulumi.keycloak.saml.Client;
     * import com.pulumi.keycloak.saml.ClientArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var samlClient = KeycloakFunctions.getClientDescriptionConverter(GetClientDescriptionConverterArgs.builder()
     *             .realmId(realm.id())
     *             .body("""
     * 	<md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" validUntil="2021-04-17T12:41:46Z" cacheDuration="PT604800S" entityID="FakeEntityId">
     *     <md:SPSSODescriptor AuthnRequestsSigned="false" WantAssertionsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
     *         <md:KeyDescriptor use="signing">
     * 			<ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
     * 				<ds:X509Data>
     * 					<ds:X509Certificate>MIICyDCCAjGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADCBgDELMAkGA1UEBhMCdXMx
     * 					CzAJBgNVBAgMAklBMSQwIgYDVQQKDBt0ZXJyYWZvcm0tcHJvdmlkZXIta2V5Y2xv
     * 					YWsxHDAaBgNVBAMME21ycGFya2Vycy5naXRodWIuaW8xIDAeBgkqhkiG9w0BCQEW
     * 					EW1pY2hhZWxAcGFya2VyLmdnMB4XDTE5MDEwODE0NDYzNloXDTI5MDEwNTE0NDYz
     * 					NlowgYAxCzAJBgNVBAYTAnVzMQswCQYDVQQIDAJJQTEkMCIGA1UECgwbdGVycmFm
     * 					b3JtLXByb3ZpZGVyLWtleWNsb2FrMRwwGgYDVQQDDBNtcnBhcmtlcnMuZ2l0aHVi
     * 					LmlvMSAwHgYJKoZIhvcNAQkBFhFtaWNoYWVsQHBhcmtlci5nZzCBnzANBgkqhkiG
     * 					9w0BAQEFAAOBjQAwgYkCgYEAxuZny7uyYxGVPtpie14gNQC4tT9sAvO2sVNDhuoe
     * 					qIKLRpNwkHnwQmwe5OxSh9K0BPHp/DNuuVWUqvo4tniEYn3jBr7FwLYLTKojQIxj
     * 					53S1UTT9EXq3eP5HsHMD0QnTuca2nlNYUDBm6ud2fQj0Jt5qLx86EbEC28N56IRv
     * 					GX8CAwEAAaNQME4wHQYDVR0OBBYEFMLnbQh77j7vhGTpAhKpDhCrBsPZMB8GA1Ud
     * 					IwQYMBaAFMLnbQh77j7vhGTpAhKpDhCrBsPZMAwGA1UdEwQFMAMBAf8wDQYJKoZI
     * 					hvcNAQENBQADgYEAB8wGrAQY0pAfwbnYSyBt4STbebeRTu1/q1ucfrtc3qsegcd5
     * 					n01xTR+T2uZJwqHFPpFjr4IPORiHx3+4BWCweslPD53qBjKUPXcbMO1Revjef6Tj
     * 					K3K0AuJ94fxgXVoT61Nzu/a6Lj6RhzU/Dao9mlSbJY+YSbm+ZBpsuRUQ84s=</ds:X509Certificate>
     * 				</ds:X509Data>
     * 			</ds:KeyInfo>
     * 		</md:KeyDescriptor>
     * 		<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
     *         <md:AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://localhost/acs/saml/" index="1"/>
     *     </md:SPSSODescriptor>
     * </md:EntityDescriptor>
     *             """)
     *             .build());
     * 
     *         var samlClientClient = new Client("samlClientClient", ClientArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(samlClient.applyValue(_samlClient -> _samlClient.clientId()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientDescriptionConverterResult> getClientDescriptionConverter(GetClientDescriptionConverterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getClientDescriptionConverter:getClientDescriptionConverter", TypeShape.of(GetClientDescriptionConverterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/latest/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
     * client. This data can then be used to manage the client within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetClientDescriptionConverterArgs;
     * import com.pulumi.keycloak.saml.Client;
     * import com.pulumi.keycloak.saml.ClientArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var samlClient = KeycloakFunctions.getClientDescriptionConverter(GetClientDescriptionConverterArgs.builder()
     *             .realmId(realm.id())
     *             .body("""
     * 	<md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" validUntil="2021-04-17T12:41:46Z" cacheDuration="PT604800S" entityID="FakeEntityId">
     *     <md:SPSSODescriptor AuthnRequestsSigned="false" WantAssertionsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
     *         <md:KeyDescriptor use="signing">
     * 			<ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
     * 				<ds:X509Data>
     * 					<ds:X509Certificate>MIICyDCCAjGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADCBgDELMAkGA1UEBhMCdXMx
     * 					CzAJBgNVBAgMAklBMSQwIgYDVQQKDBt0ZXJyYWZvcm0tcHJvdmlkZXIta2V5Y2xv
     * 					YWsxHDAaBgNVBAMME21ycGFya2Vycy5naXRodWIuaW8xIDAeBgkqhkiG9w0BCQEW
     * 					EW1pY2hhZWxAcGFya2VyLmdnMB4XDTE5MDEwODE0NDYzNloXDTI5MDEwNTE0NDYz
     * 					NlowgYAxCzAJBgNVBAYTAnVzMQswCQYDVQQIDAJJQTEkMCIGA1UECgwbdGVycmFm
     * 					b3JtLXByb3ZpZGVyLWtleWNsb2FrMRwwGgYDVQQDDBNtcnBhcmtlcnMuZ2l0aHVi
     * 					LmlvMSAwHgYJKoZIhvcNAQkBFhFtaWNoYWVsQHBhcmtlci5nZzCBnzANBgkqhkiG
     * 					9w0BAQEFAAOBjQAwgYkCgYEAxuZny7uyYxGVPtpie14gNQC4tT9sAvO2sVNDhuoe
     * 					qIKLRpNwkHnwQmwe5OxSh9K0BPHp/DNuuVWUqvo4tniEYn3jBr7FwLYLTKojQIxj
     * 					53S1UTT9EXq3eP5HsHMD0QnTuca2nlNYUDBm6ud2fQj0Jt5qLx86EbEC28N56IRv
     * 					GX8CAwEAAaNQME4wHQYDVR0OBBYEFMLnbQh77j7vhGTpAhKpDhCrBsPZMB8GA1Ud
     * 					IwQYMBaAFMLnbQh77j7vhGTpAhKpDhCrBsPZMAwGA1UdEwQFMAMBAf8wDQYJKoZI
     * 					hvcNAQENBQADgYEAB8wGrAQY0pAfwbnYSyBt4STbebeRTu1/q1ucfrtc3qsegcd5
     * 					n01xTR+T2uZJwqHFPpFjr4IPORiHx3+4BWCweslPD53qBjKUPXcbMO1Revjef6Tj
     * 					K3K0AuJ94fxgXVoT61Nzu/a6Lj6RhzU/Dao9mlSbJY+YSbm+ZBpsuRUQ84s=</ds:X509Certificate>
     * 				</ds:X509Data>
     * 			</ds:KeyInfo>
     * 		</md:KeyDescriptor>
     * 		<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
     *         <md:AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://localhost/acs/saml/" index="1"/>
     *     </md:SPSSODescriptor>
     * </md:EntityDescriptor>
     *             """)
     *             .build());
     * 
     *         var samlClientClient = new Client("samlClientClient", ClientArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(samlClient.applyValue(_samlClient -> _samlClient.clientId()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientDescriptionConverterResult> getClientDescriptionConverter(GetClientDescriptionConverterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getClientDescriptionConverter:getClientDescriptionConverter", TypeShape.of(GetClientDescriptionConverterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source uses the [ClientDescriptionConverter](https://www.keycloak.org/docs-api/latest/javadocs/org/keycloak/exportimport/ClientDescriptionConverter.html) API to convert a generic client description into a Keycloak
     * client. This data can then be used to manage the client within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetClientDescriptionConverterArgs;
     * import com.pulumi.keycloak.saml.Client;
     * import com.pulumi.keycloak.saml.ClientArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var samlClient = KeycloakFunctions.getClientDescriptionConverter(GetClientDescriptionConverterArgs.builder()
     *             .realmId(realm.id())
     *             .body("""
     * 	<md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" validUntil="2021-04-17T12:41:46Z" cacheDuration="PT604800S" entityID="FakeEntityId">
     *     <md:SPSSODescriptor AuthnRequestsSigned="false" WantAssertionsSigned="false" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
     *         <md:KeyDescriptor use="signing">
     * 			<ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
     * 				<ds:X509Data>
     * 					<ds:X509Certificate>MIICyDCCAjGgAwIBAgIBADANBgkqhkiG9w0BAQ0FADCBgDELMAkGA1UEBhMCdXMx
     * 					CzAJBgNVBAgMAklBMSQwIgYDVQQKDBt0ZXJyYWZvcm0tcHJvdmlkZXIta2V5Y2xv
     * 					YWsxHDAaBgNVBAMME21ycGFya2Vycy5naXRodWIuaW8xIDAeBgkqhkiG9w0BCQEW
     * 					EW1pY2hhZWxAcGFya2VyLmdnMB4XDTE5MDEwODE0NDYzNloXDTI5MDEwNTE0NDYz
     * 					NlowgYAxCzAJBgNVBAYTAnVzMQswCQYDVQQIDAJJQTEkMCIGA1UECgwbdGVycmFm
     * 					b3JtLXByb3ZpZGVyLWtleWNsb2FrMRwwGgYDVQQDDBNtcnBhcmtlcnMuZ2l0aHVi
     * 					LmlvMSAwHgYJKoZIhvcNAQkBFhFtaWNoYWVsQHBhcmtlci5nZzCBnzANBgkqhkiG
     * 					9w0BAQEFAAOBjQAwgYkCgYEAxuZny7uyYxGVPtpie14gNQC4tT9sAvO2sVNDhuoe
     * 					qIKLRpNwkHnwQmwe5OxSh9K0BPHp/DNuuVWUqvo4tniEYn3jBr7FwLYLTKojQIxj
     * 					53S1UTT9EXq3eP5HsHMD0QnTuca2nlNYUDBm6ud2fQj0Jt5qLx86EbEC28N56IRv
     * 					GX8CAwEAAaNQME4wHQYDVR0OBBYEFMLnbQh77j7vhGTpAhKpDhCrBsPZMB8GA1Ud
     * 					IwQYMBaAFMLnbQh77j7vhGTpAhKpDhCrBsPZMAwGA1UdEwQFMAMBAf8wDQYJKoZI
     * 					hvcNAQENBQADgYEAB8wGrAQY0pAfwbnYSyBt4STbebeRTu1/q1ucfrtc3qsegcd5
     * 					n01xTR+T2uZJwqHFPpFjr4IPORiHx3+4BWCweslPD53qBjKUPXcbMO1Revjef6Tj
     * 					K3K0AuJ94fxgXVoT61Nzu/a6Lj6RhzU/Dao9mlSbJY+YSbm+ZBpsuRUQ84s=</ds:X509Certificate>
     * 				</ds:X509Data>
     * 			</ds:KeyInfo>
     * 		</md:KeyDescriptor>
     * 		<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>
     *         <md:AssertionConsumerService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://localhost/acs/saml/" index="1"/>
     *     </md:SPSSODescriptor>
     * </md:EntityDescriptor>
     *             """)
     *             .build());
     * 
     *         var samlClientClient = new Client("samlClientClient", ClientArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(samlClient.applyValue(_samlClient -> _samlClient.clientId()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientDescriptionConverterResult> getClientDescriptionConverterPlain(GetClientDescriptionConverterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getClientDescriptionConverter:getClientDescriptionConverter", TypeShape.of(GetClientDescriptionConverterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak group for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.inputs.GetGroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         final var group = KeycloakFunctions.getGroup(GetGroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.applyValue(_group -> _group.id()))
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args) {
        return getGroup(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak group for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.inputs.GetGroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         final var group = KeycloakFunctions.getGroup(GetGroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.applyValue(_group -> _group.id()))
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args) {
        return getGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak group for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.inputs.GetGroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         final var group = KeycloakFunctions.getGroup(GetGroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.applyValue(_group -> _group.id()))
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak group for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.inputs.GetGroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         final var group = KeycloakFunctions.getGroup(GetGroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.applyValue(_group -> _group.id()))
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGroupResult> getGroup(GetGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak group for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.inputs.GetGroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         final var group = KeycloakFunctions.getGroup(GetGroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.applyValue(_group -> _group.id()))
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGroupResult> getGroupPlain(GetGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getGroup:getGroup", TypeShape.of(GetGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak realm for
     * usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.Role;
     * import com.pulumi.keycloak.RoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("my-realm")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Role("group", RoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRealmResult> getRealm(GetRealmArgs args) {
        return getRealm(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak realm for
     * usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.Role;
     * import com.pulumi.keycloak.RoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("my-realm")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Role("group", RoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRealmResult> getRealmPlain(GetRealmPlainArgs args) {
        return getRealmPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak realm for
     * usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.Role;
     * import com.pulumi.keycloak.RoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("my-realm")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Role("group", RoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRealmResult> getRealm(GetRealmArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getRealm:getRealm", TypeShape.of(GetRealmResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak realm for
     * usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.Role;
     * import com.pulumi.keycloak.RoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("my-realm")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Role("group", RoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRealmResult> getRealm(GetRealmArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getRealm:getRealm", TypeShape.of(GetRealmResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak realm for
     * usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.Role;
     * import com.pulumi.keycloak.RoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("my-realm")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Role("group", RoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRealmResult> getRealmPlain(GetRealmPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getRealm:getRealm", TypeShape.of(GetRealmResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status.
     * 
     * Remarks:
     * 
     * - A key must meet all filter criteria
     * - This data source may return more than one value.
     * - If no key matches the filter criteria, then an error will be returned.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var realmKeys = KeycloakFunctions.getRealmKeys(GetRealmKeysArgs.builder()
     *             .realmId(realm.id())
     *             .algorithms(            
     *                 "AES",
     *                 "RS256")
     *             .statuses(            
     *                 "ACTIVE",
     *                 "PASSIVE")
     *             .build());
     * 
     *         ctx.export("certificate", realmKeys.applyValue(_realmKeys -> _realmKeys.keys()[0].certificate()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRealmKeysResult> getRealmKeys(GetRealmKeysArgs args) {
        return getRealmKeys(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status.
     * 
     * Remarks:
     * 
     * - A key must meet all filter criteria
     * - This data source may return more than one value.
     * - If no key matches the filter criteria, then an error will be returned.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var realmKeys = KeycloakFunctions.getRealmKeys(GetRealmKeysArgs.builder()
     *             .realmId(realm.id())
     *             .algorithms(            
     *                 "AES",
     *                 "RS256")
     *             .statuses(            
     *                 "ACTIVE",
     *                 "PASSIVE")
     *             .build());
     * 
     *         ctx.export("certificate", realmKeys.applyValue(_realmKeys -> _realmKeys.keys()[0].certificate()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRealmKeysResult> getRealmKeysPlain(GetRealmKeysPlainArgs args) {
        return getRealmKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status.
     * 
     * Remarks:
     * 
     * - A key must meet all filter criteria
     * - This data source may return more than one value.
     * - If no key matches the filter criteria, then an error will be returned.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var realmKeys = KeycloakFunctions.getRealmKeys(GetRealmKeysArgs.builder()
     *             .realmId(realm.id())
     *             .algorithms(            
     *                 "AES",
     *                 "RS256")
     *             .statuses(            
     *                 "ACTIVE",
     *                 "PASSIVE")
     *             .build());
     * 
     *         ctx.export("certificate", realmKeys.applyValue(_realmKeys -> _realmKeys.keys()[0].certificate()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRealmKeysResult> getRealmKeys(GetRealmKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getRealmKeys:getRealmKeys", TypeShape.of(GetRealmKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status.
     * 
     * Remarks:
     * 
     * - A key must meet all filter criteria
     * - This data source may return more than one value.
     * - If no key matches the filter criteria, then an error will be returned.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var realmKeys = KeycloakFunctions.getRealmKeys(GetRealmKeysArgs.builder()
     *             .realmId(realm.id())
     *             .algorithms(            
     *                 "AES",
     *                 "RS256")
     *             .statuses(            
     *                 "ACTIVE",
     *                 "PASSIVE")
     *             .build());
     * 
     *         ctx.export("certificate", realmKeys.applyValue(_realmKeys -> _realmKeys.keys()[0].certificate()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRealmKeysResult> getRealmKeys(GetRealmKeysArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getRealmKeys:getRealmKeys", TypeShape.of(GetRealmKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status.
     * 
     * Remarks:
     * 
     * - A key must meet all filter criteria
     * - This data source may return more than one value.
     * - If no key matches the filter criteria, then an error will be returned.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var realmKeys = KeycloakFunctions.getRealmKeys(GetRealmKeysArgs.builder()
     *             .realmId(realm.id())
     *             .algorithms(            
     *                 "AES",
     *                 "RS256")
     *             .statuses(            
     *                 "ACTIVE",
     *                 "PASSIVE")
     *             .build());
     * 
     *         ctx.export("certificate", realmKeys.applyValue(_realmKeys -> _realmKeys.keys()[0].certificate()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRealmKeysResult> getRealmKeysPlain(GetRealmKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getRealmKeys:getRealmKeys", TypeShape.of(GetRealmKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak role for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.Group;
     * import com.pulumi.keycloak.GroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Group("group", GroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.id())
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoleResult> getRole(GetRoleArgs args) {
        return getRole(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak role for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.Group;
     * import com.pulumi.keycloak.GroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Group("group", GroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.id())
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoleResult> getRolePlain(GetRolePlainArgs args) {
        return getRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak role for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.Group;
     * import com.pulumi.keycloak.GroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Group("group", GroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.id())
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoleResult> getRole(GetRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getRole:getRole", TypeShape.of(GetRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak role for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.Group;
     * import com.pulumi.keycloak.GroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Group("group", GroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.id())
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRoleResult> getRole(GetRoleArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getRole:getRole", TypeShape.of(GetRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak role for
     * usage with other resources, such as `keycloak.GroupRoles`.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.Group;
     * import com.pulumi.keycloak.GroupArgs;
     * import com.pulumi.keycloak.GroupRoles;
     * import com.pulumi.keycloak.GroupRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var group = new Group("group", GroupArgs.builder()
     *             .realmId(realm.id())
     *             .name("group")
     *             .build());
     * 
     *         var groupRoles = new GroupRoles("groupRoles", GroupRolesArgs.builder()
     *             .realmId(realm.id())
     *             .groupId(group.id())
     *             .roleIds(offlineAccess.applyValue(_offlineAccess -> _offlineAccess.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRoleResult> getRolePlain(GetRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getRole:getRole", TypeShape.of(GetRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         ctx.export("keycloakUserId", defaultAdminUser.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         ctx.export("keycloakUserId", defaultAdminUser.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         ctx.export("keycloakUserId", defaultAdminUser.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         ctx.export("keycloakUserId", defaultAdminUser.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         ctx.export("keycloakUserId", defaultAdminUser.id());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the realm roles of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import com.pulumi.keycloak.inputs.GetUserRealmRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         // use the keycloak_user_realm_roles data source to list role names
     *         final var userRealmRoles = KeycloakFunctions.getUserRealmRoles(GetUserRealmRolesArgs.builder()
     *             .realmId(masterRealm.id())
     *             .userId(defaultAdminUser.id())
     *             .build());
     * 
     *         ctx.export("keycloakUserRoleNames", userRealmRoles.roleNames());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserRealmRolesResult> getUserRealmRoles(GetUserRealmRolesArgs args) {
        return getUserRealmRoles(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch the realm roles of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import com.pulumi.keycloak.inputs.GetUserRealmRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         // use the keycloak_user_realm_roles data source to list role names
     *         final var userRealmRoles = KeycloakFunctions.getUserRealmRoles(GetUserRealmRolesArgs.builder()
     *             .realmId(masterRealm.id())
     *             .userId(defaultAdminUser.id())
     *             .build());
     * 
     *         ctx.export("keycloakUserRoleNames", userRealmRoles.roleNames());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserRealmRolesResult> getUserRealmRolesPlain(GetUserRealmRolesPlainArgs args) {
        return getUserRealmRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch the realm roles of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import com.pulumi.keycloak.inputs.GetUserRealmRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         // use the keycloak_user_realm_roles data source to list role names
     *         final var userRealmRoles = KeycloakFunctions.getUserRealmRoles(GetUserRealmRolesArgs.builder()
     *             .realmId(masterRealm.id())
     *             .userId(defaultAdminUser.id())
     *             .build());
     * 
     *         ctx.export("keycloakUserRoleNames", userRealmRoles.roleNames());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserRealmRolesResult> getUserRealmRoles(GetUserRealmRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getUserRealmRoles:getUserRealmRoles", TypeShape.of(GetUserRealmRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the realm roles of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import com.pulumi.keycloak.inputs.GetUserRealmRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         // use the keycloak_user_realm_roles data source to list role names
     *         final var userRealmRoles = KeycloakFunctions.getUserRealmRoles(GetUserRealmRolesArgs.builder()
     *             .realmId(masterRealm.id())
     *             .userId(defaultAdminUser.id())
     *             .build());
     * 
     *         ctx.export("keycloakUserRoleNames", userRealmRoles.roleNames());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetUserRealmRolesResult> getUserRealmRoles(GetUserRealmRolesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("keycloak:index/getUserRealmRoles:getUserRealmRoles", TypeShape.of(GetUserRealmRolesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch the realm roles of a user within Keycloak.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRealmArgs;
     * import com.pulumi.keycloak.inputs.GetUserArgs;
     * import com.pulumi.keycloak.inputs.GetUserRealmRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var masterRealm = KeycloakFunctions.getRealm(GetRealmArgs.builder()
     *             .realm("master")
     *             .build());
     * 
     *         // use the keycloak_user data source to grab the admin user's ID
     *         final var defaultAdminUser = KeycloakFunctions.getUser(GetUserArgs.builder()
     *             .realmId(masterRealm.id())
     *             .username("keycloak")
     *             .build());
     * 
     *         // use the keycloak_user_realm_roles data source to list role names
     *         final var userRealmRoles = KeycloakFunctions.getUserRealmRoles(GetUserRealmRolesArgs.builder()
     *             .realmId(masterRealm.id())
     *             .userId(defaultAdminUser.id())
     *             .build());
     * 
     *         ctx.export("keycloakUserRoleNames", userRealmRoles.roleNames());
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetUserRealmRolesResult> getUserRealmRolesPlain(GetUserRealmRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:index/getUserRealmRoles:getUserRealmRoles", TypeShape.of(GetUserRealmRolesResult.class), args, Utilities.withVersion(options));
    }
}
