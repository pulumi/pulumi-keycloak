// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.keycloak.RealmLocalizationArgs;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.inputs.RealmLocalizationState;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows for managing Realm Localization Text overrides within Keycloak.
 * 
 * A localization resource defines a schema for representing a locale with a map of key/value pairs and how they are managed within a realm.
 * 
 * Note: whilst you can provide localization texts for unsupported locales, they will not take effect until they are defined within the realm resource.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.RealmLocalization;
 * import com.pulumi.keycloak.RealmLocalizationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm("realm", RealmArgs.builder()
 *             .realm("my-realm")
 *             .build());
 * 
 *         var germanTexts = new RealmLocalization("germanTexts", RealmLocalizationArgs.builder()
 *             .realmId(myRealm.id())
 *             .locale("de")
 *             .texts(Map.of("Hello", "Hallo"))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * This resource does not currently support importing.
 * 
 */
@ResourceType(type="keycloak:index/realmLocalization:RealmLocalization")
public class RealmLocalization extends com.pulumi.resources.CustomResource {
    /**
     * The locale (language code) the texts apply to.
     * 
     */
    @Export(name="locale", refs={String.class}, tree="[0]")
    private Output<String> locale;

    /**
     * @return The locale (language code) the texts apply to.
     * 
     */
    public Output<String> locale() {
        return this.locale;
    }
    /**
     * The ID of the realm the user profile applies to.
     * 
     */
    @Export(name="realmId", refs={String.class}, tree="[0]")
    private Output<String> realmId;

    /**
     * @return The ID of the realm the user profile applies to.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }
    /**
     * A map of translation keys to values.
     * 
     */
    @Export(name="texts", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> texts;

    /**
     * @return A map of translation keys to values.
     * 
     */
    public Output<Optional<Map<String,String>>> texts() {
        return Codegen.optional(this.texts);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RealmLocalization(java.lang.String name) {
        this(name, RealmLocalizationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RealmLocalization(java.lang.String name, RealmLocalizationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RealmLocalization(java.lang.String name, RealmLocalizationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:index/realmLocalization:RealmLocalization", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RealmLocalization(java.lang.String name, Output<java.lang.String> id, @Nullable RealmLocalizationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:index/realmLocalization:RealmLocalization", name, state, makeResourceOptions(options, id), false);
    }

    private static RealmLocalizationArgs makeArgs(RealmLocalizationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RealmLocalizationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RealmLocalization get(java.lang.String name, Output<java.lang.String> id, @Nullable RealmLocalizationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RealmLocalization(name, id, state, options);
    }
}
