// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientServiceAccountRoleState extends com.pulumi.resources.ResourceArgs {

    public static final ClientServiceAccountRoleState Empty = new ClientServiceAccountRoleState();

    /**
     * The id of the client that provides the role.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The id of the client that provides the role.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The realm the clients and roles belong to.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm the clients and roles belong to.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    /**
     * The name of the role that is assigned.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The name of the role that is assigned.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * The id of the service account that is assigned the role (the service account of the client that &#34;consumes&#34; the role).
     * 
     */
    @Import(name="serviceAccountUserId")
    private @Nullable Output<String> serviceAccountUserId;

    /**
     * @return The id of the service account that is assigned the role (the service account of the client that &#34;consumes&#34; the role).
     * 
     */
    public Optional<Output<String>> serviceAccountUserId() {
        return Optional.ofNullable(this.serviceAccountUserId);
    }

    private ClientServiceAccountRoleState() {}

    private ClientServiceAccountRoleState(ClientServiceAccountRoleState $) {
        this.clientId = $.clientId;
        this.realmId = $.realmId;
        this.role = $.role;
        this.serviceAccountUserId = $.serviceAccountUserId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientServiceAccountRoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientServiceAccountRoleState $;

        public Builder() {
            $ = new ClientServiceAccountRoleState();
        }

        public Builder(ClientServiceAccountRoleState defaults) {
            $ = new ClientServiceAccountRoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The id of the client that provides the role.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The id of the client that provides the role.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param realmId The realm the clients and roles belong to.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm the clients and roles belong to.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param role The name of the role that is assigned.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The name of the role that is assigned.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param serviceAccountUserId The id of the service account that is assigned the role (the service account of the client that &#34;consumes&#34; the role).
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountUserId(@Nullable Output<String> serviceAccountUserId) {
            $.serviceAccountUserId = serviceAccountUserId;
            return this;
        }

        /**
         * @param serviceAccountUserId The id of the service account that is assigned the role (the service account of the client that &#34;consumes&#34; the role).
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountUserId(String serviceAccountUserId) {
            return serviceAccountUserId(Output.of(serviceAccountUserId));
        }

        public ClientServiceAccountRoleState build() {
            return $;
        }
    }

}
