// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetRealmWebAuthnPasswordlessPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetRealmWebAuthnPasswordlessPolicyArgs Empty = new GetRealmWebAuthnPasswordlessPolicyArgs();

    @Import(name="acceptableAaguids", required=true)
    private Output<List<String>> acceptableAaguids;

    public Output<List<String>> acceptableAaguids() {
        return this.acceptableAaguids;
    }

    @Import(name="attestationConveyancePreference", required=true)
    private Output<String> attestationConveyancePreference;

    public Output<String> attestationConveyancePreference() {
        return this.attestationConveyancePreference;
    }

    @Import(name="authenticatorAttachment", required=true)
    private Output<String> authenticatorAttachment;

    public Output<String> authenticatorAttachment() {
        return this.authenticatorAttachment;
    }

    @Import(name="avoidSameAuthenticatorRegister", required=true)
    private Output<Boolean> avoidSameAuthenticatorRegister;

    public Output<Boolean> avoidSameAuthenticatorRegister() {
        return this.avoidSameAuthenticatorRegister;
    }

    @Import(name="createTimeout", required=true)
    private Output<Integer> createTimeout;

    public Output<Integer> createTimeout() {
        return this.createTimeout;
    }

    @Import(name="relyingPartyEntityName", required=true)
    private Output<String> relyingPartyEntityName;

    public Output<String> relyingPartyEntityName() {
        return this.relyingPartyEntityName;
    }

    @Import(name="relyingPartyId", required=true)
    private Output<String> relyingPartyId;

    public Output<String> relyingPartyId() {
        return this.relyingPartyId;
    }

    @Import(name="requireResidentKey", required=true)
    private Output<String> requireResidentKey;

    public Output<String> requireResidentKey() {
        return this.requireResidentKey;
    }

    @Import(name="signatureAlgorithms", required=true)
    private Output<List<String>> signatureAlgorithms;

    public Output<List<String>> signatureAlgorithms() {
        return this.signatureAlgorithms;
    }

    @Import(name="userVerificationRequirement", required=true)
    private Output<String> userVerificationRequirement;

    public Output<String> userVerificationRequirement() {
        return this.userVerificationRequirement;
    }

    private GetRealmWebAuthnPasswordlessPolicyArgs() {}

    private GetRealmWebAuthnPasswordlessPolicyArgs(GetRealmWebAuthnPasswordlessPolicyArgs $) {
        this.acceptableAaguids = $.acceptableAaguids;
        this.attestationConveyancePreference = $.attestationConveyancePreference;
        this.authenticatorAttachment = $.authenticatorAttachment;
        this.avoidSameAuthenticatorRegister = $.avoidSameAuthenticatorRegister;
        this.createTimeout = $.createTimeout;
        this.relyingPartyEntityName = $.relyingPartyEntityName;
        this.relyingPartyId = $.relyingPartyId;
        this.requireResidentKey = $.requireResidentKey;
        this.signatureAlgorithms = $.signatureAlgorithms;
        this.userVerificationRequirement = $.userVerificationRequirement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRealmWebAuthnPasswordlessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRealmWebAuthnPasswordlessPolicyArgs $;

        public Builder() {
            $ = new GetRealmWebAuthnPasswordlessPolicyArgs();
        }

        public Builder(GetRealmWebAuthnPasswordlessPolicyArgs defaults) {
            $ = new GetRealmWebAuthnPasswordlessPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder acceptableAaguids(Output<List<String>> acceptableAaguids) {
            $.acceptableAaguids = acceptableAaguids;
            return this;
        }

        public Builder acceptableAaguids(List<String> acceptableAaguids) {
            return acceptableAaguids(Output.of(acceptableAaguids));
        }

        public Builder acceptableAaguids(String... acceptableAaguids) {
            return acceptableAaguids(List.of(acceptableAaguids));
        }

        public Builder attestationConveyancePreference(Output<String> attestationConveyancePreference) {
            $.attestationConveyancePreference = attestationConveyancePreference;
            return this;
        }

        public Builder attestationConveyancePreference(String attestationConveyancePreference) {
            return attestationConveyancePreference(Output.of(attestationConveyancePreference));
        }

        public Builder authenticatorAttachment(Output<String> authenticatorAttachment) {
            $.authenticatorAttachment = authenticatorAttachment;
            return this;
        }

        public Builder authenticatorAttachment(String authenticatorAttachment) {
            return authenticatorAttachment(Output.of(authenticatorAttachment));
        }

        public Builder avoidSameAuthenticatorRegister(Output<Boolean> avoidSameAuthenticatorRegister) {
            $.avoidSameAuthenticatorRegister = avoidSameAuthenticatorRegister;
            return this;
        }

        public Builder avoidSameAuthenticatorRegister(Boolean avoidSameAuthenticatorRegister) {
            return avoidSameAuthenticatorRegister(Output.of(avoidSameAuthenticatorRegister));
        }

        public Builder createTimeout(Output<Integer> createTimeout) {
            $.createTimeout = createTimeout;
            return this;
        }

        public Builder createTimeout(Integer createTimeout) {
            return createTimeout(Output.of(createTimeout));
        }

        public Builder relyingPartyEntityName(Output<String> relyingPartyEntityName) {
            $.relyingPartyEntityName = relyingPartyEntityName;
            return this;
        }

        public Builder relyingPartyEntityName(String relyingPartyEntityName) {
            return relyingPartyEntityName(Output.of(relyingPartyEntityName));
        }

        public Builder relyingPartyId(Output<String> relyingPartyId) {
            $.relyingPartyId = relyingPartyId;
            return this;
        }

        public Builder relyingPartyId(String relyingPartyId) {
            return relyingPartyId(Output.of(relyingPartyId));
        }

        public Builder requireResidentKey(Output<String> requireResidentKey) {
            $.requireResidentKey = requireResidentKey;
            return this;
        }

        public Builder requireResidentKey(String requireResidentKey) {
            return requireResidentKey(Output.of(requireResidentKey));
        }

        public Builder signatureAlgorithms(Output<List<String>> signatureAlgorithms) {
            $.signatureAlgorithms = signatureAlgorithms;
            return this;
        }

        public Builder signatureAlgorithms(List<String> signatureAlgorithms) {
            return signatureAlgorithms(Output.of(signatureAlgorithms));
        }

        public Builder signatureAlgorithms(String... signatureAlgorithms) {
            return signatureAlgorithms(List.of(signatureAlgorithms));
        }

        public Builder userVerificationRequirement(Output<String> userVerificationRequirement) {
            $.userVerificationRequirement = userVerificationRequirement;
            return this;
        }

        public Builder userVerificationRequirement(String userVerificationRequirement) {
            return userVerificationRequirement(Output.of(userVerificationRequirement));
        }

        public GetRealmWebAuthnPasswordlessPolicyArgs build() {
            if ($.acceptableAaguids == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "acceptableAaguids");
            }
            if ($.attestationConveyancePreference == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "attestationConveyancePreference");
            }
            if ($.authenticatorAttachment == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "authenticatorAttachment");
            }
            if ($.avoidSameAuthenticatorRegister == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "avoidSameAuthenticatorRegister");
            }
            if ($.createTimeout == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "createTimeout");
            }
            if ($.relyingPartyEntityName == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "relyingPartyEntityName");
            }
            if ($.relyingPartyId == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "relyingPartyId");
            }
            if ($.requireResidentKey == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "requireResidentKey");
            }
            if ($.signatureAlgorithms == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "signatureAlgorithms");
            }
            if ($.userVerificationRequirement == null) {
                throw new MissingRequiredPropertyException("GetRealmWebAuthnPasswordlessPolicyArgs", "userVerificationRequirement");
            }
            return $;
        }
    }

}
