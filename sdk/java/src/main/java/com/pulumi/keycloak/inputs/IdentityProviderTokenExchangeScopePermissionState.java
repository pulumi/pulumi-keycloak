// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityProviderTokenExchangeScopePermissionState extends com.pulumi.resources.ResourceArgs {

    public static final IdentityProviderTokenExchangeScopePermissionState Empty = new IdentityProviderTokenExchangeScopePermissionState();

    /**
     * (Computed) Resource ID representing the identity provider, this automatically created by keycloak.
     * 
     */
    @Import(name="authorizationIdpResourceId")
    private @Nullable Output<String> authorizationIdpResourceId;

    /**
     * @return (Computed) Resource ID representing the identity provider, this automatically created by keycloak.
     * 
     */
    public Optional<Output<String>> authorizationIdpResourceId() {
        return Optional.ofNullable(this.authorizationIdpResourceId);
    }

    /**
     * (Computed) Resource server ID representing the realm management client on which this permission is managed.
     * 
     */
    @Import(name="authorizationResourceServerId")
    private @Nullable Output<String> authorizationResourceServerId;

    /**
     * @return (Computed) Resource server ID representing the realm management client on which this permission is managed.
     * 
     */
    public Optional<Output<String>> authorizationResourceServerId() {
        return Optional.ofNullable(this.authorizationResourceServerId);
    }

    /**
     * (Computed) Permission ID representing the Permission with scope &#39;Token Exchange&#39; and the resource &#39;authorization_idp_resource_id&#39;, this automatically created by keycloak, the policy ID will be set on this permission.
     * 
     */
    @Import(name="authorizationTokenExchangeScopePermissionId")
    private @Nullable Output<String> authorizationTokenExchangeScopePermissionId;

    /**
     * @return (Computed) Permission ID representing the Permission with scope &#39;Token Exchange&#39; and the resource &#39;authorization_idp_resource_id&#39;, this automatically created by keycloak, the policy ID will be set on this permission.
     * 
     */
    public Optional<Output<String>> authorizationTokenExchangeScopePermissionId() {
        return Optional.ofNullable(this.authorizationTokenExchangeScopePermissionId);
    }

    /**
     * A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
     * 
     */
    @Import(name="clients")
    private @Nullable Output<List<String>> clients;

    /**
     * @return A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
     * 
     */
    public Optional<Output<List<String>>> clients() {
        return Optional.ofNullable(this.clients);
    }

    /**
     * (Computed) Policy ID that will be set on the scope based token exchange permission automatically created by enabling permissions on the reference identity provider.
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    /**
     * @return (Computed) Policy ID that will be set on the scope based token exchange permission automatically created by enabling permissions on the reference identity provider.
     * 
     */
    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    /**
     * @return Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
     * 
     */
    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    /**
     * Alias of the identity provider.
     * 
     */
    @Import(name="providerAlias")
    private @Nullable Output<String> providerAlias;

    /**
     * @return Alias of the identity provider.
     * 
     */
    public Optional<Output<String>> providerAlias() {
        return Optional.ofNullable(this.providerAlias);
    }

    /**
     * The realm that the identity provider exists in.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm that the identity provider exists in.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    private IdentityProviderTokenExchangeScopePermissionState() {}

    private IdentityProviderTokenExchangeScopePermissionState(IdentityProviderTokenExchangeScopePermissionState $) {
        this.authorizationIdpResourceId = $.authorizationIdpResourceId;
        this.authorizationResourceServerId = $.authorizationResourceServerId;
        this.authorizationTokenExchangeScopePermissionId = $.authorizationTokenExchangeScopePermissionId;
        this.clients = $.clients;
        this.policyId = $.policyId;
        this.policyType = $.policyType;
        this.providerAlias = $.providerAlias;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityProviderTokenExchangeScopePermissionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityProviderTokenExchangeScopePermissionState $;

        public Builder() {
            $ = new IdentityProviderTokenExchangeScopePermissionState();
        }

        public Builder(IdentityProviderTokenExchangeScopePermissionState defaults) {
            $ = new IdentityProviderTokenExchangeScopePermissionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationIdpResourceId (Computed) Resource ID representing the identity provider, this automatically created by keycloak.
         * 
         * @return builder
         * 
         */
        public Builder authorizationIdpResourceId(@Nullable Output<String> authorizationIdpResourceId) {
            $.authorizationIdpResourceId = authorizationIdpResourceId;
            return this;
        }

        /**
         * @param authorizationIdpResourceId (Computed) Resource ID representing the identity provider, this automatically created by keycloak.
         * 
         * @return builder
         * 
         */
        public Builder authorizationIdpResourceId(String authorizationIdpResourceId) {
            return authorizationIdpResourceId(Output.of(authorizationIdpResourceId));
        }

        /**
         * @param authorizationResourceServerId (Computed) Resource server ID representing the realm management client on which this permission is managed.
         * 
         * @return builder
         * 
         */
        public Builder authorizationResourceServerId(@Nullable Output<String> authorizationResourceServerId) {
            $.authorizationResourceServerId = authorizationResourceServerId;
            return this;
        }

        /**
         * @param authorizationResourceServerId (Computed) Resource server ID representing the realm management client on which this permission is managed.
         * 
         * @return builder
         * 
         */
        public Builder authorizationResourceServerId(String authorizationResourceServerId) {
            return authorizationResourceServerId(Output.of(authorizationResourceServerId));
        }

        /**
         * @param authorizationTokenExchangeScopePermissionId (Computed) Permission ID representing the Permission with scope &#39;Token Exchange&#39; and the resource &#39;authorization_idp_resource_id&#39;, this automatically created by keycloak, the policy ID will be set on this permission.
         * 
         * @return builder
         * 
         */
        public Builder authorizationTokenExchangeScopePermissionId(@Nullable Output<String> authorizationTokenExchangeScopePermissionId) {
            $.authorizationTokenExchangeScopePermissionId = authorizationTokenExchangeScopePermissionId;
            return this;
        }

        /**
         * @param authorizationTokenExchangeScopePermissionId (Computed) Permission ID representing the Permission with scope &#39;Token Exchange&#39; and the resource &#39;authorization_idp_resource_id&#39;, this automatically created by keycloak, the policy ID will be set on this permission.
         * 
         * @return builder
         * 
         */
        public Builder authorizationTokenExchangeScopePermissionId(String authorizationTokenExchangeScopePermissionId) {
            return authorizationTokenExchangeScopePermissionId(Output.of(authorizationTokenExchangeScopePermissionId));
        }

        /**
         * @param clients A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
         * 
         * @return builder
         * 
         */
        public Builder clients(@Nullable Output<List<String>> clients) {
            $.clients = clients;
            return this;
        }

        /**
         * @param clients A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
         * 
         * @return builder
         * 
         */
        public Builder clients(List<String> clients) {
            return clients(Output.of(clients));
        }

        /**
         * @param clients A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
         * 
         * @return builder
         * 
         */
        public Builder clients(String... clients) {
            return clients(List.of(clients));
        }

        /**
         * @param policyId (Computed) Policy ID that will be set on the scope based token exchange permission automatically created by enabling permissions on the reference identity provider.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId (Computed) Policy ID that will be set on the scope based token exchange permission automatically created by enabling permissions on the reference identity provider.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param policyType Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
         * 
         * @return builder
         * 
         */
        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param providerAlias Alias of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder providerAlias(@Nullable Output<String> providerAlias) {
            $.providerAlias = providerAlias;
            return this;
        }

        /**
         * @param providerAlias Alias of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder providerAlias(String providerAlias) {
            return providerAlias(Output.of(providerAlias));
        }

        /**
         * @param realmId The realm that the identity provider exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm that the identity provider exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public IdentityProviderTokenExchangeScopePermissionState build() {
            return $;
        }
    }

}
