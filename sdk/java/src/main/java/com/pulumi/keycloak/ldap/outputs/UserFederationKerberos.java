// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.ldap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UserFederationKerberos {
    /**
     * @return The name of the kerberos realm, e.g. FOO.LOCAL.
     * 
     */
    private String kerberosRealm;
    /**
     * @return Path to the kerberos keytab file on the server with credentials of the service principal.
     * 
     */
    private String keyTab;
    /**
     * @return The kerberos server principal, e.g. &#39;HTTP/host.foo.com@FOO.LOCAL&#39;.
     * 
     */
    private String serverPrincipal;
    /**
     * @return Use kerberos login module instead of ldap service api. Defaults to `false`.
     * 
     */
    private @Nullable Boolean useKerberosForPasswordAuthentication;

    private UserFederationKerberos() {}
    /**
     * @return The name of the kerberos realm, e.g. FOO.LOCAL.
     * 
     */
    public String kerberosRealm() {
        return this.kerberosRealm;
    }
    /**
     * @return Path to the kerberos keytab file on the server with credentials of the service principal.
     * 
     */
    public String keyTab() {
        return this.keyTab;
    }
    /**
     * @return The kerberos server principal, e.g. &#39;HTTP/host.foo.com@FOO.LOCAL&#39;.
     * 
     */
    public String serverPrincipal() {
        return this.serverPrincipal;
    }
    /**
     * @return Use kerberos login module instead of ldap service api. Defaults to `false`.
     * 
     */
    public Optional<Boolean> useKerberosForPasswordAuthentication() {
        return Optional.ofNullable(this.useKerberosForPasswordAuthentication);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserFederationKerberos defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String kerberosRealm;
        private String keyTab;
        private String serverPrincipal;
        private @Nullable Boolean useKerberosForPasswordAuthentication;
        public Builder() {}
        public Builder(UserFederationKerberos defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.kerberosRealm = defaults.kerberosRealm;
    	      this.keyTab = defaults.keyTab;
    	      this.serverPrincipal = defaults.serverPrincipal;
    	      this.useKerberosForPasswordAuthentication = defaults.useKerberosForPasswordAuthentication;
        }

        @CustomType.Setter
        public Builder kerberosRealm(String kerberosRealm) {
            if (kerberosRealm == null) {
              throw new MissingRequiredPropertyException("UserFederationKerberos", "kerberosRealm");
            }
            this.kerberosRealm = kerberosRealm;
            return this;
        }
        @CustomType.Setter
        public Builder keyTab(String keyTab) {
            if (keyTab == null) {
              throw new MissingRequiredPropertyException("UserFederationKerberos", "keyTab");
            }
            this.keyTab = keyTab;
            return this;
        }
        @CustomType.Setter
        public Builder serverPrincipal(String serverPrincipal) {
            if (serverPrincipal == null) {
              throw new MissingRequiredPropertyException("UserFederationKerberos", "serverPrincipal");
            }
            this.serverPrincipal = serverPrincipal;
            return this;
        }
        @CustomType.Setter
        public Builder useKerberosForPasswordAuthentication(@Nullable Boolean useKerberosForPasswordAuthentication) {

            this.useKerberosForPasswordAuthentication = useKerberosForPasswordAuthentication;
            return this;
        }
        public UserFederationKerberos build() {
            final var _resultValue = new UserFederationKerberos();
            _resultValue.kerberosRealm = kerberosRealm;
            _resultValue.keyTab = keyTab;
            _resultValue.serverPrincipal = serverPrincipal;
            _resultValue.useKerberosForPasswordAuthentication = useKerberosForPasswordAuthentication;
            return _resultValue;
        }
    }
}
