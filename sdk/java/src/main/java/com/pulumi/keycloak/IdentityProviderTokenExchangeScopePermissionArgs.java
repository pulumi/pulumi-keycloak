// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityProviderTokenExchangeScopePermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentityProviderTokenExchangeScopePermissionArgs Empty = new IdentityProviderTokenExchangeScopePermissionArgs();

    /**
     * A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
     * 
     */
    @Import(name="clients", required=true)
    private Output<List<String>> clients;

    /**
     * @return A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
     * 
     */
    public Output<List<String>> clients() {
        return this.clients;
    }

    /**
     * Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    /**
     * @return Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
     * 
     */
    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    /**
     * Alias of the identity provider.
     * 
     */
    @Import(name="providerAlias", required=true)
    private Output<String> providerAlias;

    /**
     * @return Alias of the identity provider.
     * 
     */
    public Output<String> providerAlias() {
        return this.providerAlias;
    }

    /**
     * The realm that the identity provider exists in.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm that the identity provider exists in.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    private IdentityProviderTokenExchangeScopePermissionArgs() {}

    private IdentityProviderTokenExchangeScopePermissionArgs(IdentityProviderTokenExchangeScopePermissionArgs $) {
        this.clients = $.clients;
        this.policyType = $.policyType;
        this.providerAlias = $.providerAlias;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityProviderTokenExchangeScopePermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityProviderTokenExchangeScopePermissionArgs $;

        public Builder() {
            $ = new IdentityProviderTokenExchangeScopePermissionArgs();
        }

        public Builder(IdentityProviderTokenExchangeScopePermissionArgs defaults) {
            $ = new IdentityProviderTokenExchangeScopePermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clients A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
         * 
         * @return builder
         * 
         */
        public Builder clients(Output<List<String>> clients) {
            $.clients = clients;
            return this;
        }

        /**
         * @param clients A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
         * 
         * @return builder
         * 
         */
        public Builder clients(List<String> clients) {
            return clients(Output.of(clients));
        }

        /**
         * @param clients A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.
         * 
         * @return builder
         * 
         */
        public Builder clients(String... clients) {
            return clients(List.of(clients));
        }

        /**
         * @param policyType Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
         * 
         * @return builder
         * 
         */
        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType Defaults to &#34;client&#34; This is also the only value policy type supported by this provider.
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param providerAlias Alias of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder providerAlias(Output<String> providerAlias) {
            $.providerAlias = providerAlias;
            return this;
        }

        /**
         * @param providerAlias Alias of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder providerAlias(String providerAlias) {
            return providerAlias(Output.of(providerAlias));
        }

        /**
         * @param realmId The realm that the identity provider exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm that the identity provider exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public IdentityProviderTokenExchangeScopePermissionArgs build() {
            if ($.clients == null) {
                throw new MissingRequiredPropertyException("IdentityProviderTokenExchangeScopePermissionArgs", "clients");
            }
            if ($.providerAlias == null) {
                throw new MissingRequiredPropertyException("IdentityProviderTokenExchangeScopePermissionArgs", "providerAlias");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("IdentityProviderTokenExchangeScopePermissionArgs", "realmId");
            }
            return $;
        }
    }

}
