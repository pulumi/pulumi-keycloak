// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.keycloak.openid.inputs.ClientPermissionsConfigureScopeArgs;
import com.pulumi.keycloak.openid.inputs.ClientPermissionsManageScopeArgs;
import com.pulumi.keycloak.openid.inputs.ClientPermissionsMapRolesClientScopeScopeArgs;
import com.pulumi.keycloak.openid.inputs.ClientPermissionsMapRolesCompositeScopeArgs;
import com.pulumi.keycloak.openid.inputs.ClientPermissionsMapRolesScopeArgs;
import com.pulumi.keycloak.openid.inputs.ClientPermissionsTokenExchangeScopeArgs;
import com.pulumi.keycloak.openid.inputs.ClientPermissionsViewScopeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientPermissionsState extends com.pulumi.resources.ResourceArgs {

    public static final ClientPermissionsState Empty = new ClientPermissionsState();

    /**
     * Resource server id representing the realm management client on which this permission is managed
     * 
     */
    @Import(name="authorizationResourceServerId")
    private @Nullable Output<String> authorizationResourceServerId;

    /**
     * @return Resource server id representing the realm management client on which this permission is managed
     * 
     */
    public Optional<Output<String>> authorizationResourceServerId() {
        return Optional.ofNullable(this.authorizationResourceServerId);
    }

    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    @Import(name="configureScope")
    private @Nullable Output<ClientPermissionsConfigureScopeArgs> configureScope;

    public Optional<Output<ClientPermissionsConfigureScopeArgs>> configureScope() {
        return Optional.ofNullable(this.configureScope);
    }

    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="manageScope")
    private @Nullable Output<ClientPermissionsManageScopeArgs> manageScope;

    public Optional<Output<ClientPermissionsManageScopeArgs>> manageScope() {
        return Optional.ofNullable(this.manageScope);
    }

    @Import(name="mapRolesClientScopeScope")
    private @Nullable Output<ClientPermissionsMapRolesClientScopeScopeArgs> mapRolesClientScopeScope;

    public Optional<Output<ClientPermissionsMapRolesClientScopeScopeArgs>> mapRolesClientScopeScope() {
        return Optional.ofNullable(this.mapRolesClientScopeScope);
    }

    @Import(name="mapRolesCompositeScope")
    private @Nullable Output<ClientPermissionsMapRolesCompositeScopeArgs> mapRolesCompositeScope;

    public Optional<Output<ClientPermissionsMapRolesCompositeScopeArgs>> mapRolesCompositeScope() {
        return Optional.ofNullable(this.mapRolesCompositeScope);
    }

    @Import(name="mapRolesScope")
    private @Nullable Output<ClientPermissionsMapRolesScopeArgs> mapRolesScope;

    public Optional<Output<ClientPermissionsMapRolesScopeArgs>> mapRolesScope() {
        return Optional.ofNullable(this.mapRolesScope);
    }

    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    @Import(name="tokenExchangeScope")
    private @Nullable Output<ClientPermissionsTokenExchangeScopeArgs> tokenExchangeScope;

    public Optional<Output<ClientPermissionsTokenExchangeScopeArgs>> tokenExchangeScope() {
        return Optional.ofNullable(this.tokenExchangeScope);
    }

    @Import(name="viewScope")
    private @Nullable Output<ClientPermissionsViewScopeArgs> viewScope;

    public Optional<Output<ClientPermissionsViewScopeArgs>> viewScope() {
        return Optional.ofNullable(this.viewScope);
    }

    private ClientPermissionsState() {}

    private ClientPermissionsState(ClientPermissionsState $) {
        this.authorizationResourceServerId = $.authorizationResourceServerId;
        this.clientId = $.clientId;
        this.configureScope = $.configureScope;
        this.enabled = $.enabled;
        this.manageScope = $.manageScope;
        this.mapRolesClientScopeScope = $.mapRolesClientScopeScope;
        this.mapRolesCompositeScope = $.mapRolesCompositeScope;
        this.mapRolesScope = $.mapRolesScope;
        this.realmId = $.realmId;
        this.tokenExchangeScope = $.tokenExchangeScope;
        this.viewScope = $.viewScope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientPermissionsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientPermissionsState $;

        public Builder() {
            $ = new ClientPermissionsState();
        }

        public Builder(ClientPermissionsState defaults) {
            $ = new ClientPermissionsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationResourceServerId Resource server id representing the realm management client on which this permission is managed
         * 
         * @return builder
         * 
         */
        public Builder authorizationResourceServerId(@Nullable Output<String> authorizationResourceServerId) {
            $.authorizationResourceServerId = authorizationResourceServerId;
            return this;
        }

        /**
         * @param authorizationResourceServerId Resource server id representing the realm management client on which this permission is managed
         * 
         * @return builder
         * 
         */
        public Builder authorizationResourceServerId(String authorizationResourceServerId) {
            return authorizationResourceServerId(Output.of(authorizationResourceServerId));
        }

        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder configureScope(@Nullable Output<ClientPermissionsConfigureScopeArgs> configureScope) {
            $.configureScope = configureScope;
            return this;
        }

        public Builder configureScope(ClientPermissionsConfigureScopeArgs configureScope) {
            return configureScope(Output.of(configureScope));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder manageScope(@Nullable Output<ClientPermissionsManageScopeArgs> manageScope) {
            $.manageScope = manageScope;
            return this;
        }

        public Builder manageScope(ClientPermissionsManageScopeArgs manageScope) {
            return manageScope(Output.of(manageScope));
        }

        public Builder mapRolesClientScopeScope(@Nullable Output<ClientPermissionsMapRolesClientScopeScopeArgs> mapRolesClientScopeScope) {
            $.mapRolesClientScopeScope = mapRolesClientScopeScope;
            return this;
        }

        public Builder mapRolesClientScopeScope(ClientPermissionsMapRolesClientScopeScopeArgs mapRolesClientScopeScope) {
            return mapRolesClientScopeScope(Output.of(mapRolesClientScopeScope));
        }

        public Builder mapRolesCompositeScope(@Nullable Output<ClientPermissionsMapRolesCompositeScopeArgs> mapRolesCompositeScope) {
            $.mapRolesCompositeScope = mapRolesCompositeScope;
            return this;
        }

        public Builder mapRolesCompositeScope(ClientPermissionsMapRolesCompositeScopeArgs mapRolesCompositeScope) {
            return mapRolesCompositeScope(Output.of(mapRolesCompositeScope));
        }

        public Builder mapRolesScope(@Nullable Output<ClientPermissionsMapRolesScopeArgs> mapRolesScope) {
            $.mapRolesScope = mapRolesScope;
            return this;
        }

        public Builder mapRolesScope(ClientPermissionsMapRolesScopeArgs mapRolesScope) {
            return mapRolesScope(Output.of(mapRolesScope));
        }

        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public Builder tokenExchangeScope(@Nullable Output<ClientPermissionsTokenExchangeScopeArgs> tokenExchangeScope) {
            $.tokenExchangeScope = tokenExchangeScope;
            return this;
        }

        public Builder tokenExchangeScope(ClientPermissionsTokenExchangeScopeArgs tokenExchangeScope) {
            return tokenExchangeScope(Output.of(tokenExchangeScope));
        }

        public Builder viewScope(@Nullable Output<ClientPermissionsViewScopeArgs> viewScope) {
            $.viewScope = viewScope;
            return this;
        }

        public Builder viewScope(ClientPermissionsViewScopeArgs viewScope) {
            return viewScope(Output.of(viewScope));
        }

        public ClientPermissionsState build() {
            return $;
        }
    }

}
