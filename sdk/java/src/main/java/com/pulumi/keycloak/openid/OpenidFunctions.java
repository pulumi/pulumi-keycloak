// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.openid.inputs.GetClientArgs;
import com.pulumi.keycloak.openid.inputs.GetClientAuthorizationPolicyArgs;
import com.pulumi.keycloak.openid.inputs.GetClientAuthorizationPolicyPlainArgs;
import com.pulumi.keycloak.openid.inputs.GetClientPlainArgs;
import com.pulumi.keycloak.openid.inputs.GetClientScopeArgs;
import com.pulumi.keycloak.openid.inputs.GetClientScopePlainArgs;
import com.pulumi.keycloak.openid.inputs.GetClientServiceAccountUserArgs;
import com.pulumi.keycloak.openid.inputs.GetClientServiceAccountUserPlainArgs;
import com.pulumi.keycloak.openid.outputs.GetClientAuthorizationPolicyResult;
import com.pulumi.keycloak.openid.outputs.GetClientResult;
import com.pulumi.keycloak.openid.outputs.GetClientScopeResult;
import com.pulumi.keycloak.openid.outputs.GetClientServiceAccountUserResult;
import java.util.concurrent.CompletableFuture;

public final class OpenidFunctions {
    /**
     * ## # keycloak.openid.Client data source
     * 
     * This data source can be used to fetch properties of a Keycloak OpenID client for usage with other resources.
     * 
     * ### Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realmManagement = OpenidFunctions.getClient(GetClientArgs.builder()
     *             .realmId("my-realm")
     *             .clientId("realm-management")
     *             .build());
     * 
     *         // use the data source
     *         final var admin = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId("my-realm")
     *             .clientId(realmManagement.applyValue(getClientResult -> getClientResult.id()))
     *             .name("realm-admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Argument Reference
     * 
     * The following arguments are supported:
     * 
     * - `realm_id` - (Required) The realm id.
     * - `client_id` - (Required) The client id.
     * 
     * ### Attributes Reference
     * 
     * See the docs for the `keycloak.openid.Client` resource for details on the exported attributes.
     * 
     */
    public static Output<GetClientResult> getClient(GetClientArgs args) {
        return getClient(args, InvokeOptions.Empty);
    }
    /**
     * ## # keycloak.openid.Client data source
     * 
     * This data source can be used to fetch properties of a Keycloak OpenID client for usage with other resources.
     * 
     * ### Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realmManagement = OpenidFunctions.getClient(GetClientArgs.builder()
     *             .realmId("my-realm")
     *             .clientId("realm-management")
     *             .build());
     * 
     *         // use the data source
     *         final var admin = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId("my-realm")
     *             .clientId(realmManagement.applyValue(getClientResult -> getClientResult.id()))
     *             .name("realm-admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Argument Reference
     * 
     * The following arguments are supported:
     * 
     * - `realm_id` - (Required) The realm id.
     * - `client_id` - (Required) The client id.
     * 
     * ### Attributes Reference
     * 
     * See the docs for the `keycloak.openid.Client` resource for details on the exported attributes.
     * 
     */
    public static CompletableFuture<GetClientResult> getClientPlain(GetClientPlainArgs args) {
        return getClientPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## # keycloak.openid.Client data source
     * 
     * This data source can be used to fetch properties of a Keycloak OpenID client for usage with other resources.
     * 
     * ### Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realmManagement = OpenidFunctions.getClient(GetClientArgs.builder()
     *             .realmId("my-realm")
     *             .clientId("realm-management")
     *             .build());
     * 
     *         // use the data source
     *         final var admin = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId("my-realm")
     *             .clientId(realmManagement.applyValue(getClientResult -> getClientResult.id()))
     *             .name("realm-admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Argument Reference
     * 
     * The following arguments are supported:
     * 
     * - `realm_id` - (Required) The realm id.
     * - `client_id` - (Required) The client id.
     * 
     * ### Attributes Reference
     * 
     * See the docs for the `keycloak.openid.Client` resource for details on the exported attributes.
     * 
     */
    public static Output<GetClientResult> getClient(GetClientArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:openid/getClient:getClient", TypeShape.of(GetClientResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## # keycloak.openid.Client data source
     * 
     * This data source can be used to fetch properties of a Keycloak OpenID client for usage with other resources.
     * 
     * ### Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var realmManagement = OpenidFunctions.getClient(GetClientArgs.builder()
     *             .realmId("my-realm")
     *             .clientId("realm-management")
     *             .build());
     * 
     *         // use the data source
     *         final var admin = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId("my-realm")
     *             .clientId(realmManagement.applyValue(getClientResult -> getClientResult.id()))
     *             .name("realm-admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Argument Reference
     * 
     * The following arguments are supported:
     * 
     * - `realm_id` - (Required) The realm id.
     * - `client_id` - (Required) The client id.
     * 
     * ### Attributes Reference
     * 
     * See the docs for the `keycloak.openid.Client` resource for details on the exported attributes.
     * 
     */
    public static CompletableFuture<GetClientResult> getClientPlain(GetClientPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:openid/getClient:getClient", TypeShape.of(GetClientResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch policy and permission information for an OpenID client that has authorization enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create a new OpenID client with authorization enabled. This will cause Keycloak to create a default
     * permission for this client called &#34;Default Permission&#34;. We&#39;ll use the `keycloak.openid.getClientAuthorizationPolicy` data
     * source to fetch information about this permission, so we can use it to create a new resource-based authorization permission.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.inputs.ClientAuthorizationArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientAuthorizationPolicyArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResource;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResourceArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermission;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var clientWithAuthz = new Client("clientWithAuthz", ClientArgs.builder()        
     *             .clientId("client-with-authz")
     *             .name("client-with-authz")
     *             .realmId(realm.id())
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .authorization(ClientAuthorizationArgs.builder()
     *                 .policyEnforcementMode("ENFORCING")
     *                 .build())
     *             .build());
     * 
     *         final var defaultPermission = OpenidFunctions.getClientAuthorizationPolicy(GetClientAuthorizationPolicyArgs.builder()
     *             .realmId(realm.id())
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("Default Permission")
     *             .build());
     * 
     *         var resource = new ClientAuthorizationResource("resource", ClientAuthorizationResourceArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("authorization-resource")
     *             .realmId(realm.id())
     *             .uris("/endpoint/*")
     *             .attributes(Map.of("foo", "bar"))
     *             .build());
     * 
     *         var permission = new ClientAuthorizationPermission("permission", ClientAuthorizationPermissionArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .realmId(realm.id())
     *             .name("authorization-permission")
     *             .policies(defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult).applyValue(defaultPermission -> defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult.id())))
     *             .resources(resource.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientAuthorizationPolicyResult> getClientAuthorizationPolicy(GetClientAuthorizationPolicyArgs args) {
        return getClientAuthorizationPolicy(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch policy and permission information for an OpenID client that has authorization enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create a new OpenID client with authorization enabled. This will cause Keycloak to create a default
     * permission for this client called &#34;Default Permission&#34;. We&#39;ll use the `keycloak.openid.getClientAuthorizationPolicy` data
     * source to fetch information about this permission, so we can use it to create a new resource-based authorization permission.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.inputs.ClientAuthorizationArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientAuthorizationPolicyArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResource;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResourceArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermission;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var clientWithAuthz = new Client("clientWithAuthz", ClientArgs.builder()        
     *             .clientId("client-with-authz")
     *             .name("client-with-authz")
     *             .realmId(realm.id())
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .authorization(ClientAuthorizationArgs.builder()
     *                 .policyEnforcementMode("ENFORCING")
     *                 .build())
     *             .build());
     * 
     *         final var defaultPermission = OpenidFunctions.getClientAuthorizationPolicy(GetClientAuthorizationPolicyArgs.builder()
     *             .realmId(realm.id())
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("Default Permission")
     *             .build());
     * 
     *         var resource = new ClientAuthorizationResource("resource", ClientAuthorizationResourceArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("authorization-resource")
     *             .realmId(realm.id())
     *             .uris("/endpoint/*")
     *             .attributes(Map.of("foo", "bar"))
     *             .build());
     * 
     *         var permission = new ClientAuthorizationPermission("permission", ClientAuthorizationPermissionArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .realmId(realm.id())
     *             .name("authorization-permission")
     *             .policies(defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult).applyValue(defaultPermission -> defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult.id())))
     *             .resources(resource.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientAuthorizationPolicyResult> getClientAuthorizationPolicyPlain(GetClientAuthorizationPolicyPlainArgs args) {
        return getClientAuthorizationPolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch policy and permission information for an OpenID client that has authorization enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create a new OpenID client with authorization enabled. This will cause Keycloak to create a default
     * permission for this client called &#34;Default Permission&#34;. We&#39;ll use the `keycloak.openid.getClientAuthorizationPolicy` data
     * source to fetch information about this permission, so we can use it to create a new resource-based authorization permission.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.inputs.ClientAuthorizationArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientAuthorizationPolicyArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResource;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResourceArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermission;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var clientWithAuthz = new Client("clientWithAuthz", ClientArgs.builder()        
     *             .clientId("client-with-authz")
     *             .name("client-with-authz")
     *             .realmId(realm.id())
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .authorization(ClientAuthorizationArgs.builder()
     *                 .policyEnforcementMode("ENFORCING")
     *                 .build())
     *             .build());
     * 
     *         final var defaultPermission = OpenidFunctions.getClientAuthorizationPolicy(GetClientAuthorizationPolicyArgs.builder()
     *             .realmId(realm.id())
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("Default Permission")
     *             .build());
     * 
     *         var resource = new ClientAuthorizationResource("resource", ClientAuthorizationResourceArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("authorization-resource")
     *             .realmId(realm.id())
     *             .uris("/endpoint/*")
     *             .attributes(Map.of("foo", "bar"))
     *             .build());
     * 
     *         var permission = new ClientAuthorizationPermission("permission", ClientAuthorizationPermissionArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .realmId(realm.id())
     *             .name("authorization-permission")
     *             .policies(defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult).applyValue(defaultPermission -> defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult.id())))
     *             .resources(resource.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientAuthorizationPolicyResult> getClientAuthorizationPolicy(GetClientAuthorizationPolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:openid/getClientAuthorizationPolicy:getClientAuthorizationPolicy", TypeShape.of(GetClientAuthorizationPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch policy and permission information for an OpenID client that has authorization enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create a new OpenID client with authorization enabled. This will cause Keycloak to create a default
     * permission for this client called &#34;Default Permission&#34;. We&#39;ll use the `keycloak.openid.getClientAuthorizationPolicy` data
     * source to fetch information about this permission, so we can use it to create a new resource-based authorization permission.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.inputs.ClientAuthorizationArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientAuthorizationPolicyArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResource;
     * import com.pulumi.keycloak.openid.ClientAuthorizationResourceArgs;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermission;
     * import com.pulumi.keycloak.openid.ClientAuthorizationPermissionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var clientWithAuthz = new Client("clientWithAuthz", ClientArgs.builder()        
     *             .clientId("client-with-authz")
     *             .name("client-with-authz")
     *             .realmId(realm.id())
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .authorization(ClientAuthorizationArgs.builder()
     *                 .policyEnforcementMode("ENFORCING")
     *                 .build())
     *             .build());
     * 
     *         final var defaultPermission = OpenidFunctions.getClientAuthorizationPolicy(GetClientAuthorizationPolicyArgs.builder()
     *             .realmId(realm.id())
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("Default Permission")
     *             .build());
     * 
     *         var resource = new ClientAuthorizationResource("resource", ClientAuthorizationResourceArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .name("authorization-resource")
     *             .realmId(realm.id())
     *             .uris("/endpoint/*")
     *             .attributes(Map.of("foo", "bar"))
     *             .build());
     * 
     *         var permission = new ClientAuthorizationPermission("permission", ClientAuthorizationPermissionArgs.builder()        
     *             .resourceServerId(clientWithAuthz.resourceServerId())
     *             .realmId(realm.id())
     *             .name("authorization-permission")
     *             .policies(defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult).applyValue(defaultPermission -> defaultPermission.applyValue(getClientAuthorizationPolicyResult -> getClientAuthorizationPolicyResult.id())))
     *             .resources(resource.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientAuthorizationPolicyResult> getClientAuthorizationPolicyPlain(GetClientAuthorizationPolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:openid/getClientAuthorizationPolicy:getClientAuthorizationPolicy", TypeShape.of(GetClientAuthorizationPolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak OpenID client scope for usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientScopeArgs;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapper;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapperArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var offlineAccess = OpenidFunctions.getClientScope(GetClientScopeArgs.builder()
     *             .realmId("my-realm")
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var audienceMapper = new AudienceProtocolMapper("audienceMapper", AudienceProtocolMapperArgs.builder()        
     *             .realmId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.realmId()))
     *             .clientScopeId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.id()))
     *             .name("audience-mapper")
     *             .includedCustomAudience("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientScopeResult> getClientScope(GetClientScopeArgs args) {
        return getClientScope(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak OpenID client scope for usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientScopeArgs;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapper;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapperArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var offlineAccess = OpenidFunctions.getClientScope(GetClientScopeArgs.builder()
     *             .realmId("my-realm")
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var audienceMapper = new AudienceProtocolMapper("audienceMapper", AudienceProtocolMapperArgs.builder()        
     *             .realmId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.realmId()))
     *             .clientScopeId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.id()))
     *             .name("audience-mapper")
     *             .includedCustomAudience("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientScopeResult> getClientScopePlain(GetClientScopePlainArgs args) {
        return getClientScopePlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch properties of a Keycloak OpenID client scope for usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientScopeArgs;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapper;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapperArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var offlineAccess = OpenidFunctions.getClientScope(GetClientScopeArgs.builder()
     *             .realmId("my-realm")
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var audienceMapper = new AudienceProtocolMapper("audienceMapper", AudienceProtocolMapperArgs.builder()        
     *             .realmId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.realmId()))
     *             .clientScopeId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.id()))
     *             .name("audience-mapper")
     *             .includedCustomAudience("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientScopeResult> getClientScope(GetClientScopeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:openid/getClientScope:getClientScope", TypeShape.of(GetClientScopeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch properties of a Keycloak OpenID client scope for usage with other resources.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientScopeArgs;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapper;
     * import com.pulumi.keycloak.openid.AudienceProtocolMapperArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var offlineAccess = OpenidFunctions.getClientScope(GetClientScopeArgs.builder()
     *             .realmId("my-realm")
     *             .name("offline_access")
     *             .build());
     * 
     *         // use the data source
     *         var audienceMapper = new AudienceProtocolMapper("audienceMapper", AudienceProtocolMapperArgs.builder()        
     *             .realmId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.realmId()))
     *             .clientScopeId(offlineAccess.applyValue(getClientScopeResult -> getClientScopeResult.id()))
     *             .name("audience-mapper")
     *             .includedCustomAudience("foo")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientScopeResult> getClientScopePlain(GetClientScopePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:openid/getClientScope:getClientScope", TypeShape.of(GetClientScopeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch information about the service account user that is associated with an OpenID client
     * that has service accounts enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user
     * that represents the service account. We&#39;ll use this data source to grab this user&#39;s ID in order to assign some roles to this
     * user, using the `keycloak.UserRoles` resource.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientServiceAccountUserArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.UserRoles;
     * import com.pulumi.keycloak.UserRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var client = new Client("client", ClientArgs.builder()        
     *             .realmId(realm.id())
     *             .clientId("client")
     *             .name("client")
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .build());
     * 
     *         final var serviceAccountUser = OpenidFunctions.getClientServiceAccountUser(GetClientServiceAccountUserArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(client.id())
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         var serviceAccountUserRoles = new UserRoles("serviceAccountUserRoles", UserRolesArgs.builder()        
     *             .realmId(realm.id())
     *             .userId(serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult).applyValue(serviceAccountUser -> serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult.id())))
     *             .roleIds(offlineAccess.applyValue(getRoleResult -> getRoleResult).applyValue(offlineAccess -> offlineAccess.applyValue(getRoleResult -> getRoleResult.id())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientServiceAccountUserResult> getClientServiceAccountUser(GetClientServiceAccountUserArgs args) {
        return getClientServiceAccountUser(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch information about the service account user that is associated with an OpenID client
     * that has service accounts enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user
     * that represents the service account. We&#39;ll use this data source to grab this user&#39;s ID in order to assign some roles to this
     * user, using the `keycloak.UserRoles` resource.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientServiceAccountUserArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.UserRoles;
     * import com.pulumi.keycloak.UserRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var client = new Client("client", ClientArgs.builder()        
     *             .realmId(realm.id())
     *             .clientId("client")
     *             .name("client")
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .build());
     * 
     *         final var serviceAccountUser = OpenidFunctions.getClientServiceAccountUser(GetClientServiceAccountUserArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(client.id())
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         var serviceAccountUserRoles = new UserRoles("serviceAccountUserRoles", UserRolesArgs.builder()        
     *             .realmId(realm.id())
     *             .userId(serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult).applyValue(serviceAccountUser -> serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult.id())))
     *             .roleIds(offlineAccess.applyValue(getRoleResult -> getRoleResult).applyValue(offlineAccess -> offlineAccess.applyValue(getRoleResult -> getRoleResult.id())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientServiceAccountUserResult> getClientServiceAccountUserPlain(GetClientServiceAccountUserPlainArgs args) {
        return getClientServiceAccountUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source can be used to fetch information about the service account user that is associated with an OpenID client
     * that has service accounts enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user
     * that represents the service account. We&#39;ll use this data source to grab this user&#39;s ID in order to assign some roles to this
     * user, using the `keycloak.UserRoles` resource.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientServiceAccountUserArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.UserRoles;
     * import com.pulumi.keycloak.UserRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var client = new Client("client", ClientArgs.builder()        
     *             .realmId(realm.id())
     *             .clientId("client")
     *             .name("client")
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .build());
     * 
     *         final var serviceAccountUser = OpenidFunctions.getClientServiceAccountUser(GetClientServiceAccountUserArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(client.id())
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         var serviceAccountUserRoles = new UserRoles("serviceAccountUserRoles", UserRolesArgs.builder()        
     *             .realmId(realm.id())
     *             .userId(serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult).applyValue(serviceAccountUser -> serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult.id())))
     *             .roleIds(offlineAccess.applyValue(getRoleResult -> getRoleResult).applyValue(offlineAccess -> offlineAccess.applyValue(getRoleResult -> getRoleResult.id())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClientServiceAccountUserResult> getClientServiceAccountUser(GetClientServiceAccountUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("keycloak:openid/getClientServiceAccountUser:getClientServiceAccountUser", TypeShape.of(GetClientServiceAccountUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source can be used to fetch information about the service account user that is associated with an OpenID client
     * that has service accounts enabled.
     * 
     * ## Example Usage
     * 
     * In this example, we&#39;ll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user
     * that represents the service account. We&#39;ll use this data source to grab this user&#39;s ID in order to assign some roles to this
     * user, using the `keycloak.UserRoles` resource.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.keycloak.Realm;
     * import com.pulumi.keycloak.RealmArgs;
     * import com.pulumi.keycloak.openid.Client;
     * import com.pulumi.keycloak.openid.ClientArgs;
     * import com.pulumi.keycloak.openid.OpenidFunctions;
     * import com.pulumi.keycloak.openid.inputs.GetClientServiceAccountUserArgs;
     * import com.pulumi.keycloak.KeycloakFunctions;
     * import com.pulumi.keycloak.inputs.GetRoleArgs;
     * import com.pulumi.keycloak.UserRoles;
     * import com.pulumi.keycloak.UserRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var realm = new Realm("realm", RealmArgs.builder()        
     *             .realm("my-realm")
     *             .enabled(true)
     *             .build());
     * 
     *         var client = new Client("client", ClientArgs.builder()        
     *             .realmId(realm.id())
     *             .clientId("client")
     *             .name("client")
     *             .accessType("CONFIDENTIAL")
     *             .serviceAccountsEnabled(true)
     *             .build());
     * 
     *         final var serviceAccountUser = OpenidFunctions.getClientServiceAccountUser(GetClientServiceAccountUserArgs.builder()
     *             .realmId(realm.id())
     *             .clientId(client.id())
     *             .build());
     * 
     *         final var offlineAccess = KeycloakFunctions.getRole(GetRoleArgs.builder()
     *             .realmId(realm.id())
     *             .name("offline_access")
     *             .build());
     * 
     *         var serviceAccountUserRoles = new UserRoles("serviceAccountUserRoles", UserRolesArgs.builder()        
     *             .realmId(realm.id())
     *             .userId(serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult).applyValue(serviceAccountUser -> serviceAccountUser.applyValue(getClientServiceAccountUserResult -> getClientServiceAccountUserResult.id())))
     *             .roleIds(offlineAccess.applyValue(getRoleResult -> getRoleResult).applyValue(offlineAccess -> offlineAccess.applyValue(getRoleResult -> getRoleResult.id())))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClientServiceAccountUserResult> getClientServiceAccountUserPlain(GetClientServiceAccountUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("keycloak:openid/getClientServiceAccountUser:getClientServiceAccountUser", TypeShape.of(GetClientServiceAccountUserResult.class), args, Utilities.withVersion(options));
    }
}
