// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClientAuthorizationPolicyResult {
    /**
     * @return (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     * 
     */
    private String decisionStrategy;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
     * 
     */
    private String logic;
    private String name;
    /**
     * @return (Computed) The ID of the owning resource. Applies to resources.
     * 
     */
    private String owner;
    /**
     * @return (Computed) The IDs of the policies that must be applied to scopes/resources for this policy/permission. Applies to policies and permissions.
     * 
     */
    private List<String> policies;
    private String realmId;
    private String resourceServerId;
    /**
     * @return (Computed) The IDs of the resources that this permission applies to. Applies to resource-based permissions.
     * 
     */
    private List<String> resources;
    /**
     * @return (Computed) The IDs of the scopes that this permission applies to. Applies to scope-based permissions.
     * 
     */
    private List<String> scopes;
    /**
     * @return (Computed) The type of this policy / permission. For permissions, this could be `resource` or `scope`. For policies, this could be any type of authorization policy, such as `js`.
     * 
     */
    private String type;

    private GetClientAuthorizationPolicyResult() {}
    /**
     * @return (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     * 
     */
    public String decisionStrategy() {
        return this.decisionStrategy;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
     * 
     */
    public String logic() {
        return this.logic;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The ID of the owning resource. Applies to resources.
     * 
     */
    public String owner() {
        return this.owner;
    }
    /**
     * @return (Computed) The IDs of the policies that must be applied to scopes/resources for this policy/permission. Applies to policies and permissions.
     * 
     */
    public List<String> policies() {
        return this.policies;
    }
    public String realmId() {
        return this.realmId;
    }
    public String resourceServerId() {
        return this.resourceServerId;
    }
    /**
     * @return (Computed) The IDs of the resources that this permission applies to. Applies to resource-based permissions.
     * 
     */
    public List<String> resources() {
        return this.resources;
    }
    /**
     * @return (Computed) The IDs of the scopes that this permission applies to. Applies to scope-based permissions.
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return (Computed) The type of this policy / permission. For permissions, this could be `resource` or `scope`. For policies, this could be any type of authorization policy, such as `js`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientAuthorizationPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String decisionStrategy;
        private String id;
        private String logic;
        private String name;
        private String owner;
        private List<String> policies;
        private String realmId;
        private String resourceServerId;
        private List<String> resources;
        private List<String> scopes;
        private String type;
        public Builder() {}
        public Builder(GetClientAuthorizationPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decisionStrategy = defaults.decisionStrategy;
    	      this.id = defaults.id;
    	      this.logic = defaults.logic;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.policies = defaults.policies;
    	      this.realmId = defaults.realmId;
    	      this.resourceServerId = defaults.resourceServerId;
    	      this.resources = defaults.resources;
    	      this.scopes = defaults.scopes;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder decisionStrategy(String decisionStrategy) {
            if (decisionStrategy == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "decisionStrategy");
            }
            this.decisionStrategy = decisionStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logic(String logic) {
            if (logic == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "logic");
            }
            this.logic = logic;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder owner(String owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<String> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder realmId(String realmId) {
            if (realmId == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "realmId");
            }
            this.realmId = realmId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceServerId(String resourceServerId) {
            if (resourceServerId == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "resourceServerId");
            }
            this.resourceServerId = resourceServerId;
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<String> resources) {
            if (resources == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "resources");
            }
            this.resources = resources;
            return this;
        }
        public Builder resources(String... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetClientAuthorizationPolicyResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetClientAuthorizationPolicyResult build() {
            final var _resultValue = new GetClientAuthorizationPolicyResult();
            _resultValue.decisionStrategy = decisionStrategy;
            _resultValue.id = id;
            _resultValue.logic = logic;
            _resultValue.name = name;
            _resultValue.owner = owner;
            _resultValue.policies = policies;
            _resultValue.realmId = realmId;
            _resultValue.resourceServerId = resourceServerId;
            _resultValue.resources = resources;
            _resultValue.scopes = scopes;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
