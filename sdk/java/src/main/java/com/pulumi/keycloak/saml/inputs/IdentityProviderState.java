// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.saml.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IdentityProviderState extends com.pulumi.resources.ResourceArgs {

    public static final IdentityProviderState Empty = new IdentityProviderState();

    /**
     * Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
     * 
     */
    @Import(name="addReadTokenRoleOnCreate")
    private @Nullable Output<Boolean> addReadTokenRoleOnCreate;

    /**
     * @return Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
     * 
     */
    public Optional<Output<Boolean>> addReadTokenRoleOnCreate() {
        return Optional.ofNullable(this.addReadTokenRoleOnCreate);
    }

    /**
     * The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * Enable/disable authenticate users by default.
     * 
     */
    @Import(name="authenticateByDefault")
    private @Nullable Output<Boolean> authenticateByDefault;

    /**
     * @return Enable/disable authenticate users by default.
     * 
     */
    public Optional<Output<Boolean>> authenticateByDefault() {
        return Optional.ofNullable(this.authenticateByDefault);
    }

    /**
     * AuthnContext ClassRefs
     * 
     */
    @Import(name="authnContextClassRefs")
    private @Nullable Output<List<String>> authnContextClassRefs;

    /**
     * @return AuthnContext ClassRefs
     * 
     */
    public Optional<Output<List<String>>> authnContextClassRefs() {
        return Optional.ofNullable(this.authnContextClassRefs);
    }

    /**
     * AuthnContext Comparison
     * 
     */
    @Import(name="authnContextComparisonType")
    private @Nullable Output<String> authnContextComparisonType;

    /**
     * @return AuthnContext Comparison
     * 
     */
    public Optional<Output<String>> authnContextComparisonType() {
        return Optional.ofNullable(this.authnContextComparisonType);
    }

    /**
     * AuthnContext DeclRefs
     * 
     */
    @Import(name="authnContextDeclRefs")
    private @Nullable Output<List<String>> authnContextDeclRefs;

    /**
     * @return AuthnContext DeclRefs
     * 
     */
    public Optional<Output<List<String>>> authnContextDeclRefs() {
        return Optional.ofNullable(this.authnContextDeclRefs);
    }

    /**
     * Does the external IDP support backchannel logout?
     * 
     */
    @Import(name="backchannelSupported")
    private @Nullable Output<Boolean> backchannelSupported;

    /**
     * @return Does the external IDP support backchannel logout?
     * 
     */
    public Optional<Output<Boolean>> backchannelSupported() {
        return Optional.ofNullable(this.backchannelSupported);
    }

    /**
     * Friendly name for Identity Providers.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Friendly name for Identity Providers.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Enable/disable this identity provider.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable/disable this identity provider.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     * 
     */
    @Import(name="entityId")
    private @Nullable Output<String> entityId;

    /**
     * @return The Entity ID that will be used to uniquely identify this SAML Service Provider.
     * 
     */
    public Optional<Output<String>> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    @Import(name="extraConfig")
    private @Nullable Output<Map<String,String>> extraConfig;

    public Optional<Output<Map<String,String>>> extraConfig() {
        return Optional.ofNullable(this.extraConfig);
    }

    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term &#39;First Login&#39; means
     * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
     * 
     */
    @Import(name="firstBrokerLoginFlowAlias")
    private @Nullable Output<String> firstBrokerLoginFlowAlias;

    /**
     * @return Alias of authentication flow, which is triggered after first login with this identity provider. Term &#39;First Login&#39; means
     * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
     * 
     */
    public Optional<Output<String>> firstBrokerLoginFlowAlias() {
        return Optional.ofNullable(this.firstBrokerLoginFlowAlias);
    }

    /**
     * Require Force Authn.
     * 
     */
    @Import(name="forceAuthn")
    private @Nullable Output<Boolean> forceAuthn;

    /**
     * @return Require Force Authn.
     * 
     */
    public Optional<Output<Boolean>> forceAuthn() {
        return Optional.ofNullable(this.forceAuthn);
    }

    /**
     * GUI Order
     * 
     */
    @Import(name="guiOrder")
    private @Nullable Output<String> guiOrder;

    /**
     * @return GUI Order
     * 
     */
    public Optional<Output<String>> guiOrder() {
        return Optional.ofNullable(this.guiOrder);
    }

    /**
     * Hide On Login Page.
     * 
     */
    @Import(name="hideOnLoginPage")
    private @Nullable Output<Boolean> hideOnLoginPage;

    /**
     * @return Hide On Login Page.
     * 
     */
    public Optional<Output<Boolean>> hideOnLoginPage() {
        return Optional.ofNullable(this.hideOnLoginPage);
    }

    /**
     * Internal Identity Provider Id
     * 
     */
    @Import(name="internalId")
    private @Nullable Output<String> internalId;

    /**
     * @return Internal Identity Provider Id
     * 
     */
    public Optional<Output<String>> internalId() {
        return Optional.ofNullable(this.internalId);
    }

    /**
     * If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don&#39;t
     * want to allow login from the provider, but want to integrate with a provider
     * 
     */
    @Import(name="linkOnly")
    private @Nullable Output<Boolean> linkOnly;

    /**
     * @return If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don&#39;t
     * want to allow login from the provider, but want to integrate with a provider
     * 
     */
    public Optional<Output<Boolean>> linkOnly() {
        return Optional.ofNullable(this.linkOnly);
    }

    /**
     * Login Hint.
     * 
     */
    @Import(name="loginHint")
    private @Nullable Output<String> loginHint;

    /**
     * @return Login Hint.
     * 
     */
    public Optional<Output<String>> loginHint() {
        return Optional.ofNullable(this.loginHint);
    }

    /**
     * Name ID Policy Format.
     * 
     */
    @Import(name="nameIdPolicyFormat")
    private @Nullable Output<String> nameIdPolicyFormat;

    /**
     * @return Name ID Policy Format.
     * 
     */
    public Optional<Output<String>> nameIdPolicyFormat() {
        return Optional.ofNullable(this.nameIdPolicyFormat);
    }

    /**
     * Post Binding Authn Request.
     * 
     */
    @Import(name="postBindingAuthnRequest")
    private @Nullable Output<Boolean> postBindingAuthnRequest;

    /**
     * @return Post Binding Authn Request.
     * 
     */
    public Optional<Output<Boolean>> postBindingAuthnRequest() {
        return Optional.ofNullable(this.postBindingAuthnRequest);
    }

    /**
     * Post Binding Logout.
     * 
     */
    @Import(name="postBindingLogout")
    private @Nullable Output<Boolean> postBindingLogout;

    /**
     * @return Post Binding Logout.
     * 
     */
    public Optional<Output<Boolean>> postBindingLogout() {
        return Optional.ofNullable(this.postBindingLogout);
    }

    /**
     * Post Binding Response.
     * 
     */
    @Import(name="postBindingResponse")
    private @Nullable Output<Boolean> postBindingResponse;

    /**
     * @return Post Binding Response.
     * 
     */
    public Optional<Output<Boolean>> postBindingResponse() {
        return Optional.ofNullable(this.postBindingResponse);
    }

    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
     * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
     * you don&#39;t want any additional authenticators to be triggered after login with this identity provider. Also note, that
     * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
     * 
     */
    @Import(name="postBrokerLoginFlowAlias")
    private @Nullable Output<String> postBrokerLoginFlowAlias;

    /**
     * @return Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
     * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
     * you don&#39;t want any additional authenticators to be triggered after login with this identity provider. Also note, that
     * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
     * 
     */
    public Optional<Output<String>> postBrokerLoginFlowAlias() {
        return Optional.ofNullable(this.postBrokerLoginFlowAlias);
    }

    /**
     * Principal Attribute
     * 
     */
    @Import(name="principalAttribute")
    private @Nullable Output<String> principalAttribute;

    /**
     * @return Principal Attribute
     * 
     */
    public Optional<Output<String>> principalAttribute() {
        return Optional.ofNullable(this.principalAttribute);
    }

    /**
     * Principal Type
     * 
     */
    @Import(name="principalType")
    private @Nullable Output<String> principalType;

    /**
     * @return Principal Type
     * 
     */
    public Optional<Output<String>> principalType() {
        return Optional.ofNullable(this.principalType);
    }

    /**
     * provider id, is always saml, unless you have a custom implementation
     * 
     */
    @Import(name="providerId")
    private @Nullable Output<String> providerId;

    /**
     * @return provider id, is always saml, unless you have a custom implementation
     * 
     */
    public Optional<Output<String>> providerId() {
        return Optional.ofNullable(this.providerId);
    }

    /**
     * Realm Name
     * 
     */
    @Import(name="realm")
    private @Nullable Output<String> realm;

    /**
     * @return Realm Name
     * 
     */
    public Optional<Output<String>> realm() {
        return Optional.ofNullable(this.realm);
    }

    /**
     * Signing Algorithm.
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return Signing Algorithm.
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * Signing Certificate.
     * 
     */
    @Import(name="signingCertificate")
    private @Nullable Output<String> signingCertificate;

    /**
     * @return Signing Certificate.
     * 
     */
    public Optional<Output<String>> signingCertificate() {
        return Optional.ofNullable(this.signingCertificate);
    }

    /**
     * Logout URL.
     * 
     */
    @Import(name="singleLogoutServiceUrl")
    private @Nullable Output<String> singleLogoutServiceUrl;

    /**
     * @return Logout URL.
     * 
     */
    public Optional<Output<String>> singleLogoutServiceUrl() {
        return Optional.ofNullable(this.singleLogoutServiceUrl);
    }

    /**
     * SSO Logout URL.
     * 
     */
    @Import(name="singleSignOnServiceUrl")
    private @Nullable Output<String> singleSignOnServiceUrl;

    /**
     * @return SSO Logout URL.
     * 
     */
    public Optional<Output<String>> singleSignOnServiceUrl() {
        return Optional.ofNullable(this.singleSignOnServiceUrl);
    }

    /**
     * Enable/disable if tokens must be stored after authenticating users.
     * 
     */
    @Import(name="storeToken")
    private @Nullable Output<Boolean> storeToken;

    /**
     * @return Enable/disable if tokens must be stored after authenticating users.
     * 
     */
    public Optional<Output<Boolean>> storeToken() {
        return Optional.ofNullable(this.storeToken);
    }

    /**
     * Sync Mode
     * 
     */
    @Import(name="syncMode")
    private @Nullable Output<String> syncMode;

    /**
     * @return Sync Mode
     * 
     */
    public Optional<Output<String>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    /**
     * If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
     * 
     */
    @Import(name="trustEmail")
    private @Nullable Output<Boolean> trustEmail;

    /**
     * @return If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
     * 
     */
    public Optional<Output<Boolean>> trustEmail() {
        return Optional.ofNullable(this.trustEmail);
    }

    /**
     * Enable/disable signature validation of SAML responses.
     * 
     */
    @Import(name="validateSignature")
    private @Nullable Output<Boolean> validateSignature;

    /**
     * @return Enable/disable signature validation of SAML responses.
     * 
     */
    public Optional<Output<Boolean>> validateSignature() {
        return Optional.ofNullable(this.validateSignature);
    }

    /**
     * Want Assertions Encrypted.
     * 
     */
    @Import(name="wantAssertionsEncrypted")
    private @Nullable Output<Boolean> wantAssertionsEncrypted;

    /**
     * @return Want Assertions Encrypted.
     * 
     */
    public Optional<Output<Boolean>> wantAssertionsEncrypted() {
        return Optional.ofNullable(this.wantAssertionsEncrypted);
    }

    /**
     * Want Assertions Signed.
     * 
     */
    @Import(name="wantAssertionsSigned")
    private @Nullable Output<Boolean> wantAssertionsSigned;

    /**
     * @return Want Assertions Signed.
     * 
     */
    public Optional<Output<Boolean>> wantAssertionsSigned() {
        return Optional.ofNullable(this.wantAssertionsSigned);
    }

    /**
     * Sign Key Transformer.
     * 
     */
    @Import(name="xmlSignKeyInfoKeyNameTransformer")
    private @Nullable Output<String> xmlSignKeyInfoKeyNameTransformer;

    /**
     * @return Sign Key Transformer.
     * 
     */
    public Optional<Output<String>> xmlSignKeyInfoKeyNameTransformer() {
        return Optional.ofNullable(this.xmlSignKeyInfoKeyNameTransformer);
    }

    private IdentityProviderState() {}

    private IdentityProviderState(IdentityProviderState $) {
        this.addReadTokenRoleOnCreate = $.addReadTokenRoleOnCreate;
        this.alias = $.alias;
        this.authenticateByDefault = $.authenticateByDefault;
        this.authnContextClassRefs = $.authnContextClassRefs;
        this.authnContextComparisonType = $.authnContextComparisonType;
        this.authnContextDeclRefs = $.authnContextDeclRefs;
        this.backchannelSupported = $.backchannelSupported;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.entityId = $.entityId;
        this.extraConfig = $.extraConfig;
        this.firstBrokerLoginFlowAlias = $.firstBrokerLoginFlowAlias;
        this.forceAuthn = $.forceAuthn;
        this.guiOrder = $.guiOrder;
        this.hideOnLoginPage = $.hideOnLoginPage;
        this.internalId = $.internalId;
        this.linkOnly = $.linkOnly;
        this.loginHint = $.loginHint;
        this.nameIdPolicyFormat = $.nameIdPolicyFormat;
        this.postBindingAuthnRequest = $.postBindingAuthnRequest;
        this.postBindingLogout = $.postBindingLogout;
        this.postBindingResponse = $.postBindingResponse;
        this.postBrokerLoginFlowAlias = $.postBrokerLoginFlowAlias;
        this.principalAttribute = $.principalAttribute;
        this.principalType = $.principalType;
        this.providerId = $.providerId;
        this.realm = $.realm;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.signingCertificate = $.signingCertificate;
        this.singleLogoutServiceUrl = $.singleLogoutServiceUrl;
        this.singleSignOnServiceUrl = $.singleSignOnServiceUrl;
        this.storeToken = $.storeToken;
        this.syncMode = $.syncMode;
        this.trustEmail = $.trustEmail;
        this.validateSignature = $.validateSignature;
        this.wantAssertionsEncrypted = $.wantAssertionsEncrypted;
        this.wantAssertionsSigned = $.wantAssertionsSigned;
        this.xmlSignKeyInfoKeyNameTransformer = $.xmlSignKeyInfoKeyNameTransformer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityProviderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityProviderState $;

        public Builder() {
            $ = new IdentityProviderState();
        }

        public Builder(IdentityProviderState defaults) {
            $ = new IdentityProviderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addReadTokenRoleOnCreate Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
         * 
         * @return builder
         * 
         */
        public Builder addReadTokenRoleOnCreate(@Nullable Output<Boolean> addReadTokenRoleOnCreate) {
            $.addReadTokenRoleOnCreate = addReadTokenRoleOnCreate;
            return this;
        }

        /**
         * @param addReadTokenRoleOnCreate Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
         * 
         * @return builder
         * 
         */
        public Builder addReadTokenRoleOnCreate(Boolean addReadTokenRoleOnCreate) {
            return addReadTokenRoleOnCreate(Output.of(addReadTokenRoleOnCreate));
        }

        /**
         * @param alias The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param authenticateByDefault Enable/disable authenticate users by default.
         * 
         * @return builder
         * 
         */
        public Builder authenticateByDefault(@Nullable Output<Boolean> authenticateByDefault) {
            $.authenticateByDefault = authenticateByDefault;
            return this;
        }

        /**
         * @param authenticateByDefault Enable/disable authenticate users by default.
         * 
         * @return builder
         * 
         */
        public Builder authenticateByDefault(Boolean authenticateByDefault) {
            return authenticateByDefault(Output.of(authenticateByDefault));
        }

        /**
         * @param authnContextClassRefs AuthnContext ClassRefs
         * 
         * @return builder
         * 
         */
        public Builder authnContextClassRefs(@Nullable Output<List<String>> authnContextClassRefs) {
            $.authnContextClassRefs = authnContextClassRefs;
            return this;
        }

        /**
         * @param authnContextClassRefs AuthnContext ClassRefs
         * 
         * @return builder
         * 
         */
        public Builder authnContextClassRefs(List<String> authnContextClassRefs) {
            return authnContextClassRefs(Output.of(authnContextClassRefs));
        }

        /**
         * @param authnContextClassRefs AuthnContext ClassRefs
         * 
         * @return builder
         * 
         */
        public Builder authnContextClassRefs(String... authnContextClassRefs) {
            return authnContextClassRefs(List.of(authnContextClassRefs));
        }

        /**
         * @param authnContextComparisonType AuthnContext Comparison
         * 
         * @return builder
         * 
         */
        public Builder authnContextComparisonType(@Nullable Output<String> authnContextComparisonType) {
            $.authnContextComparisonType = authnContextComparisonType;
            return this;
        }

        /**
         * @param authnContextComparisonType AuthnContext Comparison
         * 
         * @return builder
         * 
         */
        public Builder authnContextComparisonType(String authnContextComparisonType) {
            return authnContextComparisonType(Output.of(authnContextComparisonType));
        }

        /**
         * @param authnContextDeclRefs AuthnContext DeclRefs
         * 
         * @return builder
         * 
         */
        public Builder authnContextDeclRefs(@Nullable Output<List<String>> authnContextDeclRefs) {
            $.authnContextDeclRefs = authnContextDeclRefs;
            return this;
        }

        /**
         * @param authnContextDeclRefs AuthnContext DeclRefs
         * 
         * @return builder
         * 
         */
        public Builder authnContextDeclRefs(List<String> authnContextDeclRefs) {
            return authnContextDeclRefs(Output.of(authnContextDeclRefs));
        }

        /**
         * @param authnContextDeclRefs AuthnContext DeclRefs
         * 
         * @return builder
         * 
         */
        public Builder authnContextDeclRefs(String... authnContextDeclRefs) {
            return authnContextDeclRefs(List.of(authnContextDeclRefs));
        }

        /**
         * @param backchannelSupported Does the external IDP support backchannel logout?
         * 
         * @return builder
         * 
         */
        public Builder backchannelSupported(@Nullable Output<Boolean> backchannelSupported) {
            $.backchannelSupported = backchannelSupported;
            return this;
        }

        /**
         * @param backchannelSupported Does the external IDP support backchannel logout?
         * 
         * @return builder
         * 
         */
        public Builder backchannelSupported(Boolean backchannelSupported) {
            return backchannelSupported(Output.of(backchannelSupported));
        }

        /**
         * @param displayName Friendly name for Identity Providers.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Friendly name for Identity Providers.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled Enable/disable this identity provider.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable/disable this identity provider.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entityId The Entity ID that will be used to uniquely identify this SAML Service Provider.
         * 
         * @return builder
         * 
         */
        public Builder entityId(@Nullable Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        /**
         * @param entityId The Entity ID that will be used to uniquely identify this SAML Service Provider.
         * 
         * @return builder
         * 
         */
        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        public Builder extraConfig(@Nullable Output<Map<String,String>> extraConfig) {
            $.extraConfig = extraConfig;
            return this;
        }

        public Builder extraConfig(Map<String,String> extraConfig) {
            return extraConfig(Output.of(extraConfig));
        }

        /**
         * @param firstBrokerLoginFlowAlias Alias of authentication flow, which is triggered after first login with this identity provider. Term &#39;First Login&#39; means
         * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
         * 
         * @return builder
         * 
         */
        public Builder firstBrokerLoginFlowAlias(@Nullable Output<String> firstBrokerLoginFlowAlias) {
            $.firstBrokerLoginFlowAlias = firstBrokerLoginFlowAlias;
            return this;
        }

        /**
         * @param firstBrokerLoginFlowAlias Alias of authentication flow, which is triggered after first login with this identity provider. Term &#39;First Login&#39; means
         * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
         * 
         * @return builder
         * 
         */
        public Builder firstBrokerLoginFlowAlias(String firstBrokerLoginFlowAlias) {
            return firstBrokerLoginFlowAlias(Output.of(firstBrokerLoginFlowAlias));
        }

        /**
         * @param forceAuthn Require Force Authn.
         * 
         * @return builder
         * 
         */
        public Builder forceAuthn(@Nullable Output<Boolean> forceAuthn) {
            $.forceAuthn = forceAuthn;
            return this;
        }

        /**
         * @param forceAuthn Require Force Authn.
         * 
         * @return builder
         * 
         */
        public Builder forceAuthn(Boolean forceAuthn) {
            return forceAuthn(Output.of(forceAuthn));
        }

        /**
         * @param guiOrder GUI Order
         * 
         * @return builder
         * 
         */
        public Builder guiOrder(@Nullable Output<String> guiOrder) {
            $.guiOrder = guiOrder;
            return this;
        }

        /**
         * @param guiOrder GUI Order
         * 
         * @return builder
         * 
         */
        public Builder guiOrder(String guiOrder) {
            return guiOrder(Output.of(guiOrder));
        }

        /**
         * @param hideOnLoginPage Hide On Login Page.
         * 
         * @return builder
         * 
         */
        public Builder hideOnLoginPage(@Nullable Output<Boolean> hideOnLoginPage) {
            $.hideOnLoginPage = hideOnLoginPage;
            return this;
        }

        /**
         * @param hideOnLoginPage Hide On Login Page.
         * 
         * @return builder
         * 
         */
        public Builder hideOnLoginPage(Boolean hideOnLoginPage) {
            return hideOnLoginPage(Output.of(hideOnLoginPage));
        }

        /**
         * @param internalId Internal Identity Provider Id
         * 
         * @return builder
         * 
         */
        public Builder internalId(@Nullable Output<String> internalId) {
            $.internalId = internalId;
            return this;
        }

        /**
         * @param internalId Internal Identity Provider Id
         * 
         * @return builder
         * 
         */
        public Builder internalId(String internalId) {
            return internalId(Output.of(internalId));
        }

        /**
         * @param linkOnly If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don&#39;t
         * want to allow login from the provider, but want to integrate with a provider
         * 
         * @return builder
         * 
         */
        public Builder linkOnly(@Nullable Output<Boolean> linkOnly) {
            $.linkOnly = linkOnly;
            return this;
        }

        /**
         * @param linkOnly If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don&#39;t
         * want to allow login from the provider, but want to integrate with a provider
         * 
         * @return builder
         * 
         */
        public Builder linkOnly(Boolean linkOnly) {
            return linkOnly(Output.of(linkOnly));
        }

        /**
         * @param loginHint Login Hint.
         * 
         * @return builder
         * 
         */
        public Builder loginHint(@Nullable Output<String> loginHint) {
            $.loginHint = loginHint;
            return this;
        }

        /**
         * @param loginHint Login Hint.
         * 
         * @return builder
         * 
         */
        public Builder loginHint(String loginHint) {
            return loginHint(Output.of(loginHint));
        }

        /**
         * @param nameIdPolicyFormat Name ID Policy Format.
         * 
         * @return builder
         * 
         */
        public Builder nameIdPolicyFormat(@Nullable Output<String> nameIdPolicyFormat) {
            $.nameIdPolicyFormat = nameIdPolicyFormat;
            return this;
        }

        /**
         * @param nameIdPolicyFormat Name ID Policy Format.
         * 
         * @return builder
         * 
         */
        public Builder nameIdPolicyFormat(String nameIdPolicyFormat) {
            return nameIdPolicyFormat(Output.of(nameIdPolicyFormat));
        }

        /**
         * @param postBindingAuthnRequest Post Binding Authn Request.
         * 
         * @return builder
         * 
         */
        public Builder postBindingAuthnRequest(@Nullable Output<Boolean> postBindingAuthnRequest) {
            $.postBindingAuthnRequest = postBindingAuthnRequest;
            return this;
        }

        /**
         * @param postBindingAuthnRequest Post Binding Authn Request.
         * 
         * @return builder
         * 
         */
        public Builder postBindingAuthnRequest(Boolean postBindingAuthnRequest) {
            return postBindingAuthnRequest(Output.of(postBindingAuthnRequest));
        }

        /**
         * @param postBindingLogout Post Binding Logout.
         * 
         * @return builder
         * 
         */
        public Builder postBindingLogout(@Nullable Output<Boolean> postBindingLogout) {
            $.postBindingLogout = postBindingLogout;
            return this;
        }

        /**
         * @param postBindingLogout Post Binding Logout.
         * 
         * @return builder
         * 
         */
        public Builder postBindingLogout(Boolean postBindingLogout) {
            return postBindingLogout(Output.of(postBindingLogout));
        }

        /**
         * @param postBindingResponse Post Binding Response.
         * 
         * @return builder
         * 
         */
        public Builder postBindingResponse(@Nullable Output<Boolean> postBindingResponse) {
            $.postBindingResponse = postBindingResponse;
            return this;
        }

        /**
         * @param postBindingResponse Post Binding Response.
         * 
         * @return builder
         * 
         */
        public Builder postBindingResponse(Boolean postBindingResponse) {
            return postBindingResponse(Output.of(postBindingResponse));
        }

        /**
         * @param postBrokerLoginFlowAlias Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
         * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
         * you don&#39;t want any additional authenticators to be triggered after login with this identity provider. Also note, that
         * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
         * 
         * @return builder
         * 
         */
        public Builder postBrokerLoginFlowAlias(@Nullable Output<String> postBrokerLoginFlowAlias) {
            $.postBrokerLoginFlowAlias = postBrokerLoginFlowAlias;
            return this;
        }

        /**
         * @param postBrokerLoginFlowAlias Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
         * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
         * you don&#39;t want any additional authenticators to be triggered after login with this identity provider. Also note, that
         * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
         * 
         * @return builder
         * 
         */
        public Builder postBrokerLoginFlowAlias(String postBrokerLoginFlowAlias) {
            return postBrokerLoginFlowAlias(Output.of(postBrokerLoginFlowAlias));
        }

        /**
         * @param principalAttribute Principal Attribute
         * 
         * @return builder
         * 
         */
        public Builder principalAttribute(@Nullable Output<String> principalAttribute) {
            $.principalAttribute = principalAttribute;
            return this;
        }

        /**
         * @param principalAttribute Principal Attribute
         * 
         * @return builder
         * 
         */
        public Builder principalAttribute(String principalAttribute) {
            return principalAttribute(Output.of(principalAttribute));
        }

        /**
         * @param principalType Principal Type
         * 
         * @return builder
         * 
         */
        public Builder principalType(@Nullable Output<String> principalType) {
            $.principalType = principalType;
            return this;
        }

        /**
         * @param principalType Principal Type
         * 
         * @return builder
         * 
         */
        public Builder principalType(String principalType) {
            return principalType(Output.of(principalType));
        }

        /**
         * @param providerId provider id, is always saml, unless you have a custom implementation
         * 
         * @return builder
         * 
         */
        public Builder providerId(@Nullable Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId provider id, is always saml, unless you have a custom implementation
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param realm Realm Name
         * 
         * @return builder
         * 
         */
        public Builder realm(@Nullable Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm Realm Name
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        /**
         * @param signatureAlgorithm Signing Algorithm.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm Signing Algorithm.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param signingCertificate Signing Certificate.
         * 
         * @return builder
         * 
         */
        public Builder signingCertificate(@Nullable Output<String> signingCertificate) {
            $.signingCertificate = signingCertificate;
            return this;
        }

        /**
         * @param signingCertificate Signing Certificate.
         * 
         * @return builder
         * 
         */
        public Builder signingCertificate(String signingCertificate) {
            return signingCertificate(Output.of(signingCertificate));
        }

        /**
         * @param singleLogoutServiceUrl Logout URL.
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutServiceUrl(@Nullable Output<String> singleLogoutServiceUrl) {
            $.singleLogoutServiceUrl = singleLogoutServiceUrl;
            return this;
        }

        /**
         * @param singleLogoutServiceUrl Logout URL.
         * 
         * @return builder
         * 
         */
        public Builder singleLogoutServiceUrl(String singleLogoutServiceUrl) {
            return singleLogoutServiceUrl(Output.of(singleLogoutServiceUrl));
        }

        /**
         * @param singleSignOnServiceUrl SSO Logout URL.
         * 
         * @return builder
         * 
         */
        public Builder singleSignOnServiceUrl(@Nullable Output<String> singleSignOnServiceUrl) {
            $.singleSignOnServiceUrl = singleSignOnServiceUrl;
            return this;
        }

        /**
         * @param singleSignOnServiceUrl SSO Logout URL.
         * 
         * @return builder
         * 
         */
        public Builder singleSignOnServiceUrl(String singleSignOnServiceUrl) {
            return singleSignOnServiceUrl(Output.of(singleSignOnServiceUrl));
        }

        /**
         * @param storeToken Enable/disable if tokens must be stored after authenticating users.
         * 
         * @return builder
         * 
         */
        public Builder storeToken(@Nullable Output<Boolean> storeToken) {
            $.storeToken = storeToken;
            return this;
        }

        /**
         * @param storeToken Enable/disable if tokens must be stored after authenticating users.
         * 
         * @return builder
         * 
         */
        public Builder storeToken(Boolean storeToken) {
            return storeToken(Output.of(storeToken));
        }

        /**
         * @param syncMode Sync Mode
         * 
         * @return builder
         * 
         */
        public Builder syncMode(@Nullable Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param syncMode Sync Mode
         * 
         * @return builder
         * 
         */
        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        /**
         * @param trustEmail If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
         * 
         * @return builder
         * 
         */
        public Builder trustEmail(@Nullable Output<Boolean> trustEmail) {
            $.trustEmail = trustEmail;
            return this;
        }

        /**
         * @param trustEmail If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
         * 
         * @return builder
         * 
         */
        public Builder trustEmail(Boolean trustEmail) {
            return trustEmail(Output.of(trustEmail));
        }

        /**
         * @param validateSignature Enable/disable signature validation of SAML responses.
         * 
         * @return builder
         * 
         */
        public Builder validateSignature(@Nullable Output<Boolean> validateSignature) {
            $.validateSignature = validateSignature;
            return this;
        }

        /**
         * @param validateSignature Enable/disable signature validation of SAML responses.
         * 
         * @return builder
         * 
         */
        public Builder validateSignature(Boolean validateSignature) {
            return validateSignature(Output.of(validateSignature));
        }

        /**
         * @param wantAssertionsEncrypted Want Assertions Encrypted.
         * 
         * @return builder
         * 
         */
        public Builder wantAssertionsEncrypted(@Nullable Output<Boolean> wantAssertionsEncrypted) {
            $.wantAssertionsEncrypted = wantAssertionsEncrypted;
            return this;
        }

        /**
         * @param wantAssertionsEncrypted Want Assertions Encrypted.
         * 
         * @return builder
         * 
         */
        public Builder wantAssertionsEncrypted(Boolean wantAssertionsEncrypted) {
            return wantAssertionsEncrypted(Output.of(wantAssertionsEncrypted));
        }

        /**
         * @param wantAssertionsSigned Want Assertions Signed.
         * 
         * @return builder
         * 
         */
        public Builder wantAssertionsSigned(@Nullable Output<Boolean> wantAssertionsSigned) {
            $.wantAssertionsSigned = wantAssertionsSigned;
            return this;
        }

        /**
         * @param wantAssertionsSigned Want Assertions Signed.
         * 
         * @return builder
         * 
         */
        public Builder wantAssertionsSigned(Boolean wantAssertionsSigned) {
            return wantAssertionsSigned(Output.of(wantAssertionsSigned));
        }

        /**
         * @param xmlSignKeyInfoKeyNameTransformer Sign Key Transformer.
         * 
         * @return builder
         * 
         */
        public Builder xmlSignKeyInfoKeyNameTransformer(@Nullable Output<String> xmlSignKeyInfoKeyNameTransformer) {
            $.xmlSignKeyInfoKeyNameTransformer = xmlSignKeyInfoKeyNameTransformer;
            return this;
        }

        /**
         * @param xmlSignKeyInfoKeyNameTransformer Sign Key Transformer.
         * 
         * @return builder
         * 
         */
        public Builder xmlSignKeyInfoKeyNameTransformer(String xmlSignKeyInfoKeyNameTransformer) {
            return xmlSignKeyInfoKeyNameTransformer(Output.of(xmlSignKeyInfoKeyNameTransformer));
        }

        public IdentityProviderState build() {
            return $;
        }
    }

}
