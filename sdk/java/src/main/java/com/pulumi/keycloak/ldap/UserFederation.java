// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.ldap;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.ldap.UserFederationArgs;
import com.pulumi.keycloak.ldap.inputs.UserFederationState;
import com.pulumi.keycloak.ldap.outputs.UserFederationCache;
import com.pulumi.keycloak.ldap.outputs.UserFederationKerberos;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # keycloak.ldap.UserFederation
 * 
 * Allows for creating and managing LDAP user federation providers within Keycloak.
 * 
 * Keycloak can use an LDAP user federation provider to federate users to Keycloak
 * from a directory system such as LDAP or Active Directory. Federated users
 * will exist within the realm and will be able to log in to clients. Federated
 * users can have their attributes defined using mappers.
 * 
 * ### Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.ldap.UserFederation;
 * import com.pulumi.keycloak.ldap.UserFederationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm("realm", RealmArgs.builder()
 *             .realm("test")
 *             .enabled(true)
 *             .build());
 * 
 *         var ldapUserFederation = new UserFederation("ldapUserFederation", UserFederationArgs.builder()
 *             .name("openldap")
 *             .realmId(realm.id())
 *             .enabled(true)
 *             .usernameLdapAttribute("cn")
 *             .rdnLdapAttribute("cn")
 *             .uuidLdapAttribute("entryDN")
 *             .userObjectClasses(            
 *                 "simpleSecurityObject",
 *                 "organizationalRole")
 *             .connectionUrl("ldap://openldap")
 *             .usersDn("dc=example,dc=org")
 *             .bindDn("cn=admin,dc=example,dc=org")
 *             .bindCredential("admin")
 *             .connectionTimeout("5s")
 *             .readTimeout("10s")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Argument Reference
 * 
 * The following arguments are supported:
 * 
 * - `realm_id` - (Required) The realm that this provider will provide user federation for.
 * - `name` - (Required) Display name of the provider when displayed in the console.
 * - `enabled` - (Optional) When `false`, this provider will not be used when performing queries for users. Defaults to `true`.
 * - `priority` - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to `0`.
 * - `import_enabled` - (Optional) When `true`, LDAP users will be imported into the Keycloak database. Defaults to `true`.
 * - `edit_mode` - (Optional) Can be one of `READ_ONLY`, `WRITABLE`, or `UNSYNCED`. `UNSYNCED` allows user data to be imported but not synced back to LDAP. Defaults to `READ_ONLY`.
 * - `sync_registrations` - (Optional) When `true`, newly created users will be synced back to LDAP. Defaults to `false`.
 * - `vendor` - (Optional) Can be one of `OTHER`, `EDIRECTORY`, `AD`, `RHDS`, or `TIVOLI`. When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to `OPTIONAL`.
 * - `username_ldap_attribute` - (Required) Name of the LDAP attribute to use as the Keycloak username.
 * - `rdn_ldap_attribute` - (Required) Name of the LDAP attribute to use as the relative distinguished name.
 * - `uuid_ldap_attribute` - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
 * - `user_object_classes` - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one.
 * - `connection_url` - (Required) Connection URL to the LDAP server.
 * - `users_dn` - (Required) Full DN of LDAP tree where your users are.
 * - `bind_dn` - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if `bind_credential` is set.
 * - `bind_credential` - (Optional) Password of LDAP admin. This attribute must be set if `bind_dn` is set.
 * - `custom_user_search_filter` - (Optional) Additional LDAP filter for filtering searched users. Must begin with `(` and end with `)`.
 * - `search_scope` - (Optional) Can be one of `ONE_LEVEL` or `SUBTREE`:
 *     - `ONE_LEVEL`: Only search for users in the DN specified by `user_dn`.
 *     - `SUBTREE`: Search entire LDAP subtree.
 * - `validate_password_policy` - (Optional) When `true`, Keycloak will validate passwords using the realm policy before updating it.
 * - `use_truststore_spi` - (Optional) Can be one of `ALWAYS`, `ONLY_FOR_LDAPS`, or `NEVER`:
 *     - `ALWAYS` - Always use the truststore SPI for LDAP connections.
 *     - `NEVER` - Never use the truststore SPI for LDAP connections.
 *     - `ONLY_FOR_LDAPS` - Only use the truststore SPI if your LDAP connection uses the ldaps protocol.
 * - `connection_timeout` - (Optional) LDAP connection timeout in the format of a [Go duration string](https://golang.org/pkg/time/#Duration.String).
 * - `read_timeout` - (Optional) LDAP read timeout in the format of a [Go duration string](https://golang.org/pkg/time/#Duration.String).
 * - `pagination` - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to `true`.
 * - `batch_size_for_sync` - (Optional) The number of users to sync within a single transaction. Defaults to `1000`.
 * - `full_sync_period` - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.
 * - `changed_sync_period` - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync.
 * - `cache_policy` - (Optional) Can be one of `DEFAULT`, `EVICT_DAILY`, `EVICT_WEEKLY`, `MAX_LIFESPAN`, or `NO_CACHE`. Defaults to `DEFAULT`.
 * 
 * ### Import
 * 
 * LDAP user federation providers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}`.
 * The ID of the LDAP user federation provider can be found within the Keycloak GUI and is typically a GUID:
 * 
 */
@ResourceType(type="keycloak:ldap/userFederation:UserFederation")
public class UserFederation extends com.pulumi.resources.CustomResource {
    /**
     * The number of users to sync within a single transaction.
     * 
     */
    @Export(name="batchSizeForSync", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> batchSizeForSync;

    /**
     * @return The number of users to sync within a single transaction.
     * 
     */
    public Output<Optional<Integer>> batchSizeForSync() {
        return Codegen.optional(this.batchSizeForSync);
    }
    /**
     * Password of LDAP admin.
     * 
     */
    @Export(name="bindCredential", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bindCredential;

    /**
     * @return Password of LDAP admin.
     * 
     */
    public Output<Optional<String>> bindCredential() {
        return Codegen.optional(this.bindCredential);
    }
    /**
     * DN of LDAP admin, which will be used by Keycloak to access LDAP server.
     * 
     */
    @Export(name="bindDn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bindDn;

    /**
     * @return DN of LDAP admin, which will be used by Keycloak to access LDAP server.
     * 
     */
    public Output<Optional<String>> bindDn() {
        return Codegen.optional(this.bindDn);
    }
    /**
     * Settings regarding cache policy for this realm.
     * 
     */
    @Export(name="cache", refs={UserFederationCache.class}, tree="[0]")
    private Output</* @Nullable */ UserFederationCache> cache;

    /**
     * @return Settings regarding cache policy for this realm.
     * 
     */
    public Output<Optional<UserFederationCache>> cache() {
        return Codegen.optional(this.cache);
    }
    /**
     * How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users
     * sync.
     * 
     */
    @Export(name="changedSyncPeriod", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> changedSyncPeriod;

    /**
     * @return How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users
     * sync.
     * 
     */
    public Output<Optional<Integer>> changedSyncPeriod() {
        return Codegen.optional(this.changedSyncPeriod);
    }
    /**
     * LDAP connection timeout (duration string)
     * 
     */
    @Export(name="connectionTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> connectionTimeout;

    /**
     * @return LDAP connection timeout (duration string)
     * 
     */
    public Output<Optional<String>> connectionTimeout() {
        return Codegen.optional(this.connectionTimeout);
    }
    /**
     * Connection URL to the LDAP server.
     * 
     */
    @Export(name="connectionUrl", refs={String.class}, tree="[0]")
    private Output<String> connectionUrl;

    /**
     * @return Connection URL to the LDAP server.
     * 
     */
    public Output<String> connectionUrl() {
        return this.connectionUrl;
    }
    /**
     * Additional LDAP filter for filtering searched users. Must begin with &#39;(&#39; and end with &#39;)&#39;.
     * 
     */
    @Export(name="customUserSearchFilter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> customUserSearchFilter;

    /**
     * @return Additional LDAP filter for filtering searched users. Must begin with &#39;(&#39; and end with &#39;)&#39;.
     * 
     */
    public Output<Optional<String>> customUserSearchFilter() {
        return Codegen.optional(this.customUserSearchFilter);
    }
    /**
     * When true, the provider will delete the default mappers which are normally created by Keycloak when creating an LDAP
     * user federation provider.
     * 
     */
    @Export(name="deleteDefaultMappers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteDefaultMappers;

    /**
     * @return When true, the provider will delete the default mappers which are normally created by Keycloak when creating an LDAP
     * user federation provider.
     * 
     */
    public Output<Optional<Boolean>> deleteDefaultMappers() {
        return Codegen.optional(this.deleteDefaultMappers);
    }
    /**
     * READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to LDAP.
     * 
     */
    @Export(name="editMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> editMode;

    /**
     * @return READ_ONLY and WRITABLE are self-explanatory. UNSYNCED allows user data to be imported but not synced back to LDAP.
     * 
     */
    public Output<Optional<String>> editMode() {
        return Codegen.optional(this.editMode);
    }
    /**
     * When false, this provider will not be used when performing queries for users.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return When false, this provider will not be used when performing queries for users.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.
     * 
     */
    @Export(name="fullSyncPeriod", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> fullSyncPeriod;

    /**
     * @return How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.
     * 
     */
    public Output<Optional<Integer>> fullSyncPeriod() {
        return Codegen.optional(this.fullSyncPeriod);
    }
    /**
     * When true, LDAP users will be imported into the Keycloak database.
     * 
     */
    @Export(name="importEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> importEnabled;

    /**
     * @return When true, LDAP users will be imported into the Keycloak database.
     * 
     */
    public Output<Optional<Boolean>> importEnabled() {
        return Codegen.optional(this.importEnabled);
    }
    /**
     * Settings regarding kerberos authentication for this realm.
     * 
     */
    @Export(name="kerberos", refs={UserFederationKerberos.class}, tree="[0]")
    private Output</* @Nullable */ UserFederationKerberos> kerberos;

    /**
     * @return Settings regarding kerberos authentication for this realm.
     * 
     */
    public Output<Optional<UserFederationKerberos>> kerberos() {
        return Codegen.optional(this.kerberos);
    }
    /**
     * Display name of the provider when displayed in the console.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Display name of the provider when displayed in the console.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * When true, Keycloak assumes the LDAP server supports pagination.
     * 
     */
    @Export(name="pagination", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> pagination;

    /**
     * @return When true, Keycloak assumes the LDAP server supports pagination.
     * 
     */
    public Output<Optional<Boolean>> pagination() {
        return Codegen.optional(this.pagination);
    }
    /**
     * Priority of this provider when looking up users. Lower values are first.
     * 
     */
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> priority;

    /**
     * @return Priority of this provider when looking up users. Lower values are first.
     * 
     */
    public Output<Optional<Integer>> priority() {
        return Codegen.optional(this.priority);
    }
    /**
     * Name of the LDAP attribute to use as the relative distinguished name.
     * 
     */
    @Export(name="rdnLdapAttribute", refs={String.class}, tree="[0]")
    private Output<String> rdnLdapAttribute;

    /**
     * @return Name of the LDAP attribute to use as the relative distinguished name.
     * 
     */
    public Output<String> rdnLdapAttribute() {
        return this.rdnLdapAttribute;
    }
    /**
     * LDAP read timeout (duration string)
     * 
     */
    @Export(name="readTimeout", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> readTimeout;

    /**
     * @return LDAP read timeout (duration string)
     * 
     */
    public Output<Optional<String>> readTimeout() {
        return Codegen.optional(this.readTimeout);
    }
    /**
     * The realm this provider will provide user federation for.
     * 
     */
    @Export(name="realmId", refs={String.class}, tree="[0]")
    private Output<String> realmId;

    /**
     * @return The realm this provider will provide user federation for.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }
    /**
     * ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
     * 
     */
    @Export(name="searchScope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> searchScope;

    /**
     * @return ONE_LEVEL: only search for users in the DN specified by user_dn. SUBTREE: search entire LDAP subtree.
     * 
     */
    public Output<Optional<String>> searchScope() {
        return Codegen.optional(this.searchScope);
    }
    /**
     * When true, Keycloak will encrypt the connection to LDAP using STARTTLS, which will disable connection pooling.
     * 
     */
    @Export(name="startTls", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> startTls;

    /**
     * @return When true, Keycloak will encrypt the connection to LDAP using STARTTLS, which will disable connection pooling.
     * 
     */
    public Output<Optional<Boolean>> startTls() {
        return Codegen.optional(this.startTls);
    }
    /**
     * When true, newly created users will be synced back to LDAP.
     * 
     */
    @Export(name="syncRegistrations", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> syncRegistrations;

    /**
     * @return When true, newly created users will be synced back to LDAP.
     * 
     */
    public Output<Optional<Boolean>> syncRegistrations() {
        return Codegen.optional(this.syncRegistrations);
    }
    /**
     * If enabled, email provided by this provider is not verified even if verification is enabled for the realm.
     * 
     */
    @Export(name="trustEmail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trustEmail;

    /**
     * @return If enabled, email provided by this provider is not verified even if verification is enabled for the realm.
     * 
     */
    public Output<Optional<Boolean>> trustEmail() {
        return Codegen.optional(this.trustEmail);
    }
    /**
     * When `true`, use the LDAPv3 Password Modify Extended Operation (RFC-3062).
     * 
     */
    @Export(name="usePasswordModifyExtendedOp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> usePasswordModifyExtendedOp;

    /**
     * @return When `true`, use the LDAPv3 Password Modify Extended Operation (RFC-3062).
     * 
     */
    public Output<Optional<Boolean>> usePasswordModifyExtendedOp() {
        return Codegen.optional(this.usePasswordModifyExtendedOp);
    }
    @Export(name="useTruststoreSpi", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> useTruststoreSpi;

    public Output<Optional<String>> useTruststoreSpi() {
        return Codegen.optional(this.useTruststoreSpi);
    }
    /**
     * All values of LDAP objectClass attribute for users in LDAP.
     * 
     */
    @Export(name="userObjectClasses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> userObjectClasses;

    /**
     * @return All values of LDAP objectClass attribute for users in LDAP.
     * 
     */
    public Output<List<String>> userObjectClasses() {
        return this.userObjectClasses;
    }
    /**
     * Name of the LDAP attribute to use as the Keycloak username.
     * 
     */
    @Export(name="usernameLdapAttribute", refs={String.class}, tree="[0]")
    private Output<String> usernameLdapAttribute;

    /**
     * @return Name of the LDAP attribute to use as the Keycloak username.
     * 
     */
    public Output<String> usernameLdapAttribute() {
        return this.usernameLdapAttribute;
    }
    /**
     * Full DN of LDAP tree where your users are.
     * 
     */
    @Export(name="usersDn", refs={String.class}, tree="[0]")
    private Output<String> usersDn;

    /**
     * @return Full DN of LDAP tree where your users are.
     * 
     */
    public Output<String> usersDn() {
        return this.usersDn;
    }
    /**
     * Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
     * 
     */
    @Export(name="uuidLdapAttribute", refs={String.class}, tree="[0]")
    private Output<String> uuidLdapAttribute;

    /**
     * @return Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.
     * 
     */
    public Output<String> uuidLdapAttribute() {
        return this.uuidLdapAttribute;
    }
    /**
     * When true, Keycloak will validate passwords using the realm policy before updating it.
     * 
     */
    @Export(name="validatePasswordPolicy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> validatePasswordPolicy;

    /**
     * @return When true, Keycloak will validate passwords using the realm policy before updating it.
     * 
     */
    public Output<Optional<Boolean>> validatePasswordPolicy() {
        return Codegen.optional(this.validatePasswordPolicy);
    }
    /**
     * LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
     * 
     */
    @Export(name="vendor", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vendor;

    /**
     * @return LDAP vendor. I am almost certain this field does nothing, but the UI indicates that it is required.
     * 
     */
    public Output<Optional<String>> vendor() {
        return Codegen.optional(this.vendor);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserFederation(java.lang.String name) {
        this(name, UserFederationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserFederation(java.lang.String name, UserFederationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserFederation(java.lang.String name, UserFederationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:ldap/userFederation:UserFederation", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private UserFederation(java.lang.String name, Output<java.lang.String> id, @Nullable UserFederationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:ldap/userFederation:UserFederation", name, state, makeResourceOptions(options, id), false);
    }

    private static UserFederationArgs makeArgs(UserFederationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? UserFederationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "bindCredential"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserFederation get(java.lang.String name, Output<java.lang.String> id, @Nullable UserFederationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserFederation(name, id, state, options);
    }
}
