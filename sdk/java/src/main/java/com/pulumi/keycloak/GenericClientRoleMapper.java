// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.keycloak.GenericClientRoleMapperArgs;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.inputs.GenericClientRoleMapperState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * !&gt; **WARNING:** This resource is deprecated and will be removed in the next major version. Please use `keycloak.GenericRoleMapper` instead.
 * 
 * Allow for creating and managing a client&#39;s scope mappings within Keycloak.
 * 
 * By default, all the user role mappings of the user are added as claims within the token (OIDC) or assertion (SAML). When
 * `full_scope_allowed` is set to `false` for a client, role scope mapping allows you to limit the roles that get declared
 * inside an access token for a client.
 * 
 * ## Example Usage
 * ### Realm Role To Client)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.openid.Client;
 * import com.pulumi.keycloak.openid.ClientArgs;
 * import com.pulumi.keycloak.Role;
 * import com.pulumi.keycloak.RoleArgs;
 * import com.pulumi.keycloak.GenericClientRoleMapper;
 * import com.pulumi.keycloak.GenericClientRoleMapperArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm(&#34;realm&#34;, RealmArgs.builder()        
 *             .realm(&#34;my-realm&#34;)
 *             .enabled(true)
 *             .build());
 * 
 *         var client = new Client(&#34;client&#34;, ClientArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(&#34;client&#34;)
 *             .enabled(true)
 *             .accessType(&#34;BEARER-ONLY&#34;)
 *             .build());
 * 
 *         var realmRole = new Role(&#34;realmRole&#34;, RoleArgs.builder()        
 *             .realmId(realm.id())
 *             .description(&#34;My Realm Role&#34;)
 *             .build());
 * 
 *         var clientRoleMapper = new GenericClientRoleMapper(&#34;clientRoleMapper&#34;, GenericClientRoleMapperArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(client.id())
 *             .roleId(realmRole.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Client Role To Client)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.openid.Client;
 * import com.pulumi.keycloak.openid.ClientArgs;
 * import com.pulumi.keycloak.Role;
 * import com.pulumi.keycloak.RoleArgs;
 * import com.pulumi.keycloak.GenericClientRoleMapper;
 * import com.pulumi.keycloak.GenericClientRoleMapperArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm(&#34;realm&#34;, RealmArgs.builder()        
 *             .realm(&#34;my-realm&#34;)
 *             .enabled(true)
 *             .build());
 * 
 *         var clientA = new Client(&#34;clientA&#34;, ClientArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(&#34;client-a&#34;)
 *             .enabled(true)
 *             .accessType(&#34;BEARER-ONLY&#34;)
 *             .fullScopeAllowed(false)
 *             .build());
 * 
 *         var clientRoleA = new Role(&#34;clientRoleA&#34;, RoleArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(clientA.id())
 *             .description(&#34;My Client Role&#34;)
 *             .build());
 * 
 *         var clientB = new Client(&#34;clientB&#34;, ClientArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(&#34;client-b&#34;)
 *             .enabled(true)
 *             .accessType(&#34;BEARER-ONLY&#34;)
 *             .build());
 * 
 *         var clientRoleB = new Role(&#34;clientRoleB&#34;, RoleArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(clientB.id())
 *             .description(&#34;My Client Role&#34;)
 *             .build());
 * 
 *         var clientBRoleMapper = new GenericClientRoleMapper(&#34;clientBRoleMapper&#34;, GenericClientRoleMapperArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(clientB.id())
 *             .roleId(clientRoleA.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Realm Role To Client Scope)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.openid.ClientScope;
 * import com.pulumi.keycloak.openid.ClientScopeArgs;
 * import com.pulumi.keycloak.Role;
 * import com.pulumi.keycloak.RoleArgs;
 * import com.pulumi.keycloak.GenericClientRoleMapper;
 * import com.pulumi.keycloak.GenericClientRoleMapperArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm(&#34;realm&#34;, RealmArgs.builder()        
 *             .realm(&#34;my-realm&#34;)
 *             .enabled(true)
 *             .build());
 * 
 *         var clientScope = new ClientScope(&#34;clientScope&#34;, ClientScopeArgs.builder()        
 *             .realmId(realm.id())
 *             .build());
 * 
 *         var realmRole = new Role(&#34;realmRole&#34;, RoleArgs.builder()        
 *             .realmId(realm.id())
 *             .description(&#34;My Realm Role&#34;)
 *             .build());
 * 
 *         var clientRoleMapper = new GenericClientRoleMapper(&#34;clientRoleMapper&#34;, GenericClientRoleMapperArgs.builder()        
 *             .realmId(realm.id())
 *             .clientScopeId(clientScope.id())
 *             .roleId(realmRole.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Client Role To Client Scope)
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.openid.Client;
 * import com.pulumi.keycloak.openid.ClientArgs;
 * import com.pulumi.keycloak.Role;
 * import com.pulumi.keycloak.RoleArgs;
 * import com.pulumi.keycloak.openid.ClientScope;
 * import com.pulumi.keycloak.openid.ClientScopeArgs;
 * import com.pulumi.keycloak.GenericClientRoleMapper;
 * import com.pulumi.keycloak.GenericClientRoleMapperArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm(&#34;realm&#34;, RealmArgs.builder()        
 *             .realm(&#34;my-realm&#34;)
 *             .enabled(true)
 *             .build());
 * 
 *         var client = new Client(&#34;client&#34;, ClientArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(&#34;client&#34;)
 *             .enabled(true)
 *             .accessType(&#34;BEARER-ONLY&#34;)
 *             .build());
 * 
 *         var clientRole = new Role(&#34;clientRole&#34;, RoleArgs.builder()        
 *             .realmId(realm.id())
 *             .clientId(client.id())
 *             .description(&#34;My Client Role&#34;)
 *             .build());
 * 
 *         var clientScope = new ClientScope(&#34;clientScope&#34;, ClientScopeArgs.builder()        
 *             .realmId(realm.id())
 *             .build());
 * 
 *         var clientBRoleMapper = new GenericClientRoleMapper(&#34;clientBRoleMapper&#34;, GenericClientRoleMapperArgs.builder()        
 *             .realmId(realm.id())
 *             .clientScopeId(clientScope.id())
 *             .roleId(clientRole.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Generic client role mappers can be imported using one of the following two formats- When mapping a role to a client, use the format `{{realmId}}/client/{{clientId}}/scope-mappings/{{roleClientId}}/{{roleId}}` - When mapping a role to a client scope, use the format `{{realmId}}/client-scope/{{clientScopeId}}/scope-mappings/{{roleClientId}}/{{roleId}}` Examplebash
 * 
 * ```sh
 *  $ pulumi import keycloak:index/genericClientRoleMapper:GenericClientRoleMapper client_role_mapper my-realm/client/23888550-5dcd-41f6-85ba-554233021e9c/scope-mappings/ce51f004-bdfb-4dd5-a963-c4487d2dec5b/ff3aa49f-bc07-4030-8783-41918c3614a3
 * ```
 * 
 */
@ResourceType(type="keycloak:index/genericClientRoleMapper:GenericClientRoleMapper")
public class GenericClientRoleMapper extends com.pulumi.resources.CustomResource {
    /**
     * The ID of the client this role mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
     * 
     */
    @Export(name="clientId", type=String.class, parameters={})
    private Output</* @Nullable */ String> clientId;

    /**
     * @return The ID of the client this role mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
     * 
     */
    public Output<Optional<String>> clientId() {
        return Codegen.optional(this.clientId);
    }
    /**
     * The ID of the client scope this role mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
     * 
     */
    @Export(name="clientScopeId", type=String.class, parameters={})
    private Output</* @Nullable */ String> clientScopeId;

    /**
     * @return The ID of the client scope this role mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
     * 
     */
    public Output<Optional<String>> clientScopeId() {
        return Codegen.optional(this.clientScopeId);
    }
    /**
     * The realm this role mapper exists within.
     * 
     */
    @Export(name="realmId", type=String.class, parameters={})
    private Output<String> realmId;

    /**
     * @return The realm this role mapper exists within.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }
    /**
     * The ID of the role to be added to this role mapper.
     * 
     */
    @Export(name="roleId", type=String.class, parameters={})
    private Output<String> roleId;

    /**
     * @return The ID of the role to be added to this role mapper.
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GenericClientRoleMapper(String name) {
        this(name, GenericClientRoleMapperArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GenericClientRoleMapper(String name, GenericClientRoleMapperArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GenericClientRoleMapper(String name, GenericClientRoleMapperArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:index/genericClientRoleMapper:GenericClientRoleMapper", name, args == null ? GenericClientRoleMapperArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GenericClientRoleMapper(String name, Output<String> id, @Nullable GenericClientRoleMapperState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:index/genericClientRoleMapper:GenericClientRoleMapper", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GenericClientRoleMapper get(String name, Output<String> id, @Nullable GenericClientRoleMapperState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GenericClientRoleMapper(name, id, state, options);
    }
}
