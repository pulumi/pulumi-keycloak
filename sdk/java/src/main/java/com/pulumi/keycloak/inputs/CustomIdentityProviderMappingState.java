// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomIdentityProviderMappingState extends com.pulumi.resources.ResourceArgs {

    public static final CustomIdentityProviderMappingState Empty = new CustomIdentityProviderMappingState();

    /**
     * Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
     * 
     */
    @Import(name="extraConfig")
    private @Nullable Output<Map<String,Object>> extraConfig;

    /**
     * @return Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
     * 
     */
    public Optional<Output<Map<String,Object>>> extraConfig() {
        return Optional.ofNullable(this.extraConfig);
    }

    /**
     * The alias of the associated identity provider.
     * 
     */
    @Import(name="identityProviderAlias")
    private @Nullable Output<String> identityProviderAlias;

    /**
     * @return The alias of the associated identity provider.
     * 
     */
    public Optional<Output<String>> identityProviderAlias() {
        return Optional.ofNullable(this.identityProviderAlias);
    }

    /**
     * The type of the identity provider mapper. This can be a format string that includes a `%s` - this will be replaced by the provider id.
     * 
     */
    @Import(name="identityProviderMapper")
    private @Nullable Output<String> identityProviderMapper;

    /**
     * @return The type of the identity provider mapper. This can be a format string that includes a `%s` - this will be replaced by the provider id.
     * 
     */
    public Optional<Output<String>> identityProviderMapper() {
        return Optional.ofNullable(this.identityProviderMapper);
    }

    /**
     * The name of the mapper.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the mapper.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the realm.
     * 
     */
    @Import(name="realm")
    private @Nullable Output<String> realm;

    /**
     * @return The name of the realm.
     * 
     */
    public Optional<Output<String>> realm() {
        return Optional.ofNullable(this.realm);
    }

    private CustomIdentityProviderMappingState() {}

    private CustomIdentityProviderMappingState(CustomIdentityProviderMappingState $) {
        this.extraConfig = $.extraConfig;
        this.identityProviderAlias = $.identityProviderAlias;
        this.identityProviderMapper = $.identityProviderMapper;
        this.name = $.name;
        this.realm = $.realm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomIdentityProviderMappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomIdentityProviderMappingState $;

        public Builder() {
            $ = new CustomIdentityProviderMappingState();
        }

        public Builder(CustomIdentityProviderMappingState defaults) {
            $ = new CustomIdentityProviderMappingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param extraConfig Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
         * 
         * @return builder
         * 
         */
        public Builder extraConfig(@Nullable Output<Map<String,Object>> extraConfig) {
            $.extraConfig = extraConfig;
            return this;
        }

        /**
         * @param extraConfig Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
         * 
         * @return builder
         * 
         */
        public Builder extraConfig(Map<String,Object> extraConfig) {
            return extraConfig(Output.of(extraConfig));
        }

        /**
         * @param identityProviderAlias The alias of the associated identity provider.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderAlias(@Nullable Output<String> identityProviderAlias) {
            $.identityProviderAlias = identityProviderAlias;
            return this;
        }

        /**
         * @param identityProviderAlias The alias of the associated identity provider.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderAlias(String identityProviderAlias) {
            return identityProviderAlias(Output.of(identityProviderAlias));
        }

        /**
         * @param identityProviderMapper The type of the identity provider mapper. This can be a format string that includes a `%s` - this will be replaced by the provider id.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderMapper(@Nullable Output<String> identityProviderMapper) {
            $.identityProviderMapper = identityProviderMapper;
            return this;
        }

        /**
         * @param identityProviderMapper The type of the identity provider mapper. This can be a format string that includes a `%s` - this will be replaced by the provider id.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderMapper(String identityProviderMapper) {
            return identityProviderMapper(Output.of(identityProviderMapper));
        }

        /**
         * @param name The name of the mapper.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the mapper.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param realm The name of the realm.
         * 
         * @return builder
         * 
         */
        public Builder realm(@Nullable Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm The name of the realm.
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        public CustomIdentityProviderMappingState build() {
            return $;
        }
    }

}
