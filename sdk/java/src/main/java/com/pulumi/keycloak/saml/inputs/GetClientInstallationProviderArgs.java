// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.saml.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetClientInstallationProviderArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetClientInstallationProviderArgs Empty = new GetClientInstallationProviderArgs();

    /**
     * The ID of the SAML client. The `id` attribute of a `keycloak_client` resource should be used here.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The ID of the SAML client. The `id` attribute of a `keycloak_client` resource should be used here.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The ID of the SAML installation provider. Could be one of `saml-idp-descriptor`, `keycloak-saml`, `saml-sp-descriptor`, `keycloak-saml-subsystem`, `mod-auth-mellon`, etc.
     * 
     */
    @Import(name="providerId", required=true)
    private Output<String> providerId;

    /**
     * @return The ID of the SAML installation provider. Could be one of `saml-idp-descriptor`, `keycloak-saml`, `saml-sp-descriptor`, `keycloak-saml-subsystem`, `mod-auth-mellon`, etc.
     * 
     */
    public Output<String> providerId() {
        return this.providerId;
    }

    /**
     * The realm that the SAML client exists within.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm that the SAML client exists within.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    private GetClientInstallationProviderArgs() {}

    private GetClientInstallationProviderArgs(GetClientInstallationProviderArgs $) {
        this.clientId = $.clientId;
        this.providerId = $.providerId;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetClientInstallationProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClientInstallationProviderArgs $;

        public Builder() {
            $ = new GetClientInstallationProviderArgs();
        }

        public Builder(GetClientInstallationProviderArgs defaults) {
            $ = new GetClientInstallationProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The ID of the SAML client. The `id` attribute of a `keycloak_client` resource should be used here.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the SAML client. The `id` attribute of a `keycloak_client` resource should be used here.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param providerId The ID of the SAML installation provider. Could be one of `saml-idp-descriptor`, `keycloak-saml`, `saml-sp-descriptor`, `keycloak-saml-subsystem`, `mod-auth-mellon`, etc.
         * 
         * @return builder
         * 
         */
        public Builder providerId(Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The ID of the SAML installation provider. Could be one of `saml-idp-descriptor`, `keycloak-saml`, `saml-sp-descriptor`, `keycloak-saml-subsystem`, `mod-auth-mellon`, etc.
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param realmId The realm that the SAML client exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm that the SAML client exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public GetClientInstallationProviderArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("GetClientInstallationProviderArgs", "clientId");
            }
            if ($.providerId == null) {
                throw new MissingRequiredPropertyException("GetClientInstallationProviderArgs", "providerId");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("GetClientInstallationProviderArgs", "realmId");
            }
            return $;
        }
    }

}
