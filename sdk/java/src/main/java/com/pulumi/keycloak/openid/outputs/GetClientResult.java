// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.keycloak.openid.outputs.GetClientAuthenticationFlowBindingOverride;
import com.pulumi.keycloak.openid.outputs.GetClientAuthorization;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClientResult {
    private String accessTokenLifespan;
    private String accessType;
    private String adminUrl;
    private List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
    private List<GetClientAuthorization> authorizations;
    private Boolean backchannelLogoutRevokeOfflineSessions;
    private Boolean backchannelLogoutSessionRequired;
    private String backchannelLogoutUrl;
    private String baseUrl;
    private String clientAuthenticatorType;
    private String clientId;
    private String clientOfflineSessionIdleTimeout;
    private String clientOfflineSessionMaxLifespan;
    private String clientSecret;
    private String clientSessionIdleTimeout;
    private String clientSessionMaxLifespan;
    private Boolean consentRequired;
    private @Nullable String consentScreenText;
    private String description;
    private Boolean directAccessGrantsEnabled;
    private @Nullable Boolean displayOnConsentScreen;
    private Boolean enabled;
    private Boolean excludeSessionStateFromAuthResponse;
    private Map<String,Object> extraConfig;
    private Boolean frontchannelLogoutEnabled;
    private String frontchannelLogoutUrl;
    private Boolean fullScopeAllowed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean implicitFlowEnabled;
    private String loginTheme;
    private String name;
    private @Nullable Boolean oauth2DeviceAuthorizationGrantEnabled;
    private @Nullable String oauth2DeviceCodeLifespan;
    private @Nullable String oauth2DevicePollingInterval;
    private String pkceCodeChallengeMethod;
    private String realmId;
    private String resourceServerId;
    private String rootUrl;
    private String serviceAccountUserId;
    private Boolean serviceAccountsEnabled;
    private Boolean standardFlowEnabled;
    private Boolean useRefreshTokens;
    private Boolean useRefreshTokensClientCredentials;
    private List<String> validPostLogoutRedirectUris;
    private List<String> validRedirectUris;
    private List<String> webOrigins;

    private GetClientResult() {}
    public String accessTokenLifespan() {
        return this.accessTokenLifespan;
    }
    public String accessType() {
        return this.accessType;
    }
    public String adminUrl() {
        return this.adminUrl;
    }
    public List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides() {
        return this.authenticationFlowBindingOverrides;
    }
    public List<GetClientAuthorization> authorizations() {
        return this.authorizations;
    }
    public Boolean backchannelLogoutRevokeOfflineSessions() {
        return this.backchannelLogoutRevokeOfflineSessions;
    }
    public Boolean backchannelLogoutSessionRequired() {
        return this.backchannelLogoutSessionRequired;
    }
    public String backchannelLogoutUrl() {
        return this.backchannelLogoutUrl;
    }
    public String baseUrl() {
        return this.baseUrl;
    }
    public String clientAuthenticatorType() {
        return this.clientAuthenticatorType;
    }
    public String clientId() {
        return this.clientId;
    }
    public String clientOfflineSessionIdleTimeout() {
        return this.clientOfflineSessionIdleTimeout;
    }
    public String clientOfflineSessionMaxLifespan() {
        return this.clientOfflineSessionMaxLifespan;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    public String clientSessionIdleTimeout() {
        return this.clientSessionIdleTimeout;
    }
    public String clientSessionMaxLifespan() {
        return this.clientSessionMaxLifespan;
    }
    public Boolean consentRequired() {
        return this.consentRequired;
    }
    public Optional<String> consentScreenText() {
        return Optional.ofNullable(this.consentScreenText);
    }
    public String description() {
        return this.description;
    }
    public Boolean directAccessGrantsEnabled() {
        return this.directAccessGrantsEnabled;
    }
    public Optional<Boolean> displayOnConsentScreen() {
        return Optional.ofNullable(this.displayOnConsentScreen);
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean excludeSessionStateFromAuthResponse() {
        return this.excludeSessionStateFromAuthResponse;
    }
    public Map<String,Object> extraConfig() {
        return this.extraConfig;
    }
    public Boolean frontchannelLogoutEnabled() {
        return this.frontchannelLogoutEnabled;
    }
    public String frontchannelLogoutUrl() {
        return this.frontchannelLogoutUrl;
    }
    public Boolean fullScopeAllowed() {
        return this.fullScopeAllowed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean implicitFlowEnabled() {
        return this.implicitFlowEnabled;
    }
    public String loginTheme() {
        return this.loginTheme;
    }
    public String name() {
        return this.name;
    }
    public Optional<Boolean> oauth2DeviceAuthorizationGrantEnabled() {
        return Optional.ofNullable(this.oauth2DeviceAuthorizationGrantEnabled);
    }
    public Optional<String> oauth2DeviceCodeLifespan() {
        return Optional.ofNullable(this.oauth2DeviceCodeLifespan);
    }
    public Optional<String> oauth2DevicePollingInterval() {
        return Optional.ofNullable(this.oauth2DevicePollingInterval);
    }
    public String pkceCodeChallengeMethod() {
        return this.pkceCodeChallengeMethod;
    }
    public String realmId() {
        return this.realmId;
    }
    public String resourceServerId() {
        return this.resourceServerId;
    }
    public String rootUrl() {
        return this.rootUrl;
    }
    public String serviceAccountUserId() {
        return this.serviceAccountUserId;
    }
    public Boolean serviceAccountsEnabled() {
        return this.serviceAccountsEnabled;
    }
    public Boolean standardFlowEnabled() {
        return this.standardFlowEnabled;
    }
    public Boolean useRefreshTokens() {
        return this.useRefreshTokens;
    }
    public Boolean useRefreshTokensClientCredentials() {
        return this.useRefreshTokensClientCredentials;
    }
    public List<String> validPostLogoutRedirectUris() {
        return this.validPostLogoutRedirectUris;
    }
    public List<String> validRedirectUris() {
        return this.validRedirectUris;
    }
    public List<String> webOrigins() {
        return this.webOrigins;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessTokenLifespan;
        private String accessType;
        private String adminUrl;
        private List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
        private List<GetClientAuthorization> authorizations;
        private Boolean backchannelLogoutRevokeOfflineSessions;
        private Boolean backchannelLogoutSessionRequired;
        private String backchannelLogoutUrl;
        private String baseUrl;
        private String clientAuthenticatorType;
        private String clientId;
        private String clientOfflineSessionIdleTimeout;
        private String clientOfflineSessionMaxLifespan;
        private String clientSecret;
        private String clientSessionIdleTimeout;
        private String clientSessionMaxLifespan;
        private Boolean consentRequired;
        private @Nullable String consentScreenText;
        private String description;
        private Boolean directAccessGrantsEnabled;
        private @Nullable Boolean displayOnConsentScreen;
        private Boolean enabled;
        private Boolean excludeSessionStateFromAuthResponse;
        private Map<String,Object> extraConfig;
        private Boolean frontchannelLogoutEnabled;
        private String frontchannelLogoutUrl;
        private Boolean fullScopeAllowed;
        private String id;
        private Boolean implicitFlowEnabled;
        private String loginTheme;
        private String name;
        private @Nullable Boolean oauth2DeviceAuthorizationGrantEnabled;
        private @Nullable String oauth2DeviceCodeLifespan;
        private @Nullable String oauth2DevicePollingInterval;
        private String pkceCodeChallengeMethod;
        private String realmId;
        private String resourceServerId;
        private String rootUrl;
        private String serviceAccountUserId;
        private Boolean serviceAccountsEnabled;
        private Boolean standardFlowEnabled;
        private Boolean useRefreshTokens;
        private Boolean useRefreshTokensClientCredentials;
        private List<String> validPostLogoutRedirectUris;
        private List<String> validRedirectUris;
        private List<String> webOrigins;
        public Builder() {}
        public Builder(GetClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenLifespan = defaults.accessTokenLifespan;
    	      this.accessType = defaults.accessType;
    	      this.adminUrl = defaults.adminUrl;
    	      this.authenticationFlowBindingOverrides = defaults.authenticationFlowBindingOverrides;
    	      this.authorizations = defaults.authorizations;
    	      this.backchannelLogoutRevokeOfflineSessions = defaults.backchannelLogoutRevokeOfflineSessions;
    	      this.backchannelLogoutSessionRequired = defaults.backchannelLogoutSessionRequired;
    	      this.backchannelLogoutUrl = defaults.backchannelLogoutUrl;
    	      this.baseUrl = defaults.baseUrl;
    	      this.clientAuthenticatorType = defaults.clientAuthenticatorType;
    	      this.clientId = defaults.clientId;
    	      this.clientOfflineSessionIdleTimeout = defaults.clientOfflineSessionIdleTimeout;
    	      this.clientOfflineSessionMaxLifespan = defaults.clientOfflineSessionMaxLifespan;
    	      this.clientSecret = defaults.clientSecret;
    	      this.clientSessionIdleTimeout = defaults.clientSessionIdleTimeout;
    	      this.clientSessionMaxLifespan = defaults.clientSessionMaxLifespan;
    	      this.consentRequired = defaults.consentRequired;
    	      this.consentScreenText = defaults.consentScreenText;
    	      this.description = defaults.description;
    	      this.directAccessGrantsEnabled = defaults.directAccessGrantsEnabled;
    	      this.displayOnConsentScreen = defaults.displayOnConsentScreen;
    	      this.enabled = defaults.enabled;
    	      this.excludeSessionStateFromAuthResponse = defaults.excludeSessionStateFromAuthResponse;
    	      this.extraConfig = defaults.extraConfig;
    	      this.frontchannelLogoutEnabled = defaults.frontchannelLogoutEnabled;
    	      this.frontchannelLogoutUrl = defaults.frontchannelLogoutUrl;
    	      this.fullScopeAllowed = defaults.fullScopeAllowed;
    	      this.id = defaults.id;
    	      this.implicitFlowEnabled = defaults.implicitFlowEnabled;
    	      this.loginTheme = defaults.loginTheme;
    	      this.name = defaults.name;
    	      this.oauth2DeviceAuthorizationGrantEnabled = defaults.oauth2DeviceAuthorizationGrantEnabled;
    	      this.oauth2DeviceCodeLifespan = defaults.oauth2DeviceCodeLifespan;
    	      this.oauth2DevicePollingInterval = defaults.oauth2DevicePollingInterval;
    	      this.pkceCodeChallengeMethod = defaults.pkceCodeChallengeMethod;
    	      this.realmId = defaults.realmId;
    	      this.resourceServerId = defaults.resourceServerId;
    	      this.rootUrl = defaults.rootUrl;
    	      this.serviceAccountUserId = defaults.serviceAccountUserId;
    	      this.serviceAccountsEnabled = defaults.serviceAccountsEnabled;
    	      this.standardFlowEnabled = defaults.standardFlowEnabled;
    	      this.useRefreshTokens = defaults.useRefreshTokens;
    	      this.useRefreshTokensClientCredentials = defaults.useRefreshTokensClientCredentials;
    	      this.validPostLogoutRedirectUris = defaults.validPostLogoutRedirectUris;
    	      this.validRedirectUris = defaults.validRedirectUris;
    	      this.webOrigins = defaults.webOrigins;
        }

        @CustomType.Setter
        public Builder accessTokenLifespan(String accessTokenLifespan) {
            if (accessTokenLifespan == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "accessTokenLifespan");
            }
            this.accessTokenLifespan = accessTokenLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder accessType(String accessType) {
            if (accessType == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "accessType");
            }
            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder adminUrl(String adminUrl) {
            if (adminUrl == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "adminUrl");
            }
            this.adminUrl = adminUrl;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationFlowBindingOverrides(List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides) {
            if (authenticationFlowBindingOverrides == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "authenticationFlowBindingOverrides");
            }
            this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            return this;
        }
        public Builder authenticationFlowBindingOverrides(GetClientAuthenticationFlowBindingOverride... authenticationFlowBindingOverrides) {
            return authenticationFlowBindingOverrides(List.of(authenticationFlowBindingOverrides));
        }
        @CustomType.Setter
        public Builder authorizations(List<GetClientAuthorization> authorizations) {
            if (authorizations == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "authorizations");
            }
            this.authorizations = authorizations;
            return this;
        }
        public Builder authorizations(GetClientAuthorization... authorizations) {
            return authorizations(List.of(authorizations));
        }
        @CustomType.Setter
        public Builder backchannelLogoutRevokeOfflineSessions(Boolean backchannelLogoutRevokeOfflineSessions) {
            if (backchannelLogoutRevokeOfflineSessions == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "backchannelLogoutRevokeOfflineSessions");
            }
            this.backchannelLogoutRevokeOfflineSessions = backchannelLogoutRevokeOfflineSessions;
            return this;
        }
        @CustomType.Setter
        public Builder backchannelLogoutSessionRequired(Boolean backchannelLogoutSessionRequired) {
            if (backchannelLogoutSessionRequired == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "backchannelLogoutSessionRequired");
            }
            this.backchannelLogoutSessionRequired = backchannelLogoutSessionRequired;
            return this;
        }
        @CustomType.Setter
        public Builder backchannelLogoutUrl(String backchannelLogoutUrl) {
            if (backchannelLogoutUrl == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "backchannelLogoutUrl");
            }
            this.backchannelLogoutUrl = backchannelLogoutUrl;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(String baseUrl) {
            if (baseUrl == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "baseUrl");
            }
            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder clientAuthenticatorType(String clientAuthenticatorType) {
            if (clientAuthenticatorType == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientAuthenticatorType");
            }
            this.clientAuthenticatorType = clientAuthenticatorType;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientOfflineSessionIdleTimeout(String clientOfflineSessionIdleTimeout) {
            if (clientOfflineSessionIdleTimeout == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientOfflineSessionIdleTimeout");
            }
            this.clientOfflineSessionIdleTimeout = clientOfflineSessionIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder clientOfflineSessionMaxLifespan(String clientOfflineSessionMaxLifespan) {
            if (clientOfflineSessionMaxLifespan == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientOfflineSessionMaxLifespan");
            }
            this.clientOfflineSessionMaxLifespan = clientOfflineSessionMaxLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder clientSessionIdleTimeout(String clientSessionIdleTimeout) {
            if (clientSessionIdleTimeout == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientSessionIdleTimeout");
            }
            this.clientSessionIdleTimeout = clientSessionIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder clientSessionMaxLifespan(String clientSessionMaxLifespan) {
            if (clientSessionMaxLifespan == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "clientSessionMaxLifespan");
            }
            this.clientSessionMaxLifespan = clientSessionMaxLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder consentRequired(Boolean consentRequired) {
            if (consentRequired == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "consentRequired");
            }
            this.consentRequired = consentRequired;
            return this;
        }
        @CustomType.Setter
        public Builder consentScreenText(@Nullable String consentScreenText) {

            this.consentScreenText = consentScreenText;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder directAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
            if (directAccessGrantsEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "directAccessGrantsEnabled");
            }
            this.directAccessGrantsEnabled = directAccessGrantsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder displayOnConsentScreen(@Nullable Boolean displayOnConsentScreen) {

            this.displayOnConsentScreen = displayOnConsentScreen;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder excludeSessionStateFromAuthResponse(Boolean excludeSessionStateFromAuthResponse) {
            if (excludeSessionStateFromAuthResponse == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "excludeSessionStateFromAuthResponse");
            }
            this.excludeSessionStateFromAuthResponse = excludeSessionStateFromAuthResponse;
            return this;
        }
        @CustomType.Setter
        public Builder extraConfig(Map<String,Object> extraConfig) {
            if (extraConfig == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "extraConfig");
            }
            this.extraConfig = extraConfig;
            return this;
        }
        @CustomType.Setter
        public Builder frontchannelLogoutEnabled(Boolean frontchannelLogoutEnabled) {
            if (frontchannelLogoutEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "frontchannelLogoutEnabled");
            }
            this.frontchannelLogoutEnabled = frontchannelLogoutEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder frontchannelLogoutUrl(String frontchannelLogoutUrl) {
            if (frontchannelLogoutUrl == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "frontchannelLogoutUrl");
            }
            this.frontchannelLogoutUrl = frontchannelLogoutUrl;
            return this;
        }
        @CustomType.Setter
        public Builder fullScopeAllowed(Boolean fullScopeAllowed) {
            if (fullScopeAllowed == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "fullScopeAllowed");
            }
            this.fullScopeAllowed = fullScopeAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder implicitFlowEnabled(Boolean implicitFlowEnabled) {
            if (implicitFlowEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "implicitFlowEnabled");
            }
            this.implicitFlowEnabled = implicitFlowEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder loginTheme(String loginTheme) {
            if (loginTheme == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "loginTheme");
            }
            this.loginTheme = loginTheme;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2DeviceAuthorizationGrantEnabled(@Nullable Boolean oauth2DeviceAuthorizationGrantEnabled) {

            this.oauth2DeviceAuthorizationGrantEnabled = oauth2DeviceAuthorizationGrantEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2DeviceCodeLifespan(@Nullable String oauth2DeviceCodeLifespan) {

            this.oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2DevicePollingInterval(@Nullable String oauth2DevicePollingInterval) {

            this.oauth2DevicePollingInterval = oauth2DevicePollingInterval;
            return this;
        }
        @CustomType.Setter
        public Builder pkceCodeChallengeMethod(String pkceCodeChallengeMethod) {
            if (pkceCodeChallengeMethod == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "pkceCodeChallengeMethod");
            }
            this.pkceCodeChallengeMethod = pkceCodeChallengeMethod;
            return this;
        }
        @CustomType.Setter
        public Builder realmId(String realmId) {
            if (realmId == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "realmId");
            }
            this.realmId = realmId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceServerId(String resourceServerId) {
            if (resourceServerId == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "resourceServerId");
            }
            this.resourceServerId = resourceServerId;
            return this;
        }
        @CustomType.Setter
        public Builder rootUrl(String rootUrl) {
            if (rootUrl == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "rootUrl");
            }
            this.rootUrl = rootUrl;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountUserId(String serviceAccountUserId) {
            if (serviceAccountUserId == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "serviceAccountUserId");
            }
            this.serviceAccountUserId = serviceAccountUserId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountsEnabled(Boolean serviceAccountsEnabled) {
            if (serviceAccountsEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "serviceAccountsEnabled");
            }
            this.serviceAccountsEnabled = serviceAccountsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder standardFlowEnabled(Boolean standardFlowEnabled) {
            if (standardFlowEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "standardFlowEnabled");
            }
            this.standardFlowEnabled = standardFlowEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder useRefreshTokens(Boolean useRefreshTokens) {
            if (useRefreshTokens == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "useRefreshTokens");
            }
            this.useRefreshTokens = useRefreshTokens;
            return this;
        }
        @CustomType.Setter
        public Builder useRefreshTokensClientCredentials(Boolean useRefreshTokensClientCredentials) {
            if (useRefreshTokensClientCredentials == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "useRefreshTokensClientCredentials");
            }
            this.useRefreshTokensClientCredentials = useRefreshTokensClientCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder validPostLogoutRedirectUris(List<String> validPostLogoutRedirectUris) {
            if (validPostLogoutRedirectUris == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "validPostLogoutRedirectUris");
            }
            this.validPostLogoutRedirectUris = validPostLogoutRedirectUris;
            return this;
        }
        public Builder validPostLogoutRedirectUris(String... validPostLogoutRedirectUris) {
            return validPostLogoutRedirectUris(List.of(validPostLogoutRedirectUris));
        }
        @CustomType.Setter
        public Builder validRedirectUris(List<String> validRedirectUris) {
            if (validRedirectUris == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "validRedirectUris");
            }
            this.validRedirectUris = validRedirectUris;
            return this;
        }
        public Builder validRedirectUris(String... validRedirectUris) {
            return validRedirectUris(List.of(validRedirectUris));
        }
        @CustomType.Setter
        public Builder webOrigins(List<String> webOrigins) {
            if (webOrigins == null) {
              throw new MissingRequiredPropertyException("GetClientResult", "webOrigins");
            }
            this.webOrigins = webOrigins;
            return this;
        }
        public Builder webOrigins(String... webOrigins) {
            return webOrigins(List.of(webOrigins));
        }
        public GetClientResult build() {
            final var _resultValue = new GetClientResult();
            _resultValue.accessTokenLifespan = accessTokenLifespan;
            _resultValue.accessType = accessType;
            _resultValue.adminUrl = adminUrl;
            _resultValue.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            _resultValue.authorizations = authorizations;
            _resultValue.backchannelLogoutRevokeOfflineSessions = backchannelLogoutRevokeOfflineSessions;
            _resultValue.backchannelLogoutSessionRequired = backchannelLogoutSessionRequired;
            _resultValue.backchannelLogoutUrl = backchannelLogoutUrl;
            _resultValue.baseUrl = baseUrl;
            _resultValue.clientAuthenticatorType = clientAuthenticatorType;
            _resultValue.clientId = clientId;
            _resultValue.clientOfflineSessionIdleTimeout = clientOfflineSessionIdleTimeout;
            _resultValue.clientOfflineSessionMaxLifespan = clientOfflineSessionMaxLifespan;
            _resultValue.clientSecret = clientSecret;
            _resultValue.clientSessionIdleTimeout = clientSessionIdleTimeout;
            _resultValue.clientSessionMaxLifespan = clientSessionMaxLifespan;
            _resultValue.consentRequired = consentRequired;
            _resultValue.consentScreenText = consentScreenText;
            _resultValue.description = description;
            _resultValue.directAccessGrantsEnabled = directAccessGrantsEnabled;
            _resultValue.displayOnConsentScreen = displayOnConsentScreen;
            _resultValue.enabled = enabled;
            _resultValue.excludeSessionStateFromAuthResponse = excludeSessionStateFromAuthResponse;
            _resultValue.extraConfig = extraConfig;
            _resultValue.frontchannelLogoutEnabled = frontchannelLogoutEnabled;
            _resultValue.frontchannelLogoutUrl = frontchannelLogoutUrl;
            _resultValue.fullScopeAllowed = fullScopeAllowed;
            _resultValue.id = id;
            _resultValue.implicitFlowEnabled = implicitFlowEnabled;
            _resultValue.loginTheme = loginTheme;
            _resultValue.name = name;
            _resultValue.oauth2DeviceAuthorizationGrantEnabled = oauth2DeviceAuthorizationGrantEnabled;
            _resultValue.oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
            _resultValue.oauth2DevicePollingInterval = oauth2DevicePollingInterval;
            _resultValue.pkceCodeChallengeMethod = pkceCodeChallengeMethod;
            _resultValue.realmId = realmId;
            _resultValue.resourceServerId = resourceServerId;
            _resultValue.rootUrl = rootUrl;
            _resultValue.serviceAccountUserId = serviceAccountUserId;
            _resultValue.serviceAccountsEnabled = serviceAccountsEnabled;
            _resultValue.standardFlowEnabled = standardFlowEnabled;
            _resultValue.useRefreshTokens = useRefreshTokens;
            _resultValue.useRefreshTokensClientCredentials = useRefreshTokensClientCredentials;
            _resultValue.validPostLogoutRedirectUris = validPostLogoutRedirectUris;
            _resultValue.validRedirectUris = validRedirectUris;
            _resultValue.webOrigins = webOrigins;
            return _resultValue;
        }
    }
}
