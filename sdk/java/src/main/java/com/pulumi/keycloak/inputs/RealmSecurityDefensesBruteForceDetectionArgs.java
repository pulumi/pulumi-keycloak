// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmSecurityDefensesBruteForceDetectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RealmSecurityDefensesBruteForceDetectionArgs Empty = new RealmSecurityDefensesBruteForceDetectionArgs();

    @Import(name="failureResetTimeSeconds")
    private @Nullable Output<Integer> failureResetTimeSeconds;

    public Optional<Output<Integer>> failureResetTimeSeconds() {
        return Optional.ofNullable(this.failureResetTimeSeconds);
    }

    @Import(name="maxFailureWaitSeconds")
    private @Nullable Output<Integer> maxFailureWaitSeconds;

    public Optional<Output<Integer>> maxFailureWaitSeconds() {
        return Optional.ofNullable(this.maxFailureWaitSeconds);
    }

    @Import(name="maxLoginFailures")
    private @Nullable Output<Integer> maxLoginFailures;

    public Optional<Output<Integer>> maxLoginFailures() {
        return Optional.ofNullable(this.maxLoginFailures);
    }

    @Import(name="minimumQuickLoginWaitSeconds")
    private @Nullable Output<Integer> minimumQuickLoginWaitSeconds;

    public Optional<Output<Integer>> minimumQuickLoginWaitSeconds() {
        return Optional.ofNullable(this.minimumQuickLoginWaitSeconds);
    }

    @Import(name="permanentLockout")
    private @Nullable Output<Boolean> permanentLockout;

    public Optional<Output<Boolean>> permanentLockout() {
        return Optional.ofNullable(this.permanentLockout);
    }

    @Import(name="quickLoginCheckMilliSeconds")
    private @Nullable Output<Integer> quickLoginCheckMilliSeconds;

    public Optional<Output<Integer>> quickLoginCheckMilliSeconds() {
        return Optional.ofNullable(this.quickLoginCheckMilliSeconds);
    }

    @Import(name="waitIncrementSeconds")
    private @Nullable Output<Integer> waitIncrementSeconds;

    public Optional<Output<Integer>> waitIncrementSeconds() {
        return Optional.ofNullable(this.waitIncrementSeconds);
    }

    private RealmSecurityDefensesBruteForceDetectionArgs() {}

    private RealmSecurityDefensesBruteForceDetectionArgs(RealmSecurityDefensesBruteForceDetectionArgs $) {
        this.failureResetTimeSeconds = $.failureResetTimeSeconds;
        this.maxFailureWaitSeconds = $.maxFailureWaitSeconds;
        this.maxLoginFailures = $.maxLoginFailures;
        this.minimumQuickLoginWaitSeconds = $.minimumQuickLoginWaitSeconds;
        this.permanentLockout = $.permanentLockout;
        this.quickLoginCheckMilliSeconds = $.quickLoginCheckMilliSeconds;
        this.waitIncrementSeconds = $.waitIncrementSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmSecurityDefensesBruteForceDetectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmSecurityDefensesBruteForceDetectionArgs $;

        public Builder() {
            $ = new RealmSecurityDefensesBruteForceDetectionArgs();
        }

        public Builder(RealmSecurityDefensesBruteForceDetectionArgs defaults) {
            $ = new RealmSecurityDefensesBruteForceDetectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder failureResetTimeSeconds(@Nullable Output<Integer> failureResetTimeSeconds) {
            $.failureResetTimeSeconds = failureResetTimeSeconds;
            return this;
        }

        public Builder failureResetTimeSeconds(Integer failureResetTimeSeconds) {
            return failureResetTimeSeconds(Output.of(failureResetTimeSeconds));
        }

        public Builder maxFailureWaitSeconds(@Nullable Output<Integer> maxFailureWaitSeconds) {
            $.maxFailureWaitSeconds = maxFailureWaitSeconds;
            return this;
        }

        public Builder maxFailureWaitSeconds(Integer maxFailureWaitSeconds) {
            return maxFailureWaitSeconds(Output.of(maxFailureWaitSeconds));
        }

        public Builder maxLoginFailures(@Nullable Output<Integer> maxLoginFailures) {
            $.maxLoginFailures = maxLoginFailures;
            return this;
        }

        public Builder maxLoginFailures(Integer maxLoginFailures) {
            return maxLoginFailures(Output.of(maxLoginFailures));
        }

        public Builder minimumQuickLoginWaitSeconds(@Nullable Output<Integer> minimumQuickLoginWaitSeconds) {
            $.minimumQuickLoginWaitSeconds = minimumQuickLoginWaitSeconds;
            return this;
        }

        public Builder minimumQuickLoginWaitSeconds(Integer minimumQuickLoginWaitSeconds) {
            return minimumQuickLoginWaitSeconds(Output.of(minimumQuickLoginWaitSeconds));
        }

        public Builder permanentLockout(@Nullable Output<Boolean> permanentLockout) {
            $.permanentLockout = permanentLockout;
            return this;
        }

        public Builder permanentLockout(Boolean permanentLockout) {
            return permanentLockout(Output.of(permanentLockout));
        }

        public Builder quickLoginCheckMilliSeconds(@Nullable Output<Integer> quickLoginCheckMilliSeconds) {
            $.quickLoginCheckMilliSeconds = quickLoginCheckMilliSeconds;
            return this;
        }

        public Builder quickLoginCheckMilliSeconds(Integer quickLoginCheckMilliSeconds) {
            return quickLoginCheckMilliSeconds(Output.of(quickLoginCheckMilliSeconds));
        }

        public Builder waitIncrementSeconds(@Nullable Output<Integer> waitIncrementSeconds) {
            $.waitIncrementSeconds = waitIncrementSeconds;
            return this;
        }

        public Builder waitIncrementSeconds(Integer waitIncrementSeconds) {
            return waitIncrementSeconds(Output.of(waitIncrementSeconds));
        }

        public RealmSecurityDefensesBruteForceDetectionArgs build() {
            return $;
        }
    }

}
