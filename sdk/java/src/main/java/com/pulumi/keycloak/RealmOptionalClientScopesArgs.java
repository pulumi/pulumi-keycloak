// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class RealmOptionalClientScopesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RealmOptionalClientScopesArgs Empty = new RealmOptionalClientScopesArgs();

    /**
     * An array of optional client scope names that should be used when creating new Keycloak clients.
     * 
     */
    @Import(name="optionalScopes", required=true)
    private Output<List<String>> optionalScopes;

    /**
     * @return An array of optional client scope names that should be used when creating new Keycloak clients.
     * 
     */
    public Output<List<String>> optionalScopes() {
        return this.optionalScopes;
    }

    /**
     * The realm this client and scopes exists in.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm this client and scopes exists in.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    private RealmOptionalClientScopesArgs() {}

    private RealmOptionalClientScopesArgs(RealmOptionalClientScopesArgs $) {
        this.optionalScopes = $.optionalScopes;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmOptionalClientScopesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmOptionalClientScopesArgs $;

        public Builder() {
            $ = new RealmOptionalClientScopesArgs();
        }

        public Builder(RealmOptionalClientScopesArgs defaults) {
            $ = new RealmOptionalClientScopesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param optionalScopes An array of optional client scope names that should be used when creating new Keycloak clients.
         * 
         * @return builder
         * 
         */
        public Builder optionalScopes(Output<List<String>> optionalScopes) {
            $.optionalScopes = optionalScopes;
            return this;
        }

        /**
         * @param optionalScopes An array of optional client scope names that should be used when creating new Keycloak clients.
         * 
         * @return builder
         * 
         */
        public Builder optionalScopes(List<String> optionalScopes) {
            return optionalScopes(Output.of(optionalScopes));
        }

        /**
         * @param optionalScopes An array of optional client scope names that should be used when creating new Keycloak clients.
         * 
         * @return builder
         * 
         */
        public Builder optionalScopes(String... optionalScopes) {
            return optionalScopes(List.of(optionalScopes));
        }

        /**
         * @param realmId The realm this client and scopes exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm this client and scopes exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public RealmOptionalClientScopesArgs build() {
            if ($.optionalScopes == null) {
                throw new MissingRequiredPropertyException("RealmOptionalClientScopesArgs", "optionalScopes");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("RealmOptionalClientScopesArgs", "realmId");
            }
            return $;
        }
    }

}
