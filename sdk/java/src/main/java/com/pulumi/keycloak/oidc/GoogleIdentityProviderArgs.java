// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.oidc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GoogleIdentityProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final GoogleIdentityProviderArgs Empty = new GoogleIdentityProviderArgs();

    /**
     * When `true`, unauthenticated requests with `prompt=none` will be forwarded to Google instead of returning an error. Defaults to `false`.
     * 
     */
    @Import(name="acceptsPromptNoneForwardFromClient")
    private @Nullable Output<Boolean> acceptsPromptNoneForwardFromClient;

    /**
     * @return When `true`, unauthenticated requests with `prompt=none` will be forwarded to Google instead of returning an error. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> acceptsPromptNoneForwardFromClient() {
        return Optional.ofNullable(this.acceptsPromptNoneForwardFromClient);
    }

    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     * 
     */
    @Import(name="addReadTokenRoleOnCreate")
    private @Nullable Output<Boolean> addReadTokenRoleOnCreate;

    /**
     * @return When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> addReadTokenRoleOnCreate() {
        return Optional.ofNullable(this.addReadTokenRoleOnCreate);
    }

    /**
     * Enable/disable authenticate users by default.
     * 
     */
    @Import(name="authenticateByDefault")
    private @Nullable Output<Boolean> authenticateByDefault;

    /**
     * @return Enable/disable authenticate users by default.
     * 
     */
    public Optional<Output<Boolean>> authenticateByDefault() {
        return Optional.ofNullable(this.authenticateByDefault);
    }

    /**
     * The client or client identifier registered within the identity provider.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The client or client identifier registered within the identity provider.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     * 
     */
    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    /**
     * @return The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     * 
     */
    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid profile email`.
     * 
     */
    @Import(name="defaultScopes")
    private @Nullable Output<String> defaultScopes;

    /**
     * @return The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid profile email`.
     * 
     */
    public Optional<Output<String>> defaultScopes() {
        return Optional.ofNullable(this.defaultScopes);
    }

    /**
     * When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     * 
     */
    @Import(name="disableUserInfo")
    private @Nullable Output<Boolean> disableUserInfo;

    /**
     * @return When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> disableUserInfo() {
        return Optional.ofNullable(this.disableUserInfo);
    }

    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="extraConfig")
    private @Nullable Output<Map<String,String>> extraConfig;

    public Optional<Output<Map<String,String>>> extraConfig() {
        return Optional.ofNullable(this.extraConfig);
    }

    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     * 
     */
    @Import(name="firstBrokerLoginFlowAlias")
    private @Nullable Output<String> firstBrokerLoginFlowAlias;

    /**
     * @return The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     * 
     */
    public Optional<Output<String>> firstBrokerLoginFlowAlias() {
        return Optional.ofNullable(this.firstBrokerLoginFlowAlias);
    }

    /**
     * A number defining the order of this identity provider in the GUI.
     * 
     */
    @Import(name="guiOrder")
    private @Nullable Output<String> guiOrder;

    /**
     * @return A number defining the order of this identity provider in the GUI.
     * 
     */
    public Optional<Output<String>> guiOrder() {
        return Optional.ofNullable(this.guiOrder);
    }

    /**
     * When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
     * 
     */
    @Import(name="hideOnLoginPage")
    private @Nullable Output<Boolean> hideOnLoginPage;

    /**
     * @return When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> hideOnLoginPage() {
        return Optional.ofNullable(this.hideOnLoginPage);
    }

    /**
     * Sets the &#34;hd&#34; query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When `*` is entered, an account from any domain can be used.
     * 
     */
    @Import(name="hostedDomain")
    private @Nullable Output<String> hostedDomain;

    /**
     * @return Sets the &#34;hd&#34; query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When `*` is entered, an account from any domain can be used.
     * 
     */
    public Optional<Output<String>> hostedDomain() {
        return Optional.ofNullable(this.hostedDomain);
    }

    /**
     * When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     * 
     */
    @Import(name="linkOnly")
    private @Nullable Output<Boolean> linkOnly;

    /**
     * @return When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> linkOnly() {
        return Optional.ofNullable(this.linkOnly);
    }

    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     * 
     */
    @Import(name="postBrokerLoginFlowAlias")
    private @Nullable Output<String> postBrokerLoginFlowAlias;

    /**
     * @return The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     * 
     */
    public Optional<Output<String>> postBrokerLoginFlowAlias() {
        return Optional.ofNullable(this.postBrokerLoginFlowAlias);
    }

    /**
     * The ID of the identity provider to use. Defaults to `google`, which should be used unless you have extended Keycloak and provided your own implementation.
     * 
     */
    @Import(name="providerId")
    private @Nullable Output<String> providerId;

    /**
     * @return The ID of the identity provider to use. Defaults to `google`, which should be used unless you have extended Keycloak and provided your own implementation.
     * 
     */
    public Optional<Output<String>> providerId() {
        return Optional.ofNullable(this.providerId);
    }

    /**
     * The name of the realm. This is unique across Keycloak.
     * 
     */
    @Import(name="realm", required=true)
    private Output<String> realm;

    /**
     * @return The name of the realm. This is unique across Keycloak.
     * 
     */
    public Output<String> realm() {
        return this.realm;
    }

    /**
     * Sets the &#34;access_type&#34; query parameter to &#34;offline&#34; when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
     * 
     */
    @Import(name="requestRefreshToken")
    private @Nullable Output<Boolean> requestRefreshToken;

    /**
     * @return Sets the &#34;access_type&#34; query parameter to &#34;offline&#34; when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
     * 
     */
    public Optional<Output<Boolean>> requestRefreshToken() {
        return Optional.ofNullable(this.requestRefreshToken);
    }

    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     * 
     */
    @Import(name="storeToken")
    private @Nullable Output<Boolean> storeToken;

    /**
     * @return When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> storeToken() {
        return Optional.ofNullable(this.storeToken);
    }

    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     * 
     */
    @Import(name="syncMode")
    private @Nullable Output<String> syncMode;

    /**
     * @return The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     * 
     */
    public Optional<Output<String>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
     * 
     */
    @Import(name="trustEmail")
    private @Nullable Output<Boolean> trustEmail;

    /**
     * @return When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> trustEmail() {
        return Optional.ofNullable(this.trustEmail);
    }

    /**
     * Sets the &#34;userIp&#34; query parameter when querying Google&#39;s User Info service. This will use the user&#39;s IP address. This is useful if Google is throttling Keycloak&#39;s access to the User Info service.
     * 
     */
    @Import(name="useUserIpParam")
    private @Nullable Output<Boolean> useUserIpParam;

    /**
     * @return Sets the &#34;userIp&#34; query parameter when querying Google&#39;s User Info service. This will use the user&#39;s IP address. This is useful if Google is throttling Keycloak&#39;s access to the User Info service.
     * 
     */
    public Optional<Output<Boolean>> useUserIpParam() {
        return Optional.ofNullable(this.useUserIpParam);
    }

    private GoogleIdentityProviderArgs() {}

    private GoogleIdentityProviderArgs(GoogleIdentityProviderArgs $) {
        this.acceptsPromptNoneForwardFromClient = $.acceptsPromptNoneForwardFromClient;
        this.addReadTokenRoleOnCreate = $.addReadTokenRoleOnCreate;
        this.authenticateByDefault = $.authenticateByDefault;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.defaultScopes = $.defaultScopes;
        this.disableUserInfo = $.disableUserInfo;
        this.enabled = $.enabled;
        this.extraConfig = $.extraConfig;
        this.firstBrokerLoginFlowAlias = $.firstBrokerLoginFlowAlias;
        this.guiOrder = $.guiOrder;
        this.hideOnLoginPage = $.hideOnLoginPage;
        this.hostedDomain = $.hostedDomain;
        this.linkOnly = $.linkOnly;
        this.postBrokerLoginFlowAlias = $.postBrokerLoginFlowAlias;
        this.providerId = $.providerId;
        this.realm = $.realm;
        this.requestRefreshToken = $.requestRefreshToken;
        this.storeToken = $.storeToken;
        this.syncMode = $.syncMode;
        this.trustEmail = $.trustEmail;
        this.useUserIpParam = $.useUserIpParam;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GoogleIdentityProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GoogleIdentityProviderArgs $;

        public Builder() {
            $ = new GoogleIdentityProviderArgs();
        }

        public Builder(GoogleIdentityProviderArgs defaults) {
            $ = new GoogleIdentityProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptsPromptNoneForwardFromClient When `true`, unauthenticated requests with `prompt=none` will be forwarded to Google instead of returning an error. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder acceptsPromptNoneForwardFromClient(@Nullable Output<Boolean> acceptsPromptNoneForwardFromClient) {
            $.acceptsPromptNoneForwardFromClient = acceptsPromptNoneForwardFromClient;
            return this;
        }

        /**
         * @param acceptsPromptNoneForwardFromClient When `true`, unauthenticated requests with `prompt=none` will be forwarded to Google instead of returning an error. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder acceptsPromptNoneForwardFromClient(Boolean acceptsPromptNoneForwardFromClient) {
            return acceptsPromptNoneForwardFromClient(Output.of(acceptsPromptNoneForwardFromClient));
        }

        /**
         * @param addReadTokenRoleOnCreate When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder addReadTokenRoleOnCreate(@Nullable Output<Boolean> addReadTokenRoleOnCreate) {
            $.addReadTokenRoleOnCreate = addReadTokenRoleOnCreate;
            return this;
        }

        /**
         * @param addReadTokenRoleOnCreate When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder addReadTokenRoleOnCreate(Boolean addReadTokenRoleOnCreate) {
            return addReadTokenRoleOnCreate(Output.of(addReadTokenRoleOnCreate));
        }

        /**
         * @param authenticateByDefault Enable/disable authenticate users by default.
         * 
         * @return builder
         * 
         */
        public Builder authenticateByDefault(@Nullable Output<Boolean> authenticateByDefault) {
            $.authenticateByDefault = authenticateByDefault;
            return this;
        }

        /**
         * @param authenticateByDefault Enable/disable authenticate users by default.
         * 
         * @return builder
         * 
         */
        public Builder authenticateByDefault(Boolean authenticateByDefault) {
            return authenticateByDefault(Output.of(authenticateByDefault));
        }

        /**
         * @param clientId The client or client identifier registered within the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client or client identifier registered within the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param defaultScopes The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid profile email`.
         * 
         * @return builder
         * 
         */
        public Builder defaultScopes(@Nullable Output<String> defaultScopes) {
            $.defaultScopes = defaultScopes;
            return this;
        }

        /**
         * @param defaultScopes The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid profile email`.
         * 
         * @return builder
         * 
         */
        public Builder defaultScopes(String defaultScopes) {
            return defaultScopes(Output.of(defaultScopes));
        }

        /**
         * @param disableUserInfo When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableUserInfo(@Nullable Output<Boolean> disableUserInfo) {
            $.disableUserInfo = disableUserInfo;
            return this;
        }

        /**
         * @param disableUserInfo When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableUserInfo(Boolean disableUserInfo) {
            return disableUserInfo(Output.of(disableUserInfo));
        }

        /**
         * @param enabled When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder extraConfig(@Nullable Output<Map<String,String>> extraConfig) {
            $.extraConfig = extraConfig;
            return this;
        }

        public Builder extraConfig(Map<String,String> extraConfig) {
            return extraConfig(Output.of(extraConfig));
        }

        /**
         * @param firstBrokerLoginFlowAlias The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
         * 
         * @return builder
         * 
         */
        public Builder firstBrokerLoginFlowAlias(@Nullable Output<String> firstBrokerLoginFlowAlias) {
            $.firstBrokerLoginFlowAlias = firstBrokerLoginFlowAlias;
            return this;
        }

        /**
         * @param firstBrokerLoginFlowAlias The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
         * 
         * @return builder
         * 
         */
        public Builder firstBrokerLoginFlowAlias(String firstBrokerLoginFlowAlias) {
            return firstBrokerLoginFlowAlias(Output.of(firstBrokerLoginFlowAlias));
        }

        /**
         * @param guiOrder A number defining the order of this identity provider in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder guiOrder(@Nullable Output<String> guiOrder) {
            $.guiOrder = guiOrder;
            return this;
        }

        /**
         * @param guiOrder A number defining the order of this identity provider in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder guiOrder(String guiOrder) {
            return guiOrder(Output.of(guiOrder));
        }

        /**
         * @param hideOnLoginPage When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder hideOnLoginPage(@Nullable Output<Boolean> hideOnLoginPage) {
            $.hideOnLoginPage = hideOnLoginPage;
            return this;
        }

        /**
         * @param hideOnLoginPage When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder hideOnLoginPage(Boolean hideOnLoginPage) {
            return hideOnLoginPage(Output.of(hideOnLoginPage));
        }

        /**
         * @param hostedDomain Sets the &#34;hd&#34; query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When `*` is entered, an account from any domain can be used.
         * 
         * @return builder
         * 
         */
        public Builder hostedDomain(@Nullable Output<String> hostedDomain) {
            $.hostedDomain = hostedDomain;
            return this;
        }

        /**
         * @param hostedDomain Sets the &#34;hd&#34; query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When `*` is entered, an account from any domain can be used.
         * 
         * @return builder
         * 
         */
        public Builder hostedDomain(String hostedDomain) {
            return hostedDomain(Output.of(hostedDomain));
        }

        /**
         * @param linkOnly When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder linkOnly(@Nullable Output<Boolean> linkOnly) {
            $.linkOnly = linkOnly;
            return this;
        }

        /**
         * @param linkOnly When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder linkOnly(Boolean linkOnly) {
            return linkOnly(Output.of(linkOnly));
        }

        /**
         * @param postBrokerLoginFlowAlias The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
         * 
         * @return builder
         * 
         */
        public Builder postBrokerLoginFlowAlias(@Nullable Output<String> postBrokerLoginFlowAlias) {
            $.postBrokerLoginFlowAlias = postBrokerLoginFlowAlias;
            return this;
        }

        /**
         * @param postBrokerLoginFlowAlias The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
         * 
         * @return builder
         * 
         */
        public Builder postBrokerLoginFlowAlias(String postBrokerLoginFlowAlias) {
            return postBrokerLoginFlowAlias(Output.of(postBrokerLoginFlowAlias));
        }

        /**
         * @param providerId The ID of the identity provider to use. Defaults to `google`, which should be used unless you have extended Keycloak and provided your own implementation.
         * 
         * @return builder
         * 
         */
        public Builder providerId(@Nullable Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The ID of the identity provider to use. Defaults to `google`, which should be used unless you have extended Keycloak and provided your own implementation.
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param realm The name of the realm. This is unique across Keycloak.
         * 
         * @return builder
         * 
         */
        public Builder realm(Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm The name of the realm. This is unique across Keycloak.
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        /**
         * @param requestRefreshToken Sets the &#34;access_type&#34; query parameter to &#34;offline&#34; when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
         * 
         * @return builder
         * 
         */
        public Builder requestRefreshToken(@Nullable Output<Boolean> requestRefreshToken) {
            $.requestRefreshToken = requestRefreshToken;
            return this;
        }

        /**
         * @param requestRefreshToken Sets the &#34;access_type&#34; query parameter to &#34;offline&#34; when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
         * 
         * @return builder
         * 
         */
        public Builder requestRefreshToken(Boolean requestRefreshToken) {
            return requestRefreshToken(Output.of(requestRefreshToken));
        }

        /**
         * @param storeToken When `true`, tokens will be stored after authenticating users. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder storeToken(@Nullable Output<Boolean> storeToken) {
            $.storeToken = storeToken;
            return this;
        }

        /**
         * @param storeToken When `true`, tokens will be stored after authenticating users. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder storeToken(Boolean storeToken) {
            return storeToken(Output.of(storeToken));
        }

        /**
         * @param syncMode The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(@Nullable Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param syncMode The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        /**
         * @param trustEmail When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder trustEmail(@Nullable Output<Boolean> trustEmail) {
            $.trustEmail = trustEmail;
            return this;
        }

        /**
         * @param trustEmail When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder trustEmail(Boolean trustEmail) {
            return trustEmail(Output.of(trustEmail));
        }

        /**
         * @param useUserIpParam Sets the &#34;userIp&#34; query parameter when querying Google&#39;s User Info service. This will use the user&#39;s IP address. This is useful if Google is throttling Keycloak&#39;s access to the User Info service.
         * 
         * @return builder
         * 
         */
        public Builder useUserIpParam(@Nullable Output<Boolean> useUserIpParam) {
            $.useUserIpParam = useUserIpParam;
            return this;
        }

        /**
         * @param useUserIpParam Sets the &#34;userIp&#34; query parameter when querying Google&#39;s User Info service. This will use the user&#39;s IP address. This is useful if Google is throttling Keycloak&#39;s access to the User Info service.
         * 
         * @return builder
         * 
         */
        public Builder useUserIpParam(Boolean useUserIpParam) {
            return useUserIpParam(Output.of(useUserIpParam));
        }

        public GoogleIdentityProviderArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("GoogleIdentityProviderArgs", "clientId");
            }
            if ($.clientSecret == null) {
                throw new MissingRequiredPropertyException("GoogleIdentityProviderArgs", "clientSecret");
            }
            if ($.realm == null) {
                throw new MissingRequiredPropertyException("GoogleIdentityProviderArgs", "realm");
            }
            return $;
        }
    }

}
