// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientOptionalScopesState extends com.pulumi.resources.ResourceArgs {

    public static final ClientOptionalScopesState Empty = new ClientOptionalScopesState();

    /**
     * The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * An array of client scope names to attach to this client as optional scopes.
     * 
     */
    @Import(name="optionalScopes")
    private @Nullable Output<List<String>> optionalScopes;

    /**
     * @return An array of client scope names to attach to this client as optional scopes.
     * 
     */
    public Optional<Output<List<String>>> optionalScopes() {
        return Optional.ofNullable(this.optionalScopes);
    }

    /**
     * The realm this client and scopes exists in.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm this client and scopes exists in.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    private ClientOptionalScopesState() {}

    private ClientOptionalScopesState(ClientOptionalScopesState $) {
        this.clientId = $.clientId;
        this.optionalScopes = $.optionalScopes;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientOptionalScopesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientOptionalScopesState $;

        public Builder() {
            $ = new ClientOptionalScopesState();
        }

        public Builder(ClientOptionalScopesState defaults) {
            $ = new ClientOptionalScopesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param optionalScopes An array of client scope names to attach to this client as optional scopes.
         * 
         * @return builder
         * 
         */
        public Builder optionalScopes(@Nullable Output<List<String>> optionalScopes) {
            $.optionalScopes = optionalScopes;
            return this;
        }

        /**
         * @param optionalScopes An array of client scope names to attach to this client as optional scopes.
         * 
         * @return builder
         * 
         */
        public Builder optionalScopes(List<String> optionalScopes) {
            return optionalScopes(Output.of(optionalScopes));
        }

        /**
         * @param optionalScopes An array of client scope names to attach to this client as optional scopes.
         * 
         * @return builder
         * 
         */
        public Builder optionalScopes(String... optionalScopes) {
            return optionalScopes(List.of(optionalScopes));
        }

        /**
         * @param realmId The realm this client and scopes exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm this client and scopes exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public ClientOptionalScopesState build() {
            return $;
        }
    }

}
