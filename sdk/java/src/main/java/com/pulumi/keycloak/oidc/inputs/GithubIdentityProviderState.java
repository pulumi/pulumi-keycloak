// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.oidc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GithubIdentityProviderState extends com.pulumi.resources.ResourceArgs {

    public static final GithubIdentityProviderState Empty = new GithubIdentityProviderState();

    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     * 
     */
    @Import(name="addReadTokenRoleOnCreate")
    private @Nullable Output<Boolean> addReadTokenRoleOnCreate;

    /**
     * @return When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> addReadTokenRoleOnCreate() {
        return Optional.ofNullable(this.addReadTokenRoleOnCreate);
    }

    /**
     * The alias for the GitHub identity provider.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return The alias for the GitHub identity provider.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * The GitHub API URL, defaults to `https://api.github.com`.
     * 
     */
    @Import(name="apiUrl")
    private @Nullable Output<String> apiUrl;

    /**
     * @return The GitHub API URL, defaults to `https://api.github.com`.
     * 
     */
    public Optional<Output<String>> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }

    /**
     * Enable/disable authenticate users by default.
     * 
     */
    @Import(name="authenticateByDefault")
    private @Nullable Output<Boolean> authenticateByDefault;

    /**
     * @return Enable/disable authenticate users by default.
     * 
     */
    public Optional<Output<Boolean>> authenticateByDefault() {
        return Optional.ofNullable(this.authenticateByDefault);
    }

    /**
     * The GitHub base URL, defaults to `https://github.com`
     * 
     */
    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    /**
     * @return The GitHub base URL, defaults to `https://github.com`
     * 
     */
    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    /**
     * The client or client identifier registered within the identity provider.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The client or client identifier registered within the identity provider.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
     * 
     */
    @Import(name="defaultScopes")
    private @Nullable Output<String> defaultScopes;

    /**
     * @return The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
     * 
     */
    public Optional<Output<String>> defaultScopes() {
        return Optional.ofNullable(this.defaultScopes);
    }

    /**
     * Display name for the GitHub identity provider in the GUI.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name for the GitHub identity provider in the GUI.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    @Import(name="extraConfig")
    private @Nullable Output<Map<String,String>> extraConfig;

    public Optional<Output<Map<String,String>>> extraConfig() {
        return Optional.ofNullable(this.extraConfig);
    }

    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     * 
     */
    @Import(name="firstBrokerLoginFlowAlias")
    private @Nullable Output<String> firstBrokerLoginFlowAlias;

    /**
     * @return The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     * 
     */
    public Optional<Output<String>> firstBrokerLoginFlowAlias() {
        return Optional.ofNullable(this.firstBrokerLoginFlowAlias);
    }

    /**
     * When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
     * 
     */
    @Import(name="githubJsonFormat")
    private @Nullable Output<Boolean> githubJsonFormat;

    /**
     * @return When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> githubJsonFormat() {
        return Optional.ofNullable(this.githubJsonFormat);
    }

    /**
     * A number defining the order of this identity provider in the GUI.
     * 
     */
    @Import(name="guiOrder")
    private @Nullable Output<String> guiOrder;

    /**
     * @return A number defining the order of this identity provider in the GUI.
     * 
     */
    public Optional<Output<String>> guiOrder() {
        return Optional.ofNullable(this.guiOrder);
    }

    /**
     * When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
     * 
     */
    @Import(name="hideOnLoginPage")
    private @Nullable Output<Boolean> hideOnLoginPage;

    /**
     * @return When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> hideOnLoginPage() {
        return Optional.ofNullable(this.hideOnLoginPage);
    }

    /**
     * (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     * 
     */
    @Import(name="internalId")
    private @Nullable Output<String> internalId;

    /**
     * @return (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     * 
     */
    public Optional<Output<String>> internalId() {
        return Optional.ofNullable(this.internalId);
    }

    /**
     * When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     * 
     */
    @Import(name="linkOnly")
    private @Nullable Output<Boolean> linkOnly;

    /**
     * @return When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> linkOnly() {
        return Optional.ofNullable(this.linkOnly);
    }

    @Import(name="orgDomain")
    private @Nullable Output<String> orgDomain;

    public Optional<Output<String>> orgDomain() {
        return Optional.ofNullable(this.orgDomain);
    }

    @Import(name="orgRedirectModeEmailMatches")
    private @Nullable Output<Boolean> orgRedirectModeEmailMatches;

    public Optional<Output<Boolean>> orgRedirectModeEmailMatches() {
        return Optional.ofNullable(this.orgRedirectModeEmailMatches);
    }

    /**
     * ID of organization with which this identity is linked.
     * 
     */
    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    /**
     * @return ID of organization with which this identity is linked.
     * 
     */
    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     * 
     */
    @Import(name="postBrokerLoginFlowAlias")
    private @Nullable Output<String> postBrokerLoginFlowAlias;

    /**
     * @return The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     * 
     */
    public Optional<Output<String>> postBrokerLoginFlowAlias() {
        return Optional.ofNullable(this.postBrokerLoginFlowAlias);
    }

    /**
     * The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
     * 
     */
    @Import(name="providerId")
    private @Nullable Output<String> providerId;

    /**
     * @return The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
     * 
     */
    public Optional<Output<String>> providerId() {
        return Optional.ofNullable(this.providerId);
    }

    /**
     * The name of the realm. This is unique across Keycloak.
     * 
     */
    @Import(name="realm")
    private @Nullable Output<String> realm;

    /**
     * @return The name of the realm. This is unique across Keycloak.
     * 
     */
    public Optional<Output<String>> realm() {
        return Optional.ofNullable(this.realm);
    }

    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     * 
     */
    @Import(name="storeToken")
    private @Nullable Output<Boolean> storeToken;

    /**
     * @return When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> storeToken() {
        return Optional.ofNullable(this.storeToken);
    }

    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     * 
     */
    @Import(name="syncMode")
    private @Nullable Output<String> syncMode;

    /**
     * @return The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     * 
     */
    public Optional<Output<String>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
     * 
     */
    @Import(name="trustEmail")
    private @Nullable Output<Boolean> trustEmail;

    /**
     * @return When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> trustEmail() {
        return Optional.ofNullable(this.trustEmail);
    }

    private GithubIdentityProviderState() {}

    private GithubIdentityProviderState(GithubIdentityProviderState $) {
        this.addReadTokenRoleOnCreate = $.addReadTokenRoleOnCreate;
        this.alias = $.alias;
        this.apiUrl = $.apiUrl;
        this.authenticateByDefault = $.authenticateByDefault;
        this.baseUrl = $.baseUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.defaultScopes = $.defaultScopes;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.extraConfig = $.extraConfig;
        this.firstBrokerLoginFlowAlias = $.firstBrokerLoginFlowAlias;
        this.githubJsonFormat = $.githubJsonFormat;
        this.guiOrder = $.guiOrder;
        this.hideOnLoginPage = $.hideOnLoginPage;
        this.internalId = $.internalId;
        this.linkOnly = $.linkOnly;
        this.orgDomain = $.orgDomain;
        this.orgRedirectModeEmailMatches = $.orgRedirectModeEmailMatches;
        this.organizationId = $.organizationId;
        this.postBrokerLoginFlowAlias = $.postBrokerLoginFlowAlias;
        this.providerId = $.providerId;
        this.realm = $.realm;
        this.storeToken = $.storeToken;
        this.syncMode = $.syncMode;
        this.trustEmail = $.trustEmail;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GithubIdentityProviderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GithubIdentityProviderState $;

        public Builder() {
            $ = new GithubIdentityProviderState();
        }

        public Builder(GithubIdentityProviderState defaults) {
            $ = new GithubIdentityProviderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addReadTokenRoleOnCreate When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder addReadTokenRoleOnCreate(@Nullable Output<Boolean> addReadTokenRoleOnCreate) {
            $.addReadTokenRoleOnCreate = addReadTokenRoleOnCreate;
            return this;
        }

        /**
         * @param addReadTokenRoleOnCreate When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder addReadTokenRoleOnCreate(Boolean addReadTokenRoleOnCreate) {
            return addReadTokenRoleOnCreate(Output.of(addReadTokenRoleOnCreate));
        }

        /**
         * @param alias The alias for the GitHub identity provider.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias The alias for the GitHub identity provider.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param apiUrl The GitHub API URL, defaults to `https://api.github.com`.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(@Nullable Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl The GitHub API URL, defaults to `https://api.github.com`.
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param authenticateByDefault Enable/disable authenticate users by default.
         * 
         * @return builder
         * 
         */
        public Builder authenticateByDefault(@Nullable Output<Boolean> authenticateByDefault) {
            $.authenticateByDefault = authenticateByDefault;
            return this;
        }

        /**
         * @param authenticateByDefault Enable/disable authenticate users by default.
         * 
         * @return builder
         * 
         */
        public Builder authenticateByDefault(Boolean authenticateByDefault) {
            return authenticateByDefault(Output.of(authenticateByDefault));
        }

        /**
         * @param baseUrl The GitHub base URL, defaults to `https://github.com`
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        /**
         * @param baseUrl The GitHub base URL, defaults to `https://github.com`
         * 
         * @return builder
         * 
         */
        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        /**
         * @param clientId The client or client identifier registered within the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The client or client identifier registered within the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param defaultScopes The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
         * 
         * @return builder
         * 
         */
        public Builder defaultScopes(@Nullable Output<String> defaultScopes) {
            $.defaultScopes = defaultScopes;
            return this;
        }

        /**
         * @param defaultScopes The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
         * 
         * @return builder
         * 
         */
        public Builder defaultScopes(String defaultScopes) {
            return defaultScopes(Output.of(defaultScopes));
        }

        /**
         * @param displayName Display name for the GitHub identity provider in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name for the GitHub identity provider in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param enabled When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder extraConfig(@Nullable Output<Map<String,String>> extraConfig) {
            $.extraConfig = extraConfig;
            return this;
        }

        public Builder extraConfig(Map<String,String> extraConfig) {
            return extraConfig(Output.of(extraConfig));
        }

        /**
         * @param firstBrokerLoginFlowAlias The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
         * 
         * @return builder
         * 
         */
        public Builder firstBrokerLoginFlowAlias(@Nullable Output<String> firstBrokerLoginFlowAlias) {
            $.firstBrokerLoginFlowAlias = firstBrokerLoginFlowAlias;
            return this;
        }

        /**
         * @param firstBrokerLoginFlowAlias The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
         * 
         * @return builder
         * 
         */
        public Builder firstBrokerLoginFlowAlias(String firstBrokerLoginFlowAlias) {
            return firstBrokerLoginFlowAlias(Output.of(firstBrokerLoginFlowAlias));
        }

        /**
         * @param githubJsonFormat When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder githubJsonFormat(@Nullable Output<Boolean> githubJsonFormat) {
            $.githubJsonFormat = githubJsonFormat;
            return this;
        }

        /**
         * @param githubJsonFormat When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder githubJsonFormat(Boolean githubJsonFormat) {
            return githubJsonFormat(Output.of(githubJsonFormat));
        }

        /**
         * @param guiOrder A number defining the order of this identity provider in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder guiOrder(@Nullable Output<String> guiOrder) {
            $.guiOrder = guiOrder;
            return this;
        }

        /**
         * @param guiOrder A number defining the order of this identity provider in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder guiOrder(String guiOrder) {
            return guiOrder(Output.of(guiOrder));
        }

        /**
         * @param hideOnLoginPage When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder hideOnLoginPage(@Nullable Output<Boolean> hideOnLoginPage) {
            $.hideOnLoginPage = hideOnLoginPage;
            return this;
        }

        /**
         * @param hideOnLoginPage When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder hideOnLoginPage(Boolean hideOnLoginPage) {
            return hideOnLoginPage(Output.of(hideOnLoginPage));
        }

        /**
         * @param internalId (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
         * 
         * @return builder
         * 
         */
        public Builder internalId(@Nullable Output<String> internalId) {
            $.internalId = internalId;
            return this;
        }

        /**
         * @param internalId (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
         * 
         * @return builder
         * 
         */
        public Builder internalId(String internalId) {
            return internalId(Output.of(internalId));
        }

        /**
         * @param linkOnly When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder linkOnly(@Nullable Output<Boolean> linkOnly) {
            $.linkOnly = linkOnly;
            return this;
        }

        /**
         * @param linkOnly When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder linkOnly(Boolean linkOnly) {
            return linkOnly(Output.of(linkOnly));
        }

        public Builder orgDomain(@Nullable Output<String> orgDomain) {
            $.orgDomain = orgDomain;
            return this;
        }

        public Builder orgDomain(String orgDomain) {
            return orgDomain(Output.of(orgDomain));
        }

        public Builder orgRedirectModeEmailMatches(@Nullable Output<Boolean> orgRedirectModeEmailMatches) {
            $.orgRedirectModeEmailMatches = orgRedirectModeEmailMatches;
            return this;
        }

        public Builder orgRedirectModeEmailMatches(Boolean orgRedirectModeEmailMatches) {
            return orgRedirectModeEmailMatches(Output.of(orgRedirectModeEmailMatches));
        }

        /**
         * @param organizationId ID of organization with which this identity is linked.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        /**
         * @param organizationId ID of organization with which this identity is linked.
         * 
         * @return builder
         * 
         */
        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        /**
         * @param postBrokerLoginFlowAlias The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
         * 
         * @return builder
         * 
         */
        public Builder postBrokerLoginFlowAlias(@Nullable Output<String> postBrokerLoginFlowAlias) {
            $.postBrokerLoginFlowAlias = postBrokerLoginFlowAlias;
            return this;
        }

        /**
         * @param postBrokerLoginFlowAlias The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
         * 
         * @return builder
         * 
         */
        public Builder postBrokerLoginFlowAlias(String postBrokerLoginFlowAlias) {
            return postBrokerLoginFlowAlias(Output.of(postBrokerLoginFlowAlias));
        }

        /**
         * @param providerId The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
         * 
         * @return builder
         * 
         */
        public Builder providerId(@Nullable Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param realm The name of the realm. This is unique across Keycloak.
         * 
         * @return builder
         * 
         */
        public Builder realm(@Nullable Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm The name of the realm. This is unique across Keycloak.
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        /**
         * @param storeToken When `true`, tokens will be stored after authenticating users. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder storeToken(@Nullable Output<Boolean> storeToken) {
            $.storeToken = storeToken;
            return this;
        }

        /**
         * @param storeToken When `true`, tokens will be stored after authenticating users. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder storeToken(Boolean storeToken) {
            return storeToken(Output.of(storeToken));
        }

        /**
         * @param syncMode The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(@Nullable Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param syncMode The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
         * 
         * @return builder
         * 
         */
        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        /**
         * @param trustEmail When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder trustEmail(@Nullable Output<Boolean> trustEmail) {
            $.trustEmail = trustEmail;
            return this;
        }

        /**
         * @param trustEmail When `true`, email addresses for users in this provider will automatically be verified regardless of the realm&#39;s email verification policy. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder trustEmail(Boolean trustEmail) {
            return trustEmail(Output.of(trustEmail));
        }

        public GithubIdentityProviderState build() {
            return $;
        }
    }

}
