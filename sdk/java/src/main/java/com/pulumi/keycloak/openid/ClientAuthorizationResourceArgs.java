// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientAuthorizationResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientAuthorizationResourceArgs Empty = new ClientAuthorizationResourceArgs();

    @Import(name="attributes")
    private @Nullable Output<Map<String,Object>> attributes;

    public Optional<Output<Map<String,Object>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="iconUri")
    private @Nullable Output<String> iconUri;

    public Optional<Output<String>> iconUri() {
        return Optional.ofNullable(this.iconUri);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="ownerManagedAccess")
    private @Nullable Output<Boolean> ownerManagedAccess;

    public Optional<Output<Boolean>> ownerManagedAccess() {
        return Optional.ofNullable(this.ownerManagedAccess);
    }

    @Import(name="realmId", required=true)
    private Output<String> realmId;

    public Output<String> realmId() {
        return this.realmId;
    }

    @Import(name="resourceServerId", required=true)
    private Output<String> resourceServerId;

    public Output<String> resourceServerId() {
        return this.resourceServerId;
    }

    @Import(name="scopes")
    private @Nullable Output<List<String>> scopes;

    public Optional<Output<List<String>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="uris")
    private @Nullable Output<List<String>> uris;

    public Optional<Output<List<String>>> uris() {
        return Optional.ofNullable(this.uris);
    }

    private ClientAuthorizationResourceArgs() {}

    private ClientAuthorizationResourceArgs(ClientAuthorizationResourceArgs $) {
        this.attributes = $.attributes;
        this.displayName = $.displayName;
        this.iconUri = $.iconUri;
        this.name = $.name;
        this.ownerManagedAccess = $.ownerManagedAccess;
        this.realmId = $.realmId;
        this.resourceServerId = $.resourceServerId;
        this.scopes = $.scopes;
        this.type = $.type;
        this.uris = $.uris;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientAuthorizationResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientAuthorizationResourceArgs $;

        public Builder() {
            $ = new ClientAuthorizationResourceArgs();
        }

        public Builder(ClientAuthorizationResourceArgs defaults) {
            $ = new ClientAuthorizationResourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributes(@Nullable Output<Map<String,Object>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(Map<String,Object> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder iconUri(@Nullable Output<String> iconUri) {
            $.iconUri = iconUri;
            return this;
        }

        public Builder iconUri(String iconUri) {
            return iconUri(Output.of(iconUri));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder ownerManagedAccess(@Nullable Output<Boolean> ownerManagedAccess) {
            $.ownerManagedAccess = ownerManagedAccess;
            return this;
        }

        public Builder ownerManagedAccess(Boolean ownerManagedAccess) {
            return ownerManagedAccess(Output.of(ownerManagedAccess));
        }

        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public Builder resourceServerId(Output<String> resourceServerId) {
            $.resourceServerId = resourceServerId;
            return this;
        }

        public Builder resourceServerId(String resourceServerId) {
            return resourceServerId(Output.of(resourceServerId));
        }

        public Builder scopes(@Nullable Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder uris(@Nullable Output<List<String>> uris) {
            $.uris = uris;
            return this;
        }

        public Builder uris(List<String> uris) {
            return uris(Output.of(uris));
        }

        public Builder uris(String... uris) {
            return uris(List.of(uris));
        }

        public ClientAuthorizationResourceArgs build() {
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("ClientAuthorizationResourceArgs", "realmId");
            }
            if ($.resourceServerId == null) {
                throw new MissingRequiredPropertyException("ClientAuthorizationResourceArgs", "resourceServerId");
            }
            return $;
        }
    }

}
