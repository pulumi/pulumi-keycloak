// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequiredActionState extends com.pulumi.resources.ResourceArgs {

    public static final RequiredActionState Empty = new RequiredActionState();

    /**
     * The alias of the action to attach as a required action.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return The alias of the action to attach as a required action.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * The configuration. Keys are specific to each configurable required action and not checked when applying.
     * 
     */
    @Import(name="config")
    private @Nullable Output<Map<String,String>> config;

    /**
     * @return The configuration. Keys are specific to each configurable required action and not checked when applying.
     * 
     */
    public Optional<Output<Map<String,String>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * When `true`, the required action is set as the default action for new users. Defaults to `false`.
     * 
     */
    @Import(name="defaultAction")
    private @Nullable Output<Boolean> defaultAction;

    /**
     * @return When `true`, the required action is set as the default action for new users. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> defaultAction() {
        return Optional.ofNullable(this.defaultAction);
    }

    /**
     * When `false`, the required action is not enabled for new users. Defaults to `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When `false`, the required action is not enabled for new users. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the required action.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the required action.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The priority of the required action.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the required action.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The realm the required action exists in.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm the required action exists in.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    private RequiredActionState() {}

    private RequiredActionState(RequiredActionState $) {
        this.alias = $.alias;
        this.config = $.config;
        this.defaultAction = $.defaultAction;
        this.enabled = $.enabled;
        this.name = $.name;
        this.priority = $.priority;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequiredActionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequiredActionState $;

        public Builder() {
            $ = new RequiredActionState();
        }

        public Builder(RequiredActionState defaults) {
            $ = new RequiredActionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias The alias of the action to attach as a required action.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias The alias of the action to attach as a required action.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param config The configuration. Keys are specific to each configurable required action and not checked when applying.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The configuration. Keys are specific to each configurable required action and not checked when applying.
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        /**
         * @param defaultAction When `true`, the required action is set as the default action for new users. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(@Nullable Output<Boolean> defaultAction) {
            $.defaultAction = defaultAction;
            return this;
        }

        /**
         * @param defaultAction When `true`, the required action is set as the default action for new users. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(Boolean defaultAction) {
            return defaultAction(Output.of(defaultAction));
        }

        /**
         * @param enabled When `false`, the required action is not enabled for new users. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When `false`, the required action is not enabled for new users. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the required action.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the required action.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority of the required action.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the required action.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param realmId The realm the required action exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm the required action exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public RequiredActionState build() {
            return $;
        }
    }

}
