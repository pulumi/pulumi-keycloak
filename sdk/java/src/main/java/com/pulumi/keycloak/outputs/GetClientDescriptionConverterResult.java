// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.keycloak.outputs.GetClientDescriptionConverterProtocolMapper;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClientDescriptionConverterResult {
    private Map<String,String> access;
    private String adminUrl;
    private Boolean alwaysDisplayInConsole;
    private Map<String,String> attributes;
    private Map<String,String> authenticationFlowBindingOverrides;
    private Boolean authorizationServicesEnabled;
    private Map<String,String> authorizationSettings;
    private String baseUrl;
    private Boolean bearerOnly;
    private String body;
    private String clientAuthenticatorType;
    private String clientId;
    private String consentRequired;
    private List<String> defaultClientScopes;
    private List<String> defaultRoles;
    private String description;
    private Boolean directAccessGrantsEnabled;
    private Boolean enabled;
    private Boolean frontchannelLogout;
    private Boolean fullScopeAllowed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean implicitFlowEnabled;
    private String name;
    private Integer notBefore;
    private List<String> optionalClientScopes;
    private String origin;
    private String protocol;
    private List<GetClientDescriptionConverterProtocolMapper> protocolMappers;
    private Boolean publicClient;
    private String realmId;
    private List<String> redirectUris;
    private Map<String,String> registeredNodes;
    private String registrationAccessToken;
    private String rootUrl;
    private String secret;
    private Boolean serviceAccountsEnabled;
    private Boolean standardFlowEnabled;
    private Boolean surrogateAuthRequired;
    private List<String> webOrigins;

    private GetClientDescriptionConverterResult() {}
    public Map<String,String> access() {
        return this.access;
    }
    public String adminUrl() {
        return this.adminUrl;
    }
    public Boolean alwaysDisplayInConsole() {
        return this.alwaysDisplayInConsole;
    }
    public Map<String,String> attributes() {
        return this.attributes;
    }
    public Map<String,String> authenticationFlowBindingOverrides() {
        return this.authenticationFlowBindingOverrides;
    }
    public Boolean authorizationServicesEnabled() {
        return this.authorizationServicesEnabled;
    }
    public Map<String,String> authorizationSettings() {
        return this.authorizationSettings;
    }
    public String baseUrl() {
        return this.baseUrl;
    }
    public Boolean bearerOnly() {
        return this.bearerOnly;
    }
    public String body() {
        return this.body;
    }
    public String clientAuthenticatorType() {
        return this.clientAuthenticatorType;
    }
    public String clientId() {
        return this.clientId;
    }
    public String consentRequired() {
        return this.consentRequired;
    }
    public List<String> defaultClientScopes() {
        return this.defaultClientScopes;
    }
    public List<String> defaultRoles() {
        return this.defaultRoles;
    }
    public String description() {
        return this.description;
    }
    public Boolean directAccessGrantsEnabled() {
        return this.directAccessGrantsEnabled;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean frontchannelLogout() {
        return this.frontchannelLogout;
    }
    public Boolean fullScopeAllowed() {
        return this.fullScopeAllowed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean implicitFlowEnabled() {
        return this.implicitFlowEnabled;
    }
    public String name() {
        return this.name;
    }
    public Integer notBefore() {
        return this.notBefore;
    }
    public List<String> optionalClientScopes() {
        return this.optionalClientScopes;
    }
    public String origin() {
        return this.origin;
    }
    public String protocol() {
        return this.protocol;
    }
    public List<GetClientDescriptionConverterProtocolMapper> protocolMappers() {
        return this.protocolMappers;
    }
    public Boolean publicClient() {
        return this.publicClient;
    }
    public String realmId() {
        return this.realmId;
    }
    public List<String> redirectUris() {
        return this.redirectUris;
    }
    public Map<String,String> registeredNodes() {
        return this.registeredNodes;
    }
    public String registrationAccessToken() {
        return this.registrationAccessToken;
    }
    public String rootUrl() {
        return this.rootUrl;
    }
    public String secret() {
        return this.secret;
    }
    public Boolean serviceAccountsEnabled() {
        return this.serviceAccountsEnabled;
    }
    public Boolean standardFlowEnabled() {
        return this.standardFlowEnabled;
    }
    public Boolean surrogateAuthRequired() {
        return this.surrogateAuthRequired;
    }
    public List<String> webOrigins() {
        return this.webOrigins;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientDescriptionConverterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> access;
        private String adminUrl;
        private Boolean alwaysDisplayInConsole;
        private Map<String,String> attributes;
        private Map<String,String> authenticationFlowBindingOverrides;
        private Boolean authorizationServicesEnabled;
        private Map<String,String> authorizationSettings;
        private String baseUrl;
        private Boolean bearerOnly;
        private String body;
        private String clientAuthenticatorType;
        private String clientId;
        private String consentRequired;
        private List<String> defaultClientScopes;
        private List<String> defaultRoles;
        private String description;
        private Boolean directAccessGrantsEnabled;
        private Boolean enabled;
        private Boolean frontchannelLogout;
        private Boolean fullScopeAllowed;
        private String id;
        private Boolean implicitFlowEnabled;
        private String name;
        private Integer notBefore;
        private List<String> optionalClientScopes;
        private String origin;
        private String protocol;
        private List<GetClientDescriptionConverterProtocolMapper> protocolMappers;
        private Boolean publicClient;
        private String realmId;
        private List<String> redirectUris;
        private Map<String,String> registeredNodes;
        private String registrationAccessToken;
        private String rootUrl;
        private String secret;
        private Boolean serviceAccountsEnabled;
        private Boolean standardFlowEnabled;
        private Boolean surrogateAuthRequired;
        private List<String> webOrigins;
        public Builder() {}
        public Builder(GetClientDescriptionConverterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.adminUrl = defaults.adminUrl;
    	      this.alwaysDisplayInConsole = defaults.alwaysDisplayInConsole;
    	      this.attributes = defaults.attributes;
    	      this.authenticationFlowBindingOverrides = defaults.authenticationFlowBindingOverrides;
    	      this.authorizationServicesEnabled = defaults.authorizationServicesEnabled;
    	      this.authorizationSettings = defaults.authorizationSettings;
    	      this.baseUrl = defaults.baseUrl;
    	      this.bearerOnly = defaults.bearerOnly;
    	      this.body = defaults.body;
    	      this.clientAuthenticatorType = defaults.clientAuthenticatorType;
    	      this.clientId = defaults.clientId;
    	      this.consentRequired = defaults.consentRequired;
    	      this.defaultClientScopes = defaults.defaultClientScopes;
    	      this.defaultRoles = defaults.defaultRoles;
    	      this.description = defaults.description;
    	      this.directAccessGrantsEnabled = defaults.directAccessGrantsEnabled;
    	      this.enabled = defaults.enabled;
    	      this.frontchannelLogout = defaults.frontchannelLogout;
    	      this.fullScopeAllowed = defaults.fullScopeAllowed;
    	      this.id = defaults.id;
    	      this.implicitFlowEnabled = defaults.implicitFlowEnabled;
    	      this.name = defaults.name;
    	      this.notBefore = defaults.notBefore;
    	      this.optionalClientScopes = defaults.optionalClientScopes;
    	      this.origin = defaults.origin;
    	      this.protocol = defaults.protocol;
    	      this.protocolMappers = defaults.protocolMappers;
    	      this.publicClient = defaults.publicClient;
    	      this.realmId = defaults.realmId;
    	      this.redirectUris = defaults.redirectUris;
    	      this.registeredNodes = defaults.registeredNodes;
    	      this.registrationAccessToken = defaults.registrationAccessToken;
    	      this.rootUrl = defaults.rootUrl;
    	      this.secret = defaults.secret;
    	      this.serviceAccountsEnabled = defaults.serviceAccountsEnabled;
    	      this.standardFlowEnabled = defaults.standardFlowEnabled;
    	      this.surrogateAuthRequired = defaults.surrogateAuthRequired;
    	      this.webOrigins = defaults.webOrigins;
        }

        @CustomType.Setter
        public Builder access(Map<String,String> access) {
            if (access == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "access");
            }
            this.access = access;
            return this;
        }
        @CustomType.Setter
        public Builder adminUrl(String adminUrl) {
            if (adminUrl == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "adminUrl");
            }
            this.adminUrl = adminUrl;
            return this;
        }
        @CustomType.Setter
        public Builder alwaysDisplayInConsole(Boolean alwaysDisplayInConsole) {
            if (alwaysDisplayInConsole == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "alwaysDisplayInConsole");
            }
            this.alwaysDisplayInConsole = alwaysDisplayInConsole;
            return this;
        }
        @CustomType.Setter
        public Builder attributes(Map<String,String> attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationFlowBindingOverrides(Map<String,String> authenticationFlowBindingOverrides) {
            if (authenticationFlowBindingOverrides == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "authenticationFlowBindingOverrides");
            }
            this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationServicesEnabled(Boolean authorizationServicesEnabled) {
            if (authorizationServicesEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "authorizationServicesEnabled");
            }
            this.authorizationServicesEnabled = authorizationServicesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationSettings(Map<String,String> authorizationSettings) {
            if (authorizationSettings == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "authorizationSettings");
            }
            this.authorizationSettings = authorizationSettings;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(String baseUrl) {
            if (baseUrl == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "baseUrl");
            }
            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder bearerOnly(Boolean bearerOnly) {
            if (bearerOnly == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "bearerOnly");
            }
            this.bearerOnly = bearerOnly;
            return this;
        }
        @CustomType.Setter
        public Builder body(String body) {
            if (body == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "body");
            }
            this.body = body;
            return this;
        }
        @CustomType.Setter
        public Builder clientAuthenticatorType(String clientAuthenticatorType) {
            if (clientAuthenticatorType == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "clientAuthenticatorType");
            }
            this.clientAuthenticatorType = clientAuthenticatorType;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder consentRequired(String consentRequired) {
            if (consentRequired == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "consentRequired");
            }
            this.consentRequired = consentRequired;
            return this;
        }
        @CustomType.Setter
        public Builder defaultClientScopes(List<String> defaultClientScopes) {
            if (defaultClientScopes == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "defaultClientScopes");
            }
            this.defaultClientScopes = defaultClientScopes;
            return this;
        }
        public Builder defaultClientScopes(String... defaultClientScopes) {
            return defaultClientScopes(List.of(defaultClientScopes));
        }
        @CustomType.Setter
        public Builder defaultRoles(List<String> defaultRoles) {
            if (defaultRoles == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "defaultRoles");
            }
            this.defaultRoles = defaultRoles;
            return this;
        }
        public Builder defaultRoles(String... defaultRoles) {
            return defaultRoles(List.of(defaultRoles));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder directAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
            if (directAccessGrantsEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "directAccessGrantsEnabled");
            }
            this.directAccessGrantsEnabled = directAccessGrantsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder frontchannelLogout(Boolean frontchannelLogout) {
            if (frontchannelLogout == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "frontchannelLogout");
            }
            this.frontchannelLogout = frontchannelLogout;
            return this;
        }
        @CustomType.Setter
        public Builder fullScopeAllowed(Boolean fullScopeAllowed) {
            if (fullScopeAllowed == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "fullScopeAllowed");
            }
            this.fullScopeAllowed = fullScopeAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder implicitFlowEnabled(Boolean implicitFlowEnabled) {
            if (implicitFlowEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "implicitFlowEnabled");
            }
            this.implicitFlowEnabled = implicitFlowEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(Integer notBefore) {
            if (notBefore == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "notBefore");
            }
            this.notBefore = notBefore;
            return this;
        }
        @CustomType.Setter
        public Builder optionalClientScopes(List<String> optionalClientScopes) {
            if (optionalClientScopes == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "optionalClientScopes");
            }
            this.optionalClientScopes = optionalClientScopes;
            return this;
        }
        public Builder optionalClientScopes(String... optionalClientScopes) {
            return optionalClientScopes(List.of(optionalClientScopes));
        }
        @CustomType.Setter
        public Builder origin(String origin) {
            if (origin == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "origin");
            }
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder protocolMappers(List<GetClientDescriptionConverterProtocolMapper> protocolMappers) {
            if (protocolMappers == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "protocolMappers");
            }
            this.protocolMappers = protocolMappers;
            return this;
        }
        public Builder protocolMappers(GetClientDescriptionConverterProtocolMapper... protocolMappers) {
            return protocolMappers(List.of(protocolMappers));
        }
        @CustomType.Setter
        public Builder publicClient(Boolean publicClient) {
            if (publicClient == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "publicClient");
            }
            this.publicClient = publicClient;
            return this;
        }
        @CustomType.Setter
        public Builder realmId(String realmId) {
            if (realmId == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "realmId");
            }
            this.realmId = realmId;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUris(List<String> redirectUris) {
            if (redirectUris == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "redirectUris");
            }
            this.redirectUris = redirectUris;
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        @CustomType.Setter
        public Builder registeredNodes(Map<String,String> registeredNodes) {
            if (registeredNodes == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "registeredNodes");
            }
            this.registeredNodes = registeredNodes;
            return this;
        }
        @CustomType.Setter
        public Builder registrationAccessToken(String registrationAccessToken) {
            if (registrationAccessToken == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "registrationAccessToken");
            }
            this.registrationAccessToken = registrationAccessToken;
            return this;
        }
        @CustomType.Setter
        public Builder rootUrl(String rootUrl) {
            if (rootUrl == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "rootUrl");
            }
            this.rootUrl = rootUrl;
            return this;
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            if (secret == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "secret");
            }
            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountsEnabled(Boolean serviceAccountsEnabled) {
            if (serviceAccountsEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "serviceAccountsEnabled");
            }
            this.serviceAccountsEnabled = serviceAccountsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder standardFlowEnabled(Boolean standardFlowEnabled) {
            if (standardFlowEnabled == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "standardFlowEnabled");
            }
            this.standardFlowEnabled = standardFlowEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder surrogateAuthRequired(Boolean surrogateAuthRequired) {
            if (surrogateAuthRequired == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "surrogateAuthRequired");
            }
            this.surrogateAuthRequired = surrogateAuthRequired;
            return this;
        }
        @CustomType.Setter
        public Builder webOrigins(List<String> webOrigins) {
            if (webOrigins == null) {
              throw new MissingRequiredPropertyException("GetClientDescriptionConverterResult", "webOrigins");
            }
            this.webOrigins = webOrigins;
            return this;
        }
        public Builder webOrigins(String... webOrigins) {
            return webOrigins(List.of(webOrigins));
        }
        public GetClientDescriptionConverterResult build() {
            final var _resultValue = new GetClientDescriptionConverterResult();
            _resultValue.access = access;
            _resultValue.adminUrl = adminUrl;
            _resultValue.alwaysDisplayInConsole = alwaysDisplayInConsole;
            _resultValue.attributes = attributes;
            _resultValue.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            _resultValue.authorizationServicesEnabled = authorizationServicesEnabled;
            _resultValue.authorizationSettings = authorizationSettings;
            _resultValue.baseUrl = baseUrl;
            _resultValue.bearerOnly = bearerOnly;
            _resultValue.body = body;
            _resultValue.clientAuthenticatorType = clientAuthenticatorType;
            _resultValue.clientId = clientId;
            _resultValue.consentRequired = consentRequired;
            _resultValue.defaultClientScopes = defaultClientScopes;
            _resultValue.defaultRoles = defaultRoles;
            _resultValue.description = description;
            _resultValue.directAccessGrantsEnabled = directAccessGrantsEnabled;
            _resultValue.enabled = enabled;
            _resultValue.frontchannelLogout = frontchannelLogout;
            _resultValue.fullScopeAllowed = fullScopeAllowed;
            _resultValue.id = id;
            _resultValue.implicitFlowEnabled = implicitFlowEnabled;
            _resultValue.name = name;
            _resultValue.notBefore = notBefore;
            _resultValue.optionalClientScopes = optionalClientScopes;
            _resultValue.origin = origin;
            _resultValue.protocol = protocol;
            _resultValue.protocolMappers = protocolMappers;
            _resultValue.publicClient = publicClient;
            _resultValue.realmId = realmId;
            _resultValue.redirectUris = redirectUris;
            _resultValue.registeredNodes = registeredNodes;
            _resultValue.registrationAccessToken = registrationAccessToken;
            _resultValue.rootUrl = rootUrl;
            _resultValue.secret = secret;
            _resultValue.serviceAccountsEnabled = serviceAccountsEnabled;
            _resultValue.standardFlowEnabled = standardFlowEnabled;
            _resultValue.surrogateAuthRequired = surrogateAuthRequired;
            _resultValue.webOrigins = webOrigins;
            return _resultValue;
        }
    }
}
