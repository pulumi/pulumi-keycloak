// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.saml;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.saml.IdentityProviderArgs;
import com.pulumi.keycloak.saml.inputs.IdentityProviderState;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # keycloak.saml.IdentityProvider
 * 
 * Allows to create and manage SAML Identity Providers within Keycloak.
 * 
 * SAML (Security Assertion Markup Language) identity providers allows to authenticate through a third-party system, using SAML standard.
 * 
 * ### Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.saml.IdentityProvider;
 * import com.pulumi.keycloak.saml.IdentityProviderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realmIdentityProvider = new IdentityProvider(&#34;realmIdentityProvider&#34;, IdentityProviderArgs.builder()        
 *             .alias(&#34;my-idp&#34;)
 *             .backchannelSupported(true)
 *             .forceAuthn(true)
 *             .postBindingAuthnRequest(true)
 *             .postBindingLogout(true)
 *             .postBindingResponse(true)
 *             .realm(&#34;my-realm&#34;)
 *             .singleLogoutServiceUrl(&#34;https://domain.com/adfs/ls/?wa=wsignout1.0&#34;)
 *             .singleSignOnServiceUrl(&#34;https://domain.com/adfs/ls/&#34;)
 *             .storeToken(false)
 *             .trustEmail(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Argument Reference
 * 
 * The following arguments are supported:
 * 
 * - `realm` - (Required) The name of the realm. This is unique across Keycloak.
 * - `alias` - (Optional) The uniq name of identity provider.
 * - `enabled` - (Optional) When false, users and clients will not be able to access this realm. Defaults to `true`.
 * - `display_name` - (Optional) The display name for the realm that is shown when logging in to the admin console.
 * - `store_token` - (Optional) Enable/disable if tokens must be stored after authenticating users. Defaults to `true`.
 * - `add_read_token_role_on_create` - (Optional) Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role. Defaults to `false`.
 * - `trust_email` - (Optional) If enabled then email provided by this provider is not verified even if verification is enabled for the realm. Defaults to `false`.
 * - `link_only` - (Optional) If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don&#39;t want to allow login from the provider, but want to integrate with a provider. Defaults to `false`.
 * - `hide_on_login_page` - (Optional) If hidden, then login with this provider is possible only if requested explicitly, e.g. using the &#39;kc_idp_hint&#39; parameter.
 * - `first_broker_login_flow_alias` - (Optional) Alias of authentication flow, which is triggered after first login with this identity provider. Term &#39;First Login&#39; means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
 * - `post_broker_login_flow_alias` - (Optional) Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don&#39;t want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
 * - `authenticate_by_default` - (Optional) Authenticate users by default. Defaults to `false`.
 * 
 * #### SAML Configuration
 * 
 * - `single_sign_on_service_url` - (Optional) The Url that must be used to send authentication requests (SAML AuthnRequest).
 * - `single_logout_service_url` - (Optional) The Url that must be used to send logout requests.
 * - `backchannel_supported` - (Optional) Does the external IDP support back-channel logout ?.
 * - `name_id_policy_format` - (Optional) Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
 * - `post_binding_response` - (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used..
 * - `post_binding_authn_request` - (Optional) Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
 * - `post_binding_logout` - (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
 * - `want_assertions_signed` - (Optional) Indicates whether this service provider expects a signed Assertion.
 * - `want_assertions_encrypted` - (Optional) Indicates whether this service provider expects an encrypted Assertion.
 * - `force_authn` - (Optional) Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
 * - `validate_signature` - (Optional) Enable/disable signature validation of SAML responses.
 * - `signing_certificate` - (Optional) Signing Certificate.
 * - `signature_algorithm` - (Optional) Signing Algorithm. Defaults to empty.
 * - `xml_sign_key_info_key_name_transformer` - (Optional) Sign Key Transformer. Defaults to empty.
 * 
 * ### Import
 * 
 * Identity providers can be imported using the format `{{realm_id}}/{{idp_alias}}`, where `idp_alias` is the identity provider alias.
 * 
 * Example:
 * 
 */
@ResourceType(type="keycloak:saml/identityProvider:IdentityProvider")
public class IdentityProvider extends com.pulumi.resources.CustomResource {
    /**
     * Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
     * 
     */
    @Export(name="addReadTokenRoleOnCreate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> addReadTokenRoleOnCreate;

    /**
     * @return Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
     * 
     */
    public Output<Optional<Boolean>> addReadTokenRoleOnCreate() {
        return Codegen.optional(this.addReadTokenRoleOnCreate);
    }
    /**
     * The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
     * 
     */
    @Export(name="alias", refs={String.class}, tree="[0]")
    private Output<String> alias;

    /**
     * @return The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
     * 
     */
    public Output<String> alias() {
        return this.alias;
    }
    /**
     * Enable/disable authenticate users by default.
     * 
     */
    @Export(name="authenticateByDefault", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> authenticateByDefault;

    /**
     * @return Enable/disable authenticate users by default.
     * 
     */
    public Output<Optional<Boolean>> authenticateByDefault() {
        return Codegen.optional(this.authenticateByDefault);
    }
    /**
     * AuthnContext ClassRefs
     * 
     */
    @Export(name="authnContextClassRefs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> authnContextClassRefs;

    /**
     * @return AuthnContext ClassRefs
     * 
     */
    public Output<Optional<List<String>>> authnContextClassRefs() {
        return Codegen.optional(this.authnContextClassRefs);
    }
    /**
     * AuthnContext Comparison
     * 
     */
    @Export(name="authnContextComparisonType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> authnContextComparisonType;

    /**
     * @return AuthnContext Comparison
     * 
     */
    public Output<Optional<String>> authnContextComparisonType() {
        return Codegen.optional(this.authnContextComparisonType);
    }
    /**
     * AuthnContext DeclRefs
     * 
     */
    @Export(name="authnContextDeclRefs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> authnContextDeclRefs;

    /**
     * @return AuthnContext DeclRefs
     * 
     */
    public Output<Optional<List<String>>> authnContextDeclRefs() {
        return Codegen.optional(this.authnContextDeclRefs);
    }
    /**
     * Does the external IDP support backchannel logout?
     * 
     */
    @Export(name="backchannelSupported", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> backchannelSupported;

    /**
     * @return Does the external IDP support backchannel logout?
     * 
     */
    public Output<Optional<Boolean>> backchannelSupported() {
        return Codegen.optional(this.backchannelSupported);
    }
    /**
     * Friendly name for Identity Providers.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Friendly name for Identity Providers.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Enable/disable this identity provider.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    /**
     * @return Enable/disable this identity provider.
     * 
     */
    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     * 
     */
    @Export(name="entityId", refs={String.class}, tree="[0]")
    private Output<String> entityId;

    /**
     * @return The Entity ID that will be used to uniquely identify this SAML Service Provider.
     * 
     */
    public Output<String> entityId() {
        return this.entityId;
    }
    @Export(name="extraConfig", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> extraConfig;

    public Output<Optional<Map<String,Object>>> extraConfig() {
        return Codegen.optional(this.extraConfig);
    }
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term &#39;First Login&#39; means
     * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
     * 
     */
    @Export(name="firstBrokerLoginFlowAlias", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> firstBrokerLoginFlowAlias;

    /**
     * @return Alias of authentication flow, which is triggered after first login with this identity provider. Term &#39;First Login&#39; means
     * that there is not yet existing Keycloak account linked with the authenticated identity provider account.
     * 
     */
    public Output<Optional<String>> firstBrokerLoginFlowAlias() {
        return Codegen.optional(this.firstBrokerLoginFlowAlias);
    }
    /**
     * Require Force Authn.
     * 
     */
    @Export(name="forceAuthn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceAuthn;

    /**
     * @return Require Force Authn.
     * 
     */
    public Output<Optional<Boolean>> forceAuthn() {
        return Codegen.optional(this.forceAuthn);
    }
    /**
     * GUI Order
     * 
     */
    @Export(name="guiOrder", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> guiOrder;

    /**
     * @return GUI Order
     * 
     */
    public Output<Optional<String>> guiOrder() {
        return Codegen.optional(this.guiOrder);
    }
    /**
     * Hide On Login Page.
     * 
     */
    @Export(name="hideOnLoginPage", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> hideOnLoginPage;

    /**
     * @return Hide On Login Page.
     * 
     */
    public Output<Optional<Boolean>> hideOnLoginPage() {
        return Codegen.optional(this.hideOnLoginPage);
    }
    /**
     * Internal Identity Provider Id
     * 
     */
    @Export(name="internalId", refs={String.class}, tree="[0]")
    private Output<String> internalId;

    /**
     * @return Internal Identity Provider Id
     * 
     */
    public Output<String> internalId() {
        return this.internalId;
    }
    /**
     * If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don&#39;t
     * want to allow login from the provider, but want to integrate with a provider
     * 
     */
    @Export(name="linkOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> linkOnly;

    /**
     * @return If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don&#39;t
     * want to allow login from the provider, but want to integrate with a provider
     * 
     */
    public Output<Optional<Boolean>> linkOnly() {
        return Codegen.optional(this.linkOnly);
    }
    /**
     * Login Hint.
     * 
     */
    @Export(name="loginHint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loginHint;

    /**
     * @return Login Hint.
     * 
     */
    public Output<Optional<String>> loginHint() {
        return Codegen.optional(this.loginHint);
    }
    /**
     * Name ID Policy Format.
     * 
     */
    @Export(name="nameIdPolicyFormat", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nameIdPolicyFormat;

    /**
     * @return Name ID Policy Format.
     * 
     */
    public Output<Optional<String>> nameIdPolicyFormat() {
        return Codegen.optional(this.nameIdPolicyFormat);
    }
    /**
     * Post Binding Authn Request.
     * 
     */
    @Export(name="postBindingAuthnRequest", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> postBindingAuthnRequest;

    /**
     * @return Post Binding Authn Request.
     * 
     */
    public Output<Optional<Boolean>> postBindingAuthnRequest() {
        return Codegen.optional(this.postBindingAuthnRequest);
    }
    /**
     * Post Binding Logout.
     * 
     */
    @Export(name="postBindingLogout", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> postBindingLogout;

    /**
     * @return Post Binding Logout.
     * 
     */
    public Output<Optional<Boolean>> postBindingLogout() {
        return Codegen.optional(this.postBindingLogout);
    }
    /**
     * Post Binding Response.
     * 
     */
    @Export(name="postBindingResponse", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> postBindingResponse;

    /**
     * @return Post Binding Response.
     * 
     */
    public Output<Optional<Boolean>> postBindingResponse() {
        return Codegen.optional(this.postBindingResponse);
    }
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
     * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
     * you don&#39;t want any additional authenticators to be triggered after login with this identity provider. Also note, that
     * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
     * 
     */
    @Export(name="postBrokerLoginFlowAlias", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> postBrokerLoginFlowAlias;

    /**
     * @return Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
     * additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
     * you don&#39;t want any additional authenticators to be triggered after login with this identity provider. Also note, that
     * authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
     * 
     */
    public Output<Optional<String>> postBrokerLoginFlowAlias() {
        return Codegen.optional(this.postBrokerLoginFlowAlias);
    }
    /**
     * Principal Attribute
     * 
     */
    @Export(name="principalAttribute", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> principalAttribute;

    /**
     * @return Principal Attribute
     * 
     */
    public Output<Optional<String>> principalAttribute() {
        return Codegen.optional(this.principalAttribute);
    }
    /**
     * Principal Type
     * 
     */
    @Export(name="principalType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> principalType;

    /**
     * @return Principal Type
     * 
     */
    public Output<Optional<String>> principalType() {
        return Codegen.optional(this.principalType);
    }
    /**
     * provider id, is always saml, unless you have a custom implementation
     * 
     */
    @Export(name="providerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> providerId;

    /**
     * @return provider id, is always saml, unless you have a custom implementation
     * 
     */
    public Output<Optional<String>> providerId() {
        return Codegen.optional(this.providerId);
    }
    /**
     * Realm Name
     * 
     */
    @Export(name="realm", refs={String.class}, tree="[0]")
    private Output<String> realm;

    /**
     * @return Realm Name
     * 
     */
    public Output<String> realm() {
        return this.realm;
    }
    /**
     * Signing Algorithm.
     * 
     */
    @Export(name="signatureAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> signatureAlgorithm;

    /**
     * @return Signing Algorithm.
     * 
     */
    public Output<Optional<String>> signatureAlgorithm() {
        return Codegen.optional(this.signatureAlgorithm);
    }
    /**
     * Signing Certificate.
     * 
     */
    @Export(name="signingCertificate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> signingCertificate;

    /**
     * @return Signing Certificate.
     * 
     */
    public Output<Optional<String>> signingCertificate() {
        return Codegen.optional(this.signingCertificate);
    }
    /**
     * Logout URL.
     * 
     */
    @Export(name="singleLogoutServiceUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> singleLogoutServiceUrl;

    /**
     * @return Logout URL.
     * 
     */
    public Output<Optional<String>> singleLogoutServiceUrl() {
        return Codegen.optional(this.singleLogoutServiceUrl);
    }
    /**
     * SSO Logout URL.
     * 
     */
    @Export(name="singleSignOnServiceUrl", refs={String.class}, tree="[0]")
    private Output<String> singleSignOnServiceUrl;

    /**
     * @return SSO Logout URL.
     * 
     */
    public Output<String> singleSignOnServiceUrl() {
        return this.singleSignOnServiceUrl;
    }
    /**
     * Enable/disable if tokens must be stored after authenticating users.
     * 
     */
    @Export(name="storeToken", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> storeToken;

    /**
     * @return Enable/disable if tokens must be stored after authenticating users.
     * 
     */
    public Output<Optional<Boolean>> storeToken() {
        return Codegen.optional(this.storeToken);
    }
    /**
     * Sync Mode
     * 
     */
    @Export(name="syncMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> syncMode;

    /**
     * @return Sync Mode
     * 
     */
    public Output<Optional<String>> syncMode() {
        return Codegen.optional(this.syncMode);
    }
    /**
     * If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
     * 
     */
    @Export(name="trustEmail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trustEmail;

    /**
     * @return If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
     * 
     */
    public Output<Optional<Boolean>> trustEmail() {
        return Codegen.optional(this.trustEmail);
    }
    /**
     * Enable/disable signature validation of SAML responses.
     * 
     */
    @Export(name="validateSignature", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> validateSignature;

    /**
     * @return Enable/disable signature validation of SAML responses.
     * 
     */
    public Output<Optional<Boolean>> validateSignature() {
        return Codegen.optional(this.validateSignature);
    }
    /**
     * Want Assertions Encrypted.
     * 
     */
    @Export(name="wantAssertionsEncrypted", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> wantAssertionsEncrypted;

    /**
     * @return Want Assertions Encrypted.
     * 
     */
    public Output<Optional<Boolean>> wantAssertionsEncrypted() {
        return Codegen.optional(this.wantAssertionsEncrypted);
    }
    /**
     * Want Assertions Signed.
     * 
     */
    @Export(name="wantAssertionsSigned", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> wantAssertionsSigned;

    /**
     * @return Want Assertions Signed.
     * 
     */
    public Output<Optional<Boolean>> wantAssertionsSigned() {
        return Codegen.optional(this.wantAssertionsSigned);
    }
    /**
     * Sign Key Transformer.
     * 
     */
    @Export(name="xmlSignKeyInfoKeyNameTransformer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> xmlSignKeyInfoKeyNameTransformer;

    /**
     * @return Sign Key Transformer.
     * 
     */
    public Output<Optional<String>> xmlSignKeyInfoKeyNameTransformer() {
        return Codegen.optional(this.xmlSignKeyInfoKeyNameTransformer);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public IdentityProvider(String name) {
        this(name, IdentityProviderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public IdentityProvider(String name, IdentityProviderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public IdentityProvider(String name, IdentityProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:saml/identityProvider:IdentityProvider", name, args == null ? IdentityProviderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private IdentityProvider(String name, Output<String> id, @Nullable IdentityProviderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:saml/identityProvider:IdentityProvider", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static IdentityProvider get(String name, Output<String> id, @Nullable IdentityProviderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new IdentityProvider(name, id, state, options);
    }
}
