// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetClientAuthorization {
    private Boolean allowRemoteResourceManagement;
    private String decisionStrategy;
    private Boolean keepDefaults;
    private String policyEnforcementMode;

    private GetClientAuthorization() {}
    public Boolean allowRemoteResourceManagement() {
        return this.allowRemoteResourceManagement;
    }
    public String decisionStrategy() {
        return this.decisionStrategy;
    }
    public Boolean keepDefaults() {
        return this.keepDefaults;
    }
    public String policyEnforcementMode() {
        return this.policyEnforcementMode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientAuthorization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowRemoteResourceManagement;
        private String decisionStrategy;
        private Boolean keepDefaults;
        private String policyEnforcementMode;
        public Builder() {}
        public Builder(GetClientAuthorization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowRemoteResourceManagement = defaults.allowRemoteResourceManagement;
    	      this.decisionStrategy = defaults.decisionStrategy;
    	      this.keepDefaults = defaults.keepDefaults;
    	      this.policyEnforcementMode = defaults.policyEnforcementMode;
        }

        @CustomType.Setter
        public Builder allowRemoteResourceManagement(Boolean allowRemoteResourceManagement) {
            this.allowRemoteResourceManagement = Objects.requireNonNull(allowRemoteResourceManagement);
            return this;
        }
        @CustomType.Setter
        public Builder decisionStrategy(String decisionStrategy) {
            this.decisionStrategy = Objects.requireNonNull(decisionStrategy);
            return this;
        }
        @CustomType.Setter
        public Builder keepDefaults(Boolean keepDefaults) {
            this.keepDefaults = Objects.requireNonNull(keepDefaults);
            return this;
        }
        @CustomType.Setter
        public Builder policyEnforcementMode(String policyEnforcementMode) {
            this.policyEnforcementMode = Objects.requireNonNull(policyEnforcementMode);
            return this;
        }
        public GetClientAuthorization build() {
            final var _resultValue = new GetClientAuthorization();
            _resultValue.allowRemoteResourceManagement = allowRemoteResourceManagement;
            _resultValue.decisionStrategy = decisionStrategy;
            _resultValue.keepDefaults = keepDefaults;
            _resultValue.policyEnforcementMode = policyEnforcementMode;
            return _resultValue;
        }
    }
}
