// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.keycloak.inputs.OrganizationDomainArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationArgs Empty = new OrganizationArgs();

    /**
     * The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    /**
     * @return A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
     * 
     */
    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The description of the organization.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the organization.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of domains. At least one domain is required.
     * 
     */
    @Import(name="domains", required=true)
    private Output<List<OrganizationDomainArgs>> domains;

    /**
     * @return A list of domains. At least one domain is required.
     * 
     */
    public Output<List<OrganizationDomainArgs>> domains() {
        return this.domains;
    }

    /**
     * Enable/disable this organization.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable/disable this organization.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the organization.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the organization.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The realm this organization exists in.
     * 
     */
    @Import(name="realm", required=true)
    private Output<String> realm;

    /**
     * @return The realm this organization exists in.
     * 
     */
    public Output<String> realm() {
        return this.realm;
    }

    /**
     * The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
     * 
     */
    @Import(name="redirectUrl")
    private @Nullable Output<String> redirectUrl;

    /**
     * @return The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
     * 
     */
    public Optional<Output<String>> redirectUrl() {
        return Optional.ofNullable(this.redirectUrl);
    }

    private OrganizationArgs() {}

    private OrganizationArgs(OrganizationArgs $) {
        this.alias = $.alias;
        this.attributes = $.attributes;
        this.description = $.description;
        this.domains = $.domains;
        this.enabled = $.enabled;
        this.name = $.name;
        this.realm = $.realm;
        this.redirectUrl = $.redirectUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationArgs $;

        public Builder() {
            $ = new OrganizationArgs();
        }

        public Builder(OrganizationArgs defaults) {
            $ = new OrganizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param attributes A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param description The description of the organization.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the organization.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domains A list of domains. At least one domain is required.
         * 
         * @return builder
         * 
         */
        public Builder domains(Output<List<OrganizationDomainArgs>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains A list of domains. At least one domain is required.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<OrganizationDomainArgs> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains A list of domains. At least one domain is required.
         * 
         * @return builder
         * 
         */
        public Builder domains(OrganizationDomainArgs... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param enabled Enable/disable this organization.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable/disable this organization.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the organization.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the organization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param realm The realm this organization exists in.
         * 
         * @return builder
         * 
         */
        public Builder realm(Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm The realm this organization exists in.
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        /**
         * @param redirectUrl The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(@Nullable Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * @param redirectUrl The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        public OrganizationArgs build() {
            if ($.domains == null) {
                throw new MissingRequiredPropertyException("OrganizationArgs", "domains");
            }
            if ($.realm == null) {
                throw new MissingRequiredPropertyException("OrganizationArgs", "realm");
            }
            return $;
        }
    }

}
