// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetClientServiceAccountUserArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetClientServiceAccountUserArgs Empty = new GetClientServiceAccountUserArgs();

    /**
     * The ID of the OpenID client with service accounts enabled.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return The ID of the OpenID client with service accounts enabled.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * The realm that the OpenID client exists within.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm that the OpenID client exists within.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    private GetClientServiceAccountUserArgs() {}

    private GetClientServiceAccountUserArgs(GetClientServiceAccountUserArgs $) {
        this.clientId = $.clientId;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetClientServiceAccountUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClientServiceAccountUserArgs $;

        public Builder() {
            $ = new GetClientServiceAccountUserArgs();
        }

        public Builder(GetClientServiceAccountUserArgs defaults) {
            $ = new GetClientServiceAccountUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The ID of the OpenID client with service accounts enabled.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the OpenID client with service accounts enabled.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param realmId The realm that the OpenID client exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm that the OpenID client exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public GetClientServiceAccountUserArgs build() {
            if ($.clientId == null) {
                throw new MissingRequiredPropertyException("GetClientServiceAccountUserArgs", "clientId");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("GetClientServiceAccountUserArgs", "realmId");
            }
            return $;
        }
    }

}
