// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.keycloak.outputs.GetRealmInternationalization;
import com.pulumi.keycloak.outputs.GetRealmOtpPolicy;
import com.pulumi.keycloak.outputs.GetRealmSecurityDefense;
import com.pulumi.keycloak.outputs.GetRealmSmtpServer;
import com.pulumi.keycloak.outputs.GetRealmWebAuthnPasswordlessPolicy;
import com.pulumi.keycloak.outputs.GetRealmWebAuthnPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRealmResult {
    private String accessCodeLifespan;
    private String accessCodeLifespanLogin;
    private String accessCodeLifespanUserAction;
    private String accessTokenLifespan;
    private String accessTokenLifespanForImplicitFlow;
    private String accountTheme;
    private String actionTokenGeneratedByAdminLifespan;
    private String actionTokenGeneratedByUserLifespan;
    private String adminTheme;
    private Map<String,String> attributes;
    private String browserFlow;
    private String clientAuthenticationFlow;
    private String clientSessionIdleTimeout;
    private String clientSessionMaxLifespan;
    private List<String> defaultDefaultClientScopes;
    private List<String> defaultOptionalClientScopes;
    private String defaultSignatureAlgorithm;
    private String directGrantFlow;
    private String displayName;
    private @Nullable String displayNameHtml;
    private String dockerAuthenticationFlow;
    private Boolean duplicateEmailsAllowed;
    private Boolean editUsernameAllowed;
    private String emailTheme;
    private Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String internalId;
    private List<GetRealmInternationalization> internationalizations;
    private String loginTheme;
    private Boolean loginWithEmailAllowed;
    private String oauth2DeviceCodeLifespan;
    private Integer oauth2DevicePollingInterval;
    private String offlineSessionIdleTimeout;
    private String offlineSessionMaxLifespan;
    private Boolean offlineSessionMaxLifespanEnabled;
    private GetRealmOtpPolicy otpPolicy;
    private String passwordPolicy;
    private String realm;
    private Integer refreshTokenMaxReuse;
    private Boolean registrationAllowed;
    private Boolean registrationEmailAsUsername;
    private String registrationFlow;
    private Boolean rememberMe;
    private String resetCredentialsFlow;
    private Boolean resetPasswordAllowed;
    private Boolean revokeRefreshToken;
    private List<GetRealmSecurityDefense> securityDefenses;
    private List<GetRealmSmtpServer> smtpServers;
    private String sslRequired;
    private String ssoSessionIdleTimeout;
    private String ssoSessionIdleTimeoutRememberMe;
    private String ssoSessionMaxLifespan;
    private String ssoSessionMaxLifespanRememberMe;
    private Boolean userManagedAccess;
    private Boolean verifyEmail;
    private GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy;
    private GetRealmWebAuthnPolicy webAuthnPolicy;

    private GetRealmResult() {}
    public String accessCodeLifespan() {
        return this.accessCodeLifespan;
    }
    public String accessCodeLifespanLogin() {
        return this.accessCodeLifespanLogin;
    }
    public String accessCodeLifespanUserAction() {
        return this.accessCodeLifespanUserAction;
    }
    public String accessTokenLifespan() {
        return this.accessTokenLifespan;
    }
    public String accessTokenLifespanForImplicitFlow() {
        return this.accessTokenLifespanForImplicitFlow;
    }
    public String accountTheme() {
        return this.accountTheme;
    }
    public String actionTokenGeneratedByAdminLifespan() {
        return this.actionTokenGeneratedByAdminLifespan;
    }
    public String actionTokenGeneratedByUserLifespan() {
        return this.actionTokenGeneratedByUserLifespan;
    }
    public String adminTheme() {
        return this.adminTheme;
    }
    public Map<String,String> attributes() {
        return this.attributes;
    }
    public String browserFlow() {
        return this.browserFlow;
    }
    public String clientAuthenticationFlow() {
        return this.clientAuthenticationFlow;
    }
    public String clientSessionIdleTimeout() {
        return this.clientSessionIdleTimeout;
    }
    public String clientSessionMaxLifespan() {
        return this.clientSessionMaxLifespan;
    }
    public List<String> defaultDefaultClientScopes() {
        return this.defaultDefaultClientScopes;
    }
    public List<String> defaultOptionalClientScopes() {
        return this.defaultOptionalClientScopes;
    }
    public String defaultSignatureAlgorithm() {
        return this.defaultSignatureAlgorithm;
    }
    public String directGrantFlow() {
        return this.directGrantFlow;
    }
    public String displayName() {
        return this.displayName;
    }
    public Optional<String> displayNameHtml() {
        return Optional.ofNullable(this.displayNameHtml);
    }
    public String dockerAuthenticationFlow() {
        return this.dockerAuthenticationFlow;
    }
    public Boolean duplicateEmailsAllowed() {
        return this.duplicateEmailsAllowed;
    }
    public Boolean editUsernameAllowed() {
        return this.editUsernameAllowed;
    }
    public String emailTheme() {
        return this.emailTheme;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String internalId() {
        return this.internalId;
    }
    public List<GetRealmInternationalization> internationalizations() {
        return this.internationalizations;
    }
    public String loginTheme() {
        return this.loginTheme;
    }
    public Boolean loginWithEmailAllowed() {
        return this.loginWithEmailAllowed;
    }
    public String oauth2DeviceCodeLifespan() {
        return this.oauth2DeviceCodeLifespan;
    }
    public Integer oauth2DevicePollingInterval() {
        return this.oauth2DevicePollingInterval;
    }
    public String offlineSessionIdleTimeout() {
        return this.offlineSessionIdleTimeout;
    }
    public String offlineSessionMaxLifespan() {
        return this.offlineSessionMaxLifespan;
    }
    public Boolean offlineSessionMaxLifespanEnabled() {
        return this.offlineSessionMaxLifespanEnabled;
    }
    public GetRealmOtpPolicy otpPolicy() {
        return this.otpPolicy;
    }
    public String passwordPolicy() {
        return this.passwordPolicy;
    }
    public String realm() {
        return this.realm;
    }
    public Integer refreshTokenMaxReuse() {
        return this.refreshTokenMaxReuse;
    }
    public Boolean registrationAllowed() {
        return this.registrationAllowed;
    }
    public Boolean registrationEmailAsUsername() {
        return this.registrationEmailAsUsername;
    }
    public String registrationFlow() {
        return this.registrationFlow;
    }
    public Boolean rememberMe() {
        return this.rememberMe;
    }
    public String resetCredentialsFlow() {
        return this.resetCredentialsFlow;
    }
    public Boolean resetPasswordAllowed() {
        return this.resetPasswordAllowed;
    }
    public Boolean revokeRefreshToken() {
        return this.revokeRefreshToken;
    }
    public List<GetRealmSecurityDefense> securityDefenses() {
        return this.securityDefenses;
    }
    public List<GetRealmSmtpServer> smtpServers() {
        return this.smtpServers;
    }
    public String sslRequired() {
        return this.sslRequired;
    }
    public String ssoSessionIdleTimeout() {
        return this.ssoSessionIdleTimeout;
    }
    public String ssoSessionIdleTimeoutRememberMe() {
        return this.ssoSessionIdleTimeoutRememberMe;
    }
    public String ssoSessionMaxLifespan() {
        return this.ssoSessionMaxLifespan;
    }
    public String ssoSessionMaxLifespanRememberMe() {
        return this.ssoSessionMaxLifespanRememberMe;
    }
    public Boolean userManagedAccess() {
        return this.userManagedAccess;
    }
    public Boolean verifyEmail() {
        return this.verifyEmail;
    }
    public GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy() {
        return this.webAuthnPasswordlessPolicy;
    }
    public GetRealmWebAuthnPolicy webAuthnPolicy() {
        return this.webAuthnPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRealmResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessCodeLifespan;
        private String accessCodeLifespanLogin;
        private String accessCodeLifespanUserAction;
        private String accessTokenLifespan;
        private String accessTokenLifespanForImplicitFlow;
        private String accountTheme;
        private String actionTokenGeneratedByAdminLifespan;
        private String actionTokenGeneratedByUserLifespan;
        private String adminTheme;
        private Map<String,String> attributes;
        private String browserFlow;
        private String clientAuthenticationFlow;
        private String clientSessionIdleTimeout;
        private String clientSessionMaxLifespan;
        private List<String> defaultDefaultClientScopes;
        private List<String> defaultOptionalClientScopes;
        private String defaultSignatureAlgorithm;
        private String directGrantFlow;
        private String displayName;
        private @Nullable String displayNameHtml;
        private String dockerAuthenticationFlow;
        private Boolean duplicateEmailsAllowed;
        private Boolean editUsernameAllowed;
        private String emailTheme;
        private Boolean enabled;
        private String id;
        private String internalId;
        private List<GetRealmInternationalization> internationalizations;
        private String loginTheme;
        private Boolean loginWithEmailAllowed;
        private String oauth2DeviceCodeLifespan;
        private Integer oauth2DevicePollingInterval;
        private String offlineSessionIdleTimeout;
        private String offlineSessionMaxLifespan;
        private Boolean offlineSessionMaxLifespanEnabled;
        private GetRealmOtpPolicy otpPolicy;
        private String passwordPolicy;
        private String realm;
        private Integer refreshTokenMaxReuse;
        private Boolean registrationAllowed;
        private Boolean registrationEmailAsUsername;
        private String registrationFlow;
        private Boolean rememberMe;
        private String resetCredentialsFlow;
        private Boolean resetPasswordAllowed;
        private Boolean revokeRefreshToken;
        private List<GetRealmSecurityDefense> securityDefenses;
        private List<GetRealmSmtpServer> smtpServers;
        private String sslRequired;
        private String ssoSessionIdleTimeout;
        private String ssoSessionIdleTimeoutRememberMe;
        private String ssoSessionMaxLifespan;
        private String ssoSessionMaxLifespanRememberMe;
        private Boolean userManagedAccess;
        private Boolean verifyEmail;
        private GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy;
        private GetRealmWebAuthnPolicy webAuthnPolicy;
        public Builder() {}
        public Builder(GetRealmResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessCodeLifespan = defaults.accessCodeLifespan;
    	      this.accessCodeLifespanLogin = defaults.accessCodeLifespanLogin;
    	      this.accessCodeLifespanUserAction = defaults.accessCodeLifespanUserAction;
    	      this.accessTokenLifespan = defaults.accessTokenLifespan;
    	      this.accessTokenLifespanForImplicitFlow = defaults.accessTokenLifespanForImplicitFlow;
    	      this.accountTheme = defaults.accountTheme;
    	      this.actionTokenGeneratedByAdminLifespan = defaults.actionTokenGeneratedByAdminLifespan;
    	      this.actionTokenGeneratedByUserLifespan = defaults.actionTokenGeneratedByUserLifespan;
    	      this.adminTheme = defaults.adminTheme;
    	      this.attributes = defaults.attributes;
    	      this.browserFlow = defaults.browserFlow;
    	      this.clientAuthenticationFlow = defaults.clientAuthenticationFlow;
    	      this.clientSessionIdleTimeout = defaults.clientSessionIdleTimeout;
    	      this.clientSessionMaxLifespan = defaults.clientSessionMaxLifespan;
    	      this.defaultDefaultClientScopes = defaults.defaultDefaultClientScopes;
    	      this.defaultOptionalClientScopes = defaults.defaultOptionalClientScopes;
    	      this.defaultSignatureAlgorithm = defaults.defaultSignatureAlgorithm;
    	      this.directGrantFlow = defaults.directGrantFlow;
    	      this.displayName = defaults.displayName;
    	      this.displayNameHtml = defaults.displayNameHtml;
    	      this.dockerAuthenticationFlow = defaults.dockerAuthenticationFlow;
    	      this.duplicateEmailsAllowed = defaults.duplicateEmailsAllowed;
    	      this.editUsernameAllowed = defaults.editUsernameAllowed;
    	      this.emailTheme = defaults.emailTheme;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.internalId = defaults.internalId;
    	      this.internationalizations = defaults.internationalizations;
    	      this.loginTheme = defaults.loginTheme;
    	      this.loginWithEmailAllowed = defaults.loginWithEmailAllowed;
    	      this.oauth2DeviceCodeLifespan = defaults.oauth2DeviceCodeLifespan;
    	      this.oauth2DevicePollingInterval = defaults.oauth2DevicePollingInterval;
    	      this.offlineSessionIdleTimeout = defaults.offlineSessionIdleTimeout;
    	      this.offlineSessionMaxLifespan = defaults.offlineSessionMaxLifespan;
    	      this.offlineSessionMaxLifespanEnabled = defaults.offlineSessionMaxLifespanEnabled;
    	      this.otpPolicy = defaults.otpPolicy;
    	      this.passwordPolicy = defaults.passwordPolicy;
    	      this.realm = defaults.realm;
    	      this.refreshTokenMaxReuse = defaults.refreshTokenMaxReuse;
    	      this.registrationAllowed = defaults.registrationAllowed;
    	      this.registrationEmailAsUsername = defaults.registrationEmailAsUsername;
    	      this.registrationFlow = defaults.registrationFlow;
    	      this.rememberMe = defaults.rememberMe;
    	      this.resetCredentialsFlow = defaults.resetCredentialsFlow;
    	      this.resetPasswordAllowed = defaults.resetPasswordAllowed;
    	      this.revokeRefreshToken = defaults.revokeRefreshToken;
    	      this.securityDefenses = defaults.securityDefenses;
    	      this.smtpServers = defaults.smtpServers;
    	      this.sslRequired = defaults.sslRequired;
    	      this.ssoSessionIdleTimeout = defaults.ssoSessionIdleTimeout;
    	      this.ssoSessionIdleTimeoutRememberMe = defaults.ssoSessionIdleTimeoutRememberMe;
    	      this.ssoSessionMaxLifespan = defaults.ssoSessionMaxLifespan;
    	      this.ssoSessionMaxLifespanRememberMe = defaults.ssoSessionMaxLifespanRememberMe;
    	      this.userManagedAccess = defaults.userManagedAccess;
    	      this.verifyEmail = defaults.verifyEmail;
    	      this.webAuthnPasswordlessPolicy = defaults.webAuthnPasswordlessPolicy;
    	      this.webAuthnPolicy = defaults.webAuthnPolicy;
        }

        @CustomType.Setter
        public Builder accessCodeLifespan(String accessCodeLifespan) {
            if (accessCodeLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "accessCodeLifespan");
            }
            this.accessCodeLifespan = accessCodeLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder accessCodeLifespanLogin(String accessCodeLifespanLogin) {
            if (accessCodeLifespanLogin == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "accessCodeLifespanLogin");
            }
            this.accessCodeLifespanLogin = accessCodeLifespanLogin;
            return this;
        }
        @CustomType.Setter
        public Builder accessCodeLifespanUserAction(String accessCodeLifespanUserAction) {
            if (accessCodeLifespanUserAction == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "accessCodeLifespanUserAction");
            }
            this.accessCodeLifespanUserAction = accessCodeLifespanUserAction;
            return this;
        }
        @CustomType.Setter
        public Builder accessTokenLifespan(String accessTokenLifespan) {
            if (accessTokenLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "accessTokenLifespan");
            }
            this.accessTokenLifespan = accessTokenLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder accessTokenLifespanForImplicitFlow(String accessTokenLifespanForImplicitFlow) {
            if (accessTokenLifespanForImplicitFlow == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "accessTokenLifespanForImplicitFlow");
            }
            this.accessTokenLifespanForImplicitFlow = accessTokenLifespanForImplicitFlow;
            return this;
        }
        @CustomType.Setter
        public Builder accountTheme(String accountTheme) {
            if (accountTheme == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "accountTheme");
            }
            this.accountTheme = accountTheme;
            return this;
        }
        @CustomType.Setter
        public Builder actionTokenGeneratedByAdminLifespan(String actionTokenGeneratedByAdminLifespan) {
            if (actionTokenGeneratedByAdminLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "actionTokenGeneratedByAdminLifespan");
            }
            this.actionTokenGeneratedByAdminLifespan = actionTokenGeneratedByAdminLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder actionTokenGeneratedByUserLifespan(String actionTokenGeneratedByUserLifespan) {
            if (actionTokenGeneratedByUserLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "actionTokenGeneratedByUserLifespan");
            }
            this.actionTokenGeneratedByUserLifespan = actionTokenGeneratedByUserLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder adminTheme(String adminTheme) {
            if (adminTheme == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "adminTheme");
            }
            this.adminTheme = adminTheme;
            return this;
        }
        @CustomType.Setter
        public Builder attributes(Map<String,String> attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder browserFlow(String browserFlow) {
            if (browserFlow == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "browserFlow");
            }
            this.browserFlow = browserFlow;
            return this;
        }
        @CustomType.Setter
        public Builder clientAuthenticationFlow(String clientAuthenticationFlow) {
            if (clientAuthenticationFlow == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "clientAuthenticationFlow");
            }
            this.clientAuthenticationFlow = clientAuthenticationFlow;
            return this;
        }
        @CustomType.Setter
        public Builder clientSessionIdleTimeout(String clientSessionIdleTimeout) {
            if (clientSessionIdleTimeout == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "clientSessionIdleTimeout");
            }
            this.clientSessionIdleTimeout = clientSessionIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder clientSessionMaxLifespan(String clientSessionMaxLifespan) {
            if (clientSessionMaxLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "clientSessionMaxLifespan");
            }
            this.clientSessionMaxLifespan = clientSessionMaxLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder defaultDefaultClientScopes(List<String> defaultDefaultClientScopes) {
            if (defaultDefaultClientScopes == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "defaultDefaultClientScopes");
            }
            this.defaultDefaultClientScopes = defaultDefaultClientScopes;
            return this;
        }
        public Builder defaultDefaultClientScopes(String... defaultDefaultClientScopes) {
            return defaultDefaultClientScopes(List.of(defaultDefaultClientScopes));
        }
        @CustomType.Setter
        public Builder defaultOptionalClientScopes(List<String> defaultOptionalClientScopes) {
            if (defaultOptionalClientScopes == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "defaultOptionalClientScopes");
            }
            this.defaultOptionalClientScopes = defaultOptionalClientScopes;
            return this;
        }
        public Builder defaultOptionalClientScopes(String... defaultOptionalClientScopes) {
            return defaultOptionalClientScopes(List.of(defaultOptionalClientScopes));
        }
        @CustomType.Setter
        public Builder defaultSignatureAlgorithm(String defaultSignatureAlgorithm) {
            if (defaultSignatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "defaultSignatureAlgorithm");
            }
            this.defaultSignatureAlgorithm = defaultSignatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder directGrantFlow(String directGrantFlow) {
            if (directGrantFlow == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "directGrantFlow");
            }
            this.directGrantFlow = directGrantFlow;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder displayNameHtml(@Nullable String displayNameHtml) {

            this.displayNameHtml = displayNameHtml;
            return this;
        }
        @CustomType.Setter
        public Builder dockerAuthenticationFlow(String dockerAuthenticationFlow) {
            if (dockerAuthenticationFlow == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "dockerAuthenticationFlow");
            }
            this.dockerAuthenticationFlow = dockerAuthenticationFlow;
            return this;
        }
        @CustomType.Setter
        public Builder duplicateEmailsAllowed(Boolean duplicateEmailsAllowed) {
            if (duplicateEmailsAllowed == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "duplicateEmailsAllowed");
            }
            this.duplicateEmailsAllowed = duplicateEmailsAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder editUsernameAllowed(Boolean editUsernameAllowed) {
            if (editUsernameAllowed == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "editUsernameAllowed");
            }
            this.editUsernameAllowed = editUsernameAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder emailTheme(String emailTheme) {
            if (emailTheme == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "emailTheme");
            }
            this.emailTheme = emailTheme;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalId(String internalId) {
            if (internalId == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "internalId");
            }
            this.internalId = internalId;
            return this;
        }
        @CustomType.Setter
        public Builder internationalizations(List<GetRealmInternationalization> internationalizations) {
            if (internationalizations == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "internationalizations");
            }
            this.internationalizations = internationalizations;
            return this;
        }
        public Builder internationalizations(GetRealmInternationalization... internationalizations) {
            return internationalizations(List.of(internationalizations));
        }
        @CustomType.Setter
        public Builder loginTheme(String loginTheme) {
            if (loginTheme == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "loginTheme");
            }
            this.loginTheme = loginTheme;
            return this;
        }
        @CustomType.Setter
        public Builder loginWithEmailAllowed(Boolean loginWithEmailAllowed) {
            if (loginWithEmailAllowed == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "loginWithEmailAllowed");
            }
            this.loginWithEmailAllowed = loginWithEmailAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2DeviceCodeLifespan(String oauth2DeviceCodeLifespan) {
            if (oauth2DeviceCodeLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "oauth2DeviceCodeLifespan");
            }
            this.oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder oauth2DevicePollingInterval(Integer oauth2DevicePollingInterval) {
            if (oauth2DevicePollingInterval == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "oauth2DevicePollingInterval");
            }
            this.oauth2DevicePollingInterval = oauth2DevicePollingInterval;
            return this;
        }
        @CustomType.Setter
        public Builder offlineSessionIdleTimeout(String offlineSessionIdleTimeout) {
            if (offlineSessionIdleTimeout == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "offlineSessionIdleTimeout");
            }
            this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder offlineSessionMaxLifespan(String offlineSessionMaxLifespan) {
            if (offlineSessionMaxLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "offlineSessionMaxLifespan");
            }
            this.offlineSessionMaxLifespan = offlineSessionMaxLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder offlineSessionMaxLifespanEnabled(Boolean offlineSessionMaxLifespanEnabled) {
            if (offlineSessionMaxLifespanEnabled == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "offlineSessionMaxLifespanEnabled");
            }
            this.offlineSessionMaxLifespanEnabled = offlineSessionMaxLifespanEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder otpPolicy(GetRealmOtpPolicy otpPolicy) {
            if (otpPolicy == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "otpPolicy");
            }
            this.otpPolicy = otpPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder passwordPolicy(String passwordPolicy) {
            if (passwordPolicy == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "passwordPolicy");
            }
            this.passwordPolicy = passwordPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder realm(String realm) {
            if (realm == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "realm");
            }
            this.realm = realm;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenMaxReuse(Integer refreshTokenMaxReuse) {
            if (refreshTokenMaxReuse == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "refreshTokenMaxReuse");
            }
            this.refreshTokenMaxReuse = refreshTokenMaxReuse;
            return this;
        }
        @CustomType.Setter
        public Builder registrationAllowed(Boolean registrationAllowed) {
            if (registrationAllowed == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "registrationAllowed");
            }
            this.registrationAllowed = registrationAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder registrationEmailAsUsername(Boolean registrationEmailAsUsername) {
            if (registrationEmailAsUsername == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "registrationEmailAsUsername");
            }
            this.registrationEmailAsUsername = registrationEmailAsUsername;
            return this;
        }
        @CustomType.Setter
        public Builder registrationFlow(String registrationFlow) {
            if (registrationFlow == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "registrationFlow");
            }
            this.registrationFlow = registrationFlow;
            return this;
        }
        @CustomType.Setter
        public Builder rememberMe(Boolean rememberMe) {
            if (rememberMe == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "rememberMe");
            }
            this.rememberMe = rememberMe;
            return this;
        }
        @CustomType.Setter
        public Builder resetCredentialsFlow(String resetCredentialsFlow) {
            if (resetCredentialsFlow == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "resetCredentialsFlow");
            }
            this.resetCredentialsFlow = resetCredentialsFlow;
            return this;
        }
        @CustomType.Setter
        public Builder resetPasswordAllowed(Boolean resetPasswordAllowed) {
            if (resetPasswordAllowed == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "resetPasswordAllowed");
            }
            this.resetPasswordAllowed = resetPasswordAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder revokeRefreshToken(Boolean revokeRefreshToken) {
            if (revokeRefreshToken == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "revokeRefreshToken");
            }
            this.revokeRefreshToken = revokeRefreshToken;
            return this;
        }
        @CustomType.Setter
        public Builder securityDefenses(List<GetRealmSecurityDefense> securityDefenses) {
            if (securityDefenses == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "securityDefenses");
            }
            this.securityDefenses = securityDefenses;
            return this;
        }
        public Builder securityDefenses(GetRealmSecurityDefense... securityDefenses) {
            return securityDefenses(List.of(securityDefenses));
        }
        @CustomType.Setter
        public Builder smtpServers(List<GetRealmSmtpServer> smtpServers) {
            if (smtpServers == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "smtpServers");
            }
            this.smtpServers = smtpServers;
            return this;
        }
        public Builder smtpServers(GetRealmSmtpServer... smtpServers) {
            return smtpServers(List.of(smtpServers));
        }
        @CustomType.Setter
        public Builder sslRequired(String sslRequired) {
            if (sslRequired == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "sslRequired");
            }
            this.sslRequired = sslRequired;
            return this;
        }
        @CustomType.Setter
        public Builder ssoSessionIdleTimeout(String ssoSessionIdleTimeout) {
            if (ssoSessionIdleTimeout == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "ssoSessionIdleTimeout");
            }
            this.ssoSessionIdleTimeout = ssoSessionIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder ssoSessionIdleTimeoutRememberMe(String ssoSessionIdleTimeoutRememberMe) {
            if (ssoSessionIdleTimeoutRememberMe == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "ssoSessionIdleTimeoutRememberMe");
            }
            this.ssoSessionIdleTimeoutRememberMe = ssoSessionIdleTimeoutRememberMe;
            return this;
        }
        @CustomType.Setter
        public Builder ssoSessionMaxLifespan(String ssoSessionMaxLifespan) {
            if (ssoSessionMaxLifespan == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "ssoSessionMaxLifespan");
            }
            this.ssoSessionMaxLifespan = ssoSessionMaxLifespan;
            return this;
        }
        @CustomType.Setter
        public Builder ssoSessionMaxLifespanRememberMe(String ssoSessionMaxLifespanRememberMe) {
            if (ssoSessionMaxLifespanRememberMe == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "ssoSessionMaxLifespanRememberMe");
            }
            this.ssoSessionMaxLifespanRememberMe = ssoSessionMaxLifespanRememberMe;
            return this;
        }
        @CustomType.Setter
        public Builder userManagedAccess(Boolean userManagedAccess) {
            if (userManagedAccess == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "userManagedAccess");
            }
            this.userManagedAccess = userManagedAccess;
            return this;
        }
        @CustomType.Setter
        public Builder verifyEmail(Boolean verifyEmail) {
            if (verifyEmail == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "verifyEmail");
            }
            this.verifyEmail = verifyEmail;
            return this;
        }
        @CustomType.Setter
        public Builder webAuthnPasswordlessPolicy(GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy) {
            if (webAuthnPasswordlessPolicy == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "webAuthnPasswordlessPolicy");
            }
            this.webAuthnPasswordlessPolicy = webAuthnPasswordlessPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder webAuthnPolicy(GetRealmWebAuthnPolicy webAuthnPolicy) {
            if (webAuthnPolicy == null) {
              throw new MissingRequiredPropertyException("GetRealmResult", "webAuthnPolicy");
            }
            this.webAuthnPolicy = webAuthnPolicy;
            return this;
        }
        public GetRealmResult build() {
            final var _resultValue = new GetRealmResult();
            _resultValue.accessCodeLifespan = accessCodeLifespan;
            _resultValue.accessCodeLifespanLogin = accessCodeLifespanLogin;
            _resultValue.accessCodeLifespanUserAction = accessCodeLifespanUserAction;
            _resultValue.accessTokenLifespan = accessTokenLifespan;
            _resultValue.accessTokenLifespanForImplicitFlow = accessTokenLifespanForImplicitFlow;
            _resultValue.accountTheme = accountTheme;
            _resultValue.actionTokenGeneratedByAdminLifespan = actionTokenGeneratedByAdminLifespan;
            _resultValue.actionTokenGeneratedByUserLifespan = actionTokenGeneratedByUserLifespan;
            _resultValue.adminTheme = adminTheme;
            _resultValue.attributes = attributes;
            _resultValue.browserFlow = browserFlow;
            _resultValue.clientAuthenticationFlow = clientAuthenticationFlow;
            _resultValue.clientSessionIdleTimeout = clientSessionIdleTimeout;
            _resultValue.clientSessionMaxLifespan = clientSessionMaxLifespan;
            _resultValue.defaultDefaultClientScopes = defaultDefaultClientScopes;
            _resultValue.defaultOptionalClientScopes = defaultOptionalClientScopes;
            _resultValue.defaultSignatureAlgorithm = defaultSignatureAlgorithm;
            _resultValue.directGrantFlow = directGrantFlow;
            _resultValue.displayName = displayName;
            _resultValue.displayNameHtml = displayNameHtml;
            _resultValue.dockerAuthenticationFlow = dockerAuthenticationFlow;
            _resultValue.duplicateEmailsAllowed = duplicateEmailsAllowed;
            _resultValue.editUsernameAllowed = editUsernameAllowed;
            _resultValue.emailTheme = emailTheme;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.internalId = internalId;
            _resultValue.internationalizations = internationalizations;
            _resultValue.loginTheme = loginTheme;
            _resultValue.loginWithEmailAllowed = loginWithEmailAllowed;
            _resultValue.oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
            _resultValue.oauth2DevicePollingInterval = oauth2DevicePollingInterval;
            _resultValue.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
            _resultValue.offlineSessionMaxLifespan = offlineSessionMaxLifespan;
            _resultValue.offlineSessionMaxLifespanEnabled = offlineSessionMaxLifespanEnabled;
            _resultValue.otpPolicy = otpPolicy;
            _resultValue.passwordPolicy = passwordPolicy;
            _resultValue.realm = realm;
            _resultValue.refreshTokenMaxReuse = refreshTokenMaxReuse;
            _resultValue.registrationAllowed = registrationAllowed;
            _resultValue.registrationEmailAsUsername = registrationEmailAsUsername;
            _resultValue.registrationFlow = registrationFlow;
            _resultValue.rememberMe = rememberMe;
            _resultValue.resetCredentialsFlow = resetCredentialsFlow;
            _resultValue.resetPasswordAllowed = resetPasswordAllowed;
            _resultValue.revokeRefreshToken = revokeRefreshToken;
            _resultValue.securityDefenses = securityDefenses;
            _resultValue.smtpServers = smtpServers;
            _resultValue.sslRequired = sslRequired;
            _resultValue.ssoSessionIdleTimeout = ssoSessionIdleTimeout;
            _resultValue.ssoSessionIdleTimeoutRememberMe = ssoSessionIdleTimeoutRememberMe;
            _resultValue.ssoSessionMaxLifespan = ssoSessionMaxLifespan;
            _resultValue.ssoSessionMaxLifespanRememberMe = ssoSessionMaxLifespanRememberMe;
            _resultValue.userManagedAccess = userManagedAccess;
            _resultValue.verifyEmail = verifyEmail;
            _resultValue.webAuthnPasswordlessPolicy = webAuthnPasswordlessPolicy;
            _resultValue.webAuthnPolicy = webAuthnPolicy;
            return _resultValue;
        }
    }
}
