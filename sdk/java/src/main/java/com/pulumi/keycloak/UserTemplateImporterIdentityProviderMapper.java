// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.keycloak.UserTemplateImporterIdentityProviderMapperArgs;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.inputs.UserTemplateImporterIdentityProviderMapperState;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Allows for creating and managing an username template importer identity provider mapper within Keycloak.
 * 
 * The username template importer mapper can be used to map externally defined OIDC claims or SAML attributes with a template to the username of the imported Keycloak user:
 * 
 * - Substitutions are enclosed in \${}. For example: &#39;\${ALIAS}.\${CLAIM.sub}&#39;. ALIAS is the provider alias. CLAIM.\&lt;NAME\&gt; references an ID or Access token claim.
 * 
 * &gt; If you are using Keycloak 10 or higher, you will need to specify the `extra_config` argument in order to define a `syncMode` for the mapper.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.oidc.IdentityProvider;
 * import com.pulumi.keycloak.oidc.IdentityProviderArgs;
 * import com.pulumi.keycloak.UserTemplateImporterIdentityProviderMapper;
 * import com.pulumi.keycloak.UserTemplateImporterIdentityProviderMapperArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm(&#34;realm&#34;, RealmArgs.builder()        
 *             .realm(&#34;my-realm&#34;)
 *             .enabled(true)
 *             .build());
 * 
 *         var oidc = new IdentityProvider(&#34;oidc&#34;, IdentityProviderArgs.builder()        
 *             .realm(realm.id())
 *             .alias(&#34;oidc&#34;)
 *             .authorizationUrl(&#34;https://example.com/auth&#34;)
 *             .tokenUrl(&#34;https://example.com/token&#34;)
 *             .clientId(&#34;example_id&#34;)
 *             .clientSecret(&#34;example_token&#34;)
 *             .defaultScopes(&#34;openid random profile&#34;)
 *             .build());
 * 
 *         var usernameImporter = new UserTemplateImporterIdentityProviderMapper(&#34;usernameImporter&#34;, UserTemplateImporterIdentityProviderMapperArgs.builder()        
 *             .realm(realm.id())
 *             .identityProviderAlias(oidc.alias())
 *             .template(&#34;${ALIAS}.${CLAIM.email}&#34;)
 *             .extraConfig(Map.of(&#34;syncMode&#34;, &#34;INHERIT&#34;))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Identity provider mappers can be imported using the format `{{realm_id}}/{{idp_alias}}/{{idp_mapper_id}}`, where `idp_alias` is the identity provider alias, and `idp_mapper_id` is the unique ID that Keycloak
 * 
 *  assigns to the mapper upon creation. This value can be found in the URI when editing this mapper in the GUI, and is typically a GUID.
 * 
 *  Example:
 * 
 *  bash
 * 
 * ```sh
 * $ pulumi import keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper username_importer my-realm/my-mapper/f446db98-7133-4e30-b18a-3d28fde7ca1b
 * ```
 * 
 */
@ResourceType(type="keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper")
public class UserTemplateImporterIdentityProviderMapper extends com.pulumi.resources.CustomResource {
    /**
     * Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
     * 
     */
    @Export(name="extraConfig", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> extraConfig;

    /**
     * @return Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.
     * 
     */
    public Output<Optional<Map<String,Object>>> extraConfig() {
        return Codegen.optional(this.extraConfig);
    }
    /**
     * The alias of the associated identity provider.
     * 
     */
    @Export(name="identityProviderAlias", refs={String.class}, tree="[0]")
    private Output<String> identityProviderAlias;

    /**
     * @return The alias of the associated identity provider.
     * 
     */
    public Output<String> identityProviderAlias() {
        return this.identityProviderAlias;
    }
    /**
     * The name of the mapper.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the mapper.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the realm.
     * 
     */
    @Export(name="realm", refs={String.class}, tree="[0]")
    private Output<String> realm;

    /**
     * @return The name of the realm.
     * 
     */
    public Output<String> realm() {
        return this.realm;
    }
    /**
     * Template to use to format the username to import. Substitutions are enclosed in \${}. For example: &#39;\$\${ALIAS}.\$\${CLAIM.sub}&#39;. ALIAS is the provider alias. CLAIM.\&lt;NAME\&gt; references an ID or Access token claim.
     * 
     */
    @Export(name="template", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> template;

    /**
     * @return Template to use to format the username to import. Substitutions are enclosed in \${}. For example: &#39;\$\${ALIAS}.\$\${CLAIM.sub}&#39;. ALIAS is the provider alias. CLAIM.\&lt;NAME\&gt; references an ID or Access token claim.
     * 
     */
    public Output<Optional<String>> template() {
        return Codegen.optional(this.template);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UserTemplateImporterIdentityProviderMapper(String name) {
        this(name, UserTemplateImporterIdentityProviderMapperArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UserTemplateImporterIdentityProviderMapper(String name, UserTemplateImporterIdentityProviderMapperArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UserTemplateImporterIdentityProviderMapper(String name, UserTemplateImporterIdentityProviderMapperArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper", name, args == null ? UserTemplateImporterIdentityProviderMapperArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private UserTemplateImporterIdentityProviderMapper(String name, Output<String> id, @Nullable UserTemplateImporterIdentityProviderMapperState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UserTemplateImporterIdentityProviderMapper get(String name, Output<String> id, @Nullable UserTemplateImporterIdentityProviderMapperState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UserTemplateImporterIdentityProviderMapper(name, id, state, options);
    }
}
