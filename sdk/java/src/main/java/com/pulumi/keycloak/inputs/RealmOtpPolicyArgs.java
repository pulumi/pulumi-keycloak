// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmOtpPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RealmOtpPolicyArgs Empty = new RealmOtpPolicyArgs();

    /**
     * What hashing algorithm should be used to generate the OTP.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return What hashing algorithm should be used to generate the OTP.
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    @Import(name="digits")
    private @Nullable Output<Integer> digits;

    public Optional<Output<Integer>> digits() {
        return Optional.ofNullable(this.digits);
    }

    @Import(name="initialCounter")
    private @Nullable Output<Integer> initialCounter;

    public Optional<Output<Integer>> initialCounter() {
        return Optional.ofNullable(this.initialCounter);
    }

    @Import(name="lookAheadWindow")
    private @Nullable Output<Integer> lookAheadWindow;

    public Optional<Output<Integer>> lookAheadWindow() {
        return Optional.ofNullable(this.lookAheadWindow);
    }

    @Import(name="period")
    private @Nullable Output<Integer> period;

    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * OTP Type, totp for Time-Based One Time Password or hotp for counter base one time password
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return OTP Type, totp for Time-Based One Time Password or hotp for counter base one time password
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RealmOtpPolicyArgs() {}

    private RealmOtpPolicyArgs(RealmOtpPolicyArgs $) {
        this.algorithm = $.algorithm;
        this.digits = $.digits;
        this.initialCounter = $.initialCounter;
        this.lookAheadWindow = $.lookAheadWindow;
        this.period = $.period;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmOtpPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmOtpPolicyArgs $;

        public Builder() {
            $ = new RealmOtpPolicyArgs();
        }

        public Builder(RealmOtpPolicyArgs defaults) {
            $ = new RealmOtpPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm What hashing algorithm should be used to generate the OTP.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm What hashing algorithm should be used to generate the OTP.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        public Builder digits(@Nullable Output<Integer> digits) {
            $.digits = digits;
            return this;
        }

        public Builder digits(Integer digits) {
            return digits(Output.of(digits));
        }

        public Builder initialCounter(@Nullable Output<Integer> initialCounter) {
            $.initialCounter = initialCounter;
            return this;
        }

        public Builder initialCounter(Integer initialCounter) {
            return initialCounter(Output.of(initialCounter));
        }

        public Builder lookAheadWindow(@Nullable Output<Integer> lookAheadWindow) {
            $.lookAheadWindow = lookAheadWindow;
            return this;
        }

        public Builder lookAheadWindow(Integer lookAheadWindow) {
            return lookAheadWindow(Output.of(lookAheadWindow));
        }

        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param type OTP Type, totp for Time-Based One Time Password or hotp for counter base one time password
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type OTP Type, totp for Time-Based One Time Password or hotp for counter base one time password
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RealmOtpPolicyArgs build() {
            return $;
        }
    }

}
