// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.ldap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FullNameMapperState extends com.pulumi.resources.ResourceArgs {

    public static final FullNameMapperState Empty = new FullNameMapperState();

    /**
     * The name of the LDAP attribute containing the user&#39;s full name.
     * 
     */
    @Import(name="ldapFullNameAttribute")
    private @Nullable Output<String> ldapFullNameAttribute;

    /**
     * @return The name of the LDAP attribute containing the user&#39;s full name.
     * 
     */
    public Optional<Output<String>> ldapFullNameAttribute() {
        return Optional.ofNullable(this.ldapFullNameAttribute);
    }

    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     * 
     */
    @Import(name="ldapUserFederationId")
    private @Nullable Output<String> ldapUserFederationId;

    /**
     * @return The ID of the LDAP user federation provider to attach this mapper to.
     * 
     */
    public Optional<Output<String>> ldapUserFederationId() {
        return Optional.ofNullable(this.ldapUserFederationId);
    }

    /**
     * Display name of this mapper when displayed in the console.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name of this mapper when displayed in the console.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * When `true`, updates to a user within Keycloak will not be written back to LDAP. Defaults to `false`.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return When `true`, updates to a user within Keycloak will not be written back to LDAP. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * The realm that this LDAP mapper will exist in.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm that this LDAP mapper will exist in.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    /**
     * When `true`, this mapper will only be used to write updates to LDAP. Defaults to `false`.
     * 
     */
    @Import(name="writeOnly")
    private @Nullable Output<Boolean> writeOnly;

    /**
     * @return When `true`, this mapper will only be used to write updates to LDAP. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> writeOnly() {
        return Optional.ofNullable(this.writeOnly);
    }

    private FullNameMapperState() {}

    private FullNameMapperState(FullNameMapperState $) {
        this.ldapFullNameAttribute = $.ldapFullNameAttribute;
        this.ldapUserFederationId = $.ldapUserFederationId;
        this.name = $.name;
        this.readOnly = $.readOnly;
        this.realmId = $.realmId;
        this.writeOnly = $.writeOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FullNameMapperState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FullNameMapperState $;

        public Builder() {
            $ = new FullNameMapperState();
        }

        public Builder(FullNameMapperState defaults) {
            $ = new FullNameMapperState(Objects.requireNonNull(defaults));
        }

        /**
         * @param ldapFullNameAttribute The name of the LDAP attribute containing the user&#39;s full name.
         * 
         * @return builder
         * 
         */
        public Builder ldapFullNameAttribute(@Nullable Output<String> ldapFullNameAttribute) {
            $.ldapFullNameAttribute = ldapFullNameAttribute;
            return this;
        }

        /**
         * @param ldapFullNameAttribute The name of the LDAP attribute containing the user&#39;s full name.
         * 
         * @return builder
         * 
         */
        public Builder ldapFullNameAttribute(String ldapFullNameAttribute) {
            return ldapFullNameAttribute(Output.of(ldapFullNameAttribute));
        }

        /**
         * @param ldapUserFederationId The ID of the LDAP user federation provider to attach this mapper to.
         * 
         * @return builder
         * 
         */
        public Builder ldapUserFederationId(@Nullable Output<String> ldapUserFederationId) {
            $.ldapUserFederationId = ldapUserFederationId;
            return this;
        }

        /**
         * @param ldapUserFederationId The ID of the LDAP user federation provider to attach this mapper to.
         * 
         * @return builder
         * 
         */
        public Builder ldapUserFederationId(String ldapUserFederationId) {
            return ldapUserFederationId(Output.of(ldapUserFederationId));
        }

        /**
         * @param name Display name of this mapper when displayed in the console.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name of this mapper when displayed in the console.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param readOnly When `true`, updates to a user within Keycloak will not be written back to LDAP. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly When `true`, updates to a user within Keycloak will not be written back to LDAP. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        /**
         * @param realmId The realm that this LDAP mapper will exist in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm that this LDAP mapper will exist in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param writeOnly When `true`, this mapper will only be used to write updates to LDAP. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder writeOnly(@Nullable Output<Boolean> writeOnly) {
            $.writeOnly = writeOnly;
            return this;
        }

        /**
         * @param writeOnly When `true`, this mapper will only be used to write updates to LDAP. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder writeOnly(Boolean writeOnly) {
            return writeOnly(Output.of(writeOnly));
        }

        public FullNameMapperState build() {
            return $;
        }
    }

}
