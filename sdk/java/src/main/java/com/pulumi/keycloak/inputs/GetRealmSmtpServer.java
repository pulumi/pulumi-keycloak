// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.keycloak.inputs.GetRealmSmtpServerAuth;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetRealmSmtpServer extends com.pulumi.resources.InvokeArgs {

    public static final GetRealmSmtpServer Empty = new GetRealmSmtpServer();

    @Import(name="auths", required=true)
    private List<GetRealmSmtpServerAuth> auths;

    public List<GetRealmSmtpServerAuth> auths() {
        return this.auths;
    }

    @Import(name="envelopeFrom", required=true)
    private String envelopeFrom;

    public String envelopeFrom() {
        return this.envelopeFrom;
    }

    @Import(name="from", required=true)
    private String from;

    public String from() {
        return this.from;
    }

    @Import(name="fromDisplayName", required=true)
    private String fromDisplayName;

    public String fromDisplayName() {
        return this.fromDisplayName;
    }

    @Import(name="host", required=true)
    private String host;

    public String host() {
        return this.host;
    }

    @Import(name="port", required=true)
    private String port;

    public String port() {
        return this.port;
    }

    @Import(name="replyTo", required=true)
    private String replyTo;

    public String replyTo() {
        return this.replyTo;
    }

    @Import(name="replyToDisplayName", required=true)
    private String replyToDisplayName;

    public String replyToDisplayName() {
        return this.replyToDisplayName;
    }

    @Import(name="ssl", required=true)
    private Boolean ssl;

    public Boolean ssl() {
        return this.ssl;
    }

    @Import(name="starttls", required=true)
    private Boolean starttls;

    public Boolean starttls() {
        return this.starttls;
    }

    private GetRealmSmtpServer() {}

    private GetRealmSmtpServer(GetRealmSmtpServer $) {
        this.auths = $.auths;
        this.envelopeFrom = $.envelopeFrom;
        this.from = $.from;
        this.fromDisplayName = $.fromDisplayName;
        this.host = $.host;
        this.port = $.port;
        this.replyTo = $.replyTo;
        this.replyToDisplayName = $.replyToDisplayName;
        this.ssl = $.ssl;
        this.starttls = $.starttls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRealmSmtpServer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRealmSmtpServer $;

        public Builder() {
            $ = new GetRealmSmtpServer();
        }

        public Builder(GetRealmSmtpServer defaults) {
            $ = new GetRealmSmtpServer(Objects.requireNonNull(defaults));
        }

        public Builder auths(List<GetRealmSmtpServerAuth> auths) {
            $.auths = auths;
            return this;
        }

        public Builder auths(GetRealmSmtpServerAuth... auths) {
            return auths(List.of(auths));
        }

        public Builder envelopeFrom(String envelopeFrom) {
            $.envelopeFrom = envelopeFrom;
            return this;
        }

        public Builder from(String from) {
            $.from = from;
            return this;
        }

        public Builder fromDisplayName(String fromDisplayName) {
            $.fromDisplayName = fromDisplayName;
            return this;
        }

        public Builder host(String host) {
            $.host = host;
            return this;
        }

        public Builder port(String port) {
            $.port = port;
            return this;
        }

        public Builder replyTo(String replyTo) {
            $.replyTo = replyTo;
            return this;
        }

        public Builder replyToDisplayName(String replyToDisplayName) {
            $.replyToDisplayName = replyToDisplayName;
            return this;
        }

        public Builder ssl(Boolean ssl) {
            $.ssl = ssl;
            return this;
        }

        public Builder starttls(Boolean starttls) {
            $.starttls = starttls;
            return this;
        }

        public GetRealmSmtpServer build() {
            if ($.auths == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "auths");
            }
            if ($.envelopeFrom == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "envelopeFrom");
            }
            if ($.from == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "from");
            }
            if ($.fromDisplayName == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "fromDisplayName");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "host");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "port");
            }
            if ($.replyTo == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "replyTo");
            }
            if ($.replyToDisplayName == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "replyToDisplayName");
            }
            if ($.ssl == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "ssl");
            }
            if ($.starttls == null) {
                throw new MissingRequiredPropertyException("GetRealmSmtpServer", "starttls");
            }
            return $;
        }
    }

}
