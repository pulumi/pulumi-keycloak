// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GenericProtocolMapperArgs extends com.pulumi.resources.ResourceArgs {

    public static final GenericProtocolMapperArgs Empty = new GenericProtocolMapperArgs();

    /**
     * The ID of the client this protocol mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The ID of the client this protocol mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The ID of the client scope this protocol mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
     * 
     */
    @Import(name="clientScopeId")
    private @Nullable Output<String> clientScopeId;

    /**
     * @return The ID of the client scope this protocol mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
     * 
     */
    public Optional<Output<String>> clientScopeId() {
        return Optional.ofNullable(this.clientScopeId);
    }

    /**
     * A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
     * 
     */
    @Import(name="config", required=true)
    private Output<Map<String,Object>> config;

    /**
     * @return A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
     * 
     */
    public Output<Map<String,Object>> config() {
        return this.config;
    }

    /**
     * The display name of this protocol mapper in the GUI.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of this protocol mapper in the GUI.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of client (either `openid-connect` or `saml`). The type must match the type of the client.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The type of client (either `openid-connect` or `saml`). The type must match the type of the client.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * The name of the protocol mapper. The protocol mapper must be compatible with the specified client.
     * 
     */
    @Import(name="protocolMapper", required=true)
    private Output<String> protocolMapper;

    /**
     * @return The name of the protocol mapper. The protocol mapper must be compatible with the specified client.
     * 
     */
    public Output<String> protocolMapper() {
        return this.protocolMapper;
    }

    /**
     * The realm this protocol mapper exists within.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm this protocol mapper exists within.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    private GenericProtocolMapperArgs() {}

    private GenericProtocolMapperArgs(GenericProtocolMapperArgs $) {
        this.clientId = $.clientId;
        this.clientScopeId = $.clientScopeId;
        this.config = $.config;
        this.name = $.name;
        this.protocol = $.protocol;
        this.protocolMapper = $.protocolMapper;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenericProtocolMapperArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenericProtocolMapperArgs $;

        public Builder() {
            $ = new GenericProtocolMapperArgs();
        }

        public Builder(GenericProtocolMapperArgs defaults) {
            $ = new GenericProtocolMapperArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The ID of the client this protocol mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The ID of the client this protocol mapper should be added to. Conflicts with `client_scope_id`. This argument is required if `client_scope_id` is not set.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientScopeId The ID of the client scope this protocol mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
         * 
         * @return builder
         * 
         */
        public Builder clientScopeId(@Nullable Output<String> clientScopeId) {
            $.clientScopeId = clientScopeId;
            return this;
        }

        /**
         * @param clientScopeId The ID of the client scope this protocol mapper should be added to. Conflicts with `client_id`. This argument is required if `client_id` is not set.
         * 
         * @return builder
         * 
         */
        public Builder clientScopeId(String clientScopeId) {
            return clientScopeId(Output.of(clientScopeId));
        }

        /**
         * @param config A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
         * 
         * @return builder
         * 
         */
        public Builder config(Output<Map<String,Object>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,Object> config) {
            return config(Output.of(config));
        }

        /**
         * @param name The display name of this protocol mapper in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of this protocol mapper in the GUI.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol The type of client (either `openid-connect` or `saml`). The type must match the type of the client.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The type of client (either `openid-connect` or `saml`). The type must match the type of the client.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolMapper The name of the protocol mapper. The protocol mapper must be compatible with the specified client.
         * 
         * @return builder
         * 
         */
        public Builder protocolMapper(Output<String> protocolMapper) {
            $.protocolMapper = protocolMapper;
            return this;
        }

        /**
         * @param protocolMapper The name of the protocol mapper. The protocol mapper must be compatible with the specified client.
         * 
         * @return builder
         * 
         */
        public Builder protocolMapper(String protocolMapper) {
            return protocolMapper(Output.of(protocolMapper));
        }

        /**
         * @param realmId The realm this protocol mapper exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm this protocol mapper exists within.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public GenericProtocolMapperArgs build() {
            if ($.config == null) {
                throw new MissingRequiredPropertyException("GenericProtocolMapperArgs", "config");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("GenericProtocolMapperArgs", "protocol");
            }
            if ($.protocolMapper == null) {
                throw new MissingRequiredPropertyException("GenericProtocolMapperArgs", "protocolMapper");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("GenericProtocolMapperArgs", "realmId");
            }
            return $;
        }
    }

}
