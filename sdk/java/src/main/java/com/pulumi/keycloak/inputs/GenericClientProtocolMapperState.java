// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GenericClientProtocolMapperState extends com.pulumi.resources.ResourceArgs {

    public static final GenericClientProtocolMapperState Empty = new GenericClientProtocolMapperState();

    /**
     * The mapper&#39;s associated client. Cannot be used at the same time as client_scope_id.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The mapper&#39;s associated client. Cannot be used at the same time as client_scope_id.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The mapper&#39;s associated client scope. Cannot be used at the same time as client_id.
     * 
     */
    @Import(name="clientScopeId")
    private @Nullable Output<String> clientScopeId;

    /**
     * @return The mapper&#39;s associated client scope. Cannot be used at the same time as client_id.
     * 
     */
    public Optional<Output<String>> clientScopeId() {
        return Optional.ofNullable(this.clientScopeId);
    }

    @Import(name="config")
    private @Nullable Output<Map<String,String>> config;

    public Optional<Output<Map<String,String>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * A human-friendly name that will appear in the Keycloak console.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A human-friendly name that will appear in the Keycloak console.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The protocol of the client (openid-connect / saml).
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol of the client (openid-connect / saml).
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The type of the protocol mapper.
     * 
     */
    @Import(name="protocolMapper")
    private @Nullable Output<String> protocolMapper;

    /**
     * @return The type of the protocol mapper.
     * 
     */
    public Optional<Output<String>> protocolMapper() {
        return Optional.ofNullable(this.protocolMapper);
    }

    /**
     * The realm id where the associated client or client scope exists.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm id where the associated client or client scope exists.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    private GenericClientProtocolMapperState() {}

    private GenericClientProtocolMapperState(GenericClientProtocolMapperState $) {
        this.clientId = $.clientId;
        this.clientScopeId = $.clientScopeId;
        this.config = $.config;
        this.name = $.name;
        this.protocol = $.protocol;
        this.protocolMapper = $.protocolMapper;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenericClientProtocolMapperState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenericClientProtocolMapperState $;

        public Builder() {
            $ = new GenericClientProtocolMapperState();
        }

        public Builder(GenericClientProtocolMapperState defaults) {
            $ = new GenericClientProtocolMapperState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The mapper&#39;s associated client. Cannot be used at the same time as client_scope_id.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The mapper&#39;s associated client. Cannot be used at the same time as client_scope_id.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientScopeId The mapper&#39;s associated client scope. Cannot be used at the same time as client_id.
         * 
         * @return builder
         * 
         */
        public Builder clientScopeId(@Nullable Output<String> clientScopeId) {
            $.clientScopeId = clientScopeId;
            return this;
        }

        /**
         * @param clientScopeId The mapper&#39;s associated client scope. Cannot be used at the same time as client_id.
         * 
         * @return builder
         * 
         */
        public Builder clientScopeId(String clientScopeId) {
            return clientScopeId(Output.of(clientScopeId));
        }

        public Builder config(@Nullable Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        /**
         * @param name A human-friendly name that will appear in the Keycloak console.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A human-friendly name that will appear in the Keycloak console.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protocol The protocol of the client (openid-connect / saml).
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol of the client (openid-connect / saml).
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolMapper The type of the protocol mapper.
         * 
         * @return builder
         * 
         */
        public Builder protocolMapper(@Nullable Output<String> protocolMapper) {
            $.protocolMapper = protocolMapper;
            return this;
        }

        /**
         * @param protocolMapper The type of the protocol mapper.
         * 
         * @return builder
         * 
         */
        public Builder protocolMapper(String protocolMapper) {
            return protocolMapper(Output.of(protocolMapper));
        }

        /**
         * @param realmId The realm id where the associated client or client scope exists.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm id where the associated client or client scope exists.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public GenericClientProtocolMapperState build() {
            return $;
        }
    }

}
