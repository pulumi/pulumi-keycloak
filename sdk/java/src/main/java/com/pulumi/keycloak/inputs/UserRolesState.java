// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserRolesState extends com.pulumi.resources.ResourceArgs {

    public static final UserRolesState Empty = new UserRolesState();

    /**
     * Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the user will be removed. Defaults to `true`.
     * 
     */
    @Import(name="exhaustive")
    private @Nullable Output<Boolean> exhaustive;

    /**
     * @return Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the user will be removed. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> exhaustive() {
        return Optional.ofNullable(this.exhaustive);
    }

    /**
     * The realm this user exists in.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm this user exists in.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    /**
     * A list of role IDs to map to the user
     * 
     */
    @Import(name="roleIds")
    private @Nullable Output<List<String>> roleIds;

    /**
     * @return A list of role IDs to map to the user
     * 
     */
    public Optional<Output<List<String>>> roleIds() {
        return Optional.ofNullable(this.roleIds);
    }

    /**
     * The ID of the user this resource should manage roles for.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return The ID of the user this resource should manage roles for.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private UserRolesState() {}

    private UserRolesState(UserRolesState $) {
        this.exhaustive = $.exhaustive;
        this.realmId = $.realmId;
        this.roleIds = $.roleIds;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserRolesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserRolesState $;

        public Builder() {
            $ = new UserRolesState();
        }

        public Builder(UserRolesState defaults) {
            $ = new UserRolesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param exhaustive Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the user will be removed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder exhaustive(@Nullable Output<Boolean> exhaustive) {
            $.exhaustive = exhaustive;
            return this;
        }

        /**
         * @param exhaustive Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the user will be removed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder exhaustive(Boolean exhaustive) {
            return exhaustive(Output.of(exhaustive));
        }

        /**
         * @param realmId The realm this user exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm this user exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param roleIds A list of role IDs to map to the user
         * 
         * @return builder
         * 
         */
        public Builder roleIds(@Nullable Output<List<String>> roleIds) {
            $.roleIds = roleIds;
            return this;
        }

        /**
         * @param roleIds A list of role IDs to map to the user
         * 
         * @return builder
         * 
         */
        public Builder roleIds(List<String> roleIds) {
            return roleIds(Output.of(roleIds));
        }

        /**
         * @param roleIds A list of role IDs to map to the user
         * 
         * @return builder
         * 
         */
        public Builder roleIds(String... roleIds) {
            return roleIds(List.of(roleIds));
        }

        /**
         * @param userId The ID of the user this resource should manage roles for.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the user this resource should manage roles for.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserRolesState build() {
            return $;
        }
    }

}
