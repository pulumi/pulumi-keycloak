// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.authentication;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExecutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExecutionArgs Empty = new ExecutionArgs();

    /**
     * The name of the authenticator. This can be found by experimenting with the GUI and looking at HTTP requests within the network tab of your browser&#39;s development tools.
     * 
     */
    @Import(name="authenticator", required=true)
    private Output<String> authenticator;

    /**
     * @return The name of the authenticator. This can be found by experimenting with the GUI and looking at HTTP requests within the network tab of your browser&#39;s development tools.
     * 
     */
    public Output<String> authenticator() {
        return this.authenticator;
    }

    /**
     * The alias of the flow this execution is attached to.
     * 
     */
    @Import(name="parentFlowAlias", required=true)
    private Output<String> parentFlowAlias;

    /**
     * @return The alias of the flow this execution is attached to.
     * 
     */
    public Output<String> parentFlowAlias() {
        return this.parentFlowAlias;
    }

    /**
     * The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The realm the authentication execution exists in.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm the authentication execution exists in.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    /**
     * The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`, or `DISABLED`. Defaults to `DISABLED`.
     * 
     */
    @Import(name="requirement")
    private @Nullable Output<String> requirement;

    /**
     * @return The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`, or `DISABLED`. Defaults to `DISABLED`.
     * 
     */
    public Optional<Output<String>> requirement() {
        return Optional.ofNullable(this.requirement);
    }

    private ExecutionArgs() {}

    private ExecutionArgs(ExecutionArgs $) {
        this.authenticator = $.authenticator;
        this.parentFlowAlias = $.parentFlowAlias;
        this.priority = $.priority;
        this.realmId = $.realmId;
        this.requirement = $.requirement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecutionArgs $;

        public Builder() {
            $ = new ExecutionArgs();
        }

        public Builder(ExecutionArgs defaults) {
            $ = new ExecutionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticator The name of the authenticator. This can be found by experimenting with the GUI and looking at HTTP requests within the network tab of your browser&#39;s development tools.
         * 
         * @return builder
         * 
         */
        public Builder authenticator(Output<String> authenticator) {
            $.authenticator = authenticator;
            return this;
        }

        /**
         * @param authenticator The name of the authenticator. This can be found by experimenting with the GUI and looking at HTTP requests within the network tab of your browser&#39;s development tools.
         * 
         * @return builder
         * 
         */
        public Builder authenticator(String authenticator) {
            return authenticator(Output.of(authenticator));
        }

        /**
         * @param parentFlowAlias The alias of the flow this execution is attached to.
         * 
         * @return builder
         * 
         */
        public Builder parentFlowAlias(Output<String> parentFlowAlias) {
            $.parentFlowAlias = parentFlowAlias;
            return this;
        }

        /**
         * @param parentFlowAlias The alias of the flow this execution is attached to.
         * 
         * @return builder
         * 
         */
        public Builder parentFlowAlias(String parentFlowAlias) {
            return parentFlowAlias(Output.of(parentFlowAlias));
        }

        /**
         * @param priority The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param realmId The realm the authentication execution exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm the authentication execution exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param requirement The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`, or `DISABLED`. Defaults to `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder requirement(@Nullable Output<String> requirement) {
            $.requirement = requirement;
            return this;
        }

        /**
         * @param requirement The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`, or `DISABLED`. Defaults to `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder requirement(String requirement) {
            return requirement(Output.of(requirement));
        }

        public ExecutionArgs build() {
            if ($.authenticator == null) {
                throw new MissingRequiredPropertyException("ExecutionArgs", "authenticator");
            }
            if ($.parentFlowAlias == null) {
                throw new MissingRequiredPropertyException("ExecutionArgs", "parentFlowAlias");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("ExecutionArgs", "realmId");
            }
            return $;
        }
    }

}
