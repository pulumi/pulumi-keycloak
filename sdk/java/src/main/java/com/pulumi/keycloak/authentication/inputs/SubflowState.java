// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.authentication.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubflowState extends com.pulumi.resources.ResourceArgs {

    public static final SubflowState Empty = new SubflowState();

    /**
     * The alias for this authentication subflow.
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return The alias for this authentication subflow.
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * The name of the authenticator. Might be needed to be set with certain custom subflows with specific
     * authenticators. In general this will remain empty.
     * 
     */
    @Import(name="authenticator")
    private @Nullable Output<String> authenticator;

    /**
     * @return The name of the authenticator. Might be needed to be set with certain custom subflows with specific
     * authenticators. In general this will remain empty.
     * 
     */
    public Optional<Output<String>> authenticator() {
        return Optional.ofNullable(this.authenticator);
    }

    /**
     * A description for the authentication subflow.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the authentication subflow.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The alias for the parent authentication flow.
     * 
     */
    @Import(name="parentFlowAlias")
    private @Nullable Output<String> parentFlowAlias;

    /**
     * @return The alias for the parent authentication flow.
     * 
     */
    public Optional<Output<String>> parentFlowAlias() {
        return Optional.ofNullable(this.parentFlowAlias);
    }

    /**
     * The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
     * and `client-flow`. Defaults to `basic-flow`.
     * 
     */
    @Import(name="providerId")
    private @Nullable Output<String> providerId;

    /**
     * @return The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
     * and `client-flow`. Defaults to `basic-flow`.
     * 
     */
    public Optional<Output<String>> providerId() {
        return Optional.ofNullable(this.providerId);
    }

    /**
     * The realm that the authentication subflow exists in.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm that the authentication subflow exists in.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    /**
     * The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
     * or `DISABLED`. Defaults to `DISABLED`.
     * 
     */
    @Import(name="requirement")
    private @Nullable Output<String> requirement;

    /**
     * @return The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
     * or `DISABLED`. Defaults to `DISABLED`.
     * 
     */
    public Optional<Output<String>> requirement() {
        return Optional.ofNullable(this.requirement);
    }

    private SubflowState() {}

    private SubflowState(SubflowState $) {
        this.alias = $.alias;
        this.authenticator = $.authenticator;
        this.description = $.description;
        this.parentFlowAlias = $.parentFlowAlias;
        this.priority = $.priority;
        this.providerId = $.providerId;
        this.realmId = $.realmId;
        this.requirement = $.requirement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubflowState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubflowState $;

        public Builder() {
            $ = new SubflowState();
        }

        public Builder(SubflowState defaults) {
            $ = new SubflowState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alias The alias for this authentication subflow.
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias The alias for this authentication subflow.
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param authenticator The name of the authenticator. Might be needed to be set with certain custom subflows with specific
         * authenticators. In general this will remain empty.
         * 
         * @return builder
         * 
         */
        public Builder authenticator(@Nullable Output<String> authenticator) {
            $.authenticator = authenticator;
            return this;
        }

        /**
         * @param authenticator The name of the authenticator. Might be needed to be set with certain custom subflows with specific
         * authenticators. In general this will remain empty.
         * 
         * @return builder
         * 
         */
        public Builder authenticator(String authenticator) {
            return authenticator(Output.of(authenticator));
        }

        /**
         * @param description A description for the authentication subflow.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the authentication subflow.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param parentFlowAlias The alias for the parent authentication flow.
         * 
         * @return builder
         * 
         */
        public Builder parentFlowAlias(@Nullable Output<String> parentFlowAlias) {
            $.parentFlowAlias = parentFlowAlias;
            return this;
        }

        /**
         * @param parentFlowAlias The alias for the parent authentication flow.
         * 
         * @return builder
         * 
         */
        public Builder parentFlowAlias(String parentFlowAlias) {
            return parentFlowAlias(Output.of(parentFlowAlias));
        }

        /**
         * @param priority The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The authenticator priority. Lower values will be executed prior higher values (Only supported by Keycloak &gt;= 25).
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param providerId The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
         * and `client-flow`. Defaults to `basic-flow`.
         * 
         * @return builder
         * 
         */
        public Builder providerId(@Nullable Output<String> providerId) {
            $.providerId = providerId;
            return this;
        }

        /**
         * @param providerId The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
         * and `client-flow`. Defaults to `basic-flow`.
         * 
         * @return builder
         * 
         */
        public Builder providerId(String providerId) {
            return providerId(Output.of(providerId));
        }

        /**
         * @param realmId The realm that the authentication subflow exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm that the authentication subflow exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param requirement The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
         * or `DISABLED`. Defaults to `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder requirement(@Nullable Output<String> requirement) {
            $.requirement = requirement;
            return this;
        }

        /**
         * @param requirement The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
         * or `DISABLED`. Defaults to `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder requirement(String requirement) {
            return requirement(Output.of(requirement));
        }

        public SubflowState build() {
            return $;
        }
    }

}
