// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.ldap;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GroupMapperArgs extends com.pulumi.resources.ResourceArgs {

    public static final GroupMapperArgs Empty = new GroupMapperArgs();

    @Import(name="dropNonExistingGroupsDuringSync")
    private @Nullable Output<Boolean> dropNonExistingGroupsDuringSync;

    public Optional<Output<Boolean>> dropNonExistingGroupsDuringSync() {
        return Optional.ofNullable(this.dropNonExistingGroupsDuringSync);
    }

    @Import(name="groupNameLdapAttribute", required=true)
    private Output<String> groupNameLdapAttribute;

    public Output<String> groupNameLdapAttribute() {
        return this.groupNameLdapAttribute;
    }

    @Import(name="groupObjectClasses", required=true)
    private Output<List<String>> groupObjectClasses;

    public Output<List<String>> groupObjectClasses() {
        return this.groupObjectClasses;
    }

    @Import(name="groupsLdapFilter")
    private @Nullable Output<String> groupsLdapFilter;

    public Optional<Output<String>> groupsLdapFilter() {
        return Optional.ofNullable(this.groupsLdapFilter);
    }

    @Import(name="groupsPath")
    private @Nullable Output<String> groupsPath;

    public Optional<Output<String>> groupsPath() {
        return Optional.ofNullable(this.groupsPath);
    }

    @Import(name="ignoreMissingGroups")
    private @Nullable Output<Boolean> ignoreMissingGroups;

    public Optional<Output<Boolean>> ignoreMissingGroups() {
        return Optional.ofNullable(this.ignoreMissingGroups);
    }

    @Import(name="ldapGroupsDn", required=true)
    private Output<String> ldapGroupsDn;

    public Output<String> ldapGroupsDn() {
        return this.ldapGroupsDn;
    }

    /**
     * The ldap user federation provider to attach this mapper to.
     * 
     */
    @Import(name="ldapUserFederationId", required=true)
    private Output<String> ldapUserFederationId;

    /**
     * @return The ldap user federation provider to attach this mapper to.
     * 
     */
    public Output<String> ldapUserFederationId() {
        return this.ldapUserFederationId;
    }

    @Import(name="mappedGroupAttributes")
    private @Nullable Output<List<String>> mappedGroupAttributes;

    public Optional<Output<List<String>>> mappedGroupAttributes() {
        return Optional.ofNullable(this.mappedGroupAttributes);
    }

    @Import(name="memberofLdapAttribute")
    private @Nullable Output<String> memberofLdapAttribute;

    public Optional<Output<String>> memberofLdapAttribute() {
        return Optional.ofNullable(this.memberofLdapAttribute);
    }

    @Import(name="membershipAttributeType")
    private @Nullable Output<String> membershipAttributeType;

    public Optional<Output<String>> membershipAttributeType() {
        return Optional.ofNullable(this.membershipAttributeType);
    }

    @Import(name="membershipLdapAttribute", required=true)
    private Output<String> membershipLdapAttribute;

    public Output<String> membershipLdapAttribute() {
        return this.membershipLdapAttribute;
    }

    @Import(name="membershipUserLdapAttribute", required=true)
    private Output<String> membershipUserLdapAttribute;

    public Output<String> membershipUserLdapAttribute() {
        return this.membershipUserLdapAttribute;
    }

    @Import(name="mode")
    private @Nullable Output<String> mode;

    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Display name of the mapper when displayed in the console.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name of the mapper when displayed in the console.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="preserveGroupInheritance")
    private @Nullable Output<Boolean> preserveGroupInheritance;

    public Optional<Output<Boolean>> preserveGroupInheritance() {
        return Optional.ofNullable(this.preserveGroupInheritance);
    }

    /**
     * The realm in which the ldap user federation provider exists.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm in which the ldap user federation provider exists.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    @Import(name="userRolesRetrieveStrategy")
    private @Nullable Output<String> userRolesRetrieveStrategy;

    public Optional<Output<String>> userRolesRetrieveStrategy() {
        return Optional.ofNullable(this.userRolesRetrieveStrategy);
    }

    private GroupMapperArgs() {}

    private GroupMapperArgs(GroupMapperArgs $) {
        this.dropNonExistingGroupsDuringSync = $.dropNonExistingGroupsDuringSync;
        this.groupNameLdapAttribute = $.groupNameLdapAttribute;
        this.groupObjectClasses = $.groupObjectClasses;
        this.groupsLdapFilter = $.groupsLdapFilter;
        this.groupsPath = $.groupsPath;
        this.ignoreMissingGroups = $.ignoreMissingGroups;
        this.ldapGroupsDn = $.ldapGroupsDn;
        this.ldapUserFederationId = $.ldapUserFederationId;
        this.mappedGroupAttributes = $.mappedGroupAttributes;
        this.memberofLdapAttribute = $.memberofLdapAttribute;
        this.membershipAttributeType = $.membershipAttributeType;
        this.membershipLdapAttribute = $.membershipLdapAttribute;
        this.membershipUserLdapAttribute = $.membershipUserLdapAttribute;
        this.mode = $.mode;
        this.name = $.name;
        this.preserveGroupInheritance = $.preserveGroupInheritance;
        this.realmId = $.realmId;
        this.userRolesRetrieveStrategy = $.userRolesRetrieveStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupMapperArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupMapperArgs $;

        public Builder() {
            $ = new GroupMapperArgs();
        }

        public Builder(GroupMapperArgs defaults) {
            $ = new GroupMapperArgs(Objects.requireNonNull(defaults));
        }

        public Builder dropNonExistingGroupsDuringSync(@Nullable Output<Boolean> dropNonExistingGroupsDuringSync) {
            $.dropNonExistingGroupsDuringSync = dropNonExistingGroupsDuringSync;
            return this;
        }

        public Builder dropNonExistingGroupsDuringSync(Boolean dropNonExistingGroupsDuringSync) {
            return dropNonExistingGroupsDuringSync(Output.of(dropNonExistingGroupsDuringSync));
        }

        public Builder groupNameLdapAttribute(Output<String> groupNameLdapAttribute) {
            $.groupNameLdapAttribute = groupNameLdapAttribute;
            return this;
        }

        public Builder groupNameLdapAttribute(String groupNameLdapAttribute) {
            return groupNameLdapAttribute(Output.of(groupNameLdapAttribute));
        }

        public Builder groupObjectClasses(Output<List<String>> groupObjectClasses) {
            $.groupObjectClasses = groupObjectClasses;
            return this;
        }

        public Builder groupObjectClasses(List<String> groupObjectClasses) {
            return groupObjectClasses(Output.of(groupObjectClasses));
        }

        public Builder groupObjectClasses(String... groupObjectClasses) {
            return groupObjectClasses(List.of(groupObjectClasses));
        }

        public Builder groupsLdapFilter(@Nullable Output<String> groupsLdapFilter) {
            $.groupsLdapFilter = groupsLdapFilter;
            return this;
        }

        public Builder groupsLdapFilter(String groupsLdapFilter) {
            return groupsLdapFilter(Output.of(groupsLdapFilter));
        }

        public Builder groupsPath(@Nullable Output<String> groupsPath) {
            $.groupsPath = groupsPath;
            return this;
        }

        public Builder groupsPath(String groupsPath) {
            return groupsPath(Output.of(groupsPath));
        }

        public Builder ignoreMissingGroups(@Nullable Output<Boolean> ignoreMissingGroups) {
            $.ignoreMissingGroups = ignoreMissingGroups;
            return this;
        }

        public Builder ignoreMissingGroups(Boolean ignoreMissingGroups) {
            return ignoreMissingGroups(Output.of(ignoreMissingGroups));
        }

        public Builder ldapGroupsDn(Output<String> ldapGroupsDn) {
            $.ldapGroupsDn = ldapGroupsDn;
            return this;
        }

        public Builder ldapGroupsDn(String ldapGroupsDn) {
            return ldapGroupsDn(Output.of(ldapGroupsDn));
        }

        /**
         * @param ldapUserFederationId The ldap user federation provider to attach this mapper to.
         * 
         * @return builder
         * 
         */
        public Builder ldapUserFederationId(Output<String> ldapUserFederationId) {
            $.ldapUserFederationId = ldapUserFederationId;
            return this;
        }

        /**
         * @param ldapUserFederationId The ldap user federation provider to attach this mapper to.
         * 
         * @return builder
         * 
         */
        public Builder ldapUserFederationId(String ldapUserFederationId) {
            return ldapUserFederationId(Output.of(ldapUserFederationId));
        }

        public Builder mappedGroupAttributes(@Nullable Output<List<String>> mappedGroupAttributes) {
            $.mappedGroupAttributes = mappedGroupAttributes;
            return this;
        }

        public Builder mappedGroupAttributes(List<String> mappedGroupAttributes) {
            return mappedGroupAttributes(Output.of(mappedGroupAttributes));
        }

        public Builder mappedGroupAttributes(String... mappedGroupAttributes) {
            return mappedGroupAttributes(List.of(mappedGroupAttributes));
        }

        public Builder memberofLdapAttribute(@Nullable Output<String> memberofLdapAttribute) {
            $.memberofLdapAttribute = memberofLdapAttribute;
            return this;
        }

        public Builder memberofLdapAttribute(String memberofLdapAttribute) {
            return memberofLdapAttribute(Output.of(memberofLdapAttribute));
        }

        public Builder membershipAttributeType(@Nullable Output<String> membershipAttributeType) {
            $.membershipAttributeType = membershipAttributeType;
            return this;
        }

        public Builder membershipAttributeType(String membershipAttributeType) {
            return membershipAttributeType(Output.of(membershipAttributeType));
        }

        public Builder membershipLdapAttribute(Output<String> membershipLdapAttribute) {
            $.membershipLdapAttribute = membershipLdapAttribute;
            return this;
        }

        public Builder membershipLdapAttribute(String membershipLdapAttribute) {
            return membershipLdapAttribute(Output.of(membershipLdapAttribute));
        }

        public Builder membershipUserLdapAttribute(Output<String> membershipUserLdapAttribute) {
            $.membershipUserLdapAttribute = membershipUserLdapAttribute;
            return this;
        }

        public Builder membershipUserLdapAttribute(String membershipUserLdapAttribute) {
            return membershipUserLdapAttribute(Output.of(membershipUserLdapAttribute));
        }

        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Display name of the mapper when displayed in the console.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name of the mapper when displayed in the console.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder preserveGroupInheritance(@Nullable Output<Boolean> preserveGroupInheritance) {
            $.preserveGroupInheritance = preserveGroupInheritance;
            return this;
        }

        public Builder preserveGroupInheritance(Boolean preserveGroupInheritance) {
            return preserveGroupInheritance(Output.of(preserveGroupInheritance));
        }

        /**
         * @param realmId The realm in which the ldap user federation provider exists.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm in which the ldap user federation provider exists.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public Builder userRolesRetrieveStrategy(@Nullable Output<String> userRolesRetrieveStrategy) {
            $.userRolesRetrieveStrategy = userRolesRetrieveStrategy;
            return this;
        }

        public Builder userRolesRetrieveStrategy(String userRolesRetrieveStrategy) {
            return userRolesRetrieveStrategy(Output.of(userRolesRetrieveStrategy));
        }

        public GroupMapperArgs build() {
            if ($.groupNameLdapAttribute == null) {
                throw new MissingRequiredPropertyException("GroupMapperArgs", "groupNameLdapAttribute");
            }
            if ($.groupObjectClasses == null) {
                throw new MissingRequiredPropertyException("GroupMapperArgs", "groupObjectClasses");
            }
            if ($.ldapGroupsDn == null) {
                throw new MissingRequiredPropertyException("GroupMapperArgs", "ldapGroupsDn");
            }
            if ($.ldapUserFederationId == null) {
                throw new MissingRequiredPropertyException("GroupMapperArgs", "ldapUserFederationId");
            }
            if ($.membershipLdapAttribute == null) {
                throw new MissingRequiredPropertyException("GroupMapperArgs", "membershipLdapAttribute");
            }
            if ($.membershipUserLdapAttribute == null) {
                throw new MissingRequiredPropertyException("GroupMapperArgs", "membershipUserLdapAttribute");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("GroupMapperArgs", "realmId");
            }
            return $;
        }
    }

}
