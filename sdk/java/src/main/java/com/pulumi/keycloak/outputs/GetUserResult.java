// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return (Computed) A map representing attributes for the user
     * 
     */
    private Map<String,String> attributes;
    /**
     * @return (Computed) The user&#39;s email.
     * 
     */
    private String email;
    /**
     * @return (Computed) Whether the email address was validated or not. Default to `false`.
     * 
     */
    private Boolean emailVerified;
    /**
     * @return (Computed) When false, this user cannot log in. Defaults to `true`.
     * 
     */
    private Boolean enabled;
    /**
     * @return (Computed) The user&#39;s federated identities, if applicable. This block has the following schema:
     * 
     */
    private List<String> federatedIdentities;
    /**
     * @return (Computed) The user&#39;s first name.
     * 
     */
    private String firstName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) The user&#39;s last name.
     * 
     */
    private String lastName;
    private String realmId;
    private List<String> requiredActions;
    private String username;

    private GetUserResult() {}
    /**
     * @return (Computed) A map representing attributes for the user
     * 
     */
    public Map<String,String> attributes() {
        return this.attributes;
    }
    /**
     * @return (Computed) The user&#39;s email.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return (Computed) Whether the email address was validated or not. Default to `false`.
     * 
     */
    public Boolean emailVerified() {
        return this.emailVerified;
    }
    /**
     * @return (Computed) When false, this user cannot log in. Defaults to `true`.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return (Computed) The user&#39;s federated identities, if applicable. This block has the following schema:
     * 
     */
    public List<String> federatedIdentities() {
        return this.federatedIdentities;
    }
    /**
     * @return (Computed) The user&#39;s first name.
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) The user&#39;s last name.
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    public String realmId() {
        return this.realmId;
    }
    public List<String> requiredActions() {
        return this.requiredActions;
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> attributes;
        private String email;
        private Boolean emailVerified;
        private Boolean enabled;
        private List<String> federatedIdentities;
        private String firstName;
        private String id;
        private String lastName;
        private String realmId;
        private List<String> requiredActions;
        private String username;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.email = defaults.email;
    	      this.emailVerified = defaults.emailVerified;
    	      this.enabled = defaults.enabled;
    	      this.federatedIdentities = defaults.federatedIdentities;
    	      this.firstName = defaults.firstName;
    	      this.id = defaults.id;
    	      this.lastName = defaults.lastName;
    	      this.realmId = defaults.realmId;
    	      this.requiredActions = defaults.requiredActions;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder attributes(Map<String,String> attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder emailVerified(Boolean emailVerified) {
            if (emailVerified == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "emailVerified");
            }
            this.emailVerified = emailVerified;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder federatedIdentities(List<String> federatedIdentities) {
            if (federatedIdentities == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "federatedIdentities");
            }
            this.federatedIdentities = federatedIdentities;
            return this;
        }
        public Builder federatedIdentities(String... federatedIdentities) {
            return federatedIdentities(List.of(federatedIdentities));
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder realmId(String realmId) {
            if (realmId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "realmId");
            }
            this.realmId = realmId;
            return this;
        }
        @CustomType.Setter
        public Builder requiredActions(List<String> requiredActions) {
            if (requiredActions == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "requiredActions");
            }
            this.requiredActions = requiredActions;
            return this;
        }
        public Builder requiredActions(String... requiredActions) {
            return requiredActions(List.of(requiredActions));
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.attributes = attributes;
            _resultValue.email = email;
            _resultValue.emailVerified = emailVerified;
            _resultValue.enabled = enabled;
            _resultValue.federatedIdentities = federatedIdentities;
            _resultValue.firstName = firstName;
            _resultValue.id = id;
            _resultValue.lastName = lastName;
            _resultValue.realmId = realmId;
            _resultValue.requiredActions = requiredActions;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
