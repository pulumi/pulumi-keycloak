// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.saml.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.keycloak.saml.outputs.GetClientAuthenticationFlowBindingOverride;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClientResult {
    private String assertionConsumerPostUrl;
    private String assertionConsumerRedirectUrl;
    private List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
    private String baseUrl;
    private String canonicalizationMethod;
    private String clientId;
    private Boolean clientSignatureRequired;
    private String description;
    private Boolean enabled;
    private Boolean encryptAssertions;
    private String encryptionCertificate;
    private String encryptionCertificateSha1;
    private Map<String,Object> extraConfig;
    private Boolean forceNameIdFormat;
    private Boolean forcePostBinding;
    private Boolean frontChannelLogout;
    private Boolean fullScopeAllowed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String idpInitiatedSsoRelayState;
    private String idpInitiatedSsoUrlName;
    private Boolean includeAuthnStatement;
    private String loginTheme;
    private String logoutServicePostBindingUrl;
    private String logoutServiceRedirectBindingUrl;
    private String masterSamlProcessingUrl;
    private String name;
    private String nameIdFormat;
    private String realmId;
    private String rootUrl;
    private String samlSignatureKeyName;
    private Boolean signAssertions;
    private Boolean signDocuments;
    private String signatureAlgorithm;
    private String signatureKeyName;
    private String signingCertificate;
    private String signingCertificateSha1;
    private String signingPrivateKey;
    private String signingPrivateKeySha1;
    private List<String> validRedirectUris;

    private GetClientResult() {}
    public String assertionConsumerPostUrl() {
        return this.assertionConsumerPostUrl;
    }
    public String assertionConsumerRedirectUrl() {
        return this.assertionConsumerRedirectUrl;
    }
    public List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides() {
        return this.authenticationFlowBindingOverrides;
    }
    public String baseUrl() {
        return this.baseUrl;
    }
    public String canonicalizationMethod() {
        return this.canonicalizationMethod;
    }
    public String clientId() {
        return this.clientId;
    }
    public Boolean clientSignatureRequired() {
        return this.clientSignatureRequired;
    }
    public String description() {
        return this.description;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean encryptAssertions() {
        return this.encryptAssertions;
    }
    public String encryptionCertificate() {
        return this.encryptionCertificate;
    }
    public String encryptionCertificateSha1() {
        return this.encryptionCertificateSha1;
    }
    public Map<String,Object> extraConfig() {
        return this.extraConfig;
    }
    public Boolean forceNameIdFormat() {
        return this.forceNameIdFormat;
    }
    public Boolean forcePostBinding() {
        return this.forcePostBinding;
    }
    public Boolean frontChannelLogout() {
        return this.frontChannelLogout;
    }
    public Boolean fullScopeAllowed() {
        return this.fullScopeAllowed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String idpInitiatedSsoRelayState() {
        return this.idpInitiatedSsoRelayState;
    }
    public String idpInitiatedSsoUrlName() {
        return this.idpInitiatedSsoUrlName;
    }
    public Boolean includeAuthnStatement() {
        return this.includeAuthnStatement;
    }
    public String loginTheme() {
        return this.loginTheme;
    }
    public String logoutServicePostBindingUrl() {
        return this.logoutServicePostBindingUrl;
    }
    public String logoutServiceRedirectBindingUrl() {
        return this.logoutServiceRedirectBindingUrl;
    }
    public String masterSamlProcessingUrl() {
        return this.masterSamlProcessingUrl;
    }
    public String name() {
        return this.name;
    }
    public String nameIdFormat() {
        return this.nameIdFormat;
    }
    public String realmId() {
        return this.realmId;
    }
    public String rootUrl() {
        return this.rootUrl;
    }
    public String samlSignatureKeyName() {
        return this.samlSignatureKeyName;
    }
    public Boolean signAssertions() {
        return this.signAssertions;
    }
    public Boolean signDocuments() {
        return this.signDocuments;
    }
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    public String signatureKeyName() {
        return this.signatureKeyName;
    }
    public String signingCertificate() {
        return this.signingCertificate;
    }
    public String signingCertificateSha1() {
        return this.signingCertificateSha1;
    }
    public String signingPrivateKey() {
        return this.signingPrivateKey;
    }
    public String signingPrivateKeySha1() {
        return this.signingPrivateKeySha1;
    }
    public List<String> validRedirectUris() {
        return this.validRedirectUris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assertionConsumerPostUrl;
        private String assertionConsumerRedirectUrl;
        private List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
        private String baseUrl;
        private String canonicalizationMethod;
        private String clientId;
        private Boolean clientSignatureRequired;
        private String description;
        private Boolean enabled;
        private Boolean encryptAssertions;
        private String encryptionCertificate;
        private String encryptionCertificateSha1;
        private Map<String,Object> extraConfig;
        private Boolean forceNameIdFormat;
        private Boolean forcePostBinding;
        private Boolean frontChannelLogout;
        private Boolean fullScopeAllowed;
        private String id;
        private String idpInitiatedSsoRelayState;
        private String idpInitiatedSsoUrlName;
        private Boolean includeAuthnStatement;
        private String loginTheme;
        private String logoutServicePostBindingUrl;
        private String logoutServiceRedirectBindingUrl;
        private String masterSamlProcessingUrl;
        private String name;
        private String nameIdFormat;
        private String realmId;
        private String rootUrl;
        private String samlSignatureKeyName;
        private Boolean signAssertions;
        private Boolean signDocuments;
        private String signatureAlgorithm;
        private String signatureKeyName;
        private String signingCertificate;
        private String signingCertificateSha1;
        private String signingPrivateKey;
        private String signingPrivateKeySha1;
        private List<String> validRedirectUris;
        public Builder() {}
        public Builder(GetClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionConsumerPostUrl = defaults.assertionConsumerPostUrl;
    	      this.assertionConsumerRedirectUrl = defaults.assertionConsumerRedirectUrl;
    	      this.authenticationFlowBindingOverrides = defaults.authenticationFlowBindingOverrides;
    	      this.baseUrl = defaults.baseUrl;
    	      this.canonicalizationMethod = defaults.canonicalizationMethod;
    	      this.clientId = defaults.clientId;
    	      this.clientSignatureRequired = defaults.clientSignatureRequired;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.encryptAssertions = defaults.encryptAssertions;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.encryptionCertificateSha1 = defaults.encryptionCertificateSha1;
    	      this.extraConfig = defaults.extraConfig;
    	      this.forceNameIdFormat = defaults.forceNameIdFormat;
    	      this.forcePostBinding = defaults.forcePostBinding;
    	      this.frontChannelLogout = defaults.frontChannelLogout;
    	      this.fullScopeAllowed = defaults.fullScopeAllowed;
    	      this.id = defaults.id;
    	      this.idpInitiatedSsoRelayState = defaults.idpInitiatedSsoRelayState;
    	      this.idpInitiatedSsoUrlName = defaults.idpInitiatedSsoUrlName;
    	      this.includeAuthnStatement = defaults.includeAuthnStatement;
    	      this.loginTheme = defaults.loginTheme;
    	      this.logoutServicePostBindingUrl = defaults.logoutServicePostBindingUrl;
    	      this.logoutServiceRedirectBindingUrl = defaults.logoutServiceRedirectBindingUrl;
    	      this.masterSamlProcessingUrl = defaults.masterSamlProcessingUrl;
    	      this.name = defaults.name;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.realmId = defaults.realmId;
    	      this.rootUrl = defaults.rootUrl;
    	      this.samlSignatureKeyName = defaults.samlSignatureKeyName;
    	      this.signAssertions = defaults.signAssertions;
    	      this.signDocuments = defaults.signDocuments;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.signatureKeyName = defaults.signatureKeyName;
    	      this.signingCertificate = defaults.signingCertificate;
    	      this.signingCertificateSha1 = defaults.signingCertificateSha1;
    	      this.signingPrivateKey = defaults.signingPrivateKey;
    	      this.signingPrivateKeySha1 = defaults.signingPrivateKeySha1;
    	      this.validRedirectUris = defaults.validRedirectUris;
        }

        @CustomType.Setter
        public Builder assertionConsumerPostUrl(String assertionConsumerPostUrl) {
            this.assertionConsumerPostUrl = Objects.requireNonNull(assertionConsumerPostUrl);
            return this;
        }
        @CustomType.Setter
        public Builder assertionConsumerRedirectUrl(String assertionConsumerRedirectUrl) {
            this.assertionConsumerRedirectUrl = Objects.requireNonNull(assertionConsumerRedirectUrl);
            return this;
        }
        @CustomType.Setter
        public Builder authenticationFlowBindingOverrides(List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides) {
            this.authenticationFlowBindingOverrides = Objects.requireNonNull(authenticationFlowBindingOverrides);
            return this;
        }
        public Builder authenticationFlowBindingOverrides(GetClientAuthenticationFlowBindingOverride... authenticationFlowBindingOverrides) {
            return authenticationFlowBindingOverrides(List.of(authenticationFlowBindingOverrides));
        }
        @CustomType.Setter
        public Builder baseUrl(String baseUrl) {
            this.baseUrl = Objects.requireNonNull(baseUrl);
            return this;
        }
        @CustomType.Setter
        public Builder canonicalizationMethod(String canonicalizationMethod) {
            this.canonicalizationMethod = Objects.requireNonNull(canonicalizationMethod);
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        @CustomType.Setter
        public Builder clientSignatureRequired(Boolean clientSignatureRequired) {
            this.clientSignatureRequired = Objects.requireNonNull(clientSignatureRequired);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder encryptAssertions(Boolean encryptAssertions) {
            this.encryptAssertions = Objects.requireNonNull(encryptAssertions);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificate(String encryptionCertificate) {
            this.encryptionCertificate = Objects.requireNonNull(encryptionCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionCertificateSha1(String encryptionCertificateSha1) {
            this.encryptionCertificateSha1 = Objects.requireNonNull(encryptionCertificateSha1);
            return this;
        }
        @CustomType.Setter
        public Builder extraConfig(Map<String,Object> extraConfig) {
            this.extraConfig = Objects.requireNonNull(extraConfig);
            return this;
        }
        @CustomType.Setter
        public Builder forceNameIdFormat(Boolean forceNameIdFormat) {
            this.forceNameIdFormat = Objects.requireNonNull(forceNameIdFormat);
            return this;
        }
        @CustomType.Setter
        public Builder forcePostBinding(Boolean forcePostBinding) {
            this.forcePostBinding = Objects.requireNonNull(forcePostBinding);
            return this;
        }
        @CustomType.Setter
        public Builder frontChannelLogout(Boolean frontChannelLogout) {
            this.frontChannelLogout = Objects.requireNonNull(frontChannelLogout);
            return this;
        }
        @CustomType.Setter
        public Builder fullScopeAllowed(Boolean fullScopeAllowed) {
            this.fullScopeAllowed = Objects.requireNonNull(fullScopeAllowed);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder idpInitiatedSsoRelayState(String idpInitiatedSsoRelayState) {
            this.idpInitiatedSsoRelayState = Objects.requireNonNull(idpInitiatedSsoRelayState);
            return this;
        }
        @CustomType.Setter
        public Builder idpInitiatedSsoUrlName(String idpInitiatedSsoUrlName) {
            this.idpInitiatedSsoUrlName = Objects.requireNonNull(idpInitiatedSsoUrlName);
            return this;
        }
        @CustomType.Setter
        public Builder includeAuthnStatement(Boolean includeAuthnStatement) {
            this.includeAuthnStatement = Objects.requireNonNull(includeAuthnStatement);
            return this;
        }
        @CustomType.Setter
        public Builder loginTheme(String loginTheme) {
            this.loginTheme = Objects.requireNonNull(loginTheme);
            return this;
        }
        @CustomType.Setter
        public Builder logoutServicePostBindingUrl(String logoutServicePostBindingUrl) {
            this.logoutServicePostBindingUrl = Objects.requireNonNull(logoutServicePostBindingUrl);
            return this;
        }
        @CustomType.Setter
        public Builder logoutServiceRedirectBindingUrl(String logoutServiceRedirectBindingUrl) {
            this.logoutServiceRedirectBindingUrl = Objects.requireNonNull(logoutServiceRedirectBindingUrl);
            return this;
        }
        @CustomType.Setter
        public Builder masterSamlProcessingUrl(String masterSamlProcessingUrl) {
            this.masterSamlProcessingUrl = Objects.requireNonNull(masterSamlProcessingUrl);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameIdFormat(String nameIdFormat) {
            this.nameIdFormat = Objects.requireNonNull(nameIdFormat);
            return this;
        }
        @CustomType.Setter
        public Builder realmId(String realmId) {
            this.realmId = Objects.requireNonNull(realmId);
            return this;
        }
        @CustomType.Setter
        public Builder rootUrl(String rootUrl) {
            this.rootUrl = Objects.requireNonNull(rootUrl);
            return this;
        }
        @CustomType.Setter
        public Builder samlSignatureKeyName(String samlSignatureKeyName) {
            this.samlSignatureKeyName = Objects.requireNonNull(samlSignatureKeyName);
            return this;
        }
        @CustomType.Setter
        public Builder signAssertions(Boolean signAssertions) {
            this.signAssertions = Objects.requireNonNull(signAssertions);
            return this;
        }
        @CustomType.Setter
        public Builder signDocuments(Boolean signDocuments) {
            this.signDocuments = Objects.requireNonNull(signDocuments);
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            this.signatureAlgorithm = Objects.requireNonNull(signatureAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder signatureKeyName(String signatureKeyName) {
            this.signatureKeyName = Objects.requireNonNull(signatureKeyName);
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificate(String signingCertificate) {
            this.signingCertificate = Objects.requireNonNull(signingCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder signingCertificateSha1(String signingCertificateSha1) {
            this.signingCertificateSha1 = Objects.requireNonNull(signingCertificateSha1);
            return this;
        }
        @CustomType.Setter
        public Builder signingPrivateKey(String signingPrivateKey) {
            this.signingPrivateKey = Objects.requireNonNull(signingPrivateKey);
            return this;
        }
        @CustomType.Setter
        public Builder signingPrivateKeySha1(String signingPrivateKeySha1) {
            this.signingPrivateKeySha1 = Objects.requireNonNull(signingPrivateKeySha1);
            return this;
        }
        @CustomType.Setter
        public Builder validRedirectUris(List<String> validRedirectUris) {
            this.validRedirectUris = Objects.requireNonNull(validRedirectUris);
            return this;
        }
        public Builder validRedirectUris(String... validRedirectUris) {
            return validRedirectUris(List.of(validRedirectUris));
        }
        public GetClientResult build() {
            final var _resultValue = new GetClientResult();
            _resultValue.assertionConsumerPostUrl = assertionConsumerPostUrl;
            _resultValue.assertionConsumerRedirectUrl = assertionConsumerRedirectUrl;
            _resultValue.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
            _resultValue.baseUrl = baseUrl;
            _resultValue.canonicalizationMethod = canonicalizationMethod;
            _resultValue.clientId = clientId;
            _resultValue.clientSignatureRequired = clientSignatureRequired;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.encryptAssertions = encryptAssertions;
            _resultValue.encryptionCertificate = encryptionCertificate;
            _resultValue.encryptionCertificateSha1 = encryptionCertificateSha1;
            _resultValue.extraConfig = extraConfig;
            _resultValue.forceNameIdFormat = forceNameIdFormat;
            _resultValue.forcePostBinding = forcePostBinding;
            _resultValue.frontChannelLogout = frontChannelLogout;
            _resultValue.fullScopeAllowed = fullScopeAllowed;
            _resultValue.id = id;
            _resultValue.idpInitiatedSsoRelayState = idpInitiatedSsoRelayState;
            _resultValue.idpInitiatedSsoUrlName = idpInitiatedSsoUrlName;
            _resultValue.includeAuthnStatement = includeAuthnStatement;
            _resultValue.loginTheme = loginTheme;
            _resultValue.logoutServicePostBindingUrl = logoutServicePostBindingUrl;
            _resultValue.logoutServiceRedirectBindingUrl = logoutServiceRedirectBindingUrl;
            _resultValue.masterSamlProcessingUrl = masterSamlProcessingUrl;
            _resultValue.name = name;
            _resultValue.nameIdFormat = nameIdFormat;
            _resultValue.realmId = realmId;
            _resultValue.rootUrl = rootUrl;
            _resultValue.samlSignatureKeyName = samlSignatureKeyName;
            _resultValue.signAssertions = signAssertions;
            _resultValue.signDocuments = signDocuments;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.signatureKeyName = signatureKeyName;
            _resultValue.signingCertificate = signingCertificate;
            _resultValue.signingCertificateSha1 = signingCertificateSha1;
            _resultValue.signingPrivateKey = signingPrivateKey;
            _resultValue.signingPrivateKeySha1 = signingPrivateKeySha1;
            _resultValue.validRedirectUris = validRedirectUris;
            return _resultValue;
        }
    }
}
