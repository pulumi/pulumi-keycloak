// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttributeImporterIdentityProviderMapperState extends com.pulumi.resources.ResourceArgs {

    public static final AttributeImporterIdentityProviderMapperState Empty = new AttributeImporterIdentityProviderMapperState();

    /**
     * Attribute Friendly Name
     * 
     */
    @Import(name="attributeFriendlyName")
    private @Nullable Output<String> attributeFriendlyName;

    /**
     * @return Attribute Friendly Name
     * 
     */
    public Optional<Output<String>> attributeFriendlyName() {
        return Optional.ofNullable(this.attributeFriendlyName);
    }

    /**
     * Attribute Name
     * 
     */
    @Import(name="attributeName")
    private @Nullable Output<String> attributeName;

    /**
     * @return Attribute Name
     * 
     */
    public Optional<Output<String>> attributeName() {
        return Optional.ofNullable(this.attributeName);
    }

    /**
     * Claim Name
     * 
     */
    @Import(name="claimName")
    private @Nullable Output<String> claimName;

    /**
     * @return Claim Name
     * 
     */
    public Optional<Output<String>> claimName() {
        return Optional.ofNullable(this.claimName);
    }

    @Import(name="extraConfig")
    private @Nullable Output<Map<String,Object>> extraConfig;

    public Optional<Output<Map<String,Object>>> extraConfig() {
        return Optional.ofNullable(this.extraConfig);
    }

    /**
     * IDP Alias
     * 
     */
    @Import(name="identityProviderAlias")
    private @Nullable Output<String> identityProviderAlias;

    /**
     * @return IDP Alias
     * 
     */
    public Optional<Output<String>> identityProviderAlias() {
        return Optional.ofNullable(this.identityProviderAlias);
    }

    /**
     * IDP Mapper Name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return IDP Mapper Name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Realm Name
     * 
     */
    @Import(name="realm")
    private @Nullable Output<String> realm;

    /**
     * @return Realm Name
     * 
     */
    public Optional<Output<String>> realm() {
        return Optional.ofNullable(this.realm);
    }

    /**
     * User Attribute
     * 
     */
    @Import(name="userAttribute")
    private @Nullable Output<String> userAttribute;

    /**
     * @return User Attribute
     * 
     */
    public Optional<Output<String>> userAttribute() {
        return Optional.ofNullable(this.userAttribute);
    }

    private AttributeImporterIdentityProviderMapperState() {}

    private AttributeImporterIdentityProviderMapperState(AttributeImporterIdentityProviderMapperState $) {
        this.attributeFriendlyName = $.attributeFriendlyName;
        this.attributeName = $.attributeName;
        this.claimName = $.claimName;
        this.extraConfig = $.extraConfig;
        this.identityProviderAlias = $.identityProviderAlias;
        this.name = $.name;
        this.realm = $.realm;
        this.userAttribute = $.userAttribute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttributeImporterIdentityProviderMapperState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttributeImporterIdentityProviderMapperState $;

        public Builder() {
            $ = new AttributeImporterIdentityProviderMapperState();
        }

        public Builder(AttributeImporterIdentityProviderMapperState defaults) {
            $ = new AttributeImporterIdentityProviderMapperState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributeFriendlyName Attribute Friendly Name
         * 
         * @return builder
         * 
         */
        public Builder attributeFriendlyName(@Nullable Output<String> attributeFriendlyName) {
            $.attributeFriendlyName = attributeFriendlyName;
            return this;
        }

        /**
         * @param attributeFriendlyName Attribute Friendly Name
         * 
         * @return builder
         * 
         */
        public Builder attributeFriendlyName(String attributeFriendlyName) {
            return attributeFriendlyName(Output.of(attributeFriendlyName));
        }

        /**
         * @param attributeName Attribute Name
         * 
         * @return builder
         * 
         */
        public Builder attributeName(@Nullable Output<String> attributeName) {
            $.attributeName = attributeName;
            return this;
        }

        /**
         * @param attributeName Attribute Name
         * 
         * @return builder
         * 
         */
        public Builder attributeName(String attributeName) {
            return attributeName(Output.of(attributeName));
        }

        /**
         * @param claimName Claim Name
         * 
         * @return builder
         * 
         */
        public Builder claimName(@Nullable Output<String> claimName) {
            $.claimName = claimName;
            return this;
        }

        /**
         * @param claimName Claim Name
         * 
         * @return builder
         * 
         */
        public Builder claimName(String claimName) {
            return claimName(Output.of(claimName));
        }

        public Builder extraConfig(@Nullable Output<Map<String,Object>> extraConfig) {
            $.extraConfig = extraConfig;
            return this;
        }

        public Builder extraConfig(Map<String,Object> extraConfig) {
            return extraConfig(Output.of(extraConfig));
        }

        /**
         * @param identityProviderAlias IDP Alias
         * 
         * @return builder
         * 
         */
        public Builder identityProviderAlias(@Nullable Output<String> identityProviderAlias) {
            $.identityProviderAlias = identityProviderAlias;
            return this;
        }

        /**
         * @param identityProviderAlias IDP Alias
         * 
         * @return builder
         * 
         */
        public Builder identityProviderAlias(String identityProviderAlias) {
            return identityProviderAlias(Output.of(identityProviderAlias));
        }

        /**
         * @param name IDP Mapper Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name IDP Mapper Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param realm Realm Name
         * 
         * @return builder
         * 
         */
        public Builder realm(@Nullable Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm Realm Name
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        /**
         * @param userAttribute User Attribute
         * 
         * @return builder
         * 
         */
        public Builder userAttribute(@Nullable Output<String> userAttribute) {
            $.userAttribute = userAttribute;
            return this;
        }

        /**
         * @param userAttribute User Attribute
         * 
         * @return builder
         * 
         */
        public Builder userAttribute(String userAttribute) {
            return userAttribute(Output.of(userAttribute));
        }

        public AttributeImporterIdentityProviderMapperState build() {
            return $;
        }
    }

}
