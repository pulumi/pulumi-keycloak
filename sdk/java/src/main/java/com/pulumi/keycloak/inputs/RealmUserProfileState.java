// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.keycloak.inputs.RealmUserProfileAttributeArgs;
import com.pulumi.keycloak.inputs.RealmUserProfileGroupArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmUserProfileState extends com.pulumi.resources.ResourceArgs {

    public static final RealmUserProfileState Empty = new RealmUserProfileState();

    /**
     * An ordered list of attributes.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<List<RealmUserProfileAttributeArgs>> attributes;

    /**
     * @return An ordered list of attributes.
     * 
     */
    public Optional<Output<List<RealmUserProfileAttributeArgs>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * A list of groups.
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<RealmUserProfileGroupArgs>> groups;

    /**
     * @return A list of groups.
     * 
     */
    public Optional<Output<List<RealmUserProfileGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * The ID of the realm the user profile applies to.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The ID of the realm the user profile applies to.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    private RealmUserProfileState() {}

    private RealmUserProfileState(RealmUserProfileState $) {
        this.attributes = $.attributes;
        this.groups = $.groups;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmUserProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmUserProfileState $;

        public Builder() {
            $ = new RealmUserProfileState();
        }

        public Builder(RealmUserProfileState defaults) {
            $ = new RealmUserProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes An ordered list of attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<List<RealmUserProfileAttributeArgs>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes An ordered list of attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(List<RealmUserProfileAttributeArgs> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param attributes An ordered list of attributes.
         * 
         * @return builder
         * 
         */
        public Builder attributes(RealmUserProfileAttributeArgs... attributes) {
            return attributes(List.of(attributes));
        }

        /**
         * @param groups A list of groups.
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<RealmUserProfileGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups A list of groups.
         * 
         * @return builder
         * 
         */
        public Builder groups(List<RealmUserProfileGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups A list of groups.
         * 
         * @return builder
         * 
         */
        public Builder groups(RealmUserProfileGroupArgs... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param realmId The ID of the realm the user profile applies to.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The ID of the realm the user profile applies to.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public RealmUserProfileState build() {
            return $;
        }
    }

}
