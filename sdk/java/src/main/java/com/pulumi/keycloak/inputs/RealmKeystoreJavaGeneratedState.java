// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmKeystoreJavaGeneratedState extends com.pulumi.resources.ResourceArgs {

    public static final RealmKeystoreJavaGeneratedState Empty = new RealmKeystoreJavaGeneratedState();

    /**
     * When `false`, key in not used for signing. Defaults to `true`.
     * 
     */
    @Import(name="active")
    private @Nullable Output<Boolean> active;

    /**
     * @return When `false`, key in not used for signing. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> active() {
        return Optional.ofNullable(this.active);
    }

    /**
     * Intended algorithm for the key. Defaults to `RS256`
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Intended algorithm for the key. Defaults to `RS256`
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * When `false`, key is not accessible in this realm. Defaults to `true`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When `false`, key is not accessible in this realm. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Alias for the private key.
     * 
     */
    @Import(name="keyAlias")
    private @Nullable Output<String> keyAlias;

    /**
     * @return Alias for the private key.
     * 
     */
    public Optional<Output<String>> keyAlias() {
        return Optional.ofNullable(this.keyAlias);
    }

    /**
     * Password for the private key.
     * 
     */
    @Import(name="keyPassword")
    private @Nullable Output<String> keyPassword;

    /**
     * @return Password for the private key.
     * 
     */
    public Optional<Output<String>> keyPassword() {
        return Optional.ofNullable(this.keyPassword);
    }

    /**
     * Path to keys file on keycloak instance.
     * 
     */
    @Import(name="keystore")
    private @Nullable Output<String> keystore;

    /**
     * @return Path to keys file on keycloak instance.
     * 
     */
    public Optional<Output<String>> keystore() {
        return Optional.ofNullable(this.keystore);
    }

    /**
     * Password for the keys.
     * 
     */
    @Import(name="keystorePassword")
    private @Nullable Output<String> keystorePassword;

    /**
     * @return Password for the keys.
     * 
     */
    public Optional<Output<String>> keystorePassword() {
        return Optional.ofNullable(this.keystorePassword);
    }

    /**
     * Display name of provider when linked in admin console.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name of provider when linked in admin console.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Priority for the provider. Defaults to `0`
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority for the provider. Defaults to `0`
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The realm this keystore exists in.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The realm this keystore exists in.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    private RealmKeystoreJavaGeneratedState() {}

    private RealmKeystoreJavaGeneratedState(RealmKeystoreJavaGeneratedState $) {
        this.active = $.active;
        this.algorithm = $.algorithm;
        this.enabled = $.enabled;
        this.keyAlias = $.keyAlias;
        this.keyPassword = $.keyPassword;
        this.keystore = $.keystore;
        this.keystorePassword = $.keystorePassword;
        this.name = $.name;
        this.priority = $.priority;
        this.realmId = $.realmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmKeystoreJavaGeneratedState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmKeystoreJavaGeneratedState $;

        public Builder() {
            $ = new RealmKeystoreJavaGeneratedState();
        }

        public Builder(RealmKeystoreJavaGeneratedState defaults) {
            $ = new RealmKeystoreJavaGeneratedState(Objects.requireNonNull(defaults));
        }

        /**
         * @param active When `false`, key in not used for signing. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(@Nullable Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active When `false`, key in not used for signing. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param algorithm Intended algorithm for the key. Defaults to `RS256`
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Intended algorithm for the key. Defaults to `RS256`
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param enabled When `false`, key is not accessible in this realm. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When `false`, key is not accessible in this realm. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param keyAlias Alias for the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyAlias(@Nullable Output<String> keyAlias) {
            $.keyAlias = keyAlias;
            return this;
        }

        /**
         * @param keyAlias Alias for the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyAlias(String keyAlias) {
            return keyAlias(Output.of(keyAlias));
        }

        /**
         * @param keyPassword Password for the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyPassword(@Nullable Output<String> keyPassword) {
            $.keyPassword = keyPassword;
            return this;
        }

        /**
         * @param keyPassword Password for the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyPassword(String keyPassword) {
            return keyPassword(Output.of(keyPassword));
        }

        /**
         * @param keystore Path to keys file on keycloak instance.
         * 
         * @return builder
         * 
         */
        public Builder keystore(@Nullable Output<String> keystore) {
            $.keystore = keystore;
            return this;
        }

        /**
         * @param keystore Path to keys file on keycloak instance.
         * 
         * @return builder
         * 
         */
        public Builder keystore(String keystore) {
            return keystore(Output.of(keystore));
        }

        /**
         * @param keystorePassword Password for the keys.
         * 
         * @return builder
         * 
         */
        public Builder keystorePassword(@Nullable Output<String> keystorePassword) {
            $.keystorePassword = keystorePassword;
            return this;
        }

        /**
         * @param keystorePassword Password for the keys.
         * 
         * @return builder
         * 
         */
        public Builder keystorePassword(String keystorePassword) {
            return keystorePassword(Output.of(keystorePassword));
        }

        /**
         * @param name Display name of provider when linked in admin console.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name of provider when linked in admin console.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Priority for the provider. Defaults to `0`
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority for the provider. Defaults to `0`
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param realmId The realm this keystore exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm this keystore exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public RealmKeystoreJavaGeneratedState build() {
            return $;
        }
    }

}
