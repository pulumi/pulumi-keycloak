// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.saml;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserAttributeProtocolMapperArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAttributeProtocolMapperArgs Empty = new UserAttributeProtocolMapperArgs();

    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    @Import(name="clientScopeId")
    private @Nullable Output<String> clientScopeId;

    public Optional<Output<String>> clientScopeId() {
        return Optional.ofNullable(this.clientScopeId);
    }

    @Import(name="friendlyName")
    private @Nullable Output<String> friendlyName;

    public Optional<Output<String>> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="realmId", required=true)
    private Output<String> realmId;

    public Output<String> realmId() {
        return this.realmId;
    }

    @Import(name="samlAttributeName", required=true)
    private Output<String> samlAttributeName;

    public Output<String> samlAttributeName() {
        return this.samlAttributeName;
    }

    @Import(name="samlAttributeNameFormat", required=true)
    private Output<String> samlAttributeNameFormat;

    public Output<String> samlAttributeNameFormat() {
        return this.samlAttributeNameFormat;
    }

    @Import(name="userAttribute", required=true)
    private Output<String> userAttribute;

    public Output<String> userAttribute() {
        return this.userAttribute;
    }

    private UserAttributeProtocolMapperArgs() {}

    private UserAttributeProtocolMapperArgs(UserAttributeProtocolMapperArgs $) {
        this.clientId = $.clientId;
        this.clientScopeId = $.clientScopeId;
        this.friendlyName = $.friendlyName;
        this.name = $.name;
        this.realmId = $.realmId;
        this.samlAttributeName = $.samlAttributeName;
        this.samlAttributeNameFormat = $.samlAttributeNameFormat;
        this.userAttribute = $.userAttribute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAttributeProtocolMapperArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAttributeProtocolMapperArgs $;

        public Builder() {
            $ = new UserAttributeProtocolMapperArgs();
        }

        public Builder(UserAttributeProtocolMapperArgs defaults) {
            $ = new UserAttributeProtocolMapperArgs(Objects.requireNonNull(defaults));
        }

        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientScopeId(@Nullable Output<String> clientScopeId) {
            $.clientScopeId = clientScopeId;
            return this;
        }

        public Builder clientScopeId(String clientScopeId) {
            return clientScopeId(Output.of(clientScopeId));
        }

        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        public Builder friendlyName(String friendlyName) {
            return friendlyName(Output.of(friendlyName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        public Builder samlAttributeName(Output<String> samlAttributeName) {
            $.samlAttributeName = samlAttributeName;
            return this;
        }

        public Builder samlAttributeName(String samlAttributeName) {
            return samlAttributeName(Output.of(samlAttributeName));
        }

        public Builder samlAttributeNameFormat(Output<String> samlAttributeNameFormat) {
            $.samlAttributeNameFormat = samlAttributeNameFormat;
            return this;
        }

        public Builder samlAttributeNameFormat(String samlAttributeNameFormat) {
            return samlAttributeNameFormat(Output.of(samlAttributeNameFormat));
        }

        public Builder userAttribute(Output<String> userAttribute) {
            $.userAttribute = userAttribute;
            return this;
        }

        public Builder userAttribute(String userAttribute) {
            return userAttribute(Output.of(userAttribute));
        }

        public UserAttributeProtocolMapperArgs build() {
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("UserAttributeProtocolMapperArgs", "realmId");
            }
            if ($.samlAttributeName == null) {
                throw new MissingRequiredPropertyException("UserAttributeProtocolMapperArgs", "samlAttributeName");
            }
            if ($.samlAttributeNameFormat == null) {
                throw new MissingRequiredPropertyException("UserAttributeProtocolMapperArgs", "samlAttributeNameFormat");
            }
            if ($.userAttribute == null) {
                throw new MissingRequiredPropertyException("UserAttributeProtocolMapperArgs", "userAttribute");
            }
            return $;
        }
    }

}
