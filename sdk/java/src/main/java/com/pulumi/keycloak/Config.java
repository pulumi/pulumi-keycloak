// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("keycloak");
    public Optional<Map<String,String>> additionalHeaders() {
        return Codegen.objectProp("additionalHeaders", TypeShape.<Map<String,String>>builder(Map.class).addParameter(String.class).addParameter(String.class).build()).config(config).get();
    }
    public Optional<String> basePath() {
        return Codegen.stringProp("basePath").config(config).get();
    }
    public String clientId() {
        return Codegen.stringProp("clientId").config(config).require();
    }
    public Optional<String> clientSecret() {
        return Codegen.stringProp("clientSecret").config(config).get();
    }
/**
 * Timeout (in seconds) of the Keycloak client
 * 
 */
    public Optional<Integer> clientTimeout() {
        return Codegen.integerProp("clientTimeout").config(config).env("KEYCLOAK_CLIENT_TIMEOUT").def(5).get();
    }
/**
 * Whether or not to login to Keycloak instance on provider initialization
 * 
 */
    public Optional<Boolean> initialLogin() {
        return Codegen.booleanProp("initialLogin").config(config).get();
    }
    public Optional<String> password() {
        return Codegen.stringProp("password").config(config).get();
    }
    public Optional<String> realm() {
        return Codegen.stringProp("realm").config(config).get();
    }
/**
 * When true, the provider will treat the Keycloak instance as a Red Hat SSO server, specifically when parsing the version
 * returned from the /serverinfo API endpoint.
 * 
 */
    public Optional<Boolean> redHatSso() {
        return Codegen.booleanProp("redHatSso").config(config).get();
    }
/**
 * Allows x509 calls using an unknown CA certificate (for development purposes)
 * 
 */
    public Optional<String> rootCaCertificate() {
        return Codegen.stringProp("rootCaCertificate").config(config).get();
    }
/**
 * Allows ignoring insecure certificates when set to true. Defaults to false. Disabling security check is dangerous and
 * should be avoided.
 * 
 */
    public Optional<Boolean> tlsInsecureSkipVerify() {
        return Codegen.booleanProp("tlsInsecureSkipVerify").config(config).get();
    }
/**
 * The base URL of the Keycloak instance, before `/auth`
 * 
 */
    public String url() {
        return Codegen.stringProp("url").config(config).require();
    }
    public Optional<String> username() {
        return Codegen.stringProp("username").config(config).get();
    }
}
