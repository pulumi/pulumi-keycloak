// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmLocalizationState extends com.pulumi.resources.ResourceArgs {

    public static final RealmLocalizationState Empty = new RealmLocalizationState();

    /**
     * The locale (language code) the texts apply to.
     * 
     */
    @Import(name="locale")
    private @Nullable Output<String> locale;

    /**
     * @return The locale (language code) the texts apply to.
     * 
     */
    public Optional<Output<String>> locale() {
        return Optional.ofNullable(this.locale);
    }

    /**
     * The ID of the realm the user profile applies to.
     * 
     */
    @Import(name="realmId")
    private @Nullable Output<String> realmId;

    /**
     * @return The ID of the realm the user profile applies to.
     * 
     */
    public Optional<Output<String>> realmId() {
        return Optional.ofNullable(this.realmId);
    }

    /**
     * A map of translation keys to values.
     * 
     */
    @Import(name="texts")
    private @Nullable Output<Map<String,String>> texts;

    /**
     * @return A map of translation keys to values.
     * 
     */
    public Optional<Output<Map<String,String>>> texts() {
        return Optional.ofNullable(this.texts);
    }

    private RealmLocalizationState() {}

    private RealmLocalizationState(RealmLocalizationState $) {
        this.locale = $.locale;
        this.realmId = $.realmId;
        this.texts = $.texts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmLocalizationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmLocalizationState $;

        public Builder() {
            $ = new RealmLocalizationState();
        }

        public Builder(RealmLocalizationState defaults) {
            $ = new RealmLocalizationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param locale The locale (language code) the texts apply to.
         * 
         * @return builder
         * 
         */
        public Builder locale(@Nullable Output<String> locale) {
            $.locale = locale;
            return this;
        }

        /**
         * @param locale The locale (language code) the texts apply to.
         * 
         * @return builder
         * 
         */
        public Builder locale(String locale) {
            return locale(Output.of(locale));
        }

        /**
         * @param realmId The ID of the realm the user profile applies to.
         * 
         * @return builder
         * 
         */
        public Builder realmId(@Nullable Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The ID of the realm the user profile applies to.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param texts A map of translation keys to values.
         * 
         * @return builder
         * 
         */
        public Builder texts(@Nullable Output<Map<String,String>> texts) {
            $.texts = texts;
            return this;
        }

        /**
         * @param texts A map of translation keys to values.
         * 
         * @return builder
         * 
         */
        public Builder texts(Map<String,String> texts) {
            return texts(Output.of(texts));
        }

        public RealmLocalizationState build() {
            return $;
        }
    }

}
