// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.keycloak.Utilities;
import com.pulumi.keycloak.openid.ClientPolicyArgs;
import com.pulumi.keycloak.openid.inputs.ClientPolicyState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can be used to create client policy.
 * 
 * ## Example Usage
 * 
 * In this example, we&#39;ll create a new OpenID client, then enabled permissions for the client. A client without permissions disabled cannot be assigned by a client policy. We&#39;ll use the `keycloak.openid.ClientPolicy` resource to create a new client policy, which could be applied to many clients, for a realm and a resource_server_id.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.keycloak.Realm;
 * import com.pulumi.keycloak.RealmArgs;
 * import com.pulumi.keycloak.openid.Client;
 * import com.pulumi.keycloak.openid.ClientArgs;
 * import com.pulumi.keycloak.openid.ClientPermissions;
 * import com.pulumi.keycloak.openid.ClientPermissionsArgs;
 * import com.pulumi.keycloak.openid.OpenidFunctions;
 * import com.pulumi.keycloak.openid.inputs.GetClientArgs;
 * import com.pulumi.keycloak.openid.ClientPolicy;
 * import com.pulumi.keycloak.openid.ClientPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var realm = new Realm("realm", RealmArgs.builder()
 *             .realm("my-realm")
 *             .enabled(true)
 *             .build());
 * 
 *         var openidClient = new Client("openidClient", ClientArgs.builder()
 *             .clientId("openid_client")
 *             .name("openid_client")
 *             .realmId(realm.id())
 *             .accessType("CONFIDENTIAL")
 *             .serviceAccountsEnabled(true)
 *             .build());
 * 
 *         var myPermission = new ClientPermissions("myPermission", ClientPermissionsArgs.builder()
 *             .realmId(realm.id())
 *             .clientId(openidClient.id())
 *             .build());
 * 
 *         final var realmManagement = OpenidFunctions.getClient(GetClientArgs.builder()
 *             .realmId("my-realm")
 *             .clientId("realm-management")
 *             .build());
 * 
 *         var tokenExchange = new ClientPolicy("tokenExchange", ClientPolicyArgs.builder()
 *             .resourceServerId(realmManagement.applyValue(getClientResult -> getClientResult.id()))
 *             .realmId(realm.id())
 *             .name("my-policy")
 *             .logic("POSITIVE")
 *             .decisionStrategy("UNANIMOUS")
 *             .clients(openidClient.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="keycloak:openid/clientPolicy:ClientPolicy")
public class ClientPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The clients allowed by this client policy.
     * 
     */
    @Export(name="clients", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> clients;

    /**
     * @return The clients allowed by this client policy.
     * 
     */
    public Output<List<String>> clients() {
        return this.clients;
    }
    /**
     * (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     * 
     */
    @Export(name="decisionStrategy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> decisionStrategy;

    /**
     * @return (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     * 
     */
    public Output<Optional<String>> decisionStrategy() {
        return Codegen.optional(this.decisionStrategy);
    }
    /**
     * The description of this client policy.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of this client policy.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
     * 
     */
    @Export(name="logic", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> logic;

    /**
     * @return (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
     * 
     */
    public Output<Optional<String>> logic() {
        return Codegen.optional(this.logic);
    }
    /**
     * The name of this client policy.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of this client policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The realm this client policy exists within.
     * 
     */
    @Export(name="realmId", refs={String.class}, tree="[0]")
    private Output<String> realmId;

    /**
     * @return The realm this client policy exists within.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }
    /**
     * The ID of the resource server this client policy is attached to.
     * 
     */
    @Export(name="resourceServerId", refs={String.class}, tree="[0]")
    private Output<String> resourceServerId;

    /**
     * @return The ID of the resource server this client policy is attached to.
     * 
     */
    public Output<String> resourceServerId() {
        return this.resourceServerId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ClientPolicy(String name) {
        this(name, ClientPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ClientPolicy(String name, ClientPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ClientPolicy(String name, ClientPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:openid/clientPolicy:ClientPolicy", name, args == null ? ClientPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ClientPolicy(String name, Output<String> id, @Nullable ClientPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("keycloak:openid/clientPolicy:ClientPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ClientPolicy get(String name, Output<String> id, @Nullable ClientPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ClientPolicy(name, id, state, options);
    }
}
