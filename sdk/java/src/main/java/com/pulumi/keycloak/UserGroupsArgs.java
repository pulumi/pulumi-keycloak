// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserGroupsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserGroupsArgs Empty = new UserGroupsArgs();

    /**
     * Indicates if the list of the user&#39;s groups is exhaustive. In this case, groups that are manually added to the user will be removed. Defaults to `true`.
     * 
     */
    @Import(name="exhaustive")
    private @Nullable Output<Boolean> exhaustive;

    /**
     * @return Indicates if the list of the user&#39;s groups is exhaustive. In this case, groups that are manually added to the user will be removed. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> exhaustive() {
        return Optional.ofNullable(this.exhaustive);
    }

    /**
     * A list of group IDs that the user is member of.
     * 
     */
    @Import(name="groupIds", required=true)
    private Output<List<String>> groupIds;

    /**
     * @return A list of group IDs that the user is member of.
     * 
     */
    public Output<List<String>> groupIds() {
        return this.groupIds;
    }

    /**
     * The realm this group exists in.
     * 
     */
    @Import(name="realmId", required=true)
    private Output<String> realmId;

    /**
     * @return The realm this group exists in.
     * 
     */
    public Output<String> realmId() {
        return this.realmId;
    }

    /**
     * The ID of the user this resource should manage groups for.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The ID of the user this resource should manage groups for.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserGroupsArgs() {}

    private UserGroupsArgs(UserGroupsArgs $) {
        this.exhaustive = $.exhaustive;
        this.groupIds = $.groupIds;
        this.realmId = $.realmId;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGroupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGroupsArgs $;

        public Builder() {
            $ = new UserGroupsArgs();
        }

        public Builder(UserGroupsArgs defaults) {
            $ = new UserGroupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exhaustive Indicates if the list of the user&#39;s groups is exhaustive. In this case, groups that are manually added to the user will be removed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder exhaustive(@Nullable Output<Boolean> exhaustive) {
            $.exhaustive = exhaustive;
            return this;
        }

        /**
         * @param exhaustive Indicates if the list of the user&#39;s groups is exhaustive. In this case, groups that are manually added to the user will be removed. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder exhaustive(Boolean exhaustive) {
            return exhaustive(Output.of(exhaustive));
        }

        /**
         * @param groupIds A list of group IDs that the user is member of.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(Output<List<String>> groupIds) {
            $.groupIds = groupIds;
            return this;
        }

        /**
         * @param groupIds A list of group IDs that the user is member of.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(List<String> groupIds) {
            return groupIds(Output.of(groupIds));
        }

        /**
         * @param groupIds A list of group IDs that the user is member of.
         * 
         * @return builder
         * 
         */
        public Builder groupIds(String... groupIds) {
            return groupIds(List.of(groupIds));
        }

        /**
         * @param realmId The realm this group exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(Output<String> realmId) {
            $.realmId = realmId;
            return this;
        }

        /**
         * @param realmId The realm this group exists in.
         * 
         * @return builder
         * 
         */
        public Builder realmId(String realmId) {
            return realmId(Output.of(realmId));
        }

        /**
         * @param userId The ID of the user this resource should manage groups for.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the user this resource should manage groups for.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserGroupsArgs build() {
            if ($.groupIds == null) {
                throw new MissingRequiredPropertyException("UserGroupsArgs", "groupIds");
            }
            if ($.realmId == null) {
                throw new MissingRequiredPropertyException("UserGroupsArgs", "realmId");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("UserGroupsArgs", "userId");
            }
            return $;
        }
    }

}
