// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.keycloak.outputs.GetRealmSmtpServerAuth;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRealmSmtpServer {
    private List<GetRealmSmtpServerAuth> auths;
    private String envelopeFrom;
    private String from;
    private String fromDisplayName;
    private String host;
    private String port;
    private String replyTo;
    private String replyToDisplayName;
    private Boolean ssl;
    private Boolean starttls;

    private GetRealmSmtpServer() {}
    public List<GetRealmSmtpServerAuth> auths() {
        return this.auths;
    }
    public String envelopeFrom() {
        return this.envelopeFrom;
    }
    public String from() {
        return this.from;
    }
    public String fromDisplayName() {
        return this.fromDisplayName;
    }
    public String host() {
        return this.host;
    }
    public String port() {
        return this.port;
    }
    public String replyTo() {
        return this.replyTo;
    }
    public String replyToDisplayName() {
        return this.replyToDisplayName;
    }
    public Boolean ssl() {
        return this.ssl;
    }
    public Boolean starttls() {
        return this.starttls;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRealmSmtpServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRealmSmtpServerAuth> auths;
        private String envelopeFrom;
        private String from;
        private String fromDisplayName;
        private String host;
        private String port;
        private String replyTo;
        private String replyToDisplayName;
        private Boolean ssl;
        private Boolean starttls;
        public Builder() {}
        public Builder(GetRealmSmtpServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auths = defaults.auths;
    	      this.envelopeFrom = defaults.envelopeFrom;
    	      this.from = defaults.from;
    	      this.fromDisplayName = defaults.fromDisplayName;
    	      this.host = defaults.host;
    	      this.port = defaults.port;
    	      this.replyTo = defaults.replyTo;
    	      this.replyToDisplayName = defaults.replyToDisplayName;
    	      this.ssl = defaults.ssl;
    	      this.starttls = defaults.starttls;
        }

        @CustomType.Setter
        public Builder auths(List<GetRealmSmtpServerAuth> auths) {
            if (auths == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "auths");
            }
            this.auths = auths;
            return this;
        }
        public Builder auths(GetRealmSmtpServerAuth... auths) {
            return auths(List.of(auths));
        }
        @CustomType.Setter
        public Builder envelopeFrom(String envelopeFrom) {
            if (envelopeFrom == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "envelopeFrom");
            }
            this.envelopeFrom = envelopeFrom;
            return this;
        }
        @CustomType.Setter
        public Builder from(String from) {
            if (from == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "from");
            }
            this.from = from;
            return this;
        }
        @CustomType.Setter
        public Builder fromDisplayName(String fromDisplayName) {
            if (fromDisplayName == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "fromDisplayName");
            }
            this.fromDisplayName = fromDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder replyTo(String replyTo) {
            if (replyTo == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "replyTo");
            }
            this.replyTo = replyTo;
            return this;
        }
        @CustomType.Setter
        public Builder replyToDisplayName(String replyToDisplayName) {
            if (replyToDisplayName == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "replyToDisplayName");
            }
            this.replyToDisplayName = replyToDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(Boolean ssl) {
            if (ssl == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "ssl");
            }
            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder starttls(Boolean starttls) {
            if (starttls == null) {
              throw new MissingRequiredPropertyException("GetRealmSmtpServer", "starttls");
            }
            this.starttls = starttls;
            return this;
        }
        public GetRealmSmtpServer build() {
            final var _resultValue = new GetRealmSmtpServer();
            _resultValue.auths = auths;
            _resultValue.envelopeFrom = envelopeFrom;
            _resultValue.from = from;
            _resultValue.fromDisplayName = fromDisplayName;
            _resultValue.host = host;
            _resultValue.port = port;
            _resultValue.replyTo = replyTo;
            _resultValue.replyToDisplayName = replyToDisplayName;
            _resultValue.ssl = ssl;
            _resultValue.starttls = starttls;
            return _resultValue;
        }
    }
}
