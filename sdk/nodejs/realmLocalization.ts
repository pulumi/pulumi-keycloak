// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RealmLocalization extends pulumi.CustomResource {
    /**
     * Get an existing RealmLocalization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmLocalizationState, opts?: pulumi.CustomResourceOptions): RealmLocalization {
        return new RealmLocalization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realmLocalization:RealmLocalization';

    /**
     * Returns true if the given object is an instance of RealmLocalization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RealmLocalization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RealmLocalization.__pulumiType;
    }

    /**
     * The locale for the localization texts.
     */
    public readonly locale!: pulumi.Output<string>;
    /**
     * The realm in which the texts exists.
     */
    public readonly realmId!: pulumi.Output<string>;
    /**
     * The mapping of localization texts keys to values.
     */
    public readonly texts!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a RealmLocalization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmLocalizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmLocalizationArgs | RealmLocalizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RealmLocalizationState | undefined;
            resourceInputs["locale"] = state ? state.locale : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["texts"] = state ? state.texts : undefined;
        } else {
            const args = argsOrState as RealmLocalizationArgs | undefined;
            if ((!args || args.locale === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locale'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["locale"] = args ? args.locale : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["texts"] = args ? args.texts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RealmLocalization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RealmLocalization resources.
 */
export interface RealmLocalizationState {
    /**
     * The locale for the localization texts.
     */
    locale?: pulumi.Input<string>;
    /**
     * The realm in which the texts exists.
     */
    realmId?: pulumi.Input<string>;
    /**
     * The mapping of localization texts keys to values.
     */
    texts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RealmLocalization resource.
 */
export interface RealmLocalizationArgs {
    /**
     * The locale for the localization texts.
     */
    locale: pulumi.Input<string>;
    /**
     * The realm in which the texts exists.
     */
    realmId: pulumi.Input<string>;
    /**
     * The mapping of localization texts keys to values.
     */
    texts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
