// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows for creating and managing `acdsaGenerated` Realm keystores within Keycloak.
 *
 * A realm keystore manages generated key pairs that are used by Keycloak to perform cryptographic signatures and encryption.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {realm: "my-realm"});
 * const keystoreEcdsaGenerated = new keycloak.RealmKeystoreEcdsaGenerated("keystoreEcdsaGenerated", {
 *     realmId: realm.id,
 *     enabled: true,
 *     active: true,
 *     priority: 100,
 *     ellipticCurveKey: "P-256",
 * });
 * ```
 *
 * ## Import
 *
 * Realm keys can be imported using realm name and keystore id, you can find it in web UI. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:index/realmKeystoreEcdsaGenerated:RealmKeystoreEcdsaGenerated keystore_ecdsa_generated my-realm/618cfba7-49aa-4c09-9a19-2f699b576f0b
 * ```
 */
export class RealmKeystoreEcdsaGenerated extends pulumi.CustomResource {
    /**
     * Get an existing RealmKeystoreEcdsaGenerated resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmKeystoreEcdsaGeneratedState, opts?: pulumi.CustomResourceOptions): RealmKeystoreEcdsaGenerated {
        return new RealmKeystoreEcdsaGenerated(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realmKeystoreEcdsaGenerated:RealmKeystoreEcdsaGenerated';

    /**
     * Returns true if the given object is an instance of RealmKeystoreEcdsaGenerated.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RealmKeystoreEcdsaGenerated {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RealmKeystoreEcdsaGenerated.__pulumiType;
    }

    /**
     * When `false`, key in not used for signing. Defaults to `true`.
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * Elliptic Curve used in ECDSA. Defaults to `P-256`.
     */
    public readonly ellipticCurveKey!: pulumi.Output<string | undefined>;
    /**
     * When `false`, key is not accessible in this realm. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Display name of provider when linked in admin console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Priority for the provider. Defaults to `0`
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * The realm this keystore exists in.
     */
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a RealmKeystoreEcdsaGenerated resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmKeystoreEcdsaGeneratedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmKeystoreEcdsaGeneratedArgs | RealmKeystoreEcdsaGeneratedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RealmKeystoreEcdsaGeneratedState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["ellipticCurveKey"] = state ? state.ellipticCurveKey : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as RealmKeystoreEcdsaGeneratedArgs | undefined;
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["ellipticCurveKey"] = args ? args.ellipticCurveKey : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RealmKeystoreEcdsaGenerated.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RealmKeystoreEcdsaGenerated resources.
 */
export interface RealmKeystoreEcdsaGeneratedState {
    /**
     * When `false`, key in not used for signing. Defaults to `true`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Elliptic Curve used in ECDSA. Defaults to `P-256`.
     */
    ellipticCurveKey?: pulumi.Input<string>;
    /**
     * When `false`, key is not accessible in this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Display name of provider when linked in admin console.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority for the provider. Defaults to `0`
     */
    priority?: pulumi.Input<number>;
    /**
     * The realm this keystore exists in.
     */
    realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RealmKeystoreEcdsaGenerated resource.
 */
export interface RealmKeystoreEcdsaGeneratedArgs {
    /**
     * When `false`, key in not used for signing. Defaults to `true`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Elliptic Curve used in ECDSA. Defaults to `P-256`.
     */
    ellipticCurveKey?: pulumi.Input<string>;
    /**
     * When `false`, key is not accessible in this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Display name of provider when linked in admin console.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority for the provider. Defaults to `0`
     */
    priority?: pulumi.Input<number>;
    /**
     * The realm this keystore exists in.
     */
    realmId: pulumi.Input<string>;
}
