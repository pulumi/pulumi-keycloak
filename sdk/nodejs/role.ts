// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # keycloak.Role
 *
 * Allows for creating and managing roles within Keycloak.
 *
 * Roles allow you define privileges within Keycloak and map them to users
 * and groups.
 *
 * ### Example Usage (Realm role)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     enabled: true,
 *     realm: "my-realm",
 * });
 * const realmRole = new keycloak.Role("realm_role", {
 *     description: "My Realm Role",
 *     realmId: realm.id,
 * });
 * ```
 *
 * ### Example Usage (Client role)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     enabled: true,
 *     realm: "my-realm",
 * });
 * const client = new keycloak.openid.Client("client", {
 *     accessType: "BEARER-ONLY",
 *     clientId: "client",
 *     enabled: true,
 *     realmId: realm.id,
 * });
 * const clientRole = new keycloak.Role("client_role", {
 *     clientId: keycloak_client_client.id,
 *     description: "My Client Role",
 *     realmId: realm.id,
 * });
 * ```
 *
 * ### Example Usage (Composite role)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     enabled: true,
 *     realm: "my-realm",
 * });
 * const createRole = new keycloak.Role("create_role", {
 *     realmId: realm.id,
 * });
 * const readRole = new keycloak.Role("read_role", {
 *     realmId: realm.id,
 * });
 * const updateRole = new keycloak.Role("update_role", {
 *     realmId: realm.id,
 * });
 * const deleteRole = new keycloak.Role("delete_role", {
 *     realmId: realm.id,
 * });
 * const client = new keycloak.openid.Client("client", {
 *     accessType: "BEARER-ONLY",
 *     clientId: "client",
 *     enabled: true,
 *     realmId: realm.id,
 * });
 * const clientRole = new keycloak.Role("client_role", {
 *     clientId: keycloak_client_client.id,
 *     description: "My Client Role",
 *     realmId: realm.id,
 * });
 * const adminRole = new keycloak.Role("admin_role", {
 *     compositeRoles: [
 *         "{keycloak_role.create_role.id}",
 *         "{keycloak_role.read_role.id}",
 *         "{keycloak_role.update_role.id}",
 *         "{keycloak_role.delete_role.id}",
 *         "{keycloak_role.client_role.id}",
 *     ],
 *     realmId: realm.id,
 * });
 * ```
 *
 * ### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `realmId` - (Required) The realm this role exists within.
 * - `clientId` - (Optional) When specified, this role will be created as
 *   a client role attached to the client with the provided ID
 * - `name` - (Required) The name of the role
 * - `description` - (Optional) The description of the role
 * - `compositeRoles` - (Optional) When specified, this role will be a
 *   composite role, composed of all roles that have an ID present within
 *   this list.
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    public readonly clientId!: pulumi.Output<string | undefined>;
    public readonly compositeRoles!: pulumi.Output<string[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RoleState | undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["compositeRoles"] = state ? state.compositeRoles : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["compositeRoles"] = args ? args.compositeRoles : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Role.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    readonly clientId?: pulumi.Input<string>;
    readonly compositeRoles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly description?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    readonly clientId?: pulumi.Input<string>;
    readonly compositeRoles?: pulumi.Input<pulumi.Input<string>[]>;
    readonly description?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly realmId: pulumi.Input<string>;
}
