// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # keycloak.RealmEvents
 *
 * Allows for managing Realm Events settings within Keycloak.
 *
 * ### Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "test",
 * });
 * const realmEvents = new keycloak.RealmEvents("realm_events", {
 *     adminEventsDetailsEnabled: true,
 *     adminEventsEnabled: true,
 *     // When omitted or left empty, keycloak will enable all event types
 *     enabledEventTypes: [
 *         "LOGIN",
 *         "LOGOUT",
 *     ],
 *     eventsEnabled: true,
 *     eventsExpiration: 3600,
 *     eventsListeners: ["jboss-logging"],
 *     realmId: realm.id,
 * });
 * ```
 *
 * ### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `realmId` - (Required) The name of the realm the event settings apply to.
 * - `adminEventsEnabled` - (Optional) When true, admin events are saved to the database, making them available through the admin console. Defaults to `false`.
 * - `adminEventsDetailsEnabled` - (Optional) When true, saved admin events will included detailed information for create/update requests. Defaults to `false`.
 * - `eventsEnabled` - (Optional) When true, events from `enabledEventTypes` are saved to the database, making them available through the admin console. Defaults to `false`.
 * - `eventsExpiration` - (Optional) The amount of time in seconds events will be saved in the database. Defaults to `0` or never.
 * - `enabledEventTypes` - (Optional) The event types that will be saved to the database. Omitting this field enables all event types. Defaults to `[]` or all event types.
 * - `eventsListeners` - (Optional) The event listeners that events should be sent to. Defaults to `[]` or none. Note that new realms enable the `jboss-logging` listener by default, and this resource will remove that unless it is specified.
 */
export class RealmEvents extends pulumi.CustomResource {
    /**
     * Get an existing RealmEvents resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmEventsState, opts?: pulumi.CustomResourceOptions): RealmEvents {
        return new RealmEvents(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realmEvents:RealmEvents';

    /**
     * Returns true if the given object is an instance of RealmEvents.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RealmEvents {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RealmEvents.__pulumiType;
    }

    public readonly adminEventsDetailsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly adminEventsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly enabledEventTypes!: pulumi.Output<string[] | undefined>;
    public readonly eventsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly eventsExpiration!: pulumi.Output<number | undefined>;
    public readonly eventsListeners!: pulumi.Output<string[] | undefined>;
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a RealmEvents resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmEventsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmEventsArgs | RealmEventsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RealmEventsState | undefined;
            inputs["adminEventsDetailsEnabled"] = state ? state.adminEventsDetailsEnabled : undefined;
            inputs["adminEventsEnabled"] = state ? state.adminEventsEnabled : undefined;
            inputs["enabledEventTypes"] = state ? state.enabledEventTypes : undefined;
            inputs["eventsEnabled"] = state ? state.eventsEnabled : undefined;
            inputs["eventsExpiration"] = state ? state.eventsExpiration : undefined;
            inputs["eventsListeners"] = state ? state.eventsListeners : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as RealmEventsArgs | undefined;
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["adminEventsDetailsEnabled"] = args ? args.adminEventsDetailsEnabled : undefined;
            inputs["adminEventsEnabled"] = args ? args.adminEventsEnabled : undefined;
            inputs["enabledEventTypes"] = args ? args.enabledEventTypes : undefined;
            inputs["eventsEnabled"] = args ? args.eventsEnabled : undefined;
            inputs["eventsExpiration"] = args ? args.eventsExpiration : undefined;
            inputs["eventsListeners"] = args ? args.eventsListeners : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RealmEvents.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RealmEvents resources.
 */
export interface RealmEventsState {
    readonly adminEventsDetailsEnabled?: pulumi.Input<boolean>;
    readonly adminEventsEnabled?: pulumi.Input<boolean>;
    readonly enabledEventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly eventsEnabled?: pulumi.Input<boolean>;
    readonly eventsExpiration?: pulumi.Input<number>;
    readonly eventsListeners?: pulumi.Input<pulumi.Input<string>[]>;
    readonly realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RealmEvents resource.
 */
export interface RealmEventsArgs {
    readonly adminEventsDetailsEnabled?: pulumi.Input<boolean>;
    readonly adminEventsEnabled?: pulumi.Input<boolean>;
    readonly enabledEventTypes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly eventsEnabled?: pulumi.Input<boolean>;
    readonly eventsExpiration?: pulumi.Input<number>;
    readonly eventsListeners?: pulumi.Input<pulumi.Input<string>[]>;
    readonly realmId: pulumi.Input<string>;
}
