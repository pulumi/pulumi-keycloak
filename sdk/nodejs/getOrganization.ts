// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can be used to fetch properties of a Keycloak organization for
 * usage with other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = keycloak.getRealm({
 *     realm: "my-realm",
 * });
 * const organization = realm.then(realm => keycloak.getOrganization({
 *     realm: realm.id,
 *     name: "my-org",
 * }));
 * // use the data source
 * const realmIdentityProvider = new keycloak.oidc.IdentityProvider("realm_identity_provider", {
 *     realm: realm.then(realm => realm.id),
 *     alias: "my-idp",
 *     authorizationUrl: "https://authorizationurl.com",
 *     clientId: "clientID",
 *     clientSecret: "clientSecret",
 *     tokenUrl: "https://tokenurl.com",
 *     organizationId: organization.then(organization => organization.id),
 * });
 * ```
 */
export function getOrganization(args: GetOrganizationArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keycloak:index/getOrganization:getOrganization", {
        "name": args.name,
        "realm": args.realm,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganization.
 */
export interface GetOrganizationArgs {
    /**
     * The organization name.
     */
    name: string;
    /**
     * The name of the realm this organization exists within.
     */
    realm: string;
}

/**
 * A collection of values returned by getOrganization.
 */
export interface GetOrganizationResult {
    readonly alias: string;
    readonly attributes: {[key: string]: string};
    readonly description: string;
    readonly domains: outputs.GetOrganizationDomain[];
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly realm: string;
    readonly redirectUrl: string;
}
/**
 * This data source can be used to fetch properties of a Keycloak organization for
 * usage with other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = keycloak.getRealm({
 *     realm: "my-realm",
 * });
 * const organization = realm.then(realm => keycloak.getOrganization({
 *     realm: realm.id,
 *     name: "my-org",
 * }));
 * // use the data source
 * const realmIdentityProvider = new keycloak.oidc.IdentityProvider("realm_identity_provider", {
 *     realm: realm.then(realm => realm.id),
 *     alias: "my-idp",
 *     authorizationUrl: "https://authorizationurl.com",
 *     clientId: "clientID",
 *     clientSecret: "clientSecret",
 *     tokenUrl: "https://tokenurl.com",
 *     organizationId: organization.then(organization => organization.id),
 * });
 * ```
 */
export function getOrganizationOutput(args: GetOrganizationOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOrganizationResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("keycloak:index/getOrganization:getOrganization", {
        "name": args.name,
        "realm": args.realm,
    }, opts);
}

/**
 * A collection of arguments for invoking getOrganization.
 */
export interface GetOrganizationOutputArgs {
    /**
     * The organization name.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the realm this organization exists within.
     */
    realm: pulumi.Input<string>;
}
