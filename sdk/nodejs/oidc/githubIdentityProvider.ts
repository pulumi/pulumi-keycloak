// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing **GitHub**-based OIDC Identity Providers within Keycloak.
 *
 * OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard.
 *
 * The GitHub variant is specialized for the public GitHub instance (github.com) or GitHub Enterprise deployments.
 *
 * For example, it will obtain automatically the primary email from the logged in account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const github = new keycloak.oidc.GithubIdentityProvider("github", {
 *     realm: realm.id,
 *     clientId: githubIdentityProviderClientId,
 *     clientSecret: githubIdentityProviderClientSecret,
 *     trustEmail: true,
 *     syncMode: "IMPORT",
 *     extraConfig: {
 *         myCustomConfigKey: "myValue",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * GitHub Identity providers can be imported using the format {{realm_id}}/{{idp_alias}}, where idp_alias is the identity provider alias.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:oidc/githubIdentityProvider:GithubIdentityProvider github_identity_provider my-realm/my-github-idp
 * ```
 */
export class GithubIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing GithubIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GithubIdentityProviderState, opts?: pulumi.CustomResourceOptions): GithubIdentityProvider {
        return new GithubIdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:oidc/githubIdentityProvider:GithubIdentityProvider';

    /**
     * Returns true if the given object is an instance of GithubIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GithubIdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GithubIdentityProvider.__pulumiType;
    }

    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    declare public readonly addReadTokenRoleOnCreate: pulumi.Output<boolean | undefined>;
    /**
     * The alias for the GitHub identity provider.
     */
    declare public readonly alias: pulumi.Output<string>;
    /**
     * The GitHub API URL, defaults to `https://api.github.com`.
     */
    declare public readonly apiUrl: pulumi.Output<string | undefined>;
    /**
     * Enable/disable authenticate users by default.
     */
    declare public readonly authenticateByDefault: pulumi.Output<boolean | undefined>;
    /**
     * The GitHub base URL, defaults to `https://github.com`
     */
    declare public readonly baseUrl: pulumi.Output<string | undefined>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     */
    declare public readonly clientSecret: pulumi.Output<string>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
     */
    declare public readonly defaultScopes: pulumi.Output<string | undefined>;
    /**
     * Display name for the GitHub identity provider in the GUI.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly extraConfig: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    declare public readonly firstBrokerLoginFlowAlias: pulumi.Output<string | undefined>;
    /**
     * When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
     */
    declare public readonly githubJsonFormat: pulumi.Output<boolean | undefined>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    declare public readonly guiOrder: pulumi.Output<string | undefined>;
    /**
     * When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
     */
    declare public readonly hideOnLoginPage: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     */
    declare public /*out*/ readonly internalId: pulumi.Output<string>;
    /**
     * When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    declare public readonly linkOnly: pulumi.Output<boolean | undefined>;
    declare public readonly orgDomain: pulumi.Output<string | undefined>;
    declare public readonly orgRedirectModeEmailMatches: pulumi.Output<boolean | undefined>;
    /**
     * ID of organization with which this identity is linked.
     */
    declare public readonly organizationId: pulumi.Output<string | undefined>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    declare public readonly postBrokerLoginFlowAlias: pulumi.Output<string | undefined>;
    /**
     * The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    declare public readonly providerId: pulumi.Output<string | undefined>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    declare public readonly realm: pulumi.Output<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    declare public readonly storeToken: pulumi.Output<boolean | undefined>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    declare public readonly syncMode: pulumi.Output<string | undefined>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    declare public readonly trustEmail: pulumi.Output<boolean | undefined>;

    /**
     * Create a GithubIdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GithubIdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GithubIdentityProviderArgs | GithubIdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GithubIdentityProviderState | undefined;
            resourceInputs["addReadTokenRoleOnCreate"] = state?.addReadTokenRoleOnCreate;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["apiUrl"] = state?.apiUrl;
            resourceInputs["authenticateByDefault"] = state?.authenticateByDefault;
            resourceInputs["baseUrl"] = state?.baseUrl;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["defaultScopes"] = state?.defaultScopes;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["extraConfig"] = state?.extraConfig;
            resourceInputs["firstBrokerLoginFlowAlias"] = state?.firstBrokerLoginFlowAlias;
            resourceInputs["githubJsonFormat"] = state?.githubJsonFormat;
            resourceInputs["guiOrder"] = state?.guiOrder;
            resourceInputs["hideOnLoginPage"] = state?.hideOnLoginPage;
            resourceInputs["internalId"] = state?.internalId;
            resourceInputs["linkOnly"] = state?.linkOnly;
            resourceInputs["orgDomain"] = state?.orgDomain;
            resourceInputs["orgRedirectModeEmailMatches"] = state?.orgRedirectModeEmailMatches;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["postBrokerLoginFlowAlias"] = state?.postBrokerLoginFlowAlias;
            resourceInputs["providerId"] = state?.providerId;
            resourceInputs["realm"] = state?.realm;
            resourceInputs["storeToken"] = state?.storeToken;
            resourceInputs["syncMode"] = state?.syncMode;
            resourceInputs["trustEmail"] = state?.trustEmail;
        } else {
            const args = argsOrState as GithubIdentityProviderArgs | undefined;
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.clientSecret === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if (args?.realm === undefined && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            resourceInputs["addReadTokenRoleOnCreate"] = args?.addReadTokenRoleOnCreate;
            resourceInputs["alias"] = args?.alias;
            resourceInputs["apiUrl"] = args?.apiUrl;
            resourceInputs["authenticateByDefault"] = args?.authenticateByDefault;
            resourceInputs["baseUrl"] = args?.baseUrl;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["defaultScopes"] = args?.defaultScopes;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["extraConfig"] = args?.extraConfig;
            resourceInputs["firstBrokerLoginFlowAlias"] = args?.firstBrokerLoginFlowAlias;
            resourceInputs["githubJsonFormat"] = args?.githubJsonFormat;
            resourceInputs["guiOrder"] = args?.guiOrder;
            resourceInputs["hideOnLoginPage"] = args?.hideOnLoginPage;
            resourceInputs["linkOnly"] = args?.linkOnly;
            resourceInputs["orgDomain"] = args?.orgDomain;
            resourceInputs["orgRedirectModeEmailMatches"] = args?.orgRedirectModeEmailMatches;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["postBrokerLoginFlowAlias"] = args?.postBrokerLoginFlowAlias;
            resourceInputs["providerId"] = args?.providerId;
            resourceInputs["realm"] = args?.realm;
            resourceInputs["storeToken"] = args?.storeToken;
            resourceInputs["syncMode"] = args?.syncMode;
            resourceInputs["trustEmail"] = args?.trustEmail;
            resourceInputs["internalId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GithubIdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GithubIdentityProvider resources.
 */
export interface GithubIdentityProviderState {
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The alias for the GitHub identity provider.
     */
    alias?: pulumi.Input<string>;
    /**
     * The GitHub API URL, defaults to `https://api.github.com`.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * The GitHub base URL, defaults to `https://github.com`
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
     */
    defaultScopes?: pulumi.Input<string>;
    /**
     * Display name for the GitHub identity provider in the GUI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
     */
    githubJsonFormat?: pulumi.Input<boolean>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     */
    internalId?: pulumi.Input<string>;
    /**
     * When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    orgDomain?: pulumi.Input<string>;
    orgRedirectModeEmailMatches?: pulumi.Input<boolean>;
    /**
     * ID of organization with which this identity is linked.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm?: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GithubIdentityProvider resource.
 */
export interface GithubIdentityProviderArgs {
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The alias for the GitHub identity provider.
     */
    alias?: pulumi.Input<string>;
    /**
     * The GitHub API URL, defaults to `https://api.github.com`.
     */
    apiUrl?: pulumi.Input<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * The GitHub base URL, defaults to `https://github.com`
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    clientId: pulumi.Input<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     */
    clientSecret: pulumi.Input<string>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
     */
    defaultScopes?: pulumi.Input<string>;
    /**
     * Display name for the GitHub identity provider in the GUI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
     */
    githubJsonFormat?: pulumi.Input<boolean>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    orgDomain?: pulumi.Input<string>;
    orgRedirectModeEmailMatches?: pulumi.Input<boolean>;
    /**
     * ID of organization with which this identity is linked.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
}
