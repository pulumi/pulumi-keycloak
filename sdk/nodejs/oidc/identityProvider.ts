// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing OIDC Identity Providers within Keycloak.
 *
 * OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const realmIdentityProvider = new keycloak.oidc.IdentityProvider("realmIdentityProvider", {
 *     realm: realm.id,
 *     alias: "my-idp",
 *     authorizationUrl: "https://authorizationurl.com",
 *     clientId: "clientID",
 *     clientSecret: "clientSecret",
 *     tokenUrl: "https://tokenurl.com",
 *     extraConfig: {
 *         clientAuthMethod: "client_secret_post",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Identity providers can be imported using the format `{{realm_id}}/{{idp_alias}}`, where `idp_alias` is the identity provider alias. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:oidc/identityProvider:IdentityProvider realm_identity_provider my-realm/my-idp
 * ```
 */
export class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityProvider {
        return new IdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:oidc/identityProvider:IdentityProvider';

    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }

    /**
     * When `true`, the IDP will accept forwarded authentication requests that contain the `prompt=none` query parameter. Defaults to `false`.
     */
    public readonly acceptsPromptNoneForwardFromClient!: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    public readonly addReadTokenRoleOnCreate!: pulumi.Output<boolean | undefined>;
    /**
     * The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    public readonly authenticateByDefault!: pulumi.Output<boolean | undefined>;
    /**
     * The Authorization Url.
     */
    public readonly authorizationUrl!: pulumi.Output<string>;
    /**
     * Does the external IDP support backchannel logout? Defaults to `true`.
     */
    public readonly backchannelSupported!: pulumi.Output<boolean | undefined>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     */
    public readonly clientSecret!: pulumi.Output<string>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid`.
     */
    public readonly defaultScopes!: pulumi.Output<string | undefined>;
    /**
     * When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     */
    public readonly disableUserInfo!: pulumi.Output<boolean | undefined>;
    /**
     * Display name for the identity provider in the GUI.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly extraConfig!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    public readonly firstBrokerLoginFlowAlias!: pulumi.Output<string | undefined>;
    /**
     * When `true`, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to `false`.
     */
    public readonly hideOnLoginPage!: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     */
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    /**
     * JSON Web Key Set URL.
     */
    public readonly jwksUrl!: pulumi.Output<string | undefined>;
    /**
     * When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    public readonly linkOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Pass login hint to identity provider.
     */
    public readonly loginHint!: pulumi.Output<string | undefined>;
    /**
     * The Logout URL is the end session endpoint to use to logout user from external identity provider.
     */
    public readonly logoutUrl!: pulumi.Output<string | undefined>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    public readonly postBrokerLoginFlowAlias!: pulumi.Output<string | undefined>;
    /**
     * The ID of the identity provider to use. Defaults to `oidc`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    public readonly providerId!: pulumi.Output<string | undefined>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    public readonly realm!: pulumi.Output<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    public readonly storeToken!: pulumi.Output<boolean | undefined>;
    /**
     * The Token URL.
     */
    public readonly tokenUrl!: pulumi.Output<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    public readonly trustEmail!: pulumi.Output<boolean | undefined>;
    /**
     * Pass current locale to identity provider. Defaults to `false`.
     */
    public readonly uiLocales!: pulumi.Output<boolean | undefined>;
    /**
     * User Info URL.
     */
    public readonly userInfoUrl!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable signature validation of external IDP signatures. Defaults to `false`.
     */
    public readonly validateSignature!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderArgs | IdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as IdentityProviderState | undefined;
            inputs["acceptsPromptNoneForwardFromClient"] = state ? state.acceptsPromptNoneForwardFromClient : undefined;
            inputs["addReadTokenRoleOnCreate"] = state ? state.addReadTokenRoleOnCreate : undefined;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["authenticateByDefault"] = state ? state.authenticateByDefault : undefined;
            inputs["authorizationUrl"] = state ? state.authorizationUrl : undefined;
            inputs["backchannelSupported"] = state ? state.backchannelSupported : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["clientSecret"] = state ? state.clientSecret : undefined;
            inputs["defaultScopes"] = state ? state.defaultScopes : undefined;
            inputs["disableUserInfo"] = state ? state.disableUserInfo : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["extraConfig"] = state ? state.extraConfig : undefined;
            inputs["firstBrokerLoginFlowAlias"] = state ? state.firstBrokerLoginFlowAlias : undefined;
            inputs["hideOnLoginPage"] = state ? state.hideOnLoginPage : undefined;
            inputs["internalId"] = state ? state.internalId : undefined;
            inputs["jwksUrl"] = state ? state.jwksUrl : undefined;
            inputs["linkOnly"] = state ? state.linkOnly : undefined;
            inputs["loginHint"] = state ? state.loginHint : undefined;
            inputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            inputs["postBrokerLoginFlowAlias"] = state ? state.postBrokerLoginFlowAlias : undefined;
            inputs["providerId"] = state ? state.providerId : undefined;
            inputs["realm"] = state ? state.realm : undefined;
            inputs["storeToken"] = state ? state.storeToken : undefined;
            inputs["tokenUrl"] = state ? state.tokenUrl : undefined;
            inputs["trustEmail"] = state ? state.trustEmail : undefined;
            inputs["uiLocales"] = state ? state.uiLocales : undefined;
            inputs["userInfoUrl"] = state ? state.userInfoUrl : undefined;
            inputs["validateSignature"] = state ? state.validateSignature : undefined;
        } else {
            const args = argsOrState as IdentityProviderArgs | undefined;
            if (!args || args.alias === undefined) {
                throw new Error("Missing required property 'alias'");
            }
            if (!args || args.authorizationUrl === undefined) {
                throw new Error("Missing required property 'authorizationUrl'");
            }
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.clientSecret === undefined) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if (!args || args.realm === undefined) {
                throw new Error("Missing required property 'realm'");
            }
            if (!args || args.tokenUrl === undefined) {
                throw new Error("Missing required property 'tokenUrl'");
            }
            inputs["acceptsPromptNoneForwardFromClient"] = args ? args.acceptsPromptNoneForwardFromClient : undefined;
            inputs["addReadTokenRoleOnCreate"] = args ? args.addReadTokenRoleOnCreate : undefined;
            inputs["alias"] = args ? args.alias : undefined;
            inputs["authenticateByDefault"] = args ? args.authenticateByDefault : undefined;
            inputs["authorizationUrl"] = args ? args.authorizationUrl : undefined;
            inputs["backchannelSupported"] = args ? args.backchannelSupported : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSecret"] = args ? args.clientSecret : undefined;
            inputs["defaultScopes"] = args ? args.defaultScopes : undefined;
            inputs["disableUserInfo"] = args ? args.disableUserInfo : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["extraConfig"] = args ? args.extraConfig : undefined;
            inputs["firstBrokerLoginFlowAlias"] = args ? args.firstBrokerLoginFlowAlias : undefined;
            inputs["hideOnLoginPage"] = args ? args.hideOnLoginPage : undefined;
            inputs["jwksUrl"] = args ? args.jwksUrl : undefined;
            inputs["linkOnly"] = args ? args.linkOnly : undefined;
            inputs["loginHint"] = args ? args.loginHint : undefined;
            inputs["logoutUrl"] = args ? args.logoutUrl : undefined;
            inputs["postBrokerLoginFlowAlias"] = args ? args.postBrokerLoginFlowAlias : undefined;
            inputs["providerId"] = args ? args.providerId : undefined;
            inputs["realm"] = args ? args.realm : undefined;
            inputs["storeToken"] = args ? args.storeToken : undefined;
            inputs["tokenUrl"] = args ? args.tokenUrl : undefined;
            inputs["trustEmail"] = args ? args.trustEmail : undefined;
            inputs["uiLocales"] = args ? args.uiLocales : undefined;
            inputs["userInfoUrl"] = args ? args.userInfoUrl : undefined;
            inputs["validateSignature"] = args ? args.validateSignature : undefined;
            inputs["internalId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(IdentityProvider.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityProvider resources.
 */
export interface IdentityProviderState {
    /**
     * When `true`, the IDP will accept forwarded authentication requests that contain the `prompt=none` query parameter. Defaults to `false`.
     */
    readonly acceptsPromptNoneForwardFromClient?: pulumi.Input<boolean>;
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    readonly addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
     */
    readonly alias?: pulumi.Input<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    readonly authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * The Authorization Url.
     */
    readonly authorizationUrl?: pulumi.Input<string>;
    /**
     * Does the external IDP support backchannel logout? Defaults to `true`.
     */
    readonly backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    readonly clientId?: pulumi.Input<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     */
    readonly clientSecret?: pulumi.Input<string>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid`.
     */
    readonly defaultScopes?: pulumi.Input<string>;
    /**
     * When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     */
    readonly disableUserInfo?: pulumi.Input<boolean>;
    /**
     * Display name for the identity provider in the GUI.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly extraConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    readonly firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * When `true`, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to `false`.
     */
    readonly hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     */
    readonly internalId?: pulumi.Input<string>;
    /**
     * JSON Web Key Set URL.
     */
    readonly jwksUrl?: pulumi.Input<string>;
    /**
     * When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    readonly linkOnly?: pulumi.Input<boolean>;
    /**
     * Pass login hint to identity provider.
     */
    readonly loginHint?: pulumi.Input<string>;
    /**
     * The Logout URL is the end session endpoint to use to logout user from external identity provider.
     */
    readonly logoutUrl?: pulumi.Input<string>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    readonly postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `oidc`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    readonly providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    readonly realm?: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    readonly storeToken?: pulumi.Input<boolean>;
    /**
     * The Token URL.
     */
    readonly tokenUrl?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    readonly trustEmail?: pulumi.Input<boolean>;
    /**
     * Pass current locale to identity provider. Defaults to `false`.
     */
    readonly uiLocales?: pulumi.Input<boolean>;
    /**
     * User Info URL.
     */
    readonly userInfoUrl?: pulumi.Input<string>;
    /**
     * Enable/disable signature validation of external IDP signatures. Defaults to `false`.
     */
    readonly validateSignature?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IdentityProvider resource.
 */
export interface IdentityProviderArgs {
    /**
     * When `true`, the IDP will accept forwarded authentication requests that contain the `prompt=none` query parameter. Defaults to `false`.
     */
    readonly acceptsPromptNoneForwardFromClient?: pulumi.Input<boolean>;
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    readonly addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
     */
    readonly alias: pulumi.Input<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    readonly authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * The Authorization Url.
     */
    readonly authorizationUrl: pulumi.Input<string>;
    /**
     * Does the external IDP support backchannel logout? Defaults to `true`.
     */
    readonly backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    readonly clientId: pulumi.Input<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
     */
    readonly clientSecret: pulumi.Input<string>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid`.
     */
    readonly defaultScopes?: pulumi.Input<string>;
    /**
     * When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     */
    readonly disableUserInfo?: pulumi.Input<boolean>;
    /**
     * Display name for the identity provider in the GUI.
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly extraConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    readonly firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * When `true`, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to `false`.
     */
    readonly hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * JSON Web Key Set URL.
     */
    readonly jwksUrl?: pulumi.Input<string>;
    /**
     * When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    readonly linkOnly?: pulumi.Input<boolean>;
    /**
     * Pass login hint to identity provider.
     */
    readonly loginHint?: pulumi.Input<string>;
    /**
     * The Logout URL is the end session endpoint to use to logout user from external identity provider.
     */
    readonly logoutUrl?: pulumi.Input<string>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    readonly postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `oidc`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    readonly providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    readonly realm: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    readonly storeToken?: pulumi.Input<boolean>;
    /**
     * The Token URL.
     */
    readonly tokenUrl: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    readonly trustEmail?: pulumi.Input<boolean>;
    /**
     * Pass current locale to identity provider. Defaults to `false`.
     */
    readonly uiLocales?: pulumi.Input<boolean>;
    /**
     * User Info URL.
     */
    readonly userInfoUrl?: pulumi.Input<string>;
    /**
     * Enable/disable signature validation of external IDP signatures. Defaults to `false`.
     */
    readonly validateSignature?: pulumi.Input<boolean>;
}
