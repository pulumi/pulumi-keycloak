// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing OIDC Identity Providers within Keycloak.
 *
 * OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard.
 *
 * > **NOTICE:** This resource now supports write-only arguments
 * for client secret via the new arguments `clientSecretWo` and `clientSecretWoVersion`. Using write-only arguments
 * prevents sensitive values from being stored in plan and state files. You cannot use `clientSecretWo` and
 * `clientSecretWoVersion` alongside `clientSecret` as this will result in a validation error due to conflicts.
 * > 
 * > For backward compatibility, the behavior of the original `clientSecret` argument remains unchanged.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const realmIdentityProvider = new keycloak.oidc.IdentityProvider("realm_identity_provider", {
 *     realm: realm.id,
 *     alias: "my-idp",
 *     authorizationUrl: "https://authorizationurl.com",
 *     clientId: "clientID",
 *     clientSecret: "clientSecret",
 *     tokenUrl: "https://tokenurl.com",
 *     extraConfig: {
 *         clientAuthMethod: "client_secret_post",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Identity providers can be imported using the format `{{realm_id}}/{{idp_alias}}`, where `idp_alias` is the identity provider alias.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:oidc/identityProvider:IdentityProvider realm_identity_provider my-realm/my-idp
 * ```
 */
export class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityProvider {
        return new IdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:oidc/identityProvider:IdentityProvider';

    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }

    /**
     * When `true`, the IDP will accept forwarded authentication requests that contain the `prompt=none` query parameter. Defaults to `false`.
     */
    declare public readonly acceptsPromptNoneForwardFromClient: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    declare public readonly addReadTokenRoleOnCreate: pulumi.Output<boolean | undefined>;
    /**
     * The alias uniquely identifies an identity provider, and it is also used to build the redirect uri.
     */
    declare public readonly alias: pulumi.Output<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    declare public readonly authenticateByDefault: pulumi.Output<boolean | undefined>;
    /**
     * The Authorization Url.
     */
    declare public readonly authorizationUrl: pulumi.Output<string>;
    /**
     * Does the external IDP support backchannel logout? Defaults to `true`.
     */
    declare public readonly backchannelSupported: pulumi.Output<boolean | undefined>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. Required without `clientSecretWo` and `clientSecretWoVersion`.
     */
    declare public readonly clientSecret: pulumi.Output<string | undefined>;
    /**
     * **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Client Secret as write-only argument
     */
    declare public readonly clientSecretWo: pulumi.Output<string | undefined>;
    /**
     * Version of the Client secret write-only argument
     */
    declare public readonly clientSecretWoVersion: pulumi.Output<number | undefined>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid`.
     */
    declare public readonly defaultScopes: pulumi.Output<string | undefined>;
    /**
     * When `true`, disables the check for the `typ` claim of tokens received from the identity provider. Defaults to `false`.
     */
    declare public readonly disableTypeClaimCheck: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     */
    declare public readonly disableUserInfo: pulumi.Output<boolean | undefined>;
    /**
     * Display name for the identity provider in the GUI.
     */
    declare public readonly displayName: pulumi.Output<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly extraConfig: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    declare public readonly firstBrokerLoginFlowAlias: pulumi.Output<string | undefined>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    declare public readonly guiOrder: pulumi.Output<string | undefined>;
    /**
     * When `true`, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to `false`.
     */
    declare public readonly hideOnLoginPage: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     */
    declare public /*out*/ readonly internalId: pulumi.Output<string>;
    /**
     * The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
     */
    declare public readonly issuer: pulumi.Output<string | undefined>;
    /**
     * JSON Web Key Set URL.
     */
    declare public readonly jwksUrl: pulumi.Output<string | undefined>;
    /**
     * When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    declare public readonly linkOnly: pulumi.Output<boolean | undefined>;
    /**
     * Pass login hint to identity provider.
     */
    declare public readonly loginHint: pulumi.Output<string | undefined>;
    /**
     * The Logout URL is the end session endpoint to use to sign-out the user from external identity provider.
     */
    declare public readonly logoutUrl: pulumi.Output<string | undefined>;
    /**
     * The organization domain to associate this identity provider with. it is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
     */
    declare public readonly orgDomain: pulumi.Output<string | undefined>;
    /**
     * Indicates whether to automatically redirect user to this identity provider when email domain matches domain.
     */
    declare public readonly orgRedirectModeEmailMatches: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the organization to link this identity provider to.
     */
    declare public readonly organizationId: pulumi.Output<string | undefined>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    declare public readonly postBrokerLoginFlowAlias: pulumi.Output<string | undefined>;
    /**
     * The ID of the identity provider to use. Defaults to `oidc`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    declare public readonly providerId: pulumi.Output<string | undefined>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    declare public readonly realm: pulumi.Output<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    declare public readonly storeToken: pulumi.Output<boolean | undefined>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    declare public readonly syncMode: pulumi.Output<string | undefined>;
    /**
     * The Token URL.
     */
    declare public readonly tokenUrl: pulumi.Output<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    declare public readonly trustEmail: pulumi.Output<boolean | undefined>;
    /**
     * Pass current locale to identity provider. Defaults to `false`.
     */
    declare public readonly uiLocales: pulumi.Output<boolean | undefined>;
    /**
     * User Info URL.
     */
    declare public readonly userInfoUrl: pulumi.Output<string | undefined>;
    /**
     * Enable/disable signature validation of external IDP signatures. Defaults to `false`.
     */
    declare public readonly validateSignature: pulumi.Output<boolean | undefined>;

    /**
     * Create a IdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderArgs | IdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityProviderState | undefined;
            resourceInputs["acceptsPromptNoneForwardFromClient"] = state?.acceptsPromptNoneForwardFromClient;
            resourceInputs["addReadTokenRoleOnCreate"] = state?.addReadTokenRoleOnCreate;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["authenticateByDefault"] = state?.authenticateByDefault;
            resourceInputs["authorizationUrl"] = state?.authorizationUrl;
            resourceInputs["backchannelSupported"] = state?.backchannelSupported;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSecret"] = state?.clientSecret;
            resourceInputs["clientSecretWo"] = state?.clientSecretWo;
            resourceInputs["clientSecretWoVersion"] = state?.clientSecretWoVersion;
            resourceInputs["defaultScopes"] = state?.defaultScopes;
            resourceInputs["disableTypeClaimCheck"] = state?.disableTypeClaimCheck;
            resourceInputs["disableUserInfo"] = state?.disableUserInfo;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["extraConfig"] = state?.extraConfig;
            resourceInputs["firstBrokerLoginFlowAlias"] = state?.firstBrokerLoginFlowAlias;
            resourceInputs["guiOrder"] = state?.guiOrder;
            resourceInputs["hideOnLoginPage"] = state?.hideOnLoginPage;
            resourceInputs["internalId"] = state?.internalId;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["jwksUrl"] = state?.jwksUrl;
            resourceInputs["linkOnly"] = state?.linkOnly;
            resourceInputs["loginHint"] = state?.loginHint;
            resourceInputs["logoutUrl"] = state?.logoutUrl;
            resourceInputs["orgDomain"] = state?.orgDomain;
            resourceInputs["orgRedirectModeEmailMatches"] = state?.orgRedirectModeEmailMatches;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["postBrokerLoginFlowAlias"] = state?.postBrokerLoginFlowAlias;
            resourceInputs["providerId"] = state?.providerId;
            resourceInputs["realm"] = state?.realm;
            resourceInputs["storeToken"] = state?.storeToken;
            resourceInputs["syncMode"] = state?.syncMode;
            resourceInputs["tokenUrl"] = state?.tokenUrl;
            resourceInputs["trustEmail"] = state?.trustEmail;
            resourceInputs["uiLocales"] = state?.uiLocales;
            resourceInputs["userInfoUrl"] = state?.userInfoUrl;
            resourceInputs["validateSignature"] = state?.validateSignature;
        } else {
            const args = argsOrState as IdentityProviderArgs | undefined;
            if (args?.alias === undefined && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if (args?.authorizationUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'authorizationUrl'");
            }
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.realm === undefined && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            if (args?.tokenUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'tokenUrl'");
            }
            resourceInputs["acceptsPromptNoneForwardFromClient"] = args?.acceptsPromptNoneForwardFromClient;
            resourceInputs["addReadTokenRoleOnCreate"] = args?.addReadTokenRoleOnCreate;
            resourceInputs["alias"] = args?.alias;
            resourceInputs["authenticateByDefault"] = args?.authenticateByDefault;
            resourceInputs["authorizationUrl"] = args?.authorizationUrl;
            resourceInputs["backchannelSupported"] = args?.backchannelSupported;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["clientSecretWo"] = args?.clientSecretWo ? pulumi.secret(args.clientSecretWo) : undefined;
            resourceInputs["clientSecretWoVersion"] = args?.clientSecretWoVersion;
            resourceInputs["defaultScopes"] = args?.defaultScopes;
            resourceInputs["disableTypeClaimCheck"] = args?.disableTypeClaimCheck;
            resourceInputs["disableUserInfo"] = args?.disableUserInfo;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["extraConfig"] = args?.extraConfig;
            resourceInputs["firstBrokerLoginFlowAlias"] = args?.firstBrokerLoginFlowAlias;
            resourceInputs["guiOrder"] = args?.guiOrder;
            resourceInputs["hideOnLoginPage"] = args?.hideOnLoginPage;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["jwksUrl"] = args?.jwksUrl;
            resourceInputs["linkOnly"] = args?.linkOnly;
            resourceInputs["loginHint"] = args?.loginHint;
            resourceInputs["logoutUrl"] = args?.logoutUrl;
            resourceInputs["orgDomain"] = args?.orgDomain;
            resourceInputs["orgRedirectModeEmailMatches"] = args?.orgRedirectModeEmailMatches;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["postBrokerLoginFlowAlias"] = args?.postBrokerLoginFlowAlias;
            resourceInputs["providerId"] = args?.providerId;
            resourceInputs["realm"] = args?.realm;
            resourceInputs["storeToken"] = args?.storeToken;
            resourceInputs["syncMode"] = args?.syncMode;
            resourceInputs["tokenUrl"] = args?.tokenUrl;
            resourceInputs["trustEmail"] = args?.trustEmail;
            resourceInputs["uiLocales"] = args?.uiLocales;
            resourceInputs["userInfoUrl"] = args?.userInfoUrl;
            resourceInputs["validateSignature"] = args?.validateSignature;
            resourceInputs["internalId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret", "clientSecretWo"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityProvider resources.
 */
export interface IdentityProviderState {
    /**
     * When `true`, the IDP will accept forwarded authentication requests that contain the `prompt=none` query parameter. Defaults to `false`.
     */
    acceptsPromptNoneForwardFromClient?: pulumi.Input<boolean>;
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The alias uniquely identifies an identity provider, and it is also used to build the redirect uri.
     */
    alias?: pulumi.Input<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * The Authorization Url.
     */
    authorizationUrl?: pulumi.Input<string>;
    /**
     * Does the external IDP support backchannel logout? Defaults to `true`.
     */
    backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. Required without `clientSecretWo` and `clientSecretWoVersion`.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Client Secret as write-only argument
     */
    clientSecretWo?: pulumi.Input<string>;
    /**
     * Version of the Client secret write-only argument
     */
    clientSecretWoVersion?: pulumi.Input<number>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid`.
     */
    defaultScopes?: pulumi.Input<string>;
    /**
     * When `true`, disables the check for the `typ` claim of tokens received from the identity provider. Defaults to `false`.
     */
    disableTypeClaimCheck?: pulumi.Input<boolean>;
    /**
     * When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     */
    disableUserInfo?: pulumi.Input<boolean>;
    /**
     * Display name for the identity provider in the GUI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * When `true`, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to `false`.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
     */
    internalId?: pulumi.Input<string>;
    /**
     * The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
     */
    issuer?: pulumi.Input<string>;
    /**
     * JSON Web Key Set URL.
     */
    jwksUrl?: pulumi.Input<string>;
    /**
     * When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    /**
     * Pass login hint to identity provider.
     */
    loginHint?: pulumi.Input<string>;
    /**
     * The Logout URL is the end session endpoint to use to sign-out the user from external identity provider.
     */
    logoutUrl?: pulumi.Input<string>;
    /**
     * The organization domain to associate this identity provider with. it is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
     */
    orgDomain?: pulumi.Input<string>;
    /**
     * Indicates whether to automatically redirect user to this identity provider when email domain matches domain.
     */
    orgRedirectModeEmailMatches?: pulumi.Input<boolean>;
    /**
     * The ID of the organization to link this identity provider to.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `oidc`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm?: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * The Token URL.
     */
    tokenUrl?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
    /**
     * Pass current locale to identity provider. Defaults to `false`.
     */
    uiLocales?: pulumi.Input<boolean>;
    /**
     * User Info URL.
     */
    userInfoUrl?: pulumi.Input<string>;
    /**
     * Enable/disable signature validation of external IDP signatures. Defaults to `false`.
     */
    validateSignature?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IdentityProvider resource.
 */
export interface IdentityProviderArgs {
    /**
     * When `true`, the IDP will accept forwarded authentication requests that contain the `prompt=none` query parameter. Defaults to `false`.
     */
    acceptsPromptNoneForwardFromClient?: pulumi.Input<boolean>;
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The alias uniquely identifies an identity provider, and it is also used to build the redirect uri.
     */
    alias: pulumi.Input<string>;
    /**
     * Enable/disable authenticate users by default.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * The Authorization Url.
     */
    authorizationUrl: pulumi.Input<string>;
    /**
     * Does the external IDP support backchannel logout? Defaults to `true`.
     */
    backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The client or client identifier registered within the identity provider.
     */
    clientId: pulumi.Input<string>;
    /**
     * The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. Required without `clientSecretWo` and `clientSecretWoVersion`.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
     * Client Secret as write-only argument
     */
    clientSecretWo?: pulumi.Input<string>;
    /**
     * Version of the Client secret write-only argument
     */
    clientSecretWoVersion?: pulumi.Input<number>;
    /**
     * The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `openid`.
     */
    defaultScopes?: pulumi.Input<string>;
    /**
     * When `true`, disables the check for the `typ` claim of tokens received from the identity provider. Defaults to `false`.
     */
    disableTypeClaimCheck?: pulumi.Input<boolean>;
    /**
     * When `true`, disables the usage of the user info service to obtain additional user information. Defaults to `false`.
     */
    disableUserInfo?: pulumi.Input<boolean>;
    /**
     * Display name for the identity provider in the GUI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * When `true`, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to `false`.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * The issuer identifier for the issuer of the response. If not provided, no validation will be performed.
     */
    issuer?: pulumi.Input<string>;
    /**
     * JSON Web Key Set URL.
     */
    jwksUrl?: pulumi.Input<string>;
    /**
     * When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    /**
     * Pass login hint to identity provider.
     */
    loginHint?: pulumi.Input<string>;
    /**
     * The Logout URL is the end session endpoint to use to sign-out the user from external identity provider.
     */
    logoutUrl?: pulumi.Input<string>;
    /**
     * The organization domain to associate this identity provider with. it is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
     */
    orgDomain?: pulumi.Input<string>;
    /**
     * Indicates whether to automatically redirect user to this identity provider when email domain matches domain.
     */
    orgRedirectModeEmailMatches?: pulumi.Input<boolean>;
    /**
     * The ID of the organization to link this identity provider to.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `oidc`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * The Token URL.
     */
    tokenUrl: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
    /**
     * Pass current locale to identity provider. Defaults to `false`.
     */
    uiLocales?: pulumi.Input<boolean>;
    /**
     * User Info URL.
     */
    userInfoUrl?: pulumi.Input<string>;
    /**
     * Enable/disable signature validation of external IDP signatures. Defaults to `false`.
     */
    validateSignature?: pulumi.Input<boolean>;
}
