// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AttributeImporterIdentityProviderMapperArgs, AttributeImporterIdentityProviderMapperState } from "./attributeImporterIdentityProviderMapper";
export type AttributeImporterIdentityProviderMapper = import("./attributeImporterIdentityProviderMapper").AttributeImporterIdentityProviderMapper;
export const AttributeImporterIdentityProviderMapper: typeof import("./attributeImporterIdentityProviderMapper").AttributeImporterIdentityProviderMapper = null as any;
utilities.lazyLoad(exports, ["AttributeImporterIdentityProviderMapper"], () => require("./attributeImporterIdentityProviderMapper"));

export { AttributeToRoleIdentityMapperArgs, AttributeToRoleIdentityMapperState } from "./attributeToRoleIdentityMapper";
export type AttributeToRoleIdentityMapper = import("./attributeToRoleIdentityMapper").AttributeToRoleIdentityMapper;
export const AttributeToRoleIdentityMapper: typeof import("./attributeToRoleIdentityMapper").AttributeToRoleIdentityMapper = null as any;
utilities.lazyLoad(exports, ["AttributeToRoleIdentityMapper"], () => require("./attributeToRoleIdentityMapper"));

export { CustomIdentityProviderMappingArgs, CustomIdentityProviderMappingState } from "./customIdentityProviderMapping";
export type CustomIdentityProviderMapping = import("./customIdentityProviderMapping").CustomIdentityProviderMapping;
export const CustomIdentityProviderMapping: typeof import("./customIdentityProviderMapping").CustomIdentityProviderMapping = null as any;
utilities.lazyLoad(exports, ["CustomIdentityProviderMapping"], () => require("./customIdentityProviderMapping"));

export { CustomUserFederationArgs, CustomUserFederationState } from "./customUserFederation";
export type CustomUserFederation = import("./customUserFederation").CustomUserFederation;
export const CustomUserFederation: typeof import("./customUserFederation").CustomUserFederation = null as any;
utilities.lazyLoad(exports, ["CustomUserFederation"], () => require("./customUserFederation"));

export { DefaultGroupsArgs, DefaultGroupsState } from "./defaultGroups";
export type DefaultGroups = import("./defaultGroups").DefaultGroups;
export const DefaultGroups: typeof import("./defaultGroups").DefaultGroups = null as any;
utilities.lazyLoad(exports, ["DefaultGroups"], () => require("./defaultGroups"));

export { DefaultRolesArgs, DefaultRolesState } from "./defaultRoles";
export type DefaultRoles = import("./defaultRoles").DefaultRoles;
export const DefaultRoles: typeof import("./defaultRoles").DefaultRoles = null as any;
utilities.lazyLoad(exports, ["DefaultRoles"], () => require("./defaultRoles"));

export { GenericClientProtocolMapperArgs, GenericClientProtocolMapperState } from "./genericClientProtocolMapper";
export type GenericClientProtocolMapper = import("./genericClientProtocolMapper").GenericClientProtocolMapper;
export const GenericClientProtocolMapper: typeof import("./genericClientProtocolMapper").GenericClientProtocolMapper = null as any;
utilities.lazyLoad(exports, ["GenericClientProtocolMapper"], () => require("./genericClientProtocolMapper"));

export { GenericClientRoleMapperArgs, GenericClientRoleMapperState } from "./genericClientRoleMapper";
export type GenericClientRoleMapper = import("./genericClientRoleMapper").GenericClientRoleMapper;
export const GenericClientRoleMapper: typeof import("./genericClientRoleMapper").GenericClientRoleMapper = null as any;
utilities.lazyLoad(exports, ["GenericClientRoleMapper"], () => require("./genericClientRoleMapper"));

export { GenericProtocolMapperArgs, GenericProtocolMapperState } from "./genericProtocolMapper";
export type GenericProtocolMapper = import("./genericProtocolMapper").GenericProtocolMapper;
export const GenericProtocolMapper: typeof import("./genericProtocolMapper").GenericProtocolMapper = null as any;
utilities.lazyLoad(exports, ["GenericProtocolMapper"], () => require("./genericProtocolMapper"));

export { GenericRoleMapperArgs, GenericRoleMapperState } from "./genericRoleMapper";
export type GenericRoleMapper = import("./genericRoleMapper").GenericRoleMapper;
export const GenericRoleMapper: typeof import("./genericRoleMapper").GenericRoleMapper = null as any;
utilities.lazyLoad(exports, ["GenericRoleMapper"], () => require("./genericRoleMapper"));

export { GetAuthenticationExecutionArgs, GetAuthenticationExecutionResult, GetAuthenticationExecutionOutputArgs } from "./getAuthenticationExecution";
export const getAuthenticationExecution: typeof import("./getAuthenticationExecution").getAuthenticationExecution = null as any;
export const getAuthenticationExecutionOutput: typeof import("./getAuthenticationExecution").getAuthenticationExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationExecution","getAuthenticationExecutionOutput"], () => require("./getAuthenticationExecution"));

export { GetAuthenticationFlowArgs, GetAuthenticationFlowResult, GetAuthenticationFlowOutputArgs } from "./getAuthenticationFlow";
export const getAuthenticationFlow: typeof import("./getAuthenticationFlow").getAuthenticationFlow = null as any;
export const getAuthenticationFlowOutput: typeof import("./getAuthenticationFlow").getAuthenticationFlowOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationFlow","getAuthenticationFlowOutput"], () => require("./getAuthenticationFlow"));

export { GetClientDescriptionConverterArgs, GetClientDescriptionConverterResult, GetClientDescriptionConverterOutputArgs } from "./getClientDescriptionConverter";
export const getClientDescriptionConverter: typeof import("./getClientDescriptionConverter").getClientDescriptionConverter = null as any;
export const getClientDescriptionConverterOutput: typeof import("./getClientDescriptionConverter").getClientDescriptionConverterOutput = null as any;
utilities.lazyLoad(exports, ["getClientDescriptionConverter","getClientDescriptionConverterOutput"], () => require("./getClientDescriptionConverter"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetRealmArgs, GetRealmResult, GetRealmOutputArgs } from "./getRealm";
export const getRealm: typeof import("./getRealm").getRealm = null as any;
export const getRealmOutput: typeof import("./getRealm").getRealmOutput = null as any;
utilities.lazyLoad(exports, ["getRealm","getRealmOutput"], () => require("./getRealm"));

export { GetRealmKeysArgs, GetRealmKeysResult, GetRealmKeysOutputArgs } from "./getRealmKeys";
export const getRealmKeys: typeof import("./getRealmKeys").getRealmKeys = null as any;
export const getRealmKeysOutput: typeof import("./getRealmKeys").getRealmKeysOutput = null as any;
utilities.lazyLoad(exports, ["getRealmKeys","getRealmKeysOutput"], () => require("./getRealmKeys"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserRealmRolesArgs, GetUserRealmRolesResult, GetUserRealmRolesOutputArgs } from "./getUserRealmRoles";
export const getUserRealmRoles: typeof import("./getUserRealmRoles").getUserRealmRoles = null as any;
export const getUserRealmRolesOutput: typeof import("./getUserRealmRoles").getUserRealmRolesOutput = null as any;
utilities.lazyLoad(exports, ["getUserRealmRoles","getUserRealmRolesOutput"], () => require("./getUserRealmRoles"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipsArgs, GroupMembershipsState } from "./groupMemberships";
export type GroupMemberships = import("./groupMemberships").GroupMemberships;
export const GroupMemberships: typeof import("./groupMemberships").GroupMemberships = null as any;
utilities.lazyLoad(exports, ["GroupMemberships"], () => require("./groupMemberships"));

export { GroupPermissionsArgs, GroupPermissionsState } from "./groupPermissions";
export type GroupPermissions = import("./groupPermissions").GroupPermissions;
export const GroupPermissions: typeof import("./groupPermissions").GroupPermissions = null as any;
utilities.lazyLoad(exports, ["GroupPermissions"], () => require("./groupPermissions"));

export { GroupRolesArgs, GroupRolesState } from "./groupRoles";
export type GroupRoles = import("./groupRoles").GroupRoles;
export const GroupRoles: typeof import("./groupRoles").GroupRoles = null as any;
utilities.lazyLoad(exports, ["GroupRoles"], () => require("./groupRoles"));

export { HardcodedAttributeIdentityProviderMapperArgs, HardcodedAttributeIdentityProviderMapperState } from "./hardcodedAttributeIdentityProviderMapper";
export type HardcodedAttributeIdentityProviderMapper = import("./hardcodedAttributeIdentityProviderMapper").HardcodedAttributeIdentityProviderMapper;
export const HardcodedAttributeIdentityProviderMapper: typeof import("./hardcodedAttributeIdentityProviderMapper").HardcodedAttributeIdentityProviderMapper = null as any;
utilities.lazyLoad(exports, ["HardcodedAttributeIdentityProviderMapper"], () => require("./hardcodedAttributeIdentityProviderMapper"));

export { HardcodedAttributeMapperArgs, HardcodedAttributeMapperState } from "./hardcodedAttributeMapper";
export type HardcodedAttributeMapper = import("./hardcodedAttributeMapper").HardcodedAttributeMapper;
export const HardcodedAttributeMapper: typeof import("./hardcodedAttributeMapper").HardcodedAttributeMapper = null as any;
utilities.lazyLoad(exports, ["HardcodedAttributeMapper"], () => require("./hardcodedAttributeMapper"));

export { HardcodedGroupIdentityProviderMapperArgs, HardcodedGroupIdentityProviderMapperState } from "./hardcodedGroupIdentityProviderMapper";
export type HardcodedGroupIdentityProviderMapper = import("./hardcodedGroupIdentityProviderMapper").HardcodedGroupIdentityProviderMapper;
export const HardcodedGroupIdentityProviderMapper: typeof import("./hardcodedGroupIdentityProviderMapper").HardcodedGroupIdentityProviderMapper = null as any;
utilities.lazyLoad(exports, ["HardcodedGroupIdentityProviderMapper"], () => require("./hardcodedGroupIdentityProviderMapper"));

export { HardcodedRoleIdentityMapperArgs, HardcodedRoleIdentityMapperState } from "./hardcodedRoleIdentityMapper";
export type HardcodedRoleIdentityMapper = import("./hardcodedRoleIdentityMapper").HardcodedRoleIdentityMapper;
export const HardcodedRoleIdentityMapper: typeof import("./hardcodedRoleIdentityMapper").HardcodedRoleIdentityMapper = null as any;
utilities.lazyLoad(exports, ["HardcodedRoleIdentityMapper"], () => require("./hardcodedRoleIdentityMapper"));

export { IdentityProviderTokenExchangeScopePermissionArgs, IdentityProviderTokenExchangeScopePermissionState } from "./identityProviderTokenExchangeScopePermission";
export type IdentityProviderTokenExchangeScopePermission = import("./identityProviderTokenExchangeScopePermission").IdentityProviderTokenExchangeScopePermission;
export const IdentityProviderTokenExchangeScopePermission: typeof import("./identityProviderTokenExchangeScopePermission").IdentityProviderTokenExchangeScopePermission = null as any;
utilities.lazyLoad(exports, ["IdentityProviderTokenExchangeScopePermission"], () => require("./identityProviderTokenExchangeScopePermission"));

export * from "./provider";
import { Provider } from "./provider";

export { RealmArgs, RealmState } from "./realm";
export type Realm = import("./realm").Realm;
export const Realm: typeof import("./realm").Realm = null as any;
utilities.lazyLoad(exports, ["Realm"], () => require("./realm"));

export { RealmDefaultClientScopesArgs, RealmDefaultClientScopesState } from "./realmDefaultClientScopes";
export type RealmDefaultClientScopes = import("./realmDefaultClientScopes").RealmDefaultClientScopes;
export const RealmDefaultClientScopes: typeof import("./realmDefaultClientScopes").RealmDefaultClientScopes = null as any;
utilities.lazyLoad(exports, ["RealmDefaultClientScopes"], () => require("./realmDefaultClientScopes"));

export { RealmEventsArgs, RealmEventsState } from "./realmEvents";
export type RealmEvents = import("./realmEvents").RealmEvents;
export const RealmEvents: typeof import("./realmEvents").RealmEvents = null as any;
utilities.lazyLoad(exports, ["RealmEvents"], () => require("./realmEvents"));

export { RealmKeystoreAesGeneratedArgs, RealmKeystoreAesGeneratedState } from "./realmKeystoreAesGenerated";
export type RealmKeystoreAesGenerated = import("./realmKeystoreAesGenerated").RealmKeystoreAesGenerated;
export const RealmKeystoreAesGenerated: typeof import("./realmKeystoreAesGenerated").RealmKeystoreAesGenerated = null as any;
utilities.lazyLoad(exports, ["RealmKeystoreAesGenerated"], () => require("./realmKeystoreAesGenerated"));

export { RealmKeystoreEcdsaGeneratedArgs, RealmKeystoreEcdsaGeneratedState } from "./realmKeystoreEcdsaGenerated";
export type RealmKeystoreEcdsaGenerated = import("./realmKeystoreEcdsaGenerated").RealmKeystoreEcdsaGenerated;
export const RealmKeystoreEcdsaGenerated: typeof import("./realmKeystoreEcdsaGenerated").RealmKeystoreEcdsaGenerated = null as any;
utilities.lazyLoad(exports, ["RealmKeystoreEcdsaGenerated"], () => require("./realmKeystoreEcdsaGenerated"));

export { RealmKeystoreHmacGeneratedArgs, RealmKeystoreHmacGeneratedState } from "./realmKeystoreHmacGenerated";
export type RealmKeystoreHmacGenerated = import("./realmKeystoreHmacGenerated").RealmKeystoreHmacGenerated;
export const RealmKeystoreHmacGenerated: typeof import("./realmKeystoreHmacGenerated").RealmKeystoreHmacGenerated = null as any;
utilities.lazyLoad(exports, ["RealmKeystoreHmacGenerated"], () => require("./realmKeystoreHmacGenerated"));

export { RealmKeystoreJavaGeneratedArgs, RealmKeystoreJavaGeneratedState } from "./realmKeystoreJavaGenerated";
export type RealmKeystoreJavaGenerated = import("./realmKeystoreJavaGenerated").RealmKeystoreJavaGenerated;
export const RealmKeystoreJavaGenerated: typeof import("./realmKeystoreJavaGenerated").RealmKeystoreJavaGenerated = null as any;
utilities.lazyLoad(exports, ["RealmKeystoreJavaGenerated"], () => require("./realmKeystoreJavaGenerated"));

export { RealmKeystoreRsaArgs, RealmKeystoreRsaState } from "./realmKeystoreRsa";
export type RealmKeystoreRsa = import("./realmKeystoreRsa").RealmKeystoreRsa;
export const RealmKeystoreRsa: typeof import("./realmKeystoreRsa").RealmKeystoreRsa = null as any;
utilities.lazyLoad(exports, ["RealmKeystoreRsa"], () => require("./realmKeystoreRsa"));

export { RealmKeystoreRsaGeneratedArgs, RealmKeystoreRsaGeneratedState } from "./realmKeystoreRsaGenerated";
export type RealmKeystoreRsaGenerated = import("./realmKeystoreRsaGenerated").RealmKeystoreRsaGenerated;
export const RealmKeystoreRsaGenerated: typeof import("./realmKeystoreRsaGenerated").RealmKeystoreRsaGenerated = null as any;
utilities.lazyLoad(exports, ["RealmKeystoreRsaGenerated"], () => require("./realmKeystoreRsaGenerated"));

export { RealmLocalizationArgs, RealmLocalizationState } from "./realmLocalization";
export type RealmLocalization = import("./realmLocalization").RealmLocalization;
export const RealmLocalization: typeof import("./realmLocalization").RealmLocalization = null as any;
utilities.lazyLoad(exports, ["RealmLocalization"], () => require("./realmLocalization"));

export { RealmOptionalClientScopesArgs, RealmOptionalClientScopesState } from "./realmOptionalClientScopes";
export type RealmOptionalClientScopes = import("./realmOptionalClientScopes").RealmOptionalClientScopes;
export const RealmOptionalClientScopes: typeof import("./realmOptionalClientScopes").RealmOptionalClientScopes = null as any;
utilities.lazyLoad(exports, ["RealmOptionalClientScopes"], () => require("./realmOptionalClientScopes"));

export { RealmUserProfileArgs, RealmUserProfileState } from "./realmUserProfile";
export type RealmUserProfile = import("./realmUserProfile").RealmUserProfile;
export const RealmUserProfile: typeof import("./realmUserProfile").RealmUserProfile = null as any;
utilities.lazyLoad(exports, ["RealmUserProfile"], () => require("./realmUserProfile"));

export { RequiredActionArgs, RequiredActionState } from "./requiredAction";
export type RequiredAction = import("./requiredAction").RequiredAction;
export const RequiredAction: typeof import("./requiredAction").RequiredAction = null as any;
utilities.lazyLoad(exports, ["RequiredAction"], () => require("./requiredAction"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupsArgs, UserGroupsState } from "./userGroups";
export type UserGroups = import("./userGroups").UserGroups;
export const UserGroups: typeof import("./userGroups").UserGroups = null as any;
utilities.lazyLoad(exports, ["UserGroups"], () => require("./userGroups"));

export { UserRolesArgs, UserRolesState } from "./userRoles";
export type UserRoles = import("./userRoles").UserRoles;
export const UserRoles: typeof import("./userRoles").UserRoles = null as any;
utilities.lazyLoad(exports, ["UserRoles"], () => require("./userRoles"));

export { UserTemplateImporterIdentityProviderMapperArgs, UserTemplateImporterIdentityProviderMapperState } from "./userTemplateImporterIdentityProviderMapper";
export type UserTemplateImporterIdentityProviderMapper = import("./userTemplateImporterIdentityProviderMapper").UserTemplateImporterIdentityProviderMapper;
export const UserTemplateImporterIdentityProviderMapper: typeof import("./userTemplateImporterIdentityProviderMapper").UserTemplateImporterIdentityProviderMapper = null as any;
utilities.lazyLoad(exports, ["UserTemplateImporterIdentityProviderMapper"], () => require("./userTemplateImporterIdentityProviderMapper"));

export { UsersPermissionsArgs, UsersPermissionsState } from "./usersPermissions";
export type UsersPermissions = import("./usersPermissions").UsersPermissions;
export const UsersPermissions: typeof import("./usersPermissions").UsersPermissions = null as any;
utilities.lazyLoad(exports, ["UsersPermissions"], () => require("./usersPermissions"));


// Export sub-modules:
import * as authentication from "./authentication";
import * as config from "./config";
import * as ldap from "./ldap";
import * as oidc from "./oidc";
import * as openid from "./openid";
import * as saml from "./saml";
import * as types from "./types";

export {
    authentication,
    config,
    ldap,
    oidc,
    openid,
    saml,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "keycloak:index/attributeImporterIdentityProviderMapper:AttributeImporterIdentityProviderMapper":
                return new AttributeImporterIdentityProviderMapper(name, <any>undefined, { urn })
            case "keycloak:index/attributeToRoleIdentityMapper:AttributeToRoleIdentityMapper":
                return new AttributeToRoleIdentityMapper(name, <any>undefined, { urn })
            case "keycloak:index/customIdentityProviderMapping:CustomIdentityProviderMapping":
                return new CustomIdentityProviderMapping(name, <any>undefined, { urn })
            case "keycloak:index/customUserFederation:CustomUserFederation":
                return new CustomUserFederation(name, <any>undefined, { urn })
            case "keycloak:index/defaultGroups:DefaultGroups":
                return new DefaultGroups(name, <any>undefined, { urn })
            case "keycloak:index/defaultRoles:DefaultRoles":
                return new DefaultRoles(name, <any>undefined, { urn })
            case "keycloak:index/genericClientProtocolMapper:GenericClientProtocolMapper":
                return new GenericClientProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:index/genericClientRoleMapper:GenericClientRoleMapper":
                return new GenericClientRoleMapper(name, <any>undefined, { urn })
            case "keycloak:index/genericProtocolMapper:GenericProtocolMapper":
                return new GenericProtocolMapper(name, <any>undefined, { urn })
            case "keycloak:index/genericRoleMapper:GenericRoleMapper":
                return new GenericRoleMapper(name, <any>undefined, { urn })
            case "keycloak:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "keycloak:index/groupMemberships:GroupMemberships":
                return new GroupMemberships(name, <any>undefined, { urn })
            case "keycloak:index/groupPermissions:GroupPermissions":
                return new GroupPermissions(name, <any>undefined, { urn })
            case "keycloak:index/groupRoles:GroupRoles":
                return new GroupRoles(name, <any>undefined, { urn })
            case "keycloak:index/hardcodedAttributeIdentityProviderMapper:HardcodedAttributeIdentityProviderMapper":
                return new HardcodedAttributeIdentityProviderMapper(name, <any>undefined, { urn })
            case "keycloak:index/hardcodedAttributeMapper:HardcodedAttributeMapper":
                return new HardcodedAttributeMapper(name, <any>undefined, { urn })
            case "keycloak:index/hardcodedGroupIdentityProviderMapper:HardcodedGroupIdentityProviderMapper":
                return new HardcodedGroupIdentityProviderMapper(name, <any>undefined, { urn })
            case "keycloak:index/hardcodedRoleIdentityMapper:HardcodedRoleIdentityMapper":
                return new HardcodedRoleIdentityMapper(name, <any>undefined, { urn })
            case "keycloak:index/identityProviderTokenExchangeScopePermission:IdentityProviderTokenExchangeScopePermission":
                return new IdentityProviderTokenExchangeScopePermission(name, <any>undefined, { urn })
            case "keycloak:index/realm:Realm":
                return new Realm(name, <any>undefined, { urn })
            case "keycloak:index/realmDefaultClientScopes:RealmDefaultClientScopes":
                return new RealmDefaultClientScopes(name, <any>undefined, { urn })
            case "keycloak:index/realmEvents:RealmEvents":
                return new RealmEvents(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreAesGenerated:RealmKeystoreAesGenerated":
                return new RealmKeystoreAesGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreEcdsaGenerated:RealmKeystoreEcdsaGenerated":
                return new RealmKeystoreEcdsaGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreHmacGenerated:RealmKeystoreHmacGenerated":
                return new RealmKeystoreHmacGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreJavaGenerated:RealmKeystoreJavaGenerated":
                return new RealmKeystoreJavaGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreRsa:RealmKeystoreRsa":
                return new RealmKeystoreRsa(name, <any>undefined, { urn })
            case "keycloak:index/realmKeystoreRsaGenerated:RealmKeystoreRsaGenerated":
                return new RealmKeystoreRsaGenerated(name, <any>undefined, { urn })
            case "keycloak:index/realmLocalization:RealmLocalization":
                return new RealmLocalization(name, <any>undefined, { urn })
            case "keycloak:index/realmOptionalClientScopes:RealmOptionalClientScopes":
                return new RealmOptionalClientScopes(name, <any>undefined, { urn })
            case "keycloak:index/realmUserProfile:RealmUserProfile":
                return new RealmUserProfile(name, <any>undefined, { urn })
            case "keycloak:index/requiredAction:RequiredAction":
                return new RequiredAction(name, <any>undefined, { urn })
            case "keycloak:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "keycloak:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "keycloak:index/userGroups:UserGroups":
                return new UserGroups(name, <any>undefined, { urn })
            case "keycloak:index/userRoles:UserRoles":
                return new UserRoles(name, <any>undefined, { urn })
            case "keycloak:index/userTemplateImporterIdentityProviderMapper:UserTemplateImporterIdentityProviderMapper":
                return new UserTemplateImporterIdentityProviderMapper(name, <any>undefined, { urn })
            case "keycloak:index/usersPermissions:UsersPermissions":
                return new UsersPermissions(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("keycloak", "index/attributeImporterIdentityProviderMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/attributeToRoleIdentityMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/customIdentityProviderMapping", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/customUserFederation", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/defaultGroups", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/defaultRoles", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/genericClientProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/genericClientRoleMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/genericProtocolMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/genericRoleMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/group", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/groupMemberships", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/groupPermissions", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/groupRoles", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/hardcodedAttributeIdentityProviderMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/hardcodedAttributeMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/hardcodedGroupIdentityProviderMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/hardcodedRoleIdentityMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/identityProviderTokenExchangeScopePermission", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realm", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmDefaultClientScopes", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmEvents", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreAesGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreEcdsaGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreHmacGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreJavaGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreRsa", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmKeystoreRsaGenerated", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmLocalization", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmOptionalClientScopes", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/realmUserProfile", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/requiredAction", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/role", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/user", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/userGroups", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/userRoles", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/userTemplateImporterIdentityProviderMapper", _module)
pulumi.runtime.registerResourceModule("keycloak", "index/usersPermissions", _module)
pulumi.runtime.registerResourcePackage("keycloak", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:keycloak") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
