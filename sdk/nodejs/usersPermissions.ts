// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows you to manage fine-grained permissions for all users in a realm: https://www.keycloak.org/docs/latest/server_admin/#_users-permissions
 *
 * This is part of a preview Keycloak feature: `adminFineGrainedAuthz` (see https://www.keycloak.org/docs/latest/server_admin/#_fine_grain_permissions).
 * This feature can be enabled with the Keycloak option `-Dkeycloak.profile.feature.admin_fine_grained_authz=enabled`. See the
 * example `docker-compose.yml` file for an example.
 *
 * When enabling fine-grained permissions for users, Keycloak does several things automatically:
 * 1. Enable Authorization on built-in `realm-management` client (if not already enabled).
 * 2. Create a resource representing the users permissions.
 * 3. Create scopes `view`, `manage`, `map-roles`, `manage-group-membership`, `impersonate`, and `user-impersonated`.
 * 4. Create all scope based permission for the scopes and users resources.
 *
 * > This resource should only be created once per realm.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {realm: "my-realm"});
 * const realmManagement = keycloak.openid.getClientOutput({
 *     realmId: realm.id,
 *     clientId: "realm-management",
 * });
 * // enable permissions for realm-management client
 * const realmManagementPermission = new keycloak.openid.ClientPermissions("realm_management_permission", {
 *     realmId: realm.id,
 *     clientId: realmManagement.apply(realmManagement => realmManagement.id),
 *     enabled: true,
 * });
 * // creating a user to use with the keycloak_openid_client_user_policy resource
 * const test = new keycloak.User("test", {
 *     realmId: realm.id,
 *     username: "test-user",
 *     email: "test-user@fakedomain.com",
 *     firstName: "Testy",
 *     lastName: "Tester",
 * });
 * const testClientUserPolicy = new keycloak.openid.ClientUserPolicy("test", {
 *     realmId: realm.id,
 *     resourceServerId: realmManagement.apply(realmManagement => realmManagement.id),
 *     name: "client_user_policy_test",
 *     users: [test.id],
 *     logic: "POSITIVE",
 *     decisionStrategy: "UNANIMOUS",
 * }, {
 *     dependsOn: [realmManagementPermission],
 * });
 * const usersPermissions = new keycloak.UsersPermissions("users_permissions", {
 *     realmId: realm.id,
 *     viewScope: {
 *         policies: [testClientUserPolicy.id],
 *         description: "description",
 *         decisionStrategy: "UNANIMOUS",
 *     },
 *     manageScope: {
 *         policies: [testClientUserPolicy.id],
 *         description: "description",
 *         decisionStrategy: "UNANIMOUS",
 *     },
 *     mapRolesScope: {
 *         policies: [testClientUserPolicy.id],
 *         description: "description",
 *         decisionStrategy: "UNANIMOUS",
 *     },
 *     manageGroupMembershipScope: {
 *         policies: [testClientUserPolicy.id],
 *         description: "description",
 *         decisionStrategy: "UNANIMOUS",
 *     },
 *     impersonateScope: {
 *         policies: [testClientUserPolicy.id],
 *         description: "description",
 *         decisionStrategy: "UNANIMOUS",
 *     },
 *     userImpersonatedScope: {
 *         policies: [testClientUserPolicy.id],
 *         description: "description",
 *         decisionStrategy: "UNANIMOUS",
 *     },
 * });
 * ```
 *
 * ### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `realmId` - (Required) The realm in which to manage fine-grained user permissions.
 *
 * Each of the scopes that can be managed are defined below:
 *
 * - `viewScope` - (Optional) When specified, set the scope based view permission.
 * - `manageScope` - (Optional) When specified, set the scope based manage permission.
 * - `mapRolesScope` - (Optional) When specified, set the scope based mapRoles permission.
 * - `manageGroupMembershipScope` - (Optional) When specified, set the scope based manageGroupMembership permission.
 * - `impersonateScope` - (Optional) When specified, set the scope based impersonate permission.
 * - `userImpersonatedScope` - (Optional) When specified, set the scope based userImpersonated permission.
 *
 * The configuration block for each of these scopes supports the following arguments:
 *
 * - `policies` - (Optional) Assigned policies to the permission. Each element within this list should be a policy ID.
 * - `description` - (Optional) Description of the permission.
 * - `decisionStrategy` - (Optional) Decision strategy of the permission.
 *
 * ### Attributes Reference
 *
 * In addition to the arguments listed above, the following computed attributes are exported:
 *
 * - `enabled` - When true, this indicates that fine-grained user permissions are enabled. This will always be `true`.
 * - `authorizationResourceServerId` - Resource server id representing the realm management client on which these permissions are managed.
 */
export class UsersPermissions extends pulumi.CustomResource {
    /**
     * Get an existing UsersPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UsersPermissionsState, opts?: pulumi.CustomResourceOptions): UsersPermissions {
        return new UsersPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/usersPermissions:UsersPermissions';

    /**
     * Returns true if the given object is an instance of UsersPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UsersPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UsersPermissions.__pulumiType;
    }

    /**
     * Resource server id representing the realm management client on which this permission is managed
     */
    declare public /*out*/ readonly authorizationResourceServerId: pulumi.Output<string>;
    declare public /*out*/ readonly enabled: pulumi.Output<boolean>;
    declare public readonly impersonateScope: pulumi.Output<outputs.UsersPermissionsImpersonateScope | undefined>;
    declare public readonly manageGroupMembershipScope: pulumi.Output<outputs.UsersPermissionsManageGroupMembershipScope | undefined>;
    declare public readonly manageScope: pulumi.Output<outputs.UsersPermissionsManageScope | undefined>;
    declare public readonly mapRolesScope: pulumi.Output<outputs.UsersPermissionsMapRolesScope | undefined>;
    declare public readonly realmId: pulumi.Output<string>;
    declare public readonly userImpersonatedScope: pulumi.Output<outputs.UsersPermissionsUserImpersonatedScope | undefined>;
    declare public readonly viewScope: pulumi.Output<outputs.UsersPermissionsViewScope | undefined>;

    /**
     * Create a UsersPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UsersPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UsersPermissionsArgs | UsersPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UsersPermissionsState | undefined;
            resourceInputs["authorizationResourceServerId"] = state?.authorizationResourceServerId;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["impersonateScope"] = state?.impersonateScope;
            resourceInputs["manageGroupMembershipScope"] = state?.manageGroupMembershipScope;
            resourceInputs["manageScope"] = state?.manageScope;
            resourceInputs["mapRolesScope"] = state?.mapRolesScope;
            resourceInputs["realmId"] = state?.realmId;
            resourceInputs["userImpersonatedScope"] = state?.userImpersonatedScope;
            resourceInputs["viewScope"] = state?.viewScope;
        } else {
            const args = argsOrState as UsersPermissionsArgs | undefined;
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["impersonateScope"] = args?.impersonateScope;
            resourceInputs["manageGroupMembershipScope"] = args?.manageGroupMembershipScope;
            resourceInputs["manageScope"] = args?.manageScope;
            resourceInputs["mapRolesScope"] = args?.mapRolesScope;
            resourceInputs["realmId"] = args?.realmId;
            resourceInputs["userImpersonatedScope"] = args?.userImpersonatedScope;
            resourceInputs["viewScope"] = args?.viewScope;
            resourceInputs["authorizationResourceServerId"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UsersPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UsersPermissions resources.
 */
export interface UsersPermissionsState {
    /**
     * Resource server id representing the realm management client on which this permission is managed
     */
    authorizationResourceServerId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    impersonateScope?: pulumi.Input<inputs.UsersPermissionsImpersonateScope>;
    manageGroupMembershipScope?: pulumi.Input<inputs.UsersPermissionsManageGroupMembershipScope>;
    manageScope?: pulumi.Input<inputs.UsersPermissionsManageScope>;
    mapRolesScope?: pulumi.Input<inputs.UsersPermissionsMapRolesScope>;
    realmId?: pulumi.Input<string>;
    userImpersonatedScope?: pulumi.Input<inputs.UsersPermissionsUserImpersonatedScope>;
    viewScope?: pulumi.Input<inputs.UsersPermissionsViewScope>;
}

/**
 * The set of arguments for constructing a UsersPermissions resource.
 */
export interface UsersPermissionsArgs {
    impersonateScope?: pulumi.Input<inputs.UsersPermissionsImpersonateScope>;
    manageGroupMembershipScope?: pulumi.Input<inputs.UsersPermissionsManageGroupMembershipScope>;
    manageScope?: pulumi.Input<inputs.UsersPermissionsManageScope>;
    mapRolesScope?: pulumi.Input<inputs.UsersPermissionsMapRolesScope>;
    realmId: pulumi.Input<string>;
    userImpersonatedScope?: pulumi.Input<inputs.UsersPermissionsUserImpersonatedScope>;
    viewScope?: pulumi.Input<inputs.UsersPermissionsViewScope>;
}
