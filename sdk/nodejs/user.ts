// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows for creating and managing Users within Keycloak.
 *
 * This resource was created primarily to enable the acceptance tests for the `keycloak.Group` resource. Creating users within
 * Keycloak is not recommended. Instead, users should be federated from external sources by configuring user federation providers
 * or identity providers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const user = new keycloak.User("user", {
 *     realmId: realm.id,
 *     username: "bob",
 *     enabled: true,
 *     email: "bob@domain.com",
 *     firstName: "Bob",
 *     lastName: "Bobson",
 * });
 * const userWithInitialPassword = new keycloak.User("user_with_initial_password", {
 *     realmId: realm.id,
 *     username: "alice",
 *     enabled: true,
 *     email: "alice@domain.com",
 *     firstName: "Alice",
 *     lastName: "Aliceberg",
 *     attributes: {
 *         foo: "bar",
 *         multivalue: "value1##value2",
 *     },
 *     initialPassword: {
 *         value: "some password",
 *         temporary: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Users can be imported using the format `{{realm_id}}/{{user_id}}`, where `user_id` is the unique ID that Keycloak
 *
 * assigns to the user upon creation. This value can be found in the GUI when editing the user.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:index/user:User user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * A map representing attributes for the user. In order to add multivalue attributes, use `##` to seperate the values. Max length for each value is 255 chars
     */
    declare public readonly attributes: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The user's email.
     */
    declare public readonly email: pulumi.Output<string | undefined>;
    /**
     * Whether the email address was validated or not. Default to `false`.
     */
    declare public readonly emailVerified: pulumi.Output<boolean | undefined>;
    /**
     * When false, this user cannot log in. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * When specified, the user will be linked to a federated identity provider. Refer to the federated user example for more details.
     */
    declare public readonly federatedIdentities: pulumi.Output<outputs.UserFederatedIdentity[] | undefined>;
    /**
     * The user's first name.
     */
    declare public readonly firstName: pulumi.Output<string | undefined>;
    /**
     * When `true`, the user with the specified `username` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with users that Keycloak creates automatically during realm creation, such as `admin`. Note, that the user will not be removed during destruction if `import` is `true`.
     */
    declare public readonly import: pulumi.Output<boolean | undefined>;
    /**
     * When given, the user's initial password will be set. This attribute is only respected during initial user creation.
     */
    declare public readonly initialPassword: pulumi.Output<outputs.UserInitialPassword | undefined>;
    /**
     * The user's last name.
     */
    declare public readonly lastName: pulumi.Output<string | undefined>;
    /**
     * The realm this user belongs to.
     */
    declare public readonly realmId: pulumi.Output<string>;
    /**
     * A list of required user actions.
     */
    declare public readonly requiredActions: pulumi.Output<string[] | undefined>;
    /**
     * The unique username of this user.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["email"] = state?.email;
            resourceInputs["emailVerified"] = state?.emailVerified;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["federatedIdentities"] = state?.federatedIdentities;
            resourceInputs["firstName"] = state?.firstName;
            resourceInputs["import"] = state?.import;
            resourceInputs["initialPassword"] = state?.initialPassword;
            resourceInputs["lastName"] = state?.lastName;
            resourceInputs["realmId"] = state?.realmId;
            resourceInputs["requiredActions"] = state?.requiredActions;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["email"] = args?.email;
            resourceInputs["emailVerified"] = args?.emailVerified;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["federatedIdentities"] = args?.federatedIdentities;
            resourceInputs["firstName"] = args?.firstName;
            resourceInputs["import"] = args?.import;
            resourceInputs["initialPassword"] = args?.initialPassword;
            resourceInputs["lastName"] = args?.lastName;
            resourceInputs["realmId"] = args?.realmId;
            resourceInputs["requiredActions"] = args?.requiredActions;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * A map representing attributes for the user. In order to add multivalue attributes, use `##` to seperate the values. Max length for each value is 255 chars
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user's email.
     */
    email?: pulumi.Input<string>;
    /**
     * Whether the email address was validated or not. Default to `false`.
     */
    emailVerified?: pulumi.Input<boolean>;
    /**
     * When false, this user cannot log in. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When specified, the user will be linked to a federated identity provider. Refer to the federated user example for more details.
     */
    federatedIdentities?: pulumi.Input<pulumi.Input<inputs.UserFederatedIdentity>[]>;
    /**
     * The user's first name.
     */
    firstName?: pulumi.Input<string>;
    /**
     * When `true`, the user with the specified `username` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with users that Keycloak creates automatically during realm creation, such as `admin`. Note, that the user will not be removed during destruction if `import` is `true`.
     */
    import?: pulumi.Input<boolean>;
    /**
     * When given, the user's initial password will be set. This attribute is only respected during initial user creation.
     */
    initialPassword?: pulumi.Input<inputs.UserInitialPassword>;
    /**
     * The user's last name.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The realm this user belongs to.
     */
    realmId?: pulumi.Input<string>;
    /**
     * A list of required user actions.
     */
    requiredActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique username of this user.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * A map representing attributes for the user. In order to add multivalue attributes, use `##` to seperate the values. Max length for each value is 255 chars
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The user's email.
     */
    email?: pulumi.Input<string>;
    /**
     * Whether the email address was validated or not. Default to `false`.
     */
    emailVerified?: pulumi.Input<boolean>;
    /**
     * When false, this user cannot log in. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When specified, the user will be linked to a federated identity provider. Refer to the federated user example for more details.
     */
    federatedIdentities?: pulumi.Input<pulumi.Input<inputs.UserFederatedIdentity>[]>;
    /**
     * The user's first name.
     */
    firstName?: pulumi.Input<string>;
    /**
     * When `true`, the user with the specified `username` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with users that Keycloak creates automatically during realm creation, such as `admin`. Note, that the user will not be removed during destruction if `import` is `true`.
     */
    import?: pulumi.Input<boolean>;
    /**
     * When given, the user's initial password will be set. This attribute is only respected during initial user creation.
     */
    initialPassword?: pulumi.Input<inputs.UserInitialPassword>;
    /**
     * The user's last name.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The realm this user belongs to.
     */
    realmId: pulumi.Input<string>;
    /**
     * A list of required user actions.
     */
    requiredActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique username of this user.
     */
    username: pulumi.Input<string>;
}
