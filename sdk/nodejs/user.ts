// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Allows for creating and managing Users within Keycloak.
 *
 * This resource was created primarily to enable the acceptance tests for the `keycloak.Group` resource. Creating users within
 * Keycloak is not recommended. Instead, users should be federated from external sources by configuring user federation providers
 * or identity providers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const user = new keycloak.User("user", {
 *     realmId: realm.id,
 *     username: "bob",
 *     enabled: true,
 *     email: "bob@domain.com",
 *     firstName: "Bob",
 *     lastName: "Bobson",
 * });
 * const userWithInitialPassword = new keycloak.User("userWithInitialPassword", {
 *     realmId: realm.id,
 *     username: "alice",
 *     enabled: true,
 *     email: "alice@domain.com",
 *     firstName: "Alice",
 *     lastName: "Aliceberg",
 *     attributes: {
 *         foo: "bar",
 *     },
 *     initialPassword: {
 *         value: "some password",
 *         temporary: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Users can be imported using the format `{{realm_id}}/{{user_id}}`, where `user_id` is the unique ID that Keycloak assigns to the user upon creation. This value can be found in the GUI when editing the user. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:index/user:User user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * A map representing attributes for the user
     */
    public readonly attributes!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The user's email.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * Whether the email address was validated or not. Default to `false`.
     */
    public readonly emailVerified!: pulumi.Output<boolean | undefined>;
    /**
     * When false, this user cannot log in. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly federatedIdentities!: pulumi.Output<outputs.UserFederatedIdentity[] | undefined>;
    /**
     * The user's first name.
     */
    public readonly firstName!: pulumi.Output<string | undefined>;
    /**
     * When given, the user's initial password will be set. This attribute is only respected during initial user creation.
     */
    public readonly initialPassword!: pulumi.Output<outputs.UserInitialPassword | undefined>;
    /**
     * The user's last name.
     */
    public readonly lastName!: pulumi.Output<string | undefined>;
    /**
     * The realm this user belongs to.
     */
    public readonly realmId!: pulumi.Output<string>;
    /**
     * The unique username of this user.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as UserState | undefined;
            inputs["attributes"] = state ? state.attributes : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["emailVerified"] = state ? state.emailVerified : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["federatedIdentities"] = state ? state.federatedIdentities : undefined;
            inputs["firstName"] = state ? state.firstName : undefined;
            inputs["initialPassword"] = state ? state.initialPassword : undefined;
            inputs["lastName"] = state ? state.lastName : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            if (!args || args.username === undefined) {
                throw new Error("Missing required property 'username'");
            }
            inputs["attributes"] = args ? args.attributes : undefined;
            inputs["email"] = args ? args.email : undefined;
            inputs["emailVerified"] = args ? args.emailVerified : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["federatedIdentities"] = args ? args.federatedIdentities : undefined;
            inputs["firstName"] = args ? args.firstName : undefined;
            inputs["initialPassword"] = args ? args.initialPassword : undefined;
            inputs["lastName"] = args ? args.lastName : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
            inputs["username"] = args ? args.username : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(User.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * A map representing attributes for the user
     */
    readonly attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * The user's email.
     */
    readonly email?: pulumi.Input<string>;
    /**
     * Whether the email address was validated or not. Default to `false`.
     */
    readonly emailVerified?: pulumi.Input<boolean>;
    /**
     * When false, this user cannot log in. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly federatedIdentities?: pulumi.Input<pulumi.Input<inputs.UserFederatedIdentity>[]>;
    /**
     * The user's first name.
     */
    readonly firstName?: pulumi.Input<string>;
    /**
     * When given, the user's initial password will be set. This attribute is only respected during initial user creation.
     */
    readonly initialPassword?: pulumi.Input<inputs.UserInitialPassword>;
    /**
     * The user's last name.
     */
    readonly lastName?: pulumi.Input<string>;
    /**
     * The realm this user belongs to.
     */
    readonly realmId?: pulumi.Input<string>;
    /**
     * The unique username of this user.
     */
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * A map representing attributes for the user
     */
    readonly attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * The user's email.
     */
    readonly email?: pulumi.Input<string>;
    /**
     * Whether the email address was validated or not. Default to `false`.
     */
    readonly emailVerified?: pulumi.Input<boolean>;
    /**
     * When false, this user cannot log in. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly federatedIdentities?: pulumi.Input<pulumi.Input<inputs.UserFederatedIdentity>[]>;
    /**
     * The user's first name.
     */
    readonly firstName?: pulumi.Input<string>;
    /**
     * When given, the user's initial password will be set. This attribute is only respected during initial user creation.
     */
    readonly initialPassword?: pulumi.Input<inputs.UserInitialPassword>;
    /**
     * The user's last name.
     */
    readonly lastName?: pulumi.Input<string>;
    /**
     * The realm this user belongs to.
     */
    readonly realmId: pulumi.Input<string>;
    /**
     * The unique username of this user.
     */
    readonly username: pulumi.Input<string>;
}
