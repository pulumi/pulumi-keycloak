// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # keycloak.User
 *
 * Allows for creating and managing Users within Keycloak.
 *
 * This resource was created primarily to enable the acceptance tests for the `keycloak.Group` resource.
 * Creating users within Keycloak is not recommended. Instead, users should be federated from external sources
 * by configuring user federation providers or identity providers.
 *
 * ### Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const user = new keycloak.User("user", {
 *     realmId: realm.id,
 *     username: "bob",
 *     enabled: true,
 *     email: "bob@domain.com",
 *     firstName: "Bob",
 *     lastName: "Bobson",
 * });
 * const userWithInitialPassword = new keycloak.User("user_with_initial_password", {
 *     realmId: realm.id,
 *     username: "alice",
 *     enabled: true,
 *     email: "alice@domain.com",
 *     firstName: "Alice",
 *     lastName: "Aliceberg",
 *     initialPassword: {
 *         value: "some password",
 *         temporary: true,
 *     },
 * });
 * ```
 *
 * ### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `realmId` - (Required) The realm this user belongs to.
 * - `username` - (Required) The unique username of this user.
 * - `initialPassword` (Optional) When given, the user's initial password will be set.
 *    This attribute is only respected during initial user creation.
 *     - `value` (Required) The initial password.
 *     - `temporary` (Optional) If set to `true`, the initial password is set up for renewal on first use. Default to `false`.
 * - `enabled` - (Optional) When false, this user cannot log in. Defaults to `true`.
 * - `email` - (Optional) The user's email.
 * - `firstName` - (Optional) The user's first name.
 * - `lastName` - (Optional) The user's last name.
 *
 * ### Import
 *
 * Users can be imported using the format `{{realm_id}}/{{user_id}}`, where `userId` is the unique ID that Keycloak
 * assigns to the user upon creation. This value can be found in the GUI when editing the user.
 *
 * Example:
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public readonly attributes!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly email!: pulumi.Output<string | undefined>;
    public readonly emailVerified!: pulumi.Output<boolean | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly federatedIdentities!: pulumi.Output<outputs.UserFederatedIdentity[] | undefined>;
    public readonly firstName!: pulumi.Output<string | undefined>;
    public readonly initialPassword!: pulumi.Output<outputs.UserInitialPassword | undefined>;
    public readonly lastName!: pulumi.Output<string | undefined>;
    public readonly realmId!: pulumi.Output<string>;
    public readonly requiredActions!: pulumi.Output<string[] | undefined>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["emailVerified"] = state ? state.emailVerified : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["federatedIdentities"] = state ? state.federatedIdentities : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["initialPassword"] = state ? state.initialPassword : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["requiredActions"] = state ? state.requiredActions : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["emailVerified"] = args ? args.emailVerified : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["federatedIdentities"] = args ? args.federatedIdentities : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["initialPassword"] = args ? args.initialPassword : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["requiredActions"] = args ? args.requiredActions : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    attributes?: pulumi.Input<{[key: string]: any}>;
    email?: pulumi.Input<string>;
    emailVerified?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    federatedIdentities?: pulumi.Input<pulumi.Input<inputs.UserFederatedIdentity>[]>;
    firstName?: pulumi.Input<string>;
    initialPassword?: pulumi.Input<inputs.UserInitialPassword>;
    lastName?: pulumi.Input<string>;
    realmId?: pulumi.Input<string>;
    requiredActions?: pulumi.Input<pulumi.Input<string>[]>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    attributes?: pulumi.Input<{[key: string]: any}>;
    email?: pulumi.Input<string>;
    emailVerified?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    federatedIdentities?: pulumi.Input<pulumi.Input<inputs.UserFederatedIdentity>[]>;
    firstName?: pulumi.Input<string>;
    initialPassword?: pulumi.Input<inputs.UserInitialPassword>;
    lastName?: pulumi.Input<string>;
    realmId: pulumi.Input<string>;
    requiredActions?: pulumi.Input<pulumi.Input<string>[]>;
    username: pulumi.Input<string>;
}
