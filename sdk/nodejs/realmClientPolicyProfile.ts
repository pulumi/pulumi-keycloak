// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows for managing Realm Client Policy Profiles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {realm: "my-realm"});
 * const profile = new keycloak.RealmClientPolicyProfile("profile", {
 *     name: "my-profile",
 *     realmId: realm.id,
 *     executors: [
 *         {
 *             name: "intent-client-bind-checker",
 *             configuration: {
 *                 "auto-configure": "true",
 *             },
 *         },
 *         {
 *             name: "secure-session",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Attribute Arguments
 *
 * - `name` - (Required) The name of the attribute.
 * - `realmId` - (Required) The realm id.
 * - `executor` - (Optional) An ordered list of executors
 *
 * #### Executor Arguments
 *
 * - `name` - (Required) The name of the executor. NOTE! The executor needs to exist
 * - `configuration` - (Optional) - A map of configuration values
 *
 * ## Import
 *
 * This resource currently does not support importing.
 */
export class RealmClientPolicyProfile extends pulumi.CustomResource {
    /**
     * Get an existing RealmClientPolicyProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmClientPolicyProfileState, opts?: pulumi.CustomResourceOptions): RealmClientPolicyProfile {
        return new RealmClientPolicyProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realmClientPolicyProfile:RealmClientPolicyProfile';

    /**
     * Returns true if the given object is an instance of RealmClientPolicyProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RealmClientPolicyProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RealmClientPolicyProfile.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly executors!: pulumi.Output<outputs.RealmClientPolicyProfileExecutor[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a RealmClientPolicyProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmClientPolicyProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmClientPolicyProfileArgs | RealmClientPolicyProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RealmClientPolicyProfileState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executors"] = state ? state.executors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as RealmClientPolicyProfileArgs | undefined;
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executors"] = args ? args.executors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RealmClientPolicyProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RealmClientPolicyProfile resources.
 */
export interface RealmClientPolicyProfileState {
    description?: pulumi.Input<string>;
    executors?: pulumi.Input<pulumi.Input<inputs.RealmClientPolicyProfileExecutor>[]>;
    name?: pulumi.Input<string>;
    realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RealmClientPolicyProfile resource.
 */
export interface RealmClientPolicyProfileArgs {
    description?: pulumi.Input<string>;
    executors?: pulumi.Input<pulumi.Input<inputs.RealmClientPolicyProfileExecutor>[]>;
    name?: pulumi.Input<string>;
    realmId: pulumi.Input<string>;
}
