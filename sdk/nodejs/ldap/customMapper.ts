// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing custom attribute mappers for Keycloak users federated via LDAP.
 *
 * The LDAP custom mapper is implemented and deployed into Keycloak as a custom provider. This resource allows to
 * specify the custom id and custom implementation class of the self-implemented attribute mapper as well as additional
 * properties via config map.
 *
 * The custom mapper should already be deployed into keycloak in order to be correctly configured.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const ldapUserFederation = new keycloak.ldap.UserFederation("ldap_user_federation", {
 *     name: "openldap",
 *     realmId: realm.id,
 *     usernameLdapAttribute: "cn",
 *     rdnLdapAttribute: "cn",
 *     uuidLdapAttribute: "entryDN",
 *     userObjectClasses: [
 *         "simpleSecurityObject",
 *         "organizationalRole",
 *     ],
 *     connectionUrl: "ldap://openldap",
 *     usersDn: "dc=example,dc=org",
 *     bindDn: "cn=admin,dc=example,dc=org",
 *     bindCredential: "admin",
 * });
 * const customMapper = new keycloak.ldap.CustomMapper("custom_mapper", {
 *     name: "custom-mapper",
 *     realmId: openldap.realmId,
 *     ldapUserFederationId: openldap.id,
 *     providerId: "custom-provider-registered-in-keycloak",
 *     providerType: "com.example.custom.ldap.mappers.CustomMapper",
 *     config: {
 *         "attribute.name": "name",
 *         "attribute.value": "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`.
 *
 * The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:ldap/customMapper:CustomMapper custom_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
 * ```
 */
export class CustomMapper extends pulumi.CustomResource {
    /**
     * Get an existing CustomMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomMapperState, opts?: pulumi.CustomResourceOptions): CustomMapper {
        return new CustomMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:ldap/customMapper:CustomMapper';

    /**
     * Returns true if the given object is an instance of CustomMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomMapper.__pulumiType;
    }

    /**
     * A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
     */
    public readonly config!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    public readonly ldapUserFederationId!: pulumi.Output<string>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the LDAP mapper implemented in MapperFactory.
     */
    public readonly providerId!: pulumi.Output<string>;
    /**
     * The fully-qualified Java class name of the custom LDAP mapper.
     */
    public readonly providerType!: pulumi.Output<string>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a CustomMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomMapperArgs | CustomMapperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomMapperState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["ldapUserFederationId"] = state ? state.ldapUserFederationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerId"] = state ? state.providerId : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as CustomMapperArgs | undefined;
            if ((!args || args.ldapUserFederationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapUserFederationId'");
            }
            if ((!args || args.providerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerId'");
            }
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["ldapUserFederationId"] = args ? args.ldapUserFederationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["providerId"] = args ? args.providerId : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomMapper.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomMapper resources.
 */
export interface CustomMapperState {
    /**
     * A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    ldapUserFederationId?: pulumi.Input<string>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the LDAP mapper implemented in MapperFactory.
     */
    providerId?: pulumi.Input<string>;
    /**
     * The fully-qualified Java class name of the custom LDAP mapper.
     */
    providerType?: pulumi.Input<string>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomMapper resource.
 */
export interface CustomMapperArgs {
    /**
     * A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
     */
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    ldapUserFederationId: pulumi.Input<string>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the LDAP mapper implemented in MapperFactory.
     */
    providerId: pulumi.Input<string>;
    /**
     * The fully-qualified Java class name of the custom LDAP mapper.
     */
    providerType: pulumi.Input<string>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    realmId: pulumi.Input<string>;
}
