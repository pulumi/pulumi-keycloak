// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class HardcodedGroupMapper extends pulumi.CustomResource {
    /**
     * Get an existing HardcodedGroupMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HardcodedGroupMapperState, opts?: pulumi.CustomResourceOptions): HardcodedGroupMapper {
        return new HardcodedGroupMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:ldap/hardcodedGroupMapper:HardcodedGroupMapper';

    /**
     * Returns true if the given object is an instance of HardcodedGroupMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HardcodedGroupMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HardcodedGroupMapper.__pulumiType;
    }

    /**
     * Group to grant to user.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * The ldap user federation provider to attach this mapper to.
     */
    public readonly ldapUserFederationId!: pulumi.Output<string>;
    /**
     * Display name of the mapper when displayed in the console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The realm in which the ldap user federation provider exists.
     */
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a HardcodedGroupMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HardcodedGroupMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HardcodedGroupMapperArgs | HardcodedGroupMapperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HardcodedGroupMapperState | undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["ldapUserFederationId"] = state ? state.ldapUserFederationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as HardcodedGroupMapperArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.ldapUserFederationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapUserFederationId'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["ldapUserFederationId"] = args ? args.ldapUserFederationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HardcodedGroupMapper.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HardcodedGroupMapper resources.
 */
export interface HardcodedGroupMapperState {
    /**
     * Group to grant to user.
     */
    group?: pulumi.Input<string>;
    /**
     * The ldap user federation provider to attach this mapper to.
     */
    ldapUserFederationId?: pulumi.Input<string>;
    /**
     * Display name of the mapper when displayed in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm in which the ldap user federation provider exists.
     */
    realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HardcodedGroupMapper resource.
 */
export interface HardcodedGroupMapperArgs {
    /**
     * Group to grant to user.
     */
    group: pulumi.Input<string>;
    /**
     * The ldap user federation provider to attach this mapper to.
     */
    ldapUserFederationId: pulumi.Input<string>;
    /**
     * Display name of the mapper when displayed in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm in which the ldap user federation provider exists.
     */
    realmId: pulumi.Input<string>;
}
