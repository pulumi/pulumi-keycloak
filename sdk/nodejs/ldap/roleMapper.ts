// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing role mappers for Keycloak users federated via LDAP.
 *
 * The LDAP group mapper can be used to map an LDAP user's roles from some DN to Keycloak roles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const ldapUserFederation = new keycloak.ldap.UserFederation("ldapUserFederation", {
 *     realmId: realm.id,
 *     usernameLdapAttribute: "cn",
 *     rdnLdapAttribute: "cn",
 *     uuidLdapAttribute: "entryDN",
 *     userObjectClasses: [
 *         "simpleSecurityObject",
 *         "organizationalRole",
 *     ],
 *     connectionUrl: "ldap://openldap",
 *     usersDn: "dc=example,dc=org",
 *     bindDn: "cn=admin,dc=example,dc=org",
 *     bindCredential: "admin",
 * });
 * const ldapRoleMapper = new keycloak.ldap.RoleMapper("ldapRoleMapper", {
 *     realmId: realm.id,
 *     ldapUserFederationId: ldapUserFederation.id,
 *     ldapRolesDn: "dc=example,dc=org",
 *     roleNameLdapAttribute: "cn",
 *     roleObjectClasses: ["groupOfNames"],
 *     membershipAttributeType: "DN",
 *     membershipLdapAttribute: "member",
 *     membershipUserLdapAttribute: "cn",
 *     userRolesRetrieveStrategy: "GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE",
 *     memberofLdapAttribute: "memberOf",
 * });
 * ```
 *
 * ## Import
 *
 * LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`. The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:ldap/roleMapper:RoleMapper ldap_role_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
 * ```
 */
export class RoleMapper extends pulumi.CustomResource {
    /**
     * Get an existing RoleMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleMapperState, opts?: pulumi.CustomResourceOptions): RoleMapper {
        return new RoleMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:ldap/roleMapper:RoleMapper';

    /**
     * Returns true if the given object is an instance of RoleMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleMapper.__pulumiType;
    }

    /**
     * When specified, LDAP role mappings will be mapped to client role mappings tied to this client ID. Can only be set if `useRealmRolesMapping` is `false`.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * The LDAP DN where roles can be found.
     */
    public readonly ldapRolesDn!: pulumi.Output<string>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    public readonly ldapUserFederationId!: pulumi.Output<string>;
    /**
     * Specifies the name of the LDAP attribute on the LDAP user that contains the roles the user has. Defaults to `memberOf`. This is only used when
     */
    public readonly memberofLdapAttribute!: pulumi.Output<string | undefined>;
    /**
     * Can be one of `DN` or `UID`. Defaults to `DN`.
     */
    public readonly membershipAttributeType!: pulumi.Output<string | undefined>;
    /**
     * The name of the LDAP attribute that is used for membership mappings.
     */
    public readonly membershipLdapAttribute!: pulumi.Output<string>;
    /**
     * The name of the LDAP attribute on a user that is used for membership mappings.
     */
    public readonly membershipUserLdapAttribute!: pulumi.Output<string>;
    /**
     * Can be one of `READ_ONLY`, `LDAP_ONLY` or `IMPORT`. Defaults to `READ_ONLY`.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    public readonly realmId!: pulumi.Output<string>;
    /**
     * The name of the LDAP attribute that is used in role objects for the name and RDN of the role. Typically `cn`.
     */
    public readonly roleNameLdapAttribute!: pulumi.Output<string>;
    /**
     * List of strings representing the object classes for the role. Must contain at least one.
     */
    public readonly roleObjectClasses!: pulumi.Output<string[]>;
    /**
     * When specified, adds an additional custom filter to be used when querying for roles. Must start with `(` and end with `)`.
     */
    public readonly rolesLdapFilter!: pulumi.Output<string | undefined>;
    /**
     * When `true`, LDAP role mappings will be mapped to realm roles within Keycloak. Defaults to `true`.
     */
    public readonly useRealmRolesMapping!: pulumi.Output<boolean | undefined>;
    /**
     * Can be one of `LOAD_ROLES_BY_MEMBER_ATTRIBUTE`, `GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_ROLES_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_ROLES_BY_MEMBER_ATTRIBUTE`.
     */
    public readonly userRolesRetrieveStrategy!: pulumi.Output<string | undefined>;

    /**
     * Create a RoleMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleMapperArgs | RoleMapperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleMapperState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["ldapRolesDn"] = state ? state.ldapRolesDn : undefined;
            resourceInputs["ldapUserFederationId"] = state ? state.ldapUserFederationId : undefined;
            resourceInputs["memberofLdapAttribute"] = state ? state.memberofLdapAttribute : undefined;
            resourceInputs["membershipAttributeType"] = state ? state.membershipAttributeType : undefined;
            resourceInputs["membershipLdapAttribute"] = state ? state.membershipLdapAttribute : undefined;
            resourceInputs["membershipUserLdapAttribute"] = state ? state.membershipUserLdapAttribute : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["roleNameLdapAttribute"] = state ? state.roleNameLdapAttribute : undefined;
            resourceInputs["roleObjectClasses"] = state ? state.roleObjectClasses : undefined;
            resourceInputs["rolesLdapFilter"] = state ? state.rolesLdapFilter : undefined;
            resourceInputs["useRealmRolesMapping"] = state ? state.useRealmRolesMapping : undefined;
            resourceInputs["userRolesRetrieveStrategy"] = state ? state.userRolesRetrieveStrategy : undefined;
        } else {
            const args = argsOrState as RoleMapperArgs | undefined;
            if ((!args || args.ldapRolesDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapRolesDn'");
            }
            if ((!args || args.ldapUserFederationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapUserFederationId'");
            }
            if ((!args || args.membershipLdapAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipLdapAttribute'");
            }
            if ((!args || args.membershipUserLdapAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipUserLdapAttribute'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if ((!args || args.roleNameLdapAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleNameLdapAttribute'");
            }
            if ((!args || args.roleObjectClasses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleObjectClasses'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["ldapRolesDn"] = args ? args.ldapRolesDn : undefined;
            resourceInputs["ldapUserFederationId"] = args ? args.ldapUserFederationId : undefined;
            resourceInputs["memberofLdapAttribute"] = args ? args.memberofLdapAttribute : undefined;
            resourceInputs["membershipAttributeType"] = args ? args.membershipAttributeType : undefined;
            resourceInputs["membershipLdapAttribute"] = args ? args.membershipLdapAttribute : undefined;
            resourceInputs["membershipUserLdapAttribute"] = args ? args.membershipUserLdapAttribute : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["roleNameLdapAttribute"] = args ? args.roleNameLdapAttribute : undefined;
            resourceInputs["roleObjectClasses"] = args ? args.roleObjectClasses : undefined;
            resourceInputs["rolesLdapFilter"] = args ? args.rolesLdapFilter : undefined;
            resourceInputs["useRealmRolesMapping"] = args ? args.useRealmRolesMapping : undefined;
            resourceInputs["userRolesRetrieveStrategy"] = args ? args.userRolesRetrieveStrategy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleMapper.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoleMapper resources.
 */
export interface RoleMapperState {
    /**
     * When specified, LDAP role mappings will be mapped to client role mappings tied to this client ID. Can only be set if `useRealmRolesMapping` is `false`.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The LDAP DN where roles can be found.
     */
    ldapRolesDn?: pulumi.Input<string>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    ldapUserFederationId?: pulumi.Input<string>;
    /**
     * Specifies the name of the LDAP attribute on the LDAP user that contains the roles the user has. Defaults to `memberOf`. This is only used when
     */
    memberofLdapAttribute?: pulumi.Input<string>;
    /**
     * Can be one of `DN` or `UID`. Defaults to `DN`.
     */
    membershipAttributeType?: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute that is used for membership mappings.
     */
    membershipLdapAttribute?: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute on a user that is used for membership mappings.
     */
    membershipUserLdapAttribute?: pulumi.Input<string>;
    /**
     * Can be one of `READ_ONLY`, `LDAP_ONLY` or `IMPORT`. Defaults to `READ_ONLY`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    realmId?: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute that is used in role objects for the name and RDN of the role. Typically `cn`.
     */
    roleNameLdapAttribute?: pulumi.Input<string>;
    /**
     * List of strings representing the object classes for the role. Must contain at least one.
     */
    roleObjectClasses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When specified, adds an additional custom filter to be used when querying for roles. Must start with `(` and end with `)`.
     */
    rolesLdapFilter?: pulumi.Input<string>;
    /**
     * When `true`, LDAP role mappings will be mapped to realm roles within Keycloak. Defaults to `true`.
     */
    useRealmRolesMapping?: pulumi.Input<boolean>;
    /**
     * Can be one of `LOAD_ROLES_BY_MEMBER_ATTRIBUTE`, `GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_ROLES_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_ROLES_BY_MEMBER_ATTRIBUTE`.
     */
    userRolesRetrieveStrategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoleMapper resource.
 */
export interface RoleMapperArgs {
    /**
     * When specified, LDAP role mappings will be mapped to client role mappings tied to this client ID. Can only be set if `useRealmRolesMapping` is `false`.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The LDAP DN where roles can be found.
     */
    ldapRolesDn: pulumi.Input<string>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    ldapUserFederationId: pulumi.Input<string>;
    /**
     * Specifies the name of the LDAP attribute on the LDAP user that contains the roles the user has. Defaults to `memberOf`. This is only used when
     */
    memberofLdapAttribute?: pulumi.Input<string>;
    /**
     * Can be one of `DN` or `UID`. Defaults to `DN`.
     */
    membershipAttributeType?: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute that is used for membership mappings.
     */
    membershipLdapAttribute: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute on a user that is used for membership mappings.
     */
    membershipUserLdapAttribute: pulumi.Input<string>;
    /**
     * Can be one of `READ_ONLY`, `LDAP_ONLY` or `IMPORT`. Defaults to `READ_ONLY`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    realmId: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute that is used in role objects for the name and RDN of the role. Typically `cn`.
     */
    roleNameLdapAttribute: pulumi.Input<string>;
    /**
     * List of strings representing the object classes for the role. Must contain at least one.
     */
    roleObjectClasses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When specified, adds an additional custom filter to be used when querying for roles. Must start with `(` and end with `)`.
     */
    rolesLdapFilter?: pulumi.Input<string>;
    /**
     * When `true`, LDAP role mappings will be mapped to realm roles within Keycloak. Defaults to `true`.
     */
    useRealmRolesMapping?: pulumi.Input<boolean>;
    /**
     * Can be one of `LOAD_ROLES_BY_MEMBER_ATTRIBUTE`, `GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_ROLES_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_ROLES_BY_MEMBER_ATTRIBUTE`.
     */
    userRolesRetrieveStrategy?: pulumi.Input<string>;
}
