// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing group mappers for Keycloak users federated via LDAP.
 *
 * The LDAP group mapper can be used to map an LDAP user's groups from some DN to Keycloak groups. This group mapper will also
 * create the groups within Keycloak if they do not already exist.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const ldapUserFederation = new keycloak.ldap.UserFederation("ldapUserFederation", {
 *     realmId: realm.id,
 *     usernameLdapAttribute: "cn",
 *     rdnLdapAttribute: "cn",
 *     uuidLdapAttribute: "entryDN",
 *     userObjectClasses: [
 *         "simpleSecurityObject",
 *         "organizationalRole",
 *     ],
 *     connectionUrl: "ldap://openldap",
 *     usersDn: "dc=example,dc=org",
 *     bindDn: "cn=admin,dc=example,dc=org",
 *     bindCredential: "admin",
 * });
 * const ldapGroupMapper = new keycloak.ldap.GroupMapper("ldapGroupMapper", {
 *     realmId: realm.id,
 *     ldapUserFederationId: ldapUserFederation.id,
 *     ldapGroupsDn: "dc=example,dc=org",
 *     groupNameLdapAttribute: "cn",
 *     groupObjectClasses: ["groupOfNames"],
 *     membershipAttributeType: "DN",
 *     membershipLdapAttribute: "member",
 *     membershipUserLdapAttribute: "cn",
 *     memberofLdapAttribute: "memberOf",
 * });
 * ```
 *
 * ## Import
 *
 * LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`. The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:ldap/groupMapper:GroupMapper ldap_group_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
 * ```
 */
export class GroupMapper extends pulumi.CustomResource {
    /**
     * Get an existing GroupMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupMapperState, opts?: pulumi.CustomResourceOptions): GroupMapper {
        return new GroupMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:ldap/groupMapper:GroupMapper';

    /**
     * Returns true if the given object is an instance of GroupMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupMapper.__pulumiType;
    }

    /**
     * When `true`, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to `false`.
     */
    public readonly dropNonExistingGroupsDuringSync!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically `cn`.
     */
    public readonly groupNameLdapAttribute!: pulumi.Output<string>;
    /**
     * List of strings representing the object classes for the group. Must contain at least one.
     */
    public readonly groupObjectClasses!: pulumi.Output<string[]>;
    /**
     * When specified, adds an additional custom filter to be used when querying for groups. Must start with `(` and end with `)`.
     */
    public readonly groupsLdapFilter!: pulumi.Output<string | undefined>;
    /**
     * When `true`, missing groups in the hierarchy will be ignored.
     */
    public readonly ignoreMissingGroups!: pulumi.Output<boolean | undefined>;
    /**
     * The LDAP DN where groups can be found.
     */
    public readonly ldapGroupsDn!: pulumi.Output<string>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    public readonly ldapUserFederationId!: pulumi.Output<string>;
    /**
     * Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
     */
    public readonly mappedGroupAttributes!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to `memberOf`.
     */
    public readonly memberofLdapAttribute!: pulumi.Output<string | undefined>;
    /**
     * Can be one of `DN` or `UID`. Defaults to `DN`.
     */
    public readonly membershipAttributeType!: pulumi.Output<string | undefined>;
    /**
     * The name of the LDAP attribute that is used for membership mappings.
     */
    public readonly membershipLdapAttribute!: pulumi.Output<string>;
    /**
     * The name of the LDAP attribute on a user that is used for membership mappings.
     */
    public readonly membershipUserLdapAttribute!: pulumi.Output<string>;
    /**
     * Can be one of `READ_ONLY` or `LDAP_ONLY`. Defaults to `READ_ONLY`.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * When `true`, group inheritance will be propagated from LDAP to Keycloak. When `false`, all LDAP groups will be propagated as top level groups within Keycloak.
     */
    public readonly preserveGroupInheritance!: pulumi.Output<boolean | undefined>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    public readonly realmId!: pulumi.Output<string>;
    /**
     * Can be one of `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`, `GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`.
     */
    public readonly userRolesRetrieveStrategy!: pulumi.Output<string | undefined>;

    /**
     * Create a GroupMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupMapperArgs | GroupMapperState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GroupMapperState | undefined;
            inputs["dropNonExistingGroupsDuringSync"] = state ? state.dropNonExistingGroupsDuringSync : undefined;
            inputs["groupNameLdapAttribute"] = state ? state.groupNameLdapAttribute : undefined;
            inputs["groupObjectClasses"] = state ? state.groupObjectClasses : undefined;
            inputs["groupsLdapFilter"] = state ? state.groupsLdapFilter : undefined;
            inputs["ignoreMissingGroups"] = state ? state.ignoreMissingGroups : undefined;
            inputs["ldapGroupsDn"] = state ? state.ldapGroupsDn : undefined;
            inputs["ldapUserFederationId"] = state ? state.ldapUserFederationId : undefined;
            inputs["mappedGroupAttributes"] = state ? state.mappedGroupAttributes : undefined;
            inputs["memberofLdapAttribute"] = state ? state.memberofLdapAttribute : undefined;
            inputs["membershipAttributeType"] = state ? state.membershipAttributeType : undefined;
            inputs["membershipLdapAttribute"] = state ? state.membershipLdapAttribute : undefined;
            inputs["membershipUserLdapAttribute"] = state ? state.membershipUserLdapAttribute : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preserveGroupInheritance"] = state ? state.preserveGroupInheritance : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
            inputs["userRolesRetrieveStrategy"] = state ? state.userRolesRetrieveStrategy : undefined;
        } else {
            const args = argsOrState as GroupMapperArgs | undefined;
            if (!args || args.groupNameLdapAttribute === undefined) {
                throw new Error("Missing required property 'groupNameLdapAttribute'");
            }
            if (!args || args.groupObjectClasses === undefined) {
                throw new Error("Missing required property 'groupObjectClasses'");
            }
            if (!args || args.ldapGroupsDn === undefined) {
                throw new Error("Missing required property 'ldapGroupsDn'");
            }
            if (!args || args.ldapUserFederationId === undefined) {
                throw new Error("Missing required property 'ldapUserFederationId'");
            }
            if (!args || args.membershipLdapAttribute === undefined) {
                throw new Error("Missing required property 'membershipLdapAttribute'");
            }
            if (!args || args.membershipUserLdapAttribute === undefined) {
                throw new Error("Missing required property 'membershipUserLdapAttribute'");
            }
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["dropNonExistingGroupsDuringSync"] = args ? args.dropNonExistingGroupsDuringSync : undefined;
            inputs["groupNameLdapAttribute"] = args ? args.groupNameLdapAttribute : undefined;
            inputs["groupObjectClasses"] = args ? args.groupObjectClasses : undefined;
            inputs["groupsLdapFilter"] = args ? args.groupsLdapFilter : undefined;
            inputs["ignoreMissingGroups"] = args ? args.ignoreMissingGroups : undefined;
            inputs["ldapGroupsDn"] = args ? args.ldapGroupsDn : undefined;
            inputs["ldapUserFederationId"] = args ? args.ldapUserFederationId : undefined;
            inputs["mappedGroupAttributes"] = args ? args.mappedGroupAttributes : undefined;
            inputs["memberofLdapAttribute"] = args ? args.memberofLdapAttribute : undefined;
            inputs["membershipAttributeType"] = args ? args.membershipAttributeType : undefined;
            inputs["membershipLdapAttribute"] = args ? args.membershipLdapAttribute : undefined;
            inputs["membershipUserLdapAttribute"] = args ? args.membershipUserLdapAttribute : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["preserveGroupInheritance"] = args ? args.preserveGroupInheritance : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
            inputs["userRolesRetrieveStrategy"] = args ? args.userRolesRetrieveStrategy : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(GroupMapper.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupMapper resources.
 */
export interface GroupMapperState {
    /**
     * When `true`, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to `false`.
     */
    readonly dropNonExistingGroupsDuringSync?: pulumi.Input<boolean>;
    /**
     * The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically `cn`.
     */
    readonly groupNameLdapAttribute?: pulumi.Input<string>;
    /**
     * List of strings representing the object classes for the group. Must contain at least one.
     */
    readonly groupObjectClasses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When specified, adds an additional custom filter to be used when querying for groups. Must start with `(` and end with `)`.
     */
    readonly groupsLdapFilter?: pulumi.Input<string>;
    /**
     * When `true`, missing groups in the hierarchy will be ignored.
     */
    readonly ignoreMissingGroups?: pulumi.Input<boolean>;
    /**
     * The LDAP DN where groups can be found.
     */
    readonly ldapGroupsDn?: pulumi.Input<string>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    readonly ldapUserFederationId?: pulumi.Input<string>;
    /**
     * Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
     */
    readonly mappedGroupAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to `memberOf`.
     */
    readonly memberofLdapAttribute?: pulumi.Input<string>;
    /**
     * Can be one of `DN` or `UID`. Defaults to `DN`.
     */
    readonly membershipAttributeType?: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute that is used for membership mappings.
     */
    readonly membershipLdapAttribute?: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute on a user that is used for membership mappings.
     */
    readonly membershipUserLdapAttribute?: pulumi.Input<string>;
    /**
     * Can be one of `READ_ONLY` or `LDAP_ONLY`. Defaults to `READ_ONLY`.
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * When `true`, group inheritance will be propagated from LDAP to Keycloak. When `false`, all LDAP groups will be propagated as top level groups within Keycloak.
     */
    readonly preserveGroupInheritance?: pulumi.Input<boolean>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    readonly realmId?: pulumi.Input<string>;
    /**
     * Can be one of `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`, `GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`.
     */
    readonly userRolesRetrieveStrategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GroupMapper resource.
 */
export interface GroupMapperArgs {
    /**
     * When `true`, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to `false`.
     */
    readonly dropNonExistingGroupsDuringSync?: pulumi.Input<boolean>;
    /**
     * The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically `cn`.
     */
    readonly groupNameLdapAttribute: pulumi.Input<string>;
    /**
     * List of strings representing the object classes for the group. Must contain at least one.
     */
    readonly groupObjectClasses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When specified, adds an additional custom filter to be used when querying for groups. Must start with `(` and end with `)`.
     */
    readonly groupsLdapFilter?: pulumi.Input<string>;
    /**
     * When `true`, missing groups in the hierarchy will be ignored.
     */
    readonly ignoreMissingGroups?: pulumi.Input<boolean>;
    /**
     * The LDAP DN where groups can be found.
     */
    readonly ldapGroupsDn: pulumi.Input<string>;
    /**
     * The ID of the LDAP user federation provider to attach this mapper to.
     */
    readonly ldapUserFederationId: pulumi.Input<string>;
    /**
     * Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
     */
    readonly mappedGroupAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to `memberOf`.
     */
    readonly memberofLdapAttribute?: pulumi.Input<string>;
    /**
     * Can be one of `DN` or `UID`. Defaults to `DN`.
     */
    readonly membershipAttributeType?: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute that is used for membership mappings.
     */
    readonly membershipLdapAttribute: pulumi.Input<string>;
    /**
     * The name of the LDAP attribute on a user that is used for membership mappings.
     */
    readonly membershipUserLdapAttribute: pulumi.Input<string>;
    /**
     * Can be one of `READ_ONLY` or `LDAP_ONLY`. Defaults to `READ_ONLY`.
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * Display name of this mapper when displayed in the console.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * When `true`, group inheritance will be propagated from LDAP to Keycloak. When `false`, all LDAP groups will be propagated as top level groups within Keycloak.
     */
    readonly preserveGroupInheritance?: pulumi.Input<boolean>;
    /**
     * The realm that this LDAP mapper will exist in.
     */
    readonly realmId: pulumi.Input<string>;
    /**
     * Can be one of `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`, `GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`.
     */
    readonly userRolesRetrieveStrategy?: pulumi.Input<string>;
}
