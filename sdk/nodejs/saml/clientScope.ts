// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing Keycloak client scopes that can be attached to clients that use the SAML protocol.
 *
 * Client Scopes can be used to share common protocol and role mappings between multiple clients within a realm.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const samlClientScope = new keycloak.saml.ClientScope("samlClientScope", {
 *     realmId: realm.id,
 *     description: "This scope will map a user's group memberships to SAML assertion",
 *     guiOrder: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Client scopes can be imported using the format `{{realm_id}}/{{client_scope_id}}`, where `client_scope_id` is the unique ID that Keycloak assigns to the client scope upon creation. This value can be found in the URI when editing this client scope in the GUI, and is typically a GUID. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:saml/clientScope:ClientScope saml_client_scope my-realm/e8a5d115-6985-4de3-a0f5-732e1be4525e
 * ```
 */
export class ClientScope extends pulumi.CustomResource {
    /**
     * Get an existing ClientScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientScopeState, opts?: pulumi.CustomResourceOptions): ClientScope {
        return new ClientScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:saml/clientScope:ClientScope';

    /**
     * Returns true if the given object is an instance of ClientScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientScope.__pulumiType;
    }

    /**
     * When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute.
     */
    public readonly consentScreenText!: pulumi.Output<string | undefined>;
    /**
     * The description of this client scope in the GUI.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specify order of the client scope in GUI (such as in Consent page) as integer.
     */
    public readonly guiOrder!: pulumi.Output<number | undefined>;
    /**
     * The display name of this client scope in the GUI.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The realm this client scope belongs to.
     */
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a ClientScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientScopeArgs | ClientScopeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClientScopeState | undefined;
            inputs["consentScreenText"] = state ? state.consentScreenText : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["guiOrder"] = state ? state.guiOrder : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as ClientScopeArgs | undefined;
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["consentScreenText"] = args ? args.consentScreenText : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["guiOrder"] = args ? args.guiOrder : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ClientScope.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientScope resources.
 */
export interface ClientScopeState {
    /**
     * When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute.
     */
    readonly consentScreenText?: pulumi.Input<string>;
    /**
     * The description of this client scope in the GUI.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Specify order of the client scope in GUI (such as in Consent page) as integer.
     */
    readonly guiOrder?: pulumi.Input<number>;
    /**
     * The display name of this client scope in the GUI.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The realm this client scope belongs to.
     */
    readonly realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClientScope resource.
 */
export interface ClientScopeArgs {
    /**
     * When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute.
     */
    readonly consentScreenText?: pulumi.Input<string>;
    /**
     * The description of this client scope in the GUI.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Specify order of the client scope in GUI (such as in Consent page) as integer.
     */
    readonly guiOrder?: pulumi.Input<number>;
    /**
     * The display name of this client scope in the GUI.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The realm this client scope belongs to.
     */
    readonly realmId: pulumi.Input<string>;
}
