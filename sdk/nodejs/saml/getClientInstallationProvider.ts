// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source can be used to retrieve Installation Provider of a SAML Client.
 *
 * ## Example Usage
 *
 * In the example below, we extract the SAML metadata IDPSSODescriptor to pass it to the AWS IAM SAML Provider.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as keycloak from "@pulumi/keycloak";
 * import * as std from "@pulumi/std";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const samlClient = new keycloak.saml.Client("saml_client", {
 *     realmId: realm.id,
 *     clientId: "test-saml-client",
 *     name: "test-saml-client",
 *     signDocuments: false,
 *     signAssertions: true,
 *     includeAuthnStatement: true,
 *     signingCertificate: std.index.file({
 *         input: "saml-cert.pem",
 *     }).result,
 *     signingPrivateKey: std.index.file({
 *         input: "saml-key.pem",
 *     }).result,
 * });
 * const samlIdpDescriptor = keycloak.saml.getClientInstallationProviderOutput({
 *     realmId: realm.id,
 *     clientId: samlClient.id,
 *     providerId: "saml-idp-descriptor",
 * });
 * const _default = new aws.index.IamSamlProvider("default", {
 *     name: "myprovider",
 *     samlMetadataDocument: samlIdpDescriptor.value,
 * });
 * ```
 */
export function getClientInstallationProvider(args: GetClientInstallationProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetClientInstallationProviderResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keycloak:saml/getClientInstallationProvider:getClientInstallationProvider", {
        "clientId": args.clientId,
        "providerId": args.providerId,
        "realmId": args.realmId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClientInstallationProvider.
 */
export interface GetClientInstallationProviderArgs {
    /**
     * The ID of the SAML client. The `id` attribute of a `keycloakClient` resource should be used here.
     */
    clientId: string;
    /**
     * The ID of the SAML installation provider. Could be one of `saml-idp-descriptor`, `keycloak-saml`, `saml-sp-descriptor`, `keycloak-saml-subsystem`, `mod-auth-mellon`, etc.
     */
    providerId: string;
    /**
     * The realm that the SAML client exists within.
     */
    realmId: string;
}

/**
 * A collection of values returned by getClientInstallationProvider.
 */
export interface GetClientInstallationProviderResult {
    readonly clientId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly providerId: string;
    readonly realmId: string;
    /**
     * (Computed) The returned document needed for SAML installation.
     */
    readonly value: string;
}
/**
 * This data source can be used to retrieve Installation Provider of a SAML Client.
 *
 * ## Example Usage
 *
 * In the example below, we extract the SAML metadata IDPSSODescriptor to pass it to the AWS IAM SAML Provider.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as keycloak from "@pulumi/keycloak";
 * import * as std from "@pulumi/std";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const samlClient = new keycloak.saml.Client("saml_client", {
 *     realmId: realm.id,
 *     clientId: "test-saml-client",
 *     name: "test-saml-client",
 *     signDocuments: false,
 *     signAssertions: true,
 *     includeAuthnStatement: true,
 *     signingCertificate: std.index.file({
 *         input: "saml-cert.pem",
 *     }).result,
 *     signingPrivateKey: std.index.file({
 *         input: "saml-key.pem",
 *     }).result,
 * });
 * const samlIdpDescriptor = keycloak.saml.getClientInstallationProviderOutput({
 *     realmId: realm.id,
 *     clientId: samlClient.id,
 *     providerId: "saml-idp-descriptor",
 * });
 * const _default = new aws.index.IamSamlProvider("default", {
 *     name: "myprovider",
 *     samlMetadataDocument: samlIdpDescriptor.value,
 * });
 * ```
 */
export function getClientInstallationProviderOutput(args: GetClientInstallationProviderOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClientInstallationProviderResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("keycloak:saml/getClientInstallationProvider:getClientInstallationProvider", {
        "clientId": args.clientId,
        "providerId": args.providerId,
        "realmId": args.realmId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClientInstallationProvider.
 */
export interface GetClientInstallationProviderOutputArgs {
    /**
     * The ID of the SAML client. The `id` attribute of a `keycloakClient` resource should be used here.
     */
    clientId: pulumi.Input<string>;
    /**
     * The ID of the SAML installation provider. Could be one of `saml-idp-descriptor`, `keycloak-saml`, `saml-sp-descriptor`, `keycloak-saml-subsystem`, `mod-auth-mellon`, etc.
     */
    providerId: pulumi.Input<string>;
    /**
     * The realm that the SAML client exists within.
     */
    realmId: pulumi.Input<string>;
}
