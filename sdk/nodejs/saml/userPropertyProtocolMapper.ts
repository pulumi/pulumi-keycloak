// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing user property protocol mappers for SAML clients within Keycloak.
 *
 * SAML user property protocol mappers allow you to map properties of the Keycloak
 * user model to an attribute in a SAML assertion.
 *
 * Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between
 * multiple different clients.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const samlClient = new keycloak.saml.Client("saml_client", {
 *     realmId: realm.id,
 *     clientId: "saml-client",
 *     name: "saml-client",
 * });
 * const samlUserPropertyMapper = new keycloak.saml.UserPropertyProtocolMapper("saml_user_property_mapper", {
 *     realmId: realm.id,
 *     clientId: samlClient.id,
 *     name: "email-user-property-mapper",
 *     userProperty: "email",
 *     samlAttributeName: "email",
 *     samlAttributeNameFormat: "Unspecified",
 * });
 * ```
 *
 * ## Import
 *
 * Protocol mappers can be imported using one of the following formats:
 *
 * - Client: `{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}`
 *
 * - Client Scope: `{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}`
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:saml/userPropertyProtocolMapper:UserPropertyProtocolMapper saml_user_property_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4
 * ```
 *
 * ```sh
 * $ pulumi import keycloak:saml/userPropertyProtocolMapper:UserPropertyProtocolMapper saml_user_property_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4
 * ```
 */
export class UserPropertyProtocolMapper extends pulumi.CustomResource {
    /**
     * Get an existing UserPropertyProtocolMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserPropertyProtocolMapperState, opts?: pulumi.CustomResourceOptions): UserPropertyProtocolMapper {
        return new UserPropertyProtocolMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:saml/userPropertyProtocolMapper:UserPropertyProtocolMapper';

    /**
     * Returns true if the given object is an instance of UserPropertyProtocolMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserPropertyProtocolMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserPropertyProtocolMapper.__pulumiType;
    }

    /**
     * The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     */
    declare public readonly clientId: pulumi.Output<string | undefined>;
    /**
     * The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     */
    declare public readonly clientScopeId: pulumi.Output<string | undefined>;
    /**
     * An optional human-friendly name for this attribute.
     */
    declare public readonly friendlyName: pulumi.Output<string | undefined>;
    /**
     * The display name of this protocol mapper in the GUI.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The realm this protocol mapper exists within.
     */
    declare public readonly realmId: pulumi.Output<string>;
    /**
     * The name of the SAML attribute.
     */
    declare public readonly samlAttributeName: pulumi.Output<string>;
    /**
     * The SAML attribute Name Format. Can be one of `Unspecified`, `Basic`, or `URI Reference`.
     */
    declare public readonly samlAttributeNameFormat: pulumi.Output<string>;
    /**
     * The property of the Keycloak user model to map.
     */
    declare public readonly userProperty: pulumi.Output<string>;

    /**
     * Create a UserPropertyProtocolMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserPropertyProtocolMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserPropertyProtocolMapperArgs | UserPropertyProtocolMapperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserPropertyProtocolMapperState | undefined;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientScopeId"] = state?.clientScopeId;
            resourceInputs["friendlyName"] = state?.friendlyName;
            resourceInputs["name"] = state?.name;
            resourceInputs["realmId"] = state?.realmId;
            resourceInputs["samlAttributeName"] = state?.samlAttributeName;
            resourceInputs["samlAttributeNameFormat"] = state?.samlAttributeNameFormat;
            resourceInputs["userProperty"] = state?.userProperty;
        } else {
            const args = argsOrState as UserPropertyProtocolMapperArgs | undefined;
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if (args?.samlAttributeName === undefined && !opts.urn) {
                throw new Error("Missing required property 'samlAttributeName'");
            }
            if (args?.samlAttributeNameFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'samlAttributeNameFormat'");
            }
            if (args?.userProperty === undefined && !opts.urn) {
                throw new Error("Missing required property 'userProperty'");
            }
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientScopeId"] = args?.clientScopeId;
            resourceInputs["friendlyName"] = args?.friendlyName;
            resourceInputs["name"] = args?.name;
            resourceInputs["realmId"] = args?.realmId;
            resourceInputs["samlAttributeName"] = args?.samlAttributeName;
            resourceInputs["samlAttributeNameFormat"] = args?.samlAttributeNameFormat;
            resourceInputs["userProperty"] = args?.userProperty;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserPropertyProtocolMapper.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserPropertyProtocolMapper resources.
 */
export interface UserPropertyProtocolMapperState {
    /**
     * The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientScopeId?: pulumi.Input<string>;
    /**
     * An optional human-friendly name for this attribute.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The display name of this protocol mapper in the GUI.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this protocol mapper exists within.
     */
    realmId?: pulumi.Input<string>;
    /**
     * The name of the SAML attribute.
     */
    samlAttributeName?: pulumi.Input<string>;
    /**
     * The SAML attribute Name Format. Can be one of `Unspecified`, `Basic`, or `URI Reference`.
     */
    samlAttributeNameFormat?: pulumi.Input<string>;
    /**
     * The property of the Keycloak user model to map.
     */
    userProperty?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserPropertyProtocolMapper resource.
 */
export interface UserPropertyProtocolMapperArgs {
    /**
     * The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientScopeId?: pulumi.Input<string>;
    /**
     * An optional human-friendly name for this attribute.
     */
    friendlyName?: pulumi.Input<string>;
    /**
     * The display name of this protocol mapper in the GUI.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this protocol mapper exists within.
     */
    realmId: pulumi.Input<string>;
    /**
     * The name of the SAML attribute.
     */
    samlAttributeName: pulumi.Input<string>;
    /**
     * The SAML attribute Name Format. Can be one of `Unspecified`, `Basic`, or `URI Reference`.
     */
    samlAttributeNameFormat: pulumi.Input<string>;
    /**
     * The property of the Keycloak user model to map.
     */
    userProperty: pulumi.Input<string>;
}
