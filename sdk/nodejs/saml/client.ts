// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing Keycloak clients that use the SAML protocol.
 *
 * Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users
 * to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 * import * from "fs";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const samlClient = new keycloak.saml.Client("samlClient", {
 *     realmId: realm.id,
 *     clientId: "saml-client",
 *     signDocuments: false,
 *     signAssertions: true,
 *     includeAuthnStatement: true,
 *     signingCertificate: fs.readFileSync("saml-cert.pem"),
 *     signingPrivateKey: fs.readFileSync("saml-key.pem"),
 * });
 * ```
 *
 * ## Import
 *
 * Clients can be imported using the format `{{realm_id}}/{{client_keycloak_id}}`, where `client_keycloak_id` is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:saml/client:Client saml_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352
 * ```
 */
export class Client extends pulumi.CustomResource {
    /**
     * Get an existing Client resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientState, opts?: pulumi.CustomResourceOptions): Client {
        return new Client(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:saml/client:Client';

    /**
     * Returns true if the given object is an instance of Client.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Client {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Client.__pulumiType;
    }

    /**
     * SAML POST Binding URL for the client's assertion consumer service (login responses).
     */
    public readonly assertionConsumerPostUrl!: pulumi.Output<string | undefined>;
    /**
     * SAML Redirect Binding URL for the client's assertion consumer service (login responses).
     */
    public readonly assertionConsumerRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * When specified, this URL will be used whenever Keycloak needs to link to this client.
     */
    public readonly baseUrl!: pulumi.Output<string | undefined>;
    /**
     * The unique ID of this client, referenced in the URI during authentication and in issued tokens.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`.
     */
    public readonly clientSignatureRequired!: pulumi.Output<boolean>;
    /**
     * The description of this client in the GUI.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, the SAML assertions will be encrypted by Keycloak using the client's public key.
     */
    public readonly encryptAssertions!: pulumi.Output<boolean>;
    /**
     * If assertions for the client are encrypted, this certificate will be used for encryption.
     */
    public readonly encryptionCertificate!: pulumi.Output<string | undefined>;
    /**
     * Ignore requested NameID subject format and use the one defined in `nameIdFormat` instead.
     */
    public readonly forceNameIdFormat!: pulumi.Output<boolean>;
    /**
     * When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding.
     */
    public readonly forcePostBinding!: pulumi.Output<boolean>;
    /**
     * When `true`, this client will require a browser redirect in order to perform a logout.
     */
    public readonly frontChannelLogout!: pulumi.Output<boolean>;
    /**
     * - Allow to include all roles mappings in the access token
     */
    public readonly fullScopeAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
     */
    public readonly idpInitiatedSsoRelayState!: pulumi.Output<string | undefined>;
    /**
     * URL fragment name to reference client when you want to do IDP Initiated SSO.
     */
    public readonly idpInitiatedSsoUrlName!: pulumi.Output<string | undefined>;
    /**
     * When `true`, an `AuthnStatement` will be included in the SAML response.
     */
    public readonly includeAuthnStatement!: pulumi.Output<boolean>;
    /**
     * SAML POST Binding URL for the client's single logout service.
     */
    public readonly logoutServicePostBindingUrl!: pulumi.Output<string | undefined>;
    /**
     * SAML Redirect Binding URL for the client's single logout service.
     */
    public readonly logoutServiceRedirectBindingUrl!: pulumi.Output<string | undefined>;
    /**
     * When specified, this URL will be used for all SAML requests.
     */
    public readonly masterSamlProcessingUrl!: pulumi.Output<string | undefined>;
    /**
     * The display name of this client in the GUI.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sets the Name ID format for the subject.
     */
    public readonly nameIdFormat!: pulumi.Output<string>;
    /**
     * The realm this client is attached to.
     */
    public readonly realmId!: pulumi.Output<string>;
    /**
     * When specified, this value is prepended to all relative URLs.
     */
    public readonly rootUrl!: pulumi.Output<string | undefined>;
    /**
     * When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.
     */
    public readonly signAssertions!: pulumi.Output<boolean>;
    /**
     * When `true`, the SAML document will be signed by Keycloak using the realm's private key.
     */
    public readonly signDocuments!: pulumi.Output<boolean>;
    /**
     * The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA512", or "DSA_SHA1".
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * If documents or assertions from the client are signed, this certificate will be used to verify the signature.
     */
    public readonly signingCertificate!: pulumi.Output<string | undefined>;
    /**
     * If documents or assertions from the client are signed, this private key will be used to verify the signature.
     */
    public readonly signingPrivateKey!: pulumi.Output<string | undefined>;
    /**
     * When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
     */
    public readonly validRedirectUris!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Client resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientArgs | ClientState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClientState | undefined;
            inputs["assertionConsumerPostUrl"] = state ? state.assertionConsumerPostUrl : undefined;
            inputs["assertionConsumerRedirectUrl"] = state ? state.assertionConsumerRedirectUrl : undefined;
            inputs["baseUrl"] = state ? state.baseUrl : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["clientSignatureRequired"] = state ? state.clientSignatureRequired : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["encryptAssertions"] = state ? state.encryptAssertions : undefined;
            inputs["encryptionCertificate"] = state ? state.encryptionCertificate : undefined;
            inputs["forceNameIdFormat"] = state ? state.forceNameIdFormat : undefined;
            inputs["forcePostBinding"] = state ? state.forcePostBinding : undefined;
            inputs["frontChannelLogout"] = state ? state.frontChannelLogout : undefined;
            inputs["fullScopeAllowed"] = state ? state.fullScopeAllowed : undefined;
            inputs["idpInitiatedSsoRelayState"] = state ? state.idpInitiatedSsoRelayState : undefined;
            inputs["idpInitiatedSsoUrlName"] = state ? state.idpInitiatedSsoUrlName : undefined;
            inputs["includeAuthnStatement"] = state ? state.includeAuthnStatement : undefined;
            inputs["logoutServicePostBindingUrl"] = state ? state.logoutServicePostBindingUrl : undefined;
            inputs["logoutServiceRedirectBindingUrl"] = state ? state.logoutServiceRedirectBindingUrl : undefined;
            inputs["masterSamlProcessingUrl"] = state ? state.masterSamlProcessingUrl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameIdFormat"] = state ? state.nameIdFormat : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
            inputs["rootUrl"] = state ? state.rootUrl : undefined;
            inputs["signAssertions"] = state ? state.signAssertions : undefined;
            inputs["signDocuments"] = state ? state.signDocuments : undefined;
            inputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            inputs["signingCertificate"] = state ? state.signingCertificate : undefined;
            inputs["signingPrivateKey"] = state ? state.signingPrivateKey : undefined;
            inputs["validRedirectUris"] = state ? state.validRedirectUris : undefined;
        } else {
            const args = argsOrState as ClientArgs | undefined;
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["assertionConsumerPostUrl"] = args ? args.assertionConsumerPostUrl : undefined;
            inputs["assertionConsumerRedirectUrl"] = args ? args.assertionConsumerRedirectUrl : undefined;
            inputs["baseUrl"] = args ? args.baseUrl : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSignatureRequired"] = args ? args.clientSignatureRequired : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["encryptAssertions"] = args ? args.encryptAssertions : undefined;
            inputs["encryptionCertificate"] = args ? args.encryptionCertificate : undefined;
            inputs["forceNameIdFormat"] = args ? args.forceNameIdFormat : undefined;
            inputs["forcePostBinding"] = args ? args.forcePostBinding : undefined;
            inputs["frontChannelLogout"] = args ? args.frontChannelLogout : undefined;
            inputs["fullScopeAllowed"] = args ? args.fullScopeAllowed : undefined;
            inputs["idpInitiatedSsoRelayState"] = args ? args.idpInitiatedSsoRelayState : undefined;
            inputs["idpInitiatedSsoUrlName"] = args ? args.idpInitiatedSsoUrlName : undefined;
            inputs["includeAuthnStatement"] = args ? args.includeAuthnStatement : undefined;
            inputs["logoutServicePostBindingUrl"] = args ? args.logoutServicePostBindingUrl : undefined;
            inputs["logoutServiceRedirectBindingUrl"] = args ? args.logoutServiceRedirectBindingUrl : undefined;
            inputs["masterSamlProcessingUrl"] = args ? args.masterSamlProcessingUrl : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameIdFormat"] = args ? args.nameIdFormat : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
            inputs["rootUrl"] = args ? args.rootUrl : undefined;
            inputs["signAssertions"] = args ? args.signAssertions : undefined;
            inputs["signDocuments"] = args ? args.signDocuments : undefined;
            inputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            inputs["signingCertificate"] = args ? args.signingCertificate : undefined;
            inputs["signingPrivateKey"] = args ? args.signingPrivateKey : undefined;
            inputs["validRedirectUris"] = args ? args.validRedirectUris : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Client.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Client resources.
 */
export interface ClientState {
    /**
     * SAML POST Binding URL for the client's assertion consumer service (login responses).
     */
    readonly assertionConsumerPostUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's assertion consumer service (login responses).
     */
    readonly assertionConsumerRedirectUrl?: pulumi.Input<string>;
    /**
     * When specified, this URL will be used whenever Keycloak needs to link to this client.
     */
    readonly baseUrl?: pulumi.Input<string>;
    /**
     * The unique ID of this client, referenced in the URI during authentication and in issued tokens.
     */
    readonly clientId?: pulumi.Input<string>;
    /**
     * When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`.
     */
    readonly clientSignatureRequired?: pulumi.Input<boolean>;
    /**
     * The description of this client in the GUI.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML assertions will be encrypted by Keycloak using the client's public key.
     */
    readonly encryptAssertions?: pulumi.Input<boolean>;
    /**
     * If assertions for the client are encrypted, this certificate will be used for encryption.
     */
    readonly encryptionCertificate?: pulumi.Input<string>;
    /**
     * Ignore requested NameID subject format and use the one defined in `nameIdFormat` instead.
     */
    readonly forceNameIdFormat?: pulumi.Input<boolean>;
    /**
     * When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding.
     */
    readonly forcePostBinding?: pulumi.Input<boolean>;
    /**
     * When `true`, this client will require a browser redirect in order to perform a logout.
     */
    readonly frontChannelLogout?: pulumi.Input<boolean>;
    /**
     * - Allow to include all roles mappings in the access token
     */
    readonly fullScopeAllowed?: pulumi.Input<boolean>;
    /**
     * Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
     */
    readonly idpInitiatedSsoRelayState?: pulumi.Input<string>;
    /**
     * URL fragment name to reference client when you want to do IDP Initiated SSO.
     */
    readonly idpInitiatedSsoUrlName?: pulumi.Input<string>;
    /**
     * When `true`, an `AuthnStatement` will be included in the SAML response.
     */
    readonly includeAuthnStatement?: pulumi.Input<boolean>;
    /**
     * SAML POST Binding URL for the client's single logout service.
     */
    readonly logoutServicePostBindingUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's single logout service.
     */
    readonly logoutServiceRedirectBindingUrl?: pulumi.Input<string>;
    /**
     * When specified, this URL will be used for all SAML requests.
     */
    readonly masterSamlProcessingUrl?: pulumi.Input<string>;
    /**
     * The display name of this client in the GUI.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Sets the Name ID format for the subject.
     */
    readonly nameIdFormat?: pulumi.Input<string>;
    /**
     * The realm this client is attached to.
     */
    readonly realmId?: pulumi.Input<string>;
    /**
     * When specified, this value is prepended to all relative URLs.
     */
    readonly rootUrl?: pulumi.Input<string>;
    /**
     * When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.
     */
    readonly signAssertions?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML document will be signed by Keycloak using the realm's private key.
     */
    readonly signDocuments?: pulumi.Input<boolean>;
    /**
     * The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA512", or "DSA_SHA1".
     */
    readonly signatureAlgorithm?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this certificate will be used to verify the signature.
     */
    readonly signingCertificate?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this private key will be used to verify the signature.
     */
    readonly signingPrivateKey?: pulumi.Input<string>;
    /**
     * When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
     */
    readonly validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Client resource.
 */
export interface ClientArgs {
    /**
     * SAML POST Binding URL for the client's assertion consumer service (login responses).
     */
    readonly assertionConsumerPostUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's assertion consumer service (login responses).
     */
    readonly assertionConsumerRedirectUrl?: pulumi.Input<string>;
    /**
     * When specified, this URL will be used whenever Keycloak needs to link to this client.
     */
    readonly baseUrl?: pulumi.Input<string>;
    /**
     * The unique ID of this client, referenced in the URI during authentication and in issued tokens.
     */
    readonly clientId: pulumi.Input<string>;
    /**
     * When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`.
     */
    readonly clientSignatureRequired?: pulumi.Input<boolean>;
    /**
     * The description of this client in the GUI.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML assertions will be encrypted by Keycloak using the client's public key.
     */
    readonly encryptAssertions?: pulumi.Input<boolean>;
    /**
     * If assertions for the client are encrypted, this certificate will be used for encryption.
     */
    readonly encryptionCertificate?: pulumi.Input<string>;
    /**
     * Ignore requested NameID subject format and use the one defined in `nameIdFormat` instead.
     */
    readonly forceNameIdFormat?: pulumi.Input<boolean>;
    /**
     * When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding.
     */
    readonly forcePostBinding?: pulumi.Input<boolean>;
    /**
     * When `true`, this client will require a browser redirect in order to perform a logout.
     */
    readonly frontChannelLogout?: pulumi.Input<boolean>;
    /**
     * - Allow to include all roles mappings in the access token
     */
    readonly fullScopeAllowed?: pulumi.Input<boolean>;
    /**
     * Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
     */
    readonly idpInitiatedSsoRelayState?: pulumi.Input<string>;
    /**
     * URL fragment name to reference client when you want to do IDP Initiated SSO.
     */
    readonly idpInitiatedSsoUrlName?: pulumi.Input<string>;
    /**
     * When `true`, an `AuthnStatement` will be included in the SAML response.
     */
    readonly includeAuthnStatement?: pulumi.Input<boolean>;
    /**
     * SAML POST Binding URL for the client's single logout service.
     */
    readonly logoutServicePostBindingUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's single logout service.
     */
    readonly logoutServiceRedirectBindingUrl?: pulumi.Input<string>;
    /**
     * When specified, this URL will be used for all SAML requests.
     */
    readonly masterSamlProcessingUrl?: pulumi.Input<string>;
    /**
     * The display name of this client in the GUI.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Sets the Name ID format for the subject.
     */
    readonly nameIdFormat?: pulumi.Input<string>;
    /**
     * The realm this client is attached to.
     */
    readonly realmId: pulumi.Input<string>;
    /**
     * When specified, this value is prepended to all relative URLs.
     */
    readonly rootUrl?: pulumi.Input<string>;
    /**
     * When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.
     */
    readonly signAssertions?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML document will be signed by Keycloak using the realm's private key.
     */
    readonly signDocuments?: pulumi.Input<boolean>;
    /**
     * The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA512", or "DSA_SHA1".
     */
    readonly signatureAlgorithm?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this certificate will be used to verify the signature.
     */
    readonly signingCertificate?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this private key will be used to verify the signature.
     */
    readonly signingPrivateKey?: pulumi.Input<string>;
    /**
     * When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
     */
    readonly validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}
