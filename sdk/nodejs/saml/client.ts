// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing Keycloak clients that use the SAML protocol.
 *
 * Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users
 * to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 * import * as std from "@pulumi/std";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const samlClient = new keycloak.saml.Client("saml_client", {
 *     realmId: realm.id,
 *     clientId: "saml-client",
 *     name: "saml-client",
 *     signDocuments: false,
 *     signAssertions: true,
 *     includeAuthnStatement: true,
 *     signingCertificate: std.index.file({
 *         input: "saml-cert.pem",
 *     }).result,
 *     signingPrivateKey: std.index.file({
 *         input: "saml-key.pem",
 *     }).result,
 * });
 * ```
 *
 * ## Import
 *
 * Clients can be imported using the format `{{realm_id}}/{{client_keycloak_id}}`, where `client_keycloak_id` is the unique ID that Keycloak
 *
 * assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:saml/client:Client saml_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352
 * ```
 */
export class Client extends pulumi.CustomResource {
    /**
     * Get an existing Client resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientState, opts?: pulumi.CustomResourceOptions): Client {
        return new Client(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:saml/client:Client';

    /**
     * Returns true if the given object is an instance of Client.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Client {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Client.__pulumiType;
    }

    /**
     * Always list this client in the Account UI, even if the user does not have an active session.
     */
    declare public readonly alwaysDisplayInConsole: pulumi.Output<boolean | undefined>;
    /**
     * SAML POST Binding URL for the client's assertion consumer service (login responses).
     */
    declare public readonly assertionConsumerPostUrl: pulumi.Output<string | undefined>;
    /**
     * SAML Redirect Binding URL for the client's assertion consumer service (login responses).
     */
    declare public readonly assertionConsumerRedirectUrl: pulumi.Output<string | undefined>;
    /**
     * Override realm authentication flow bindings
     */
    declare public readonly authenticationFlowBindingOverrides: pulumi.Output<outputs.saml.ClientAuthenticationFlowBindingOverrides | undefined>;
    /**
     * When specified, this URL will be used whenever Keycloak needs to link to this client.
     */
    declare public readonly baseUrl: pulumi.Output<string | undefined>;
    /**
     * The Canonicalization Method for XML signatures. Should be one of "EXCLUSIVE", "EXCLUSIVE_WITH_COMMENTS", "INCLUSIVE", or "INCLUSIVE_WITH_COMMENTS". Defaults to "EXCLUSIVE".
     */
    declare public readonly canonicalizationMethod: pulumi.Output<string | undefined>;
    /**
     * The unique ID of this client, referenced in the URI during authentication and in issued tokens.
     */
    declare public readonly clientId: pulumi.Output<string>;
    /**
     * When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`. Defaults to `true`.
     */
    declare public readonly clientSignatureRequired: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, users have to consent to client access. Defaults to `false`.
     */
    declare public readonly consentRequired: pulumi.Output<boolean>;
    /**
     * The description of this client in the GUI.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to `false`.
     */
    declare public readonly encryptAssertions: pulumi.Output<boolean | undefined>;
    /**
     * If assertions for the client are encrypted, this certificate will be used for encryption.
     */
    declare public readonly encryptionCertificate: pulumi.Output<string>;
    /**
     * (Computed) The sha1sum fingerprint of the encryption certificate. If the encryption certificate is not in correct base64 format, this will be left empty.
     */
    declare public /*out*/ readonly encryptionCertificateSha1: pulumi.Output<string>;
    declare public readonly extraConfig: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Ignore requested NameID subject format and use the one defined in `nameIdFormat` instead. Defaults to `false`.
     */
    declare public readonly forceNameIdFormat: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to `true`.
     */
    declare public readonly forcePostBinding: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, this client will require a browser redirect in order to perform a logout. Defaults to `true`.
     */
    declare public readonly frontChannelLogout: pulumi.Output<boolean | undefined>;
    /**
     * Allow to include all roles mappings in the access token
     */
    declare public readonly fullScopeAllowed: pulumi.Output<boolean | undefined>;
    /**
     * Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
     */
    declare public readonly idpInitiatedSsoRelayState: pulumi.Output<string | undefined>;
    /**
     * URL fragment name to reference client when you want to do IDP Initiated SSO.
     */
    declare public readonly idpInitiatedSsoUrlName: pulumi.Output<string | undefined>;
    /**
     * When `true`, an `AuthnStatement` will be included in the SAML response. Defaults to `true`.
     */
    declare public readonly includeAuthnStatement: pulumi.Output<boolean | undefined>;
    /**
     * The login theme of this client.
     */
    declare public readonly loginTheme: pulumi.Output<string | undefined>;
    /**
     * SAML POST Binding URL for the client's single logout service.
     */
    declare public readonly logoutServicePostBindingUrl: pulumi.Output<string | undefined>;
    /**
     * SAML Redirect Binding URL for the client's single logout service.
     */
    declare public readonly logoutServiceRedirectBindingUrl: pulumi.Output<string | undefined>;
    /**
     * When specified, this URL will be used for all SAML requests.
     */
    declare public readonly masterSamlProcessingUrl: pulumi.Output<string | undefined>;
    /**
     * The display name of this client in the GUI.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Sets the Name ID format for the subject.
     */
    declare public readonly nameIdFormat: pulumi.Output<string>;
    /**
     * The realm this client is attached to.
     */
    declare public readonly realmId: pulumi.Output<string>;
    /**
     * When specified, this value is prepended to all relative URLs.
     */
    declare public readonly rootUrl: pulumi.Output<string | undefined>;
    /**
     * When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to `false`.
     */
    declare public readonly signAssertions: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, the SAML document will be signed by Keycloak using the realm's private key. Defaults to `true`.
     */
    declare public readonly signDocuments: pulumi.Output<boolean | undefined>;
    /**
     * The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA256_MGF1, "RSA_SHA512", "RSA_SHA512_MGF1" or "DSA_SHA1".
     */
    declare public readonly signatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * The value of the `KeyName` element within the signed SAML document. Should be one of "NONE", "KEY_ID", or "CERT_SUBJECT". Defaults to "KEY_ID".
     */
    declare public readonly signatureKeyName: pulumi.Output<string | undefined>;
    /**
     * If documents or assertions from the client are signed, this certificate will be used to verify the signature.
     */
    declare public readonly signingCertificate: pulumi.Output<string>;
    /**
     * (Computed) The sha1sum fingerprint of the signing certificate. If the signing certificate is not in correct base64 format, this will be left empty.
     */
    declare public /*out*/ readonly signingCertificateSha1: pulumi.Output<string>;
    /**
     * If documents or assertions from the client are signed, this private key will be used to verify the signature.
     */
    declare public readonly signingPrivateKey: pulumi.Output<string>;
    /**
     * (Computed) The sha1sum fingerprint of the signing private key. If the signing private key is not in correct base64 format, this will be left empty.
     */
    declare public /*out*/ readonly signingPrivateKeySha1: pulumi.Output<string>;
    /**
     * When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
     */
    declare public readonly validRedirectUris: pulumi.Output<string[] | undefined>;

    /**
     * Create a Client resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientArgs | ClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientState | undefined;
            resourceInputs["alwaysDisplayInConsole"] = state?.alwaysDisplayInConsole;
            resourceInputs["assertionConsumerPostUrl"] = state?.assertionConsumerPostUrl;
            resourceInputs["assertionConsumerRedirectUrl"] = state?.assertionConsumerRedirectUrl;
            resourceInputs["authenticationFlowBindingOverrides"] = state?.authenticationFlowBindingOverrides;
            resourceInputs["baseUrl"] = state?.baseUrl;
            resourceInputs["canonicalizationMethod"] = state?.canonicalizationMethod;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientSignatureRequired"] = state?.clientSignatureRequired;
            resourceInputs["consentRequired"] = state?.consentRequired;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["encryptAssertions"] = state?.encryptAssertions;
            resourceInputs["encryptionCertificate"] = state?.encryptionCertificate;
            resourceInputs["encryptionCertificateSha1"] = state?.encryptionCertificateSha1;
            resourceInputs["extraConfig"] = state?.extraConfig;
            resourceInputs["forceNameIdFormat"] = state?.forceNameIdFormat;
            resourceInputs["forcePostBinding"] = state?.forcePostBinding;
            resourceInputs["frontChannelLogout"] = state?.frontChannelLogout;
            resourceInputs["fullScopeAllowed"] = state?.fullScopeAllowed;
            resourceInputs["idpInitiatedSsoRelayState"] = state?.idpInitiatedSsoRelayState;
            resourceInputs["idpInitiatedSsoUrlName"] = state?.idpInitiatedSsoUrlName;
            resourceInputs["includeAuthnStatement"] = state?.includeAuthnStatement;
            resourceInputs["loginTheme"] = state?.loginTheme;
            resourceInputs["logoutServicePostBindingUrl"] = state?.logoutServicePostBindingUrl;
            resourceInputs["logoutServiceRedirectBindingUrl"] = state?.logoutServiceRedirectBindingUrl;
            resourceInputs["masterSamlProcessingUrl"] = state?.masterSamlProcessingUrl;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameIdFormat"] = state?.nameIdFormat;
            resourceInputs["realmId"] = state?.realmId;
            resourceInputs["rootUrl"] = state?.rootUrl;
            resourceInputs["signAssertions"] = state?.signAssertions;
            resourceInputs["signDocuments"] = state?.signDocuments;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["signatureKeyName"] = state?.signatureKeyName;
            resourceInputs["signingCertificate"] = state?.signingCertificate;
            resourceInputs["signingCertificateSha1"] = state?.signingCertificateSha1;
            resourceInputs["signingPrivateKey"] = state?.signingPrivateKey;
            resourceInputs["signingPrivateKeySha1"] = state?.signingPrivateKeySha1;
            resourceInputs["validRedirectUris"] = state?.validRedirectUris;
        } else {
            const args = argsOrState as ClientArgs | undefined;
            if (args?.clientId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["alwaysDisplayInConsole"] = args?.alwaysDisplayInConsole;
            resourceInputs["assertionConsumerPostUrl"] = args?.assertionConsumerPostUrl;
            resourceInputs["assertionConsumerRedirectUrl"] = args?.assertionConsumerRedirectUrl;
            resourceInputs["authenticationFlowBindingOverrides"] = args?.authenticationFlowBindingOverrides;
            resourceInputs["baseUrl"] = args?.baseUrl;
            resourceInputs["canonicalizationMethod"] = args?.canonicalizationMethod;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSignatureRequired"] = args?.clientSignatureRequired;
            resourceInputs["consentRequired"] = args?.consentRequired;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["encryptAssertions"] = args?.encryptAssertions;
            resourceInputs["encryptionCertificate"] = args?.encryptionCertificate;
            resourceInputs["extraConfig"] = args?.extraConfig;
            resourceInputs["forceNameIdFormat"] = args?.forceNameIdFormat;
            resourceInputs["forcePostBinding"] = args?.forcePostBinding;
            resourceInputs["frontChannelLogout"] = args?.frontChannelLogout;
            resourceInputs["fullScopeAllowed"] = args?.fullScopeAllowed;
            resourceInputs["idpInitiatedSsoRelayState"] = args?.idpInitiatedSsoRelayState;
            resourceInputs["idpInitiatedSsoUrlName"] = args?.idpInitiatedSsoUrlName;
            resourceInputs["includeAuthnStatement"] = args?.includeAuthnStatement;
            resourceInputs["loginTheme"] = args?.loginTheme;
            resourceInputs["logoutServicePostBindingUrl"] = args?.logoutServicePostBindingUrl;
            resourceInputs["logoutServiceRedirectBindingUrl"] = args?.logoutServiceRedirectBindingUrl;
            resourceInputs["masterSamlProcessingUrl"] = args?.masterSamlProcessingUrl;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameIdFormat"] = args?.nameIdFormat;
            resourceInputs["realmId"] = args?.realmId;
            resourceInputs["rootUrl"] = args?.rootUrl;
            resourceInputs["signAssertions"] = args?.signAssertions;
            resourceInputs["signDocuments"] = args?.signDocuments;
            resourceInputs["signatureAlgorithm"] = args?.signatureAlgorithm;
            resourceInputs["signatureKeyName"] = args?.signatureKeyName;
            resourceInputs["signingCertificate"] = args?.signingCertificate;
            resourceInputs["signingPrivateKey"] = args?.signingPrivateKey;
            resourceInputs["validRedirectUris"] = args?.validRedirectUris;
            resourceInputs["encryptionCertificateSha1"] = undefined /*out*/;
            resourceInputs["signingCertificateSha1"] = undefined /*out*/;
            resourceInputs["signingPrivateKeySha1"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Client.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Client resources.
 */
export interface ClientState {
    /**
     * Always list this client in the Account UI, even if the user does not have an active session.
     */
    alwaysDisplayInConsole?: pulumi.Input<boolean>;
    /**
     * SAML POST Binding URL for the client's assertion consumer service (login responses).
     */
    assertionConsumerPostUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's assertion consumer service (login responses).
     */
    assertionConsumerRedirectUrl?: pulumi.Input<string>;
    /**
     * Override realm authentication flow bindings
     */
    authenticationFlowBindingOverrides?: pulumi.Input<inputs.saml.ClientAuthenticationFlowBindingOverrides>;
    /**
     * When specified, this URL will be used whenever Keycloak needs to link to this client.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * The Canonicalization Method for XML signatures. Should be one of "EXCLUSIVE", "EXCLUSIVE_WITH_COMMENTS", "INCLUSIVE", or "INCLUSIVE_WITH_COMMENTS". Defaults to "EXCLUSIVE".
     */
    canonicalizationMethod?: pulumi.Input<string>;
    /**
     * The unique ID of this client, referenced in the URI during authentication and in issued tokens.
     */
    clientId?: pulumi.Input<string>;
    /**
     * When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`. Defaults to `true`.
     */
    clientSignatureRequired?: pulumi.Input<boolean>;
    /**
     * When `true`, users have to consent to client access. Defaults to `false`.
     */
    consentRequired?: pulumi.Input<boolean>;
    /**
     * The description of this client in the GUI.
     */
    description?: pulumi.Input<string>;
    /**
     * When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to `false`.
     */
    encryptAssertions?: pulumi.Input<boolean>;
    /**
     * If assertions for the client are encrypted, this certificate will be used for encryption.
     */
    encryptionCertificate?: pulumi.Input<string>;
    /**
     * (Computed) The sha1sum fingerprint of the encryption certificate. If the encryption certificate is not in correct base64 format, this will be left empty.
     */
    encryptionCertificateSha1?: pulumi.Input<string>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Ignore requested NameID subject format and use the one defined in `nameIdFormat` instead. Defaults to `false`.
     */
    forceNameIdFormat?: pulumi.Input<boolean>;
    /**
     * When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to `true`.
     */
    forcePostBinding?: pulumi.Input<boolean>;
    /**
     * When `true`, this client will require a browser redirect in order to perform a logout. Defaults to `true`.
     */
    frontChannelLogout?: pulumi.Input<boolean>;
    /**
     * Allow to include all roles mappings in the access token
     */
    fullScopeAllowed?: pulumi.Input<boolean>;
    /**
     * Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
     */
    idpInitiatedSsoRelayState?: pulumi.Input<string>;
    /**
     * URL fragment name to reference client when you want to do IDP Initiated SSO.
     */
    idpInitiatedSsoUrlName?: pulumi.Input<string>;
    /**
     * When `true`, an `AuthnStatement` will be included in the SAML response. Defaults to `true`.
     */
    includeAuthnStatement?: pulumi.Input<boolean>;
    /**
     * The login theme of this client.
     */
    loginTheme?: pulumi.Input<string>;
    /**
     * SAML POST Binding URL for the client's single logout service.
     */
    logoutServicePostBindingUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's single logout service.
     */
    logoutServiceRedirectBindingUrl?: pulumi.Input<string>;
    /**
     * When specified, this URL will be used for all SAML requests.
     */
    masterSamlProcessingUrl?: pulumi.Input<string>;
    /**
     * The display name of this client in the GUI.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets the Name ID format for the subject.
     */
    nameIdFormat?: pulumi.Input<string>;
    /**
     * The realm this client is attached to.
     */
    realmId?: pulumi.Input<string>;
    /**
     * When specified, this value is prepended to all relative URLs.
     */
    rootUrl?: pulumi.Input<string>;
    /**
     * When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to `false`.
     */
    signAssertions?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML document will be signed by Keycloak using the realm's private key. Defaults to `true`.
     */
    signDocuments?: pulumi.Input<boolean>;
    /**
     * The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA256_MGF1, "RSA_SHA512", "RSA_SHA512_MGF1" or "DSA_SHA1".
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The value of the `KeyName` element within the signed SAML document. Should be one of "NONE", "KEY_ID", or "CERT_SUBJECT". Defaults to "KEY_ID".
     */
    signatureKeyName?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this certificate will be used to verify the signature.
     */
    signingCertificate?: pulumi.Input<string>;
    /**
     * (Computed) The sha1sum fingerprint of the signing certificate. If the signing certificate is not in correct base64 format, this will be left empty.
     */
    signingCertificateSha1?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this private key will be used to verify the signature.
     */
    signingPrivateKey?: pulumi.Input<string>;
    /**
     * (Computed) The sha1sum fingerprint of the signing private key. If the signing private key is not in correct base64 format, this will be left empty.
     */
    signingPrivateKeySha1?: pulumi.Input<string>;
    /**
     * When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
     */
    validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Client resource.
 */
export interface ClientArgs {
    /**
     * Always list this client in the Account UI, even if the user does not have an active session.
     */
    alwaysDisplayInConsole?: pulumi.Input<boolean>;
    /**
     * SAML POST Binding URL for the client's assertion consumer service (login responses).
     */
    assertionConsumerPostUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's assertion consumer service (login responses).
     */
    assertionConsumerRedirectUrl?: pulumi.Input<string>;
    /**
     * Override realm authentication flow bindings
     */
    authenticationFlowBindingOverrides?: pulumi.Input<inputs.saml.ClientAuthenticationFlowBindingOverrides>;
    /**
     * When specified, this URL will be used whenever Keycloak needs to link to this client.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * The Canonicalization Method for XML signatures. Should be one of "EXCLUSIVE", "EXCLUSIVE_WITH_COMMENTS", "INCLUSIVE", or "INCLUSIVE_WITH_COMMENTS". Defaults to "EXCLUSIVE".
     */
    canonicalizationMethod?: pulumi.Input<string>;
    /**
     * The unique ID of this client, referenced in the URI during authentication and in issued tokens.
     */
    clientId: pulumi.Input<string>;
    /**
     * When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`. Defaults to `true`.
     */
    clientSignatureRequired?: pulumi.Input<boolean>;
    /**
     * When `true`, users have to consent to client access. Defaults to `false`.
     */
    consentRequired?: pulumi.Input<boolean>;
    /**
     * The description of this client in the GUI.
     */
    description?: pulumi.Input<string>;
    /**
     * When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML assertions will be encrypted by Keycloak using the client's public key. Defaults to `false`.
     */
    encryptAssertions?: pulumi.Input<boolean>;
    /**
     * If assertions for the client are encrypted, this certificate will be used for encryption.
     */
    encryptionCertificate?: pulumi.Input<string>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Ignore requested NameID subject format and use the one defined in `nameIdFormat` instead. Defaults to `false`.
     */
    forceNameIdFormat?: pulumi.Input<boolean>;
    /**
     * When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to `true`.
     */
    forcePostBinding?: pulumi.Input<boolean>;
    /**
     * When `true`, this client will require a browser redirect in order to perform a logout. Defaults to `true`.
     */
    frontChannelLogout?: pulumi.Input<boolean>;
    /**
     * Allow to include all roles mappings in the access token
     */
    fullScopeAllowed?: pulumi.Input<boolean>;
    /**
     * Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
     */
    idpInitiatedSsoRelayState?: pulumi.Input<string>;
    /**
     * URL fragment name to reference client when you want to do IDP Initiated SSO.
     */
    idpInitiatedSsoUrlName?: pulumi.Input<string>;
    /**
     * When `true`, an `AuthnStatement` will be included in the SAML response. Defaults to `true`.
     */
    includeAuthnStatement?: pulumi.Input<boolean>;
    /**
     * The login theme of this client.
     */
    loginTheme?: pulumi.Input<string>;
    /**
     * SAML POST Binding URL for the client's single logout service.
     */
    logoutServicePostBindingUrl?: pulumi.Input<string>;
    /**
     * SAML Redirect Binding URL for the client's single logout service.
     */
    logoutServiceRedirectBindingUrl?: pulumi.Input<string>;
    /**
     * When specified, this URL will be used for all SAML requests.
     */
    masterSamlProcessingUrl?: pulumi.Input<string>;
    /**
     * The display name of this client in the GUI.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets the Name ID format for the subject.
     */
    nameIdFormat?: pulumi.Input<string>;
    /**
     * The realm this client is attached to.
     */
    realmId: pulumi.Input<string>;
    /**
     * When specified, this value is prepended to all relative URLs.
     */
    rootUrl?: pulumi.Input<string>;
    /**
     * When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. Defaults to `false`.
     */
    signAssertions?: pulumi.Input<boolean>;
    /**
     * When `true`, the SAML document will be signed by Keycloak using the realm's private key. Defaults to `true`.
     */
    signDocuments?: pulumi.Input<boolean>;
    /**
     * The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA256_MGF1, "RSA_SHA512", "RSA_SHA512_MGF1" or "DSA_SHA1".
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The value of the `KeyName` element within the signed SAML document. Should be one of "NONE", "KEY_ID", or "CERT_SUBJECT". Defaults to "KEY_ID".
     */
    signatureKeyName?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this certificate will be used to verify the signature.
     */
    signingCertificate?: pulumi.Input<string>;
    /**
     * If documents or assertions from the client are signed, this private key will be used to verify the signature.
     */
    signingPrivateKey?: pulumi.Input<string>;
    /**
     * When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
     */
    validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
}
