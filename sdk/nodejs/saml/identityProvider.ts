// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing SAML Identity Providers within Keycloak.
 *
 * SAML (Security Assertion Markup Language) identity providers allows users to authenticate through a third-party system using the SAML protocol.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const realmSamlIdentityProvider = new keycloak.saml.IdentityProvider("realmSamlIdentityProvider", {
 *     realm: realm.id,
 *     alias: "my-saml-idp",
 *     entityId: "https://domain.com/entity_id",
 *     singleSignOnServiceUrl: "https://domain.com/adfs/ls/",
 *     singleLogoutServiceUrl: "https://domain.com/adfs/ls/?wa=wsignout1.0",
 *     backchannelSupported: true,
 *     postBindingResponse: true,
 *     postBindingLogout: true,
 *     postBindingAuthnRequest: true,
 *     storeToken: false,
 *     trustEmail: true,
 *     forceAuthn: true,
 * });
 * ```
 *
 * ## Import
 *
 * Identity providers can be imported using the format `{{realm_id}}/{{idp_alias}}`, where `idp_alias` is the identity provider alias. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:saml/identityProvider:IdentityProvider realm_saml_identity_provider my-realm/my-saml-idp
 * ```
 */
export class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityProvider {
        return new IdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:saml/identityProvider:IdentityProvider';

    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }

    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    public readonly addReadTokenRoleOnCreate!: pulumi.Output<boolean | undefined>;
    /**
     * The unique name of identity provider.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Authenticate users by default. Defaults to `false`.
     */
    public readonly authenticateByDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Does the external IDP support back-channel logout ?.
     */
    public readonly backchannelSupported!: pulumi.Output<boolean | undefined>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     */
    public readonly entityId!: pulumi.Output<string>;
    public readonly extraConfig!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
     */
    public readonly firstBrokerLoginFlowAlias!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
     */
    public readonly forceAuthn!: pulumi.Output<boolean | undefined>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    public readonly guiOrder!: pulumi.Output<string | undefined>;
    /**
     * If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
     */
    public readonly hideOnLoginPage!: pulumi.Output<boolean | undefined>;
    /**
     * Internal Identity Provider Id
     */
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    /**
     * When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    public readonly linkOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
     */
    public readonly nameIdPolicyFormat!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    public readonly postBindingAuthnRequest!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    public readonly postBindingLogout!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used..
     */
    public readonly postBindingResponse!: pulumi.Output<boolean | undefined>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
     */
    public readonly postBrokerLoginFlowAlias!: pulumi.Output<string | undefined>;
    /**
     * Principal Attribute
     */
    public readonly principalAttribute!: pulumi.Output<string | undefined>;
    /**
     * Principal Type
     */
    public readonly principalType!: pulumi.Output<string | undefined>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    public readonly realm!: pulumi.Output<string>;
    /**
     * Signing Algorithm. Defaults to empty.
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Signing Certificate.
     */
    public readonly signingCertificate!: pulumi.Output<string | undefined>;
    /**
     * The Url that must be used to send logout requests.
     */
    public readonly singleLogoutServiceUrl!: pulumi.Output<string | undefined>;
    /**
     * The Url that must be used to send authentication requests (SAML AuthnRequest).
     */
    public readonly singleSignOnServiceUrl!: pulumi.Output<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    public readonly storeToken!: pulumi.Output<boolean | undefined>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    public readonly syncMode!: pulumi.Output<string | undefined>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    public readonly trustEmail!: pulumi.Output<boolean | undefined>;
    /**
     * Enable/disable signature validation of SAML responses.
     */
    public readonly validateSignature!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether this service provider expects an encrypted Assertion.
     */
    public readonly wantAssertionsEncrypted!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether this service provider expects a signed Assertion.
     */
    public readonly wantAssertionsSigned!: pulumi.Output<boolean | undefined>;
    /**
     * Sign Key Transformer. Defaults to empty.
     */
    public readonly xmlSignKeyInfoKeyNameTransformer!: pulumi.Output<string | undefined>;

    /**
     * Create a IdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderArgs | IdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityProviderState | undefined;
            resourceInputs["addReadTokenRoleOnCreate"] = state ? state.addReadTokenRoleOnCreate : undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["authenticateByDefault"] = state ? state.authenticateByDefault : undefined;
            resourceInputs["backchannelSupported"] = state ? state.backchannelSupported : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["extraConfig"] = state ? state.extraConfig : undefined;
            resourceInputs["firstBrokerLoginFlowAlias"] = state ? state.firstBrokerLoginFlowAlias : undefined;
            resourceInputs["forceAuthn"] = state ? state.forceAuthn : undefined;
            resourceInputs["guiOrder"] = state ? state.guiOrder : undefined;
            resourceInputs["hideOnLoginPage"] = state ? state.hideOnLoginPage : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["linkOnly"] = state ? state.linkOnly : undefined;
            resourceInputs["nameIdPolicyFormat"] = state ? state.nameIdPolicyFormat : undefined;
            resourceInputs["postBindingAuthnRequest"] = state ? state.postBindingAuthnRequest : undefined;
            resourceInputs["postBindingLogout"] = state ? state.postBindingLogout : undefined;
            resourceInputs["postBindingResponse"] = state ? state.postBindingResponse : undefined;
            resourceInputs["postBrokerLoginFlowAlias"] = state ? state.postBrokerLoginFlowAlias : undefined;
            resourceInputs["principalAttribute"] = state ? state.principalAttribute : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["signingCertificate"] = state ? state.signingCertificate : undefined;
            resourceInputs["singleLogoutServiceUrl"] = state ? state.singleLogoutServiceUrl : undefined;
            resourceInputs["singleSignOnServiceUrl"] = state ? state.singleSignOnServiceUrl : undefined;
            resourceInputs["storeToken"] = state ? state.storeToken : undefined;
            resourceInputs["syncMode"] = state ? state.syncMode : undefined;
            resourceInputs["trustEmail"] = state ? state.trustEmail : undefined;
            resourceInputs["validateSignature"] = state ? state.validateSignature : undefined;
            resourceInputs["wantAssertionsEncrypted"] = state ? state.wantAssertionsEncrypted : undefined;
            resourceInputs["wantAssertionsSigned"] = state ? state.wantAssertionsSigned : undefined;
            resourceInputs["xmlSignKeyInfoKeyNameTransformer"] = state ? state.xmlSignKeyInfoKeyNameTransformer : undefined;
        } else {
            const args = argsOrState as IdentityProviderArgs | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.entityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            if ((!args || args.realm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            if ((!args || args.singleSignOnServiceUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'singleSignOnServiceUrl'");
            }
            resourceInputs["addReadTokenRoleOnCreate"] = args ? args.addReadTokenRoleOnCreate : undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["authenticateByDefault"] = args ? args.authenticateByDefault : undefined;
            resourceInputs["backchannelSupported"] = args ? args.backchannelSupported : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["extraConfig"] = args ? args.extraConfig : undefined;
            resourceInputs["firstBrokerLoginFlowAlias"] = args ? args.firstBrokerLoginFlowAlias : undefined;
            resourceInputs["forceAuthn"] = args ? args.forceAuthn : undefined;
            resourceInputs["guiOrder"] = args ? args.guiOrder : undefined;
            resourceInputs["hideOnLoginPage"] = args ? args.hideOnLoginPage : undefined;
            resourceInputs["linkOnly"] = args ? args.linkOnly : undefined;
            resourceInputs["nameIdPolicyFormat"] = args ? args.nameIdPolicyFormat : undefined;
            resourceInputs["postBindingAuthnRequest"] = args ? args.postBindingAuthnRequest : undefined;
            resourceInputs["postBindingLogout"] = args ? args.postBindingLogout : undefined;
            resourceInputs["postBindingResponse"] = args ? args.postBindingResponse : undefined;
            resourceInputs["postBrokerLoginFlowAlias"] = args ? args.postBrokerLoginFlowAlias : undefined;
            resourceInputs["principalAttribute"] = args ? args.principalAttribute : undefined;
            resourceInputs["principalType"] = args ? args.principalType : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["signingCertificate"] = args ? args.signingCertificate : undefined;
            resourceInputs["singleLogoutServiceUrl"] = args ? args.singleLogoutServiceUrl : undefined;
            resourceInputs["singleSignOnServiceUrl"] = args ? args.singleSignOnServiceUrl : undefined;
            resourceInputs["storeToken"] = args ? args.storeToken : undefined;
            resourceInputs["syncMode"] = args ? args.syncMode : undefined;
            resourceInputs["trustEmail"] = args ? args.trustEmail : undefined;
            resourceInputs["validateSignature"] = args ? args.validateSignature : undefined;
            resourceInputs["wantAssertionsEncrypted"] = args ? args.wantAssertionsEncrypted : undefined;
            resourceInputs["wantAssertionsSigned"] = args ? args.wantAssertionsSigned : undefined;
            resourceInputs["xmlSignKeyInfoKeyNameTransformer"] = args ? args.xmlSignKeyInfoKeyNameTransformer : undefined;
            resourceInputs["internalId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityProvider resources.
 */
export interface IdentityProviderState {
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The unique name of identity provider.
     */
    alias?: pulumi.Input<string>;
    /**
     * Authenticate users by default. Defaults to `false`.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * Does the external IDP support back-channel logout ?.
     */
    backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     */
    entityId?: pulumi.Input<string>;
    extraConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
     */
    forceAuthn?: pulumi.Input<boolean>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * Internal Identity Provider Id
     */
    internalId?: pulumi.Input<string>;
    /**
     * When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    /**
     * Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
     */
    nameIdPolicyFormat?: pulumi.Input<string>;
    /**
     * Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingAuthnRequest?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingLogout?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used..
     */
    postBindingResponse?: pulumi.Input<boolean>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Principal Attribute
     */
    principalAttribute?: pulumi.Input<string>;
    /**
     * Principal Type
     */
    principalType?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm?: pulumi.Input<string>;
    /**
     * Signing Algorithm. Defaults to empty.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Signing Certificate.
     */
    signingCertificate?: pulumi.Input<string>;
    /**
     * The Url that must be used to send logout requests.
     */
    singleLogoutServiceUrl?: pulumi.Input<string>;
    /**
     * The Url that must be used to send authentication requests (SAML AuthnRequest).
     */
    singleSignOnServiceUrl?: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
    /**
     * Enable/disable signature validation of SAML responses.
     */
    validateSignature?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects an encrypted Assertion.
     */
    wantAssertionsEncrypted?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects a signed Assertion.
     */
    wantAssertionsSigned?: pulumi.Input<boolean>;
    /**
     * Sign Key Transformer. Defaults to empty.
     */
    xmlSignKeyInfoKeyNameTransformer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityProvider resource.
 */
export interface IdentityProviderArgs {
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The unique name of identity provider.
     */
    alias: pulumi.Input<string>;
    /**
     * Authenticate users by default. Defaults to `false`.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * Does the external IDP support back-channel logout ?.
     */
    backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     */
    entityId: pulumi.Input<string>;
    extraConfig?: pulumi.Input<{[key: string]: any}>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
     */
    forceAuthn?: pulumi.Input<boolean>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * When `true`, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    /**
     * Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
     */
    nameIdPolicyFormat?: pulumi.Input<string>;
    /**
     * Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingAuthnRequest?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingLogout?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used..
     */
    postBindingResponse?: pulumi.Input<boolean>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Principal Attribute
     */
    principalAttribute?: pulumi.Input<string>;
    /**
     * Principal Type
     */
    principalType?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm: pulumi.Input<string>;
    /**
     * Signing Algorithm. Defaults to empty.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Signing Certificate.
     */
    signingCertificate?: pulumi.Input<string>;
    /**
     * The Url that must be used to send logout requests.
     */
    singleLogoutServiceUrl?: pulumi.Input<string>;
    /**
     * The Url that must be used to send authentication requests (SAML AuthnRequest).
     */
    singleSignOnServiceUrl: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
    /**
     * Enable/disable signature validation of SAML responses.
     */
    validateSignature?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects an encrypted Assertion.
     */
    wantAssertionsEncrypted?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects a signed Assertion.
     */
    wantAssertionsSigned?: pulumi.Input<boolean>;
    /**
     * Sign Key Transformer. Defaults to empty.
     */
    xmlSignKeyInfoKeyNameTransformer?: pulumi.Input<string>;
}
