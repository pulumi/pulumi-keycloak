// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing SAML Identity Providers within Keycloak.
 *
 * SAML (Security Assertion Markup Language) identity providers allows users to authenticate through a third-party system using the SAML protocol.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const realmSamlIdentityProvider = new keycloak.saml.IdentityProvider("realm_saml_identity_provider", {
 *     realm: realm.id,
 *     alias: "my-saml-idp",
 *     entityId: "https://domain.com/entity_id",
 *     singleSignOnServiceUrl: "https://domain.com/adfs/ls/",
 *     singleLogoutServiceUrl: "https://domain.com/adfs/ls/?wa=wsignout1.0",
 *     backchannelSupported: true,
 *     postBindingResponse: true,
 *     postBindingLogout: true,
 *     postBindingAuthnRequest: true,
 *     storeToken: false,
 *     trustEmail: true,
 *     forceAuthn: true,
 * });
 * ```
 *
 * ## Import
 *
 * Identity providers can be imported using the format `{{realm_id}}/{{idp_alias}}`, where `idp_alias` is the identity provider alias.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:saml/identityProvider:IdentityProvider realm_saml_identity_provider my-realm/my-saml-idp
 * ```
 */
export class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityProvider {
        return new IdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:saml/identityProvider:IdentityProvider';

    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }

    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    declare public readonly addReadTokenRoleOnCreate: pulumi.Output<boolean | undefined>;
    /**
     * The unique name of identity provider.
     */
    declare public readonly alias: pulumi.Output<string>;
    /**
     * Authenticate users by default. Defaults to `false`.
     */
    declare public readonly authenticateByDefault: pulumi.Output<boolean | undefined>;
    /**
     * Ordered list of requested AuthnContext ClassRefs.
     */
    declare public readonly authnContextClassRefs: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the comparison method used to evaluate the requested context classes or statements.
     */
    declare public readonly authnContextComparisonType: pulumi.Output<string | undefined>;
    /**
     * Ordered list of requested AuthnContext DeclRefs.
     */
    declare public readonly authnContextDeclRefs: pulumi.Output<string[] | undefined>;
    /**
     * Does the external IDP support backchannel logout?. Defaults to `false`.
     */
    declare public readonly backchannelSupported: pulumi.Output<boolean | undefined>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     */
    declare public readonly entityId: pulumi.Output<string>;
    declare public readonly extraConfig: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
     */
    declare public readonly firstBrokerLoginFlowAlias: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
     */
    declare public readonly forceAuthn: pulumi.Output<boolean | undefined>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    declare public readonly guiOrder: pulumi.Output<string | undefined>;
    /**
     * If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
     */
    declare public readonly hideOnLoginPage: pulumi.Output<boolean | undefined>;
    /**
     * Internal Identity Provider Id
     */
    declare public /*out*/ readonly internalId: pulumi.Output<string>;
    /**
     * When `true`, users cannot log in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    declare public readonly linkOnly: pulumi.Output<boolean | undefined>;
    /**
     * Login Hint.
     */
    declare public readonly loginHint: pulumi.Output<string | undefined>;
    /**
     * Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
     */
    declare public readonly nameIdPolicyFormat: pulumi.Output<string | undefined>;
    /**
     * The organization domain to associate this identity provider with. It is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
     */
    declare public readonly orgDomain: pulumi.Output<string | undefined>;
    /**
     * Indicates whether to automatically redirect users to this identity provider when email domain matches domain.
     */
    declare public readonly orgRedirectModeEmailMatches: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the organization to link this identity provider to.
     */
    declare public readonly organizationId: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    declare public readonly postBindingAuthnRequest: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    declare public readonly postBindingLogout: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    declare public readonly postBindingResponse: pulumi.Output<boolean | undefined>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
     */
    declare public readonly postBrokerLoginFlowAlias: pulumi.Output<string | undefined>;
    /**
     * The principal attribute.
     */
    declare public readonly principalAttribute: pulumi.Output<string | undefined>;
    /**
     * The principal type. Can be one of `SUBJECT`, `ATTRIBUTE` or `FRIENDLY_ATTRIBUTE`.
     */
    declare public readonly principalType: pulumi.Output<string | undefined>;
    /**
     * The ID of the identity provider to use. Defaults to `saml`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    declare public readonly providerId: pulumi.Output<string | undefined>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    declare public readonly realm: pulumi.Output<string>;
    /**
     * Signing Algorithm. Defaults to empty.
     */
    declare public readonly signatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Signing Certificate.
     */
    declare public readonly signingCertificate: pulumi.Output<string | undefined>;
    /**
     * The Url that must be used to send logout requests.
     */
    declare public readonly singleLogoutServiceUrl: pulumi.Output<string | undefined>;
    /**
     * The Url that must be used to send authentication requests (SAML AuthnRequest).
     */
    declare public readonly singleSignOnServiceUrl: pulumi.Output<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    declare public readonly storeToken: pulumi.Output<boolean | undefined>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be one of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    declare public readonly syncMode: pulumi.Output<string | undefined>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    declare public readonly trustEmail: pulumi.Output<boolean | undefined>;
    /**
     * Enable/disable signature validation of SAML responses.
     */
    declare public readonly validateSignature: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether this service provider expects an encrypted Assertion.
     */
    declare public readonly wantAssertionsEncrypted: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether this service provider expects a signed Assertion.
     */
    declare public readonly wantAssertionsSigned: pulumi.Output<boolean | undefined>;
    /**
     * The SAML signature key name. Can be one of `NONE`, `KEY_ID`, or `CERT_SUBJECT`.
     */
    declare public readonly xmlSignKeyInfoKeyNameTransformer: pulumi.Output<string | undefined>;

    /**
     * Create a IdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderArgs | IdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityProviderState | undefined;
            resourceInputs["addReadTokenRoleOnCreate"] = state?.addReadTokenRoleOnCreate;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["authenticateByDefault"] = state?.authenticateByDefault;
            resourceInputs["authnContextClassRefs"] = state?.authnContextClassRefs;
            resourceInputs["authnContextComparisonType"] = state?.authnContextComparisonType;
            resourceInputs["authnContextDeclRefs"] = state?.authnContextDeclRefs;
            resourceInputs["backchannelSupported"] = state?.backchannelSupported;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["entityId"] = state?.entityId;
            resourceInputs["extraConfig"] = state?.extraConfig;
            resourceInputs["firstBrokerLoginFlowAlias"] = state?.firstBrokerLoginFlowAlias;
            resourceInputs["forceAuthn"] = state?.forceAuthn;
            resourceInputs["guiOrder"] = state?.guiOrder;
            resourceInputs["hideOnLoginPage"] = state?.hideOnLoginPage;
            resourceInputs["internalId"] = state?.internalId;
            resourceInputs["linkOnly"] = state?.linkOnly;
            resourceInputs["loginHint"] = state?.loginHint;
            resourceInputs["nameIdPolicyFormat"] = state?.nameIdPolicyFormat;
            resourceInputs["orgDomain"] = state?.orgDomain;
            resourceInputs["orgRedirectModeEmailMatches"] = state?.orgRedirectModeEmailMatches;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["postBindingAuthnRequest"] = state?.postBindingAuthnRequest;
            resourceInputs["postBindingLogout"] = state?.postBindingLogout;
            resourceInputs["postBindingResponse"] = state?.postBindingResponse;
            resourceInputs["postBrokerLoginFlowAlias"] = state?.postBrokerLoginFlowAlias;
            resourceInputs["principalAttribute"] = state?.principalAttribute;
            resourceInputs["principalType"] = state?.principalType;
            resourceInputs["providerId"] = state?.providerId;
            resourceInputs["realm"] = state?.realm;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["signingCertificate"] = state?.signingCertificate;
            resourceInputs["singleLogoutServiceUrl"] = state?.singleLogoutServiceUrl;
            resourceInputs["singleSignOnServiceUrl"] = state?.singleSignOnServiceUrl;
            resourceInputs["storeToken"] = state?.storeToken;
            resourceInputs["syncMode"] = state?.syncMode;
            resourceInputs["trustEmail"] = state?.trustEmail;
            resourceInputs["validateSignature"] = state?.validateSignature;
            resourceInputs["wantAssertionsEncrypted"] = state?.wantAssertionsEncrypted;
            resourceInputs["wantAssertionsSigned"] = state?.wantAssertionsSigned;
            resourceInputs["xmlSignKeyInfoKeyNameTransformer"] = state?.xmlSignKeyInfoKeyNameTransformer;
        } else {
            const args = argsOrState as IdentityProviderArgs | undefined;
            if (args?.alias === undefined && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if (args?.entityId === undefined && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            if (args?.realm === undefined && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            if (args?.singleSignOnServiceUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'singleSignOnServiceUrl'");
            }
            resourceInputs["addReadTokenRoleOnCreate"] = args?.addReadTokenRoleOnCreate;
            resourceInputs["alias"] = args?.alias;
            resourceInputs["authenticateByDefault"] = args?.authenticateByDefault;
            resourceInputs["authnContextClassRefs"] = args?.authnContextClassRefs;
            resourceInputs["authnContextComparisonType"] = args?.authnContextComparisonType;
            resourceInputs["authnContextDeclRefs"] = args?.authnContextDeclRefs;
            resourceInputs["backchannelSupported"] = args?.backchannelSupported;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["entityId"] = args?.entityId;
            resourceInputs["extraConfig"] = args?.extraConfig;
            resourceInputs["firstBrokerLoginFlowAlias"] = args?.firstBrokerLoginFlowAlias;
            resourceInputs["forceAuthn"] = args?.forceAuthn;
            resourceInputs["guiOrder"] = args?.guiOrder;
            resourceInputs["hideOnLoginPage"] = args?.hideOnLoginPage;
            resourceInputs["linkOnly"] = args?.linkOnly;
            resourceInputs["loginHint"] = args?.loginHint;
            resourceInputs["nameIdPolicyFormat"] = args?.nameIdPolicyFormat;
            resourceInputs["orgDomain"] = args?.orgDomain;
            resourceInputs["orgRedirectModeEmailMatches"] = args?.orgRedirectModeEmailMatches;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["postBindingAuthnRequest"] = args?.postBindingAuthnRequest;
            resourceInputs["postBindingLogout"] = args?.postBindingLogout;
            resourceInputs["postBindingResponse"] = args?.postBindingResponse;
            resourceInputs["postBrokerLoginFlowAlias"] = args?.postBrokerLoginFlowAlias;
            resourceInputs["principalAttribute"] = args?.principalAttribute;
            resourceInputs["principalType"] = args?.principalType;
            resourceInputs["providerId"] = args?.providerId;
            resourceInputs["realm"] = args?.realm;
            resourceInputs["signatureAlgorithm"] = args?.signatureAlgorithm;
            resourceInputs["signingCertificate"] = args?.signingCertificate;
            resourceInputs["singleLogoutServiceUrl"] = args?.singleLogoutServiceUrl;
            resourceInputs["singleSignOnServiceUrl"] = args?.singleSignOnServiceUrl;
            resourceInputs["storeToken"] = args?.storeToken;
            resourceInputs["syncMode"] = args?.syncMode;
            resourceInputs["trustEmail"] = args?.trustEmail;
            resourceInputs["validateSignature"] = args?.validateSignature;
            resourceInputs["wantAssertionsEncrypted"] = args?.wantAssertionsEncrypted;
            resourceInputs["wantAssertionsSigned"] = args?.wantAssertionsSigned;
            resourceInputs["xmlSignKeyInfoKeyNameTransformer"] = args?.xmlSignKeyInfoKeyNameTransformer;
            resourceInputs["internalId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityProvider resources.
 */
export interface IdentityProviderState {
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The unique name of identity provider.
     */
    alias?: pulumi.Input<string>;
    /**
     * Authenticate users by default. Defaults to `false`.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * Ordered list of requested AuthnContext ClassRefs.
     */
    authnContextClassRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the comparison method used to evaluate the requested context classes or statements.
     */
    authnContextComparisonType?: pulumi.Input<string>;
    /**
     * Ordered list of requested AuthnContext DeclRefs.
     */
    authnContextDeclRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Does the external IDP support backchannel logout?. Defaults to `false`.
     */
    backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     */
    entityId?: pulumi.Input<string>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
     */
    forceAuthn?: pulumi.Input<boolean>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * Internal Identity Provider Id
     */
    internalId?: pulumi.Input<string>;
    /**
     * When `true`, users cannot log in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    /**
     * Login Hint.
     */
    loginHint?: pulumi.Input<string>;
    /**
     * Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
     */
    nameIdPolicyFormat?: pulumi.Input<string>;
    /**
     * The organization domain to associate this identity provider with. It is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
     */
    orgDomain?: pulumi.Input<string>;
    /**
     * Indicates whether to automatically redirect users to this identity provider when email domain matches domain.
     */
    orgRedirectModeEmailMatches?: pulumi.Input<boolean>;
    /**
     * The ID of the organization to link this identity provider to.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingAuthnRequest?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingLogout?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingResponse?: pulumi.Input<boolean>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The principal attribute.
     */
    principalAttribute?: pulumi.Input<string>;
    /**
     * The principal type. Can be one of `SUBJECT`, `ATTRIBUTE` or `FRIENDLY_ATTRIBUTE`.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `saml`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm?: pulumi.Input<string>;
    /**
     * Signing Algorithm. Defaults to empty.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Signing Certificate.
     */
    signingCertificate?: pulumi.Input<string>;
    /**
     * The Url that must be used to send logout requests.
     */
    singleLogoutServiceUrl?: pulumi.Input<string>;
    /**
     * The Url that must be used to send authentication requests (SAML AuthnRequest).
     */
    singleSignOnServiceUrl?: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be one of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
    /**
     * Enable/disable signature validation of SAML responses.
     */
    validateSignature?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects an encrypted Assertion.
     */
    wantAssertionsEncrypted?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects a signed Assertion.
     */
    wantAssertionsSigned?: pulumi.Input<boolean>;
    /**
     * The SAML signature key name. Can be one of `NONE`, `KEY_ID`, or `CERT_SUBJECT`.
     */
    xmlSignKeyInfoKeyNameTransformer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityProvider resource.
 */
export interface IdentityProviderArgs {
    /**
     * When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
     */
    addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
    /**
     * The unique name of identity provider.
     */
    alias: pulumi.Input<string>;
    /**
     * Authenticate users by default. Defaults to `false`.
     */
    authenticateByDefault?: pulumi.Input<boolean>;
    /**
     * Ordered list of requested AuthnContext ClassRefs.
     */
    authnContextClassRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the comparison method used to evaluate the requested context classes or statements.
     */
    authnContextComparisonType?: pulumi.Input<string>;
    /**
     * Ordered list of requested AuthnContext DeclRefs.
     */
    authnContextDeclRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Does the external IDP support backchannel logout?. Defaults to `false`.
     */
    backchannelSupported?: pulumi.Input<boolean>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The Entity ID that will be used to uniquely identify this SAML Service Provider.
     */
    entityId: pulumi.Input<string>;
    extraConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
     */
    firstBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
     */
    forceAuthn?: pulumi.Input<boolean>;
    /**
     * A number defining the order of this identity provider in the GUI.
     */
    guiOrder?: pulumi.Input<string>;
    /**
     * If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
     */
    hideOnLoginPage?: pulumi.Input<boolean>;
    /**
     * When `true`, users cannot log in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
     */
    linkOnly?: pulumi.Input<boolean>;
    /**
     * Login Hint.
     */
    loginHint?: pulumi.Input<string>;
    /**
     * Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
     */
    nameIdPolicyFormat?: pulumi.Input<string>;
    /**
     * The organization domain to associate this identity provider with. It is used to map users to an organization based on their email domain and to authenticate them accordingly in the scope of the organization.
     */
    orgDomain?: pulumi.Input<string>;
    /**
     * Indicates whether to automatically redirect users to this identity provider when email domain matches domain.
     */
    orgRedirectModeEmailMatches?: pulumi.Input<boolean>;
    /**
     * The ID of the organization to link this identity provider to.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingAuthnRequest?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingLogout?: pulumi.Input<boolean>;
    /**
     * Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
     */
    postBindingResponse?: pulumi.Input<boolean>;
    /**
     * Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
     */
    postBrokerLoginFlowAlias?: pulumi.Input<string>;
    /**
     * The principal attribute.
     */
    principalAttribute?: pulumi.Input<string>;
    /**
     * The principal type. Can be one of `SUBJECT`, `ATTRIBUTE` or `FRIENDLY_ATTRIBUTE`.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to use. Defaults to `saml`, which should be used unless you have extended Keycloak and provided your own implementation.
     */
    providerId?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak.
     */
    realm: pulumi.Input<string>;
    /**
     * Signing Algorithm. Defaults to empty.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Signing Certificate.
     */
    signingCertificate?: pulumi.Input<string>;
    /**
     * The Url that must be used to send logout requests.
     */
    singleLogoutServiceUrl?: pulumi.Input<string>;
    /**
     * The Url that must be used to send authentication requests (SAML AuthnRequest).
     */
    singleSignOnServiceUrl: pulumi.Input<string>;
    /**
     * When `true`, tokens will be stored after authenticating users. Defaults to `true`.
     */
    storeToken?: pulumi.Input<boolean>;
    /**
     * The default sync mode to use for all mappers attached to this identity provider. Can be one of `IMPORT`, `FORCE`, or `LEGACY`.
     */
    syncMode?: pulumi.Input<string>;
    /**
     * When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
     */
    trustEmail?: pulumi.Input<boolean>;
    /**
     * Enable/disable signature validation of SAML responses.
     */
    validateSignature?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects an encrypted Assertion.
     */
    wantAssertionsEncrypted?: pulumi.Input<boolean>;
    /**
     * Indicates whether this service provider expects a signed Assertion.
     */
    wantAssertionsSigned?: pulumi.Input<boolean>;
    /**
     * The SAML signature key name. Can be one of `NONE`, `KEY_ID`, or `CERT_SUBJECT`.
     */
    xmlSignKeyInfoKeyNameTransformer?: pulumi.Input<string>;
}
