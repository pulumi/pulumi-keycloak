// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can be used to fetch properties of a Keycloak realm for
 * usage with other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = keycloak.getRealm({
 *     realm: "my-realm",
 * });
 * // use the data source
 * const group = new keycloak.Role("group", {
 *     realmId: realm.then(realm => realm.id),
 *     name: "group",
 * });
 * ```
 */
export function getRealm(args: GetRealmArgs, opts?: pulumi.InvokeOptions): Promise<GetRealmResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keycloak:index/getRealm:getRealm", {
        "attributes": args.attributes,
        "defaultDefaultClientScopes": args.defaultDefaultClientScopes,
        "defaultOptionalClientScopes": args.defaultOptionalClientScopes,
        "displayNameHtml": args.displayNameHtml,
        "internationalizations": args.internationalizations,
        "otpPolicy": args.otpPolicy,
        "realm": args.realm,
        "securityDefenses": args.securityDefenses,
        "smtpServers": args.smtpServers,
        "webAuthnPasswordlessPolicy": args.webAuthnPasswordlessPolicy,
        "webAuthnPolicy": args.webAuthnPolicy,
    }, opts);
}

/**
 * A collection of arguments for invoking getRealm.
 */
export interface GetRealmArgs {
    attributes?: {[key: string]: string};
    defaultDefaultClientScopes?: string[];
    defaultOptionalClientScopes?: string[];
    displayNameHtml?: string;
    internationalizations?: inputs.GetRealmInternationalization[];
    otpPolicy?: inputs.GetRealmOtpPolicy;
    /**
     * The realm name.
     */
    realm: string;
    securityDefenses?: inputs.GetRealmSecurityDefense[];
    smtpServers?: inputs.GetRealmSmtpServer[];
    webAuthnPasswordlessPolicy?: inputs.GetRealmWebAuthnPasswordlessPolicy;
    webAuthnPolicy?: inputs.GetRealmWebAuthnPolicy;
}

/**
 * A collection of values returned by getRealm.
 */
export interface GetRealmResult {
    readonly accessCodeLifespan: string;
    readonly accessCodeLifespanLogin: string;
    readonly accessCodeLifespanUserAction: string;
    readonly accessTokenLifespan: string;
    readonly accessTokenLifespanForImplicitFlow: string;
    readonly accountTheme: string;
    readonly actionTokenGeneratedByAdminLifespan: string;
    readonly actionTokenGeneratedByUserLifespan: string;
    readonly adminTheme: string;
    readonly attributes: {[key: string]: string};
    readonly browserFlow: string;
    readonly clientAuthenticationFlow: string;
    readonly clientSessionIdleTimeout: string;
    readonly clientSessionMaxLifespan: string;
    readonly defaultDefaultClientScopes: string[];
    readonly defaultOptionalClientScopes: string[];
    readonly defaultSignatureAlgorithm: string;
    readonly directGrantFlow: string;
    readonly displayName: string;
    readonly displayNameHtml?: string;
    readonly dockerAuthenticationFlow: string;
    readonly duplicateEmailsAllowed: boolean;
    readonly editUsernameAllowed: boolean;
    readonly emailTheme: string;
    readonly enabled: boolean;
    readonly firstBrokerLoginFlow: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly internalId: string;
    readonly internationalizations: outputs.GetRealmInternationalization[];
    readonly loginTheme: string;
    readonly loginWithEmailAllowed: boolean;
    readonly oauth2DeviceCodeLifespan: string;
    readonly oauth2DevicePollingInterval: number;
    readonly offlineSessionIdleTimeout: string;
    readonly offlineSessionMaxLifespan: string;
    readonly offlineSessionMaxLifespanEnabled: boolean;
    readonly organizationsEnabled: boolean;
    readonly otpPolicy: outputs.GetRealmOtpPolicy;
    readonly passwordPolicy: string;
    readonly realm: string;
    readonly refreshTokenMaxReuse: number;
    readonly registrationAllowed: boolean;
    readonly registrationEmailAsUsername: boolean;
    readonly registrationFlow: string;
    readonly rememberMe: boolean;
    readonly resetCredentialsFlow: string;
    readonly resetPasswordAllowed: boolean;
    readonly revokeRefreshToken: boolean;
    readonly securityDefenses: outputs.GetRealmSecurityDefense[];
    readonly smtpServers: outputs.GetRealmSmtpServer[];
    readonly sslRequired: string;
    readonly ssoSessionIdleTimeout: string;
    readonly ssoSessionIdleTimeoutRememberMe: string;
    readonly ssoSessionMaxLifespan: string;
    readonly ssoSessionMaxLifespanRememberMe: string;
    readonly userManagedAccess: boolean;
    readonly verifyEmail: boolean;
    readonly webAuthnPasswordlessPolicy: outputs.GetRealmWebAuthnPasswordlessPolicy;
    readonly webAuthnPolicy: outputs.GetRealmWebAuthnPolicy;
}
/**
 * This data source can be used to fetch properties of a Keycloak realm for
 * usage with other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = keycloak.getRealm({
 *     realm: "my-realm",
 * });
 * // use the data source
 * const group = new keycloak.Role("group", {
 *     realmId: realm.then(realm => realm.id),
 *     name: "group",
 * });
 * ```
 */
export function getRealmOutput(args: GetRealmOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRealmResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("keycloak:index/getRealm:getRealm", {
        "attributes": args.attributes,
        "defaultDefaultClientScopes": args.defaultDefaultClientScopes,
        "defaultOptionalClientScopes": args.defaultOptionalClientScopes,
        "displayNameHtml": args.displayNameHtml,
        "internationalizations": args.internationalizations,
        "otpPolicy": args.otpPolicy,
        "realm": args.realm,
        "securityDefenses": args.securityDefenses,
        "smtpServers": args.smtpServers,
        "webAuthnPasswordlessPolicy": args.webAuthnPasswordlessPolicy,
        "webAuthnPolicy": args.webAuthnPolicy,
    }, opts);
}

/**
 * A collection of arguments for invoking getRealm.
 */
export interface GetRealmOutputArgs {
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    defaultDefaultClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOptionalClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    displayNameHtml?: pulumi.Input<string>;
    internationalizations?: pulumi.Input<pulumi.Input<inputs.GetRealmInternationalizationArgs>[]>;
    otpPolicy?: pulumi.Input<inputs.GetRealmOtpPolicyArgs>;
    /**
     * The realm name.
     */
    realm: pulumi.Input<string>;
    securityDefenses?: pulumi.Input<pulumi.Input<inputs.GetRealmSecurityDefenseArgs>[]>;
    smtpServers?: pulumi.Input<pulumi.Input<inputs.GetRealmSmtpServerArgs>[]>;
    webAuthnPasswordlessPolicy?: pulumi.Input<inputs.GetRealmWebAuthnPasswordlessPolicyArgs>;
    webAuthnPolicy?: pulumi.Input<inputs.GetRealmWebAuthnPolicyArgs>;
}
