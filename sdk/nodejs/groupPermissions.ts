// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class GroupPermissions extends pulumi.CustomResource {
    /**
     * Get an existing GroupPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupPermissionsState, opts?: pulumi.CustomResourceOptions): GroupPermissions {
        return new GroupPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/groupPermissions:GroupPermissions';

    /**
     * Returns true if the given object is an instance of GroupPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupPermissions.__pulumiType;
    }

    /**
     * Resource server id representing the realm management client on which this permission is managed
     */
    public /*out*/ readonly authorizationResourceServerId!: pulumi.Output<string>;
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    public readonly groupId!: pulumi.Output<string>;
    public readonly manageMembersScope!: pulumi.Output<outputs.GroupPermissionsManageMembersScope | undefined>;
    public readonly manageMembershipScope!: pulumi.Output<outputs.GroupPermissionsManageMembershipScope | undefined>;
    public readonly manageScope!: pulumi.Output<outputs.GroupPermissionsManageScope | undefined>;
    public readonly realmId!: pulumi.Output<string>;
    public readonly viewMembersScope!: pulumi.Output<outputs.GroupPermissionsViewMembersScope | undefined>;
    public readonly viewScope!: pulumi.Output<outputs.GroupPermissionsViewScope | undefined>;

    /**
     * Create a GroupPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupPermissionsArgs | GroupPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupPermissionsState | undefined;
            resourceInputs["authorizationResourceServerId"] = state ? state.authorizationResourceServerId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["manageMembersScope"] = state ? state.manageMembersScope : undefined;
            resourceInputs["manageMembershipScope"] = state ? state.manageMembershipScope : undefined;
            resourceInputs["manageScope"] = state ? state.manageScope : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["viewMembersScope"] = state ? state.viewMembersScope : undefined;
            resourceInputs["viewScope"] = state ? state.viewScope : undefined;
        } else {
            const args = argsOrState as GroupPermissionsArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["manageMembersScope"] = args ? args.manageMembersScope : undefined;
            resourceInputs["manageMembershipScope"] = args ? args.manageMembershipScope : undefined;
            resourceInputs["manageScope"] = args ? args.manageScope : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["viewMembersScope"] = args ? args.viewMembersScope : undefined;
            resourceInputs["viewScope"] = args ? args.viewScope : undefined;
            resourceInputs["authorizationResourceServerId"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupPermissions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GroupPermissions resources.
 */
export interface GroupPermissionsState {
    /**
     * Resource server id representing the realm management client on which this permission is managed
     */
    authorizationResourceServerId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    groupId?: pulumi.Input<string>;
    manageMembersScope?: pulumi.Input<inputs.GroupPermissionsManageMembersScope>;
    manageMembershipScope?: pulumi.Input<inputs.GroupPermissionsManageMembershipScope>;
    manageScope?: pulumi.Input<inputs.GroupPermissionsManageScope>;
    realmId?: pulumi.Input<string>;
    viewMembersScope?: pulumi.Input<inputs.GroupPermissionsViewMembersScope>;
    viewScope?: pulumi.Input<inputs.GroupPermissionsViewScope>;
}

/**
 * The set of arguments for constructing a GroupPermissions resource.
 */
export interface GroupPermissionsArgs {
    groupId: pulumi.Input<string>;
    manageMembersScope?: pulumi.Input<inputs.GroupPermissionsManageMembersScope>;
    manageMembershipScope?: pulumi.Input<inputs.GroupPermissionsManageMembershipScope>;
    manageScope?: pulumi.Input<inputs.GroupPermissionsManageScope>;
    realmId: pulumi.Input<string>;
    viewMembersScope?: pulumi.Input<inputs.GroupPermissionsViewMembersScope>;
    viewScope?: pulumi.Input<inputs.GroupPermissionsViewScope>;
}
