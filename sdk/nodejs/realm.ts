// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Realm extends pulumi.CustomResource {
    /**
     * Get an existing Realm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmState, opts?: pulumi.CustomResourceOptions): Realm {
        return new Realm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realm:Realm';

    /**
     * Returns true if the given object is an instance of Realm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Realm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Realm.__pulumiType;
    }

    public readonly accessCodeLifespan!: pulumi.Output<string>;
    public readonly accessCodeLifespanLogin!: pulumi.Output<string>;
    public readonly accessCodeLifespanUserAction!: pulumi.Output<string>;
    public readonly accessTokenLifespan!: pulumi.Output<string>;
    public readonly accessTokenLifespanForImplicitFlow!: pulumi.Output<string>;
    public readonly accountTheme!: pulumi.Output<string | undefined>;
    public readonly actionTokenGeneratedByAdminLifespan!: pulumi.Output<string>;
    public readonly actionTokenGeneratedByUserLifespan!: pulumi.Output<string>;
    public readonly adminTheme!: pulumi.Output<string | undefined>;
    public readonly attributes!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Which flow should be used for BrowserFlow
     */
    public readonly browserFlow!: pulumi.Output<string | undefined>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    public readonly clientAuthenticationFlow!: pulumi.Output<string | undefined>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    public readonly directGrantFlow!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly displayNameHtml!: pulumi.Output<string | undefined>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    public readonly dockerAuthenticationFlow!: pulumi.Output<string | undefined>;
    public readonly duplicateEmailsAllowed!: pulumi.Output<boolean>;
    public readonly editUsernameAllowed!: pulumi.Output<boolean>;
    public readonly emailTheme!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    public readonly internationalization!: pulumi.Output<outputs.RealmInternationalization | undefined>;
    public readonly loginTheme!: pulumi.Output<string | undefined>;
    public readonly loginWithEmailAllowed!: pulumi.Output<boolean>;
    public readonly offlineSessionIdleTimeout!: pulumi.Output<string>;
    public readonly offlineSessionMaxLifespan!: pulumi.Output<string>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported
     * policies can be found in the server-info providers page. example: "upperCase(1) and length(8) and
     * forceExpiredPasswordChange(365) and notUsername(undefined)"
     */
    public readonly passwordPolicy!: pulumi.Output<string | undefined>;
    public readonly realm!: pulumi.Output<string>;
    public readonly refreshTokenMaxReuse!: pulumi.Output<number | undefined>;
    public readonly registrationAllowed!: pulumi.Output<boolean>;
    public readonly registrationEmailAsUsername!: pulumi.Output<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    public readonly registrationFlow!: pulumi.Output<string | undefined>;
    public readonly rememberMe!: pulumi.Output<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    public readonly resetCredentialsFlow!: pulumi.Output<string | undefined>;
    public readonly resetPasswordAllowed!: pulumi.Output<boolean>;
    public readonly revokeRefreshToken!: pulumi.Output<boolean | undefined>;
    public readonly securityDefenses!: pulumi.Output<outputs.RealmSecurityDefenses | undefined>;
    public readonly smtpServer!: pulumi.Output<outputs.RealmSmtpServer | undefined>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    public readonly sslRequired!: pulumi.Output<string | undefined>;
    public readonly ssoSessionIdleTimeout!: pulumi.Output<string>;
    public readonly ssoSessionMaxLifespan!: pulumi.Output<string>;
    public readonly userManagedAccess!: pulumi.Output<boolean | undefined>;
    public readonly verifyEmail!: pulumi.Output<boolean>;

    /**
     * Create a Realm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmArgs | RealmState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as RealmState | undefined;
            inputs["accessCodeLifespan"] = state ? state.accessCodeLifespan : undefined;
            inputs["accessCodeLifespanLogin"] = state ? state.accessCodeLifespanLogin : undefined;
            inputs["accessCodeLifespanUserAction"] = state ? state.accessCodeLifespanUserAction : undefined;
            inputs["accessTokenLifespan"] = state ? state.accessTokenLifespan : undefined;
            inputs["accessTokenLifespanForImplicitFlow"] = state ? state.accessTokenLifespanForImplicitFlow : undefined;
            inputs["accountTheme"] = state ? state.accountTheme : undefined;
            inputs["actionTokenGeneratedByAdminLifespan"] = state ? state.actionTokenGeneratedByAdminLifespan : undefined;
            inputs["actionTokenGeneratedByUserLifespan"] = state ? state.actionTokenGeneratedByUserLifespan : undefined;
            inputs["adminTheme"] = state ? state.adminTheme : undefined;
            inputs["attributes"] = state ? state.attributes : undefined;
            inputs["browserFlow"] = state ? state.browserFlow : undefined;
            inputs["clientAuthenticationFlow"] = state ? state.clientAuthenticationFlow : undefined;
            inputs["directGrantFlow"] = state ? state.directGrantFlow : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["displayNameHtml"] = state ? state.displayNameHtml : undefined;
            inputs["dockerAuthenticationFlow"] = state ? state.dockerAuthenticationFlow : undefined;
            inputs["duplicateEmailsAllowed"] = state ? state.duplicateEmailsAllowed : undefined;
            inputs["editUsernameAllowed"] = state ? state.editUsernameAllowed : undefined;
            inputs["emailTheme"] = state ? state.emailTheme : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["internalId"] = state ? state.internalId : undefined;
            inputs["internationalization"] = state ? state.internationalization : undefined;
            inputs["loginTheme"] = state ? state.loginTheme : undefined;
            inputs["loginWithEmailAllowed"] = state ? state.loginWithEmailAllowed : undefined;
            inputs["offlineSessionIdleTimeout"] = state ? state.offlineSessionIdleTimeout : undefined;
            inputs["offlineSessionMaxLifespan"] = state ? state.offlineSessionMaxLifespan : undefined;
            inputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            inputs["realm"] = state ? state.realm : undefined;
            inputs["refreshTokenMaxReuse"] = state ? state.refreshTokenMaxReuse : undefined;
            inputs["registrationAllowed"] = state ? state.registrationAllowed : undefined;
            inputs["registrationEmailAsUsername"] = state ? state.registrationEmailAsUsername : undefined;
            inputs["registrationFlow"] = state ? state.registrationFlow : undefined;
            inputs["rememberMe"] = state ? state.rememberMe : undefined;
            inputs["resetCredentialsFlow"] = state ? state.resetCredentialsFlow : undefined;
            inputs["resetPasswordAllowed"] = state ? state.resetPasswordAllowed : undefined;
            inputs["revokeRefreshToken"] = state ? state.revokeRefreshToken : undefined;
            inputs["securityDefenses"] = state ? state.securityDefenses : undefined;
            inputs["smtpServer"] = state ? state.smtpServer : undefined;
            inputs["sslRequired"] = state ? state.sslRequired : undefined;
            inputs["ssoSessionIdleTimeout"] = state ? state.ssoSessionIdleTimeout : undefined;
            inputs["ssoSessionMaxLifespan"] = state ? state.ssoSessionMaxLifespan : undefined;
            inputs["userManagedAccess"] = state ? state.userManagedAccess : undefined;
            inputs["verifyEmail"] = state ? state.verifyEmail : undefined;
        } else {
            const args = argsOrState as RealmArgs | undefined;
            if (!args || args.realm === undefined) {
                throw new Error("Missing required property 'realm'");
            }
            inputs["accessCodeLifespan"] = args ? args.accessCodeLifespan : undefined;
            inputs["accessCodeLifespanLogin"] = args ? args.accessCodeLifespanLogin : undefined;
            inputs["accessCodeLifespanUserAction"] = args ? args.accessCodeLifespanUserAction : undefined;
            inputs["accessTokenLifespan"] = args ? args.accessTokenLifespan : undefined;
            inputs["accessTokenLifespanForImplicitFlow"] = args ? args.accessTokenLifespanForImplicitFlow : undefined;
            inputs["accountTheme"] = args ? args.accountTheme : undefined;
            inputs["actionTokenGeneratedByAdminLifespan"] = args ? args.actionTokenGeneratedByAdminLifespan : undefined;
            inputs["actionTokenGeneratedByUserLifespan"] = args ? args.actionTokenGeneratedByUserLifespan : undefined;
            inputs["adminTheme"] = args ? args.adminTheme : undefined;
            inputs["attributes"] = args ? args.attributes : undefined;
            inputs["browserFlow"] = args ? args.browserFlow : undefined;
            inputs["clientAuthenticationFlow"] = args ? args.clientAuthenticationFlow : undefined;
            inputs["directGrantFlow"] = args ? args.directGrantFlow : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["displayNameHtml"] = args ? args.displayNameHtml : undefined;
            inputs["dockerAuthenticationFlow"] = args ? args.dockerAuthenticationFlow : undefined;
            inputs["duplicateEmailsAllowed"] = args ? args.duplicateEmailsAllowed : undefined;
            inputs["editUsernameAllowed"] = args ? args.editUsernameAllowed : undefined;
            inputs["emailTheme"] = args ? args.emailTheme : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["internationalization"] = args ? args.internationalization : undefined;
            inputs["loginTheme"] = args ? args.loginTheme : undefined;
            inputs["loginWithEmailAllowed"] = args ? args.loginWithEmailAllowed : undefined;
            inputs["offlineSessionIdleTimeout"] = args ? args.offlineSessionIdleTimeout : undefined;
            inputs["offlineSessionMaxLifespan"] = args ? args.offlineSessionMaxLifespan : undefined;
            inputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            inputs["realm"] = args ? args.realm : undefined;
            inputs["refreshTokenMaxReuse"] = args ? args.refreshTokenMaxReuse : undefined;
            inputs["registrationAllowed"] = args ? args.registrationAllowed : undefined;
            inputs["registrationEmailAsUsername"] = args ? args.registrationEmailAsUsername : undefined;
            inputs["registrationFlow"] = args ? args.registrationFlow : undefined;
            inputs["rememberMe"] = args ? args.rememberMe : undefined;
            inputs["resetCredentialsFlow"] = args ? args.resetCredentialsFlow : undefined;
            inputs["resetPasswordAllowed"] = args ? args.resetPasswordAllowed : undefined;
            inputs["revokeRefreshToken"] = args ? args.revokeRefreshToken : undefined;
            inputs["securityDefenses"] = args ? args.securityDefenses : undefined;
            inputs["smtpServer"] = args ? args.smtpServer : undefined;
            inputs["sslRequired"] = args ? args.sslRequired : undefined;
            inputs["ssoSessionIdleTimeout"] = args ? args.ssoSessionIdleTimeout : undefined;
            inputs["ssoSessionMaxLifespan"] = args ? args.ssoSessionMaxLifespan : undefined;
            inputs["userManagedAccess"] = args ? args.userManagedAccess : undefined;
            inputs["verifyEmail"] = args ? args.verifyEmail : undefined;
            inputs["internalId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Realm.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Realm resources.
 */
export interface RealmState {
    readonly accessCodeLifespan?: pulumi.Input<string>;
    readonly accessCodeLifespanLogin?: pulumi.Input<string>;
    readonly accessCodeLifespanUserAction?: pulumi.Input<string>;
    readonly accessTokenLifespan?: pulumi.Input<string>;
    readonly accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    readonly accountTheme?: pulumi.Input<string>;
    readonly actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    readonly actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    readonly adminTheme?: pulumi.Input<string>;
    readonly attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * Which flow should be used for BrowserFlow
     */
    readonly browserFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    readonly clientAuthenticationFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    readonly directGrantFlow?: pulumi.Input<string>;
    readonly displayName?: pulumi.Input<string>;
    readonly displayNameHtml?: pulumi.Input<string>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    readonly dockerAuthenticationFlow?: pulumi.Input<string>;
    readonly duplicateEmailsAllowed?: pulumi.Input<boolean>;
    readonly editUsernameAllowed?: pulumi.Input<boolean>;
    readonly emailTheme?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly internalId?: pulumi.Input<string>;
    readonly internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    readonly loginTheme?: pulumi.Input<string>;
    readonly loginWithEmailAllowed?: pulumi.Input<boolean>;
    readonly offlineSessionIdleTimeout?: pulumi.Input<string>;
    readonly offlineSessionMaxLifespan?: pulumi.Input<string>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported
     * policies can be found in the server-info providers page. example: "upperCase(1) and length(8) and
     * forceExpiredPasswordChange(365) and notUsername(undefined)"
     */
    readonly passwordPolicy?: pulumi.Input<string>;
    readonly realm?: pulumi.Input<string>;
    readonly refreshTokenMaxReuse?: pulumi.Input<number>;
    readonly registrationAllowed?: pulumi.Input<boolean>;
    readonly registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    readonly registrationFlow?: pulumi.Input<string>;
    readonly rememberMe?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    readonly resetCredentialsFlow?: pulumi.Input<string>;
    readonly resetPasswordAllowed?: pulumi.Input<boolean>;
    readonly revokeRefreshToken?: pulumi.Input<boolean>;
    readonly securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    readonly smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    readonly sslRequired?: pulumi.Input<string>;
    readonly ssoSessionIdleTimeout?: pulumi.Input<string>;
    readonly ssoSessionMaxLifespan?: pulumi.Input<string>;
    readonly userManagedAccess?: pulumi.Input<boolean>;
    readonly verifyEmail?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Realm resource.
 */
export interface RealmArgs {
    readonly accessCodeLifespan?: pulumi.Input<string>;
    readonly accessCodeLifespanLogin?: pulumi.Input<string>;
    readonly accessCodeLifespanUserAction?: pulumi.Input<string>;
    readonly accessTokenLifespan?: pulumi.Input<string>;
    readonly accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    readonly accountTheme?: pulumi.Input<string>;
    readonly actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    readonly actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    readonly adminTheme?: pulumi.Input<string>;
    readonly attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * Which flow should be used for BrowserFlow
     */
    readonly browserFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    readonly clientAuthenticationFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    readonly directGrantFlow?: pulumi.Input<string>;
    readonly displayName?: pulumi.Input<string>;
    readonly displayNameHtml?: pulumi.Input<string>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    readonly dockerAuthenticationFlow?: pulumi.Input<string>;
    readonly duplicateEmailsAllowed?: pulumi.Input<boolean>;
    readonly editUsernameAllowed?: pulumi.Input<boolean>;
    readonly emailTheme?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    readonly loginTheme?: pulumi.Input<string>;
    readonly loginWithEmailAllowed?: pulumi.Input<boolean>;
    readonly offlineSessionIdleTimeout?: pulumi.Input<string>;
    readonly offlineSessionMaxLifespan?: pulumi.Input<string>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported
     * policies can be found in the server-info providers page. example: "upperCase(1) and length(8) and
     * forceExpiredPasswordChange(365) and notUsername(undefined)"
     */
    readonly passwordPolicy?: pulumi.Input<string>;
    readonly realm: pulumi.Input<string>;
    readonly refreshTokenMaxReuse?: pulumi.Input<number>;
    readonly registrationAllowed?: pulumi.Input<boolean>;
    readonly registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    readonly registrationFlow?: pulumi.Input<string>;
    readonly rememberMe?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    readonly resetCredentialsFlow?: pulumi.Input<string>;
    readonly resetPasswordAllowed?: pulumi.Input<boolean>;
    readonly revokeRefreshToken?: pulumi.Input<boolean>;
    readonly securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    readonly smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    readonly sslRequired?: pulumi.Input<string>;
    readonly ssoSessionIdleTimeout?: pulumi.Input<string>;
    readonly ssoSessionMaxLifespan?: pulumi.Input<string>;
    readonly userManagedAccess?: pulumi.Input<boolean>;
    readonly verifyEmail?: pulumi.Input<boolean>;
}
