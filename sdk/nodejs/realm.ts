// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Allows for creating and managing Realms within Keycloak.
 *
 * A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated
 * from multiple sources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     accessCodeLifespan: "1h",
 *     attributes: {
 *         mycustomAttribute: "myCustomValue",
 *     },
 *     displayName: "my realm",
 *     displayNameHtml: "<b>my realm</b>",
 *     enabled: true,
 *     internationalization: {
 *         defaultLocale: "en",
 *         supportedLocales: [
 *             "en",
 *             "de",
 *             "es",
 *         ],
 *     },
 *     loginTheme: "base",
 *     passwordPolicy: "upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername",
 *     realm: "my-realm",
 *     securityDefenses: {
 *         bruteForceDetection: {
 *             failureResetTimeSeconds: 43200,
 *             maxFailureWaitSeconds: 900,
 *             maxLoginFailures: 30,
 *             minimumQuickLoginWaitSeconds: 60,
 *             permanentLockout: false,
 *             quickLoginCheckMilliSeconds: 1000,
 *             waitIncrementSeconds: 60,
 *         },
 *         headers: {
 *             contentSecurityPolicy: "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
 *             contentSecurityPolicyReportOnly: "",
 *             strictTransportSecurity: "max-age=31536000; includeSubDomains",
 *             xContentTypeOptions: "nosniff",
 *             xFrameOptions: "DENY",
 *             xRobotsTag: "none",
 *             xXssProtection: "1; mode=block",
 *         },
 *     },
 *     smtpServer: {
 *         auth: {
 *             password: "password",
 *             username: "tom",
 *         },
 *         from: "example@example.com",
 *         host: "smtp.example.com",
 *     },
 *     sslRequired: "external",
 *     webAuthnPolicy: {
 *         relyingPartyEntityName: "Example",
 *         relyingPartyId: "keycloak.example.com",
 *         signatureAlgorithms: [
 *             "ES256",
 *             "RS256",
 *         ],
 *     },
 * });
 * ```
 * ## Default Client Scopes
 *
 * - `defaultDefaultClientScopes` - (Optional) A list of default default client scopes to be used for client definitions. Defaults to `[]` or keycloak's built-in default default client-scopes.
 * - `defaultOptionalClientScopes` - (Optional) A list of default optional client scopes to be used for client definitions. Defaults to `[]` or keycloak's built-in default optional client-scopes.
 *
 * ## Import
 *
 * Realms can be imported using their name. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:index/realm:Realm realm my-realm
 * ```
 */
export class Realm extends pulumi.CustomResource {
    /**
     * Get an existing Realm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmState, opts?: pulumi.CustomResourceOptions): Realm {
        return new Realm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realm:Realm';

    /**
     * Returns true if the given object is an instance of Realm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Realm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Realm.__pulumiType;
    }

    /**
     * The maximum amount of time a client has to finish the authorization code flow.
     */
    public readonly accessCodeLifespan!: pulumi.Output<string>;
    /**
     * The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
     */
    public readonly accessCodeLifespanLogin!: pulumi.Output<string>;
    /**
     * The maximum amount of time a user has to complete login related actions, such as updating a password.
     */
    public readonly accessCodeLifespanUserAction!: pulumi.Output<string>;
    /**
     * The amount of time an access token can be used before it expires.
     */
    public readonly accessTokenLifespan!: pulumi.Output<string>;
    /**
     * The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
     */
    public readonly accessTokenLifespanForImplicitFlow!: pulumi.Output<string>;
    /**
     * Used for account management pages.
     */
    public readonly accountTheme!: pulumi.Output<string | undefined>;
    /**
     * The maximum time a user has to use an admin-generated permit before it expires.
     */
    public readonly actionTokenGeneratedByAdminLifespan!: pulumi.Output<string>;
    /**
     * The maximum time a user has to use a user-generated permit before it expires.
     */
    public readonly actionTokenGeneratedByUserLifespan!: pulumi.Output<string>;
    /**
     * Used for the admin console.
     */
    public readonly adminTheme!: pulumi.Output<string | undefined>;
    /**
     * A map of custom attributes to add to the realm.
     */
    public readonly attributes!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The desired flow for browser authentication. Defaults to `browser`.
     */
    public readonly browserFlow!: pulumi.Output<string | undefined>;
    /**
     * The desired flow for client authentication. Defaults to `clients`.
     */
    public readonly clientAuthenticationFlow!: pulumi.Output<string | undefined>;
    public readonly defaultDefaultClientScopes!: pulumi.Output<string[] | undefined>;
    public readonly defaultOptionalClientScopes!: pulumi.Output<string[] | undefined>;
    /**
     * Default algorithm used to sign tokens for the realm.
     */
    public readonly defaultSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The desired flow for direct access authentication. Defaults to `direct grant`.
     */
    public readonly directGrantFlow!: pulumi.Output<string | undefined>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
     */
    public readonly displayNameHtml!: pulumi.Output<string | undefined>;
    /**
     * The desired flow for Docker authentication. Defaults to `docker auth`.
     */
    public readonly dockerAuthenticationFlow!: pulumi.Output<string | undefined>;
    /**
     * When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
     */
    public readonly duplicateEmailsAllowed!: pulumi.Output<boolean>;
    /**
     * When true, the username field is editable.
     */
    public readonly editUsernameAllowed!: pulumi.Output<boolean>;
    /**
     * Used for emails that are sent by Keycloak.
     */
    public readonly emailTheme!: pulumi.Output<string | undefined>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    public readonly internationalization!: pulumi.Output<outputs.RealmInternationalization | undefined>;
    /**
     * Used for the login, forgot password, and registration pages.
     */
    public readonly loginTheme!: pulumi.Output<string | undefined>;
    /**
     * When true, users may log in with their email address.
     */
    public readonly loginWithEmailAllowed!: pulumi.Output<boolean>;
    /**
     * The amount of time an offline session can be idle before it expires.
     */
    public readonly offlineSessionIdleTimeout!: pulumi.Output<string>;
    /**
     * The maximum amount of time before an offline session expires regardless of activity.
     */
    public readonly offlineSessionMaxLifespan!: pulumi.Output<string>;
    /**
     * Enable `offlineSessionMaxLifespan`.
     */
    public readonly offlineSessionMaxLifespanEnabled!: pulumi.Output<boolean | undefined>;
    public readonly otpPolicy!: pulumi.Output<outputs.RealmOtpPolicy>;
    /**
     * The password policy for users within the realm.
     */
    public readonly passwordPolicy!: pulumi.Output<string | undefined>;
    /**
     * The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
     */
    public readonly realm!: pulumi.Output<string>;
    /**
     * Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
     */
    public readonly refreshTokenMaxReuse!: pulumi.Output<number | undefined>;
    /**
     * When true, user registration will be enabled, and a link for registration will be displayed on the login page.
     */
    public readonly registrationAllowed!: pulumi.Output<boolean>;
    /**
     * When true, the user's email will be used as their username during registration.
     */
    public readonly registrationEmailAsUsername!: pulumi.Output<boolean>;
    /**
     * The desired flow for user registration. Defaults to `registration`.
     */
    public readonly registrationFlow!: pulumi.Output<string | undefined>;
    /**
     * When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
     */
    public readonly rememberMe!: pulumi.Output<boolean>;
    /**
     * The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
     */
    public readonly resetCredentialsFlow!: pulumi.Output<string | undefined>;
    /**
     * When true, a "forgot password" link will be displayed on the login page.
     */
    public readonly resetPasswordAllowed!: pulumi.Output<boolean>;
    /**
     * If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
     */
    public readonly revokeRefreshToken!: pulumi.Output<boolean | undefined>;
    public readonly securityDefenses!: pulumi.Output<outputs.RealmSecurityDefenses | undefined>;
    public readonly smtpServer!: pulumi.Output<outputs.RealmSmtpServer | undefined>;
    /**
     * Can be one of following values: 'none, 'external' or 'all'
     */
    public readonly sslRequired!: pulumi.Output<string | undefined>;
    /**
     * The amount of time a session can be idle before it expires.
     */
    public readonly ssoSessionIdleTimeout!: pulumi.Output<string>;
    public readonly ssoSessionIdleTimeoutRememberMe!: pulumi.Output<string>;
    /**
     * The maximum amount of time before a session expires regardless of activity.
     */
    public readonly ssoSessionMaxLifespan!: pulumi.Output<string>;
    public readonly ssoSessionMaxLifespanRememberMe!: pulumi.Output<string>;
    /**
     * When `true`, users are allowed to manage their own resources. Defaults to `false`.
     */
    public readonly userManagedAccess!: pulumi.Output<boolean | undefined>;
    /**
     * When true, users are required to verify their email address after registration and after email address changes.
     */
    public readonly verifyEmail!: pulumi.Output<boolean>;
    /**
     * Configuration for WebAuthn Passwordless Policy authentication.
     */
    public readonly webAuthnPasswordlessPolicy!: pulumi.Output<outputs.RealmWebAuthnPasswordlessPolicy>;
    /**
     * Configuration for WebAuthn Policy authentication.
     */
    public readonly webAuthnPolicy!: pulumi.Output<outputs.RealmWebAuthnPolicy>;

    /**
     * Create a Realm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmArgs | RealmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RealmState | undefined;
            resourceInputs["accessCodeLifespan"] = state ? state.accessCodeLifespan : undefined;
            resourceInputs["accessCodeLifespanLogin"] = state ? state.accessCodeLifespanLogin : undefined;
            resourceInputs["accessCodeLifespanUserAction"] = state ? state.accessCodeLifespanUserAction : undefined;
            resourceInputs["accessTokenLifespan"] = state ? state.accessTokenLifespan : undefined;
            resourceInputs["accessTokenLifespanForImplicitFlow"] = state ? state.accessTokenLifespanForImplicitFlow : undefined;
            resourceInputs["accountTheme"] = state ? state.accountTheme : undefined;
            resourceInputs["actionTokenGeneratedByAdminLifespan"] = state ? state.actionTokenGeneratedByAdminLifespan : undefined;
            resourceInputs["actionTokenGeneratedByUserLifespan"] = state ? state.actionTokenGeneratedByUserLifespan : undefined;
            resourceInputs["adminTheme"] = state ? state.adminTheme : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["browserFlow"] = state ? state.browserFlow : undefined;
            resourceInputs["clientAuthenticationFlow"] = state ? state.clientAuthenticationFlow : undefined;
            resourceInputs["defaultDefaultClientScopes"] = state ? state.defaultDefaultClientScopes : undefined;
            resourceInputs["defaultOptionalClientScopes"] = state ? state.defaultOptionalClientScopes : undefined;
            resourceInputs["defaultSignatureAlgorithm"] = state ? state.defaultSignatureAlgorithm : undefined;
            resourceInputs["directGrantFlow"] = state ? state.directGrantFlow : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["displayNameHtml"] = state ? state.displayNameHtml : undefined;
            resourceInputs["dockerAuthenticationFlow"] = state ? state.dockerAuthenticationFlow : undefined;
            resourceInputs["duplicateEmailsAllowed"] = state ? state.duplicateEmailsAllowed : undefined;
            resourceInputs["editUsernameAllowed"] = state ? state.editUsernameAllowed : undefined;
            resourceInputs["emailTheme"] = state ? state.emailTheme : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["internationalization"] = state ? state.internationalization : undefined;
            resourceInputs["loginTheme"] = state ? state.loginTheme : undefined;
            resourceInputs["loginWithEmailAllowed"] = state ? state.loginWithEmailAllowed : undefined;
            resourceInputs["offlineSessionIdleTimeout"] = state ? state.offlineSessionIdleTimeout : undefined;
            resourceInputs["offlineSessionMaxLifespan"] = state ? state.offlineSessionMaxLifespan : undefined;
            resourceInputs["offlineSessionMaxLifespanEnabled"] = state ? state.offlineSessionMaxLifespanEnabled : undefined;
            resourceInputs["otpPolicy"] = state ? state.otpPolicy : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["refreshTokenMaxReuse"] = state ? state.refreshTokenMaxReuse : undefined;
            resourceInputs["registrationAllowed"] = state ? state.registrationAllowed : undefined;
            resourceInputs["registrationEmailAsUsername"] = state ? state.registrationEmailAsUsername : undefined;
            resourceInputs["registrationFlow"] = state ? state.registrationFlow : undefined;
            resourceInputs["rememberMe"] = state ? state.rememberMe : undefined;
            resourceInputs["resetCredentialsFlow"] = state ? state.resetCredentialsFlow : undefined;
            resourceInputs["resetPasswordAllowed"] = state ? state.resetPasswordAllowed : undefined;
            resourceInputs["revokeRefreshToken"] = state ? state.revokeRefreshToken : undefined;
            resourceInputs["securityDefenses"] = state ? state.securityDefenses : undefined;
            resourceInputs["smtpServer"] = state ? state.smtpServer : undefined;
            resourceInputs["sslRequired"] = state ? state.sslRequired : undefined;
            resourceInputs["ssoSessionIdleTimeout"] = state ? state.ssoSessionIdleTimeout : undefined;
            resourceInputs["ssoSessionIdleTimeoutRememberMe"] = state ? state.ssoSessionIdleTimeoutRememberMe : undefined;
            resourceInputs["ssoSessionMaxLifespan"] = state ? state.ssoSessionMaxLifespan : undefined;
            resourceInputs["ssoSessionMaxLifespanRememberMe"] = state ? state.ssoSessionMaxLifespanRememberMe : undefined;
            resourceInputs["userManagedAccess"] = state ? state.userManagedAccess : undefined;
            resourceInputs["verifyEmail"] = state ? state.verifyEmail : undefined;
            resourceInputs["webAuthnPasswordlessPolicy"] = state ? state.webAuthnPasswordlessPolicy : undefined;
            resourceInputs["webAuthnPolicy"] = state ? state.webAuthnPolicy : undefined;
        } else {
            const args = argsOrState as RealmArgs | undefined;
            if ((!args || args.realm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            resourceInputs["accessCodeLifespan"] = args ? args.accessCodeLifespan : undefined;
            resourceInputs["accessCodeLifespanLogin"] = args ? args.accessCodeLifespanLogin : undefined;
            resourceInputs["accessCodeLifespanUserAction"] = args ? args.accessCodeLifespanUserAction : undefined;
            resourceInputs["accessTokenLifespan"] = args ? args.accessTokenLifespan : undefined;
            resourceInputs["accessTokenLifespanForImplicitFlow"] = args ? args.accessTokenLifespanForImplicitFlow : undefined;
            resourceInputs["accountTheme"] = args ? args.accountTheme : undefined;
            resourceInputs["actionTokenGeneratedByAdminLifespan"] = args ? args.actionTokenGeneratedByAdminLifespan : undefined;
            resourceInputs["actionTokenGeneratedByUserLifespan"] = args ? args.actionTokenGeneratedByUserLifespan : undefined;
            resourceInputs["adminTheme"] = args ? args.adminTheme : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["browserFlow"] = args ? args.browserFlow : undefined;
            resourceInputs["clientAuthenticationFlow"] = args ? args.clientAuthenticationFlow : undefined;
            resourceInputs["defaultDefaultClientScopes"] = args ? args.defaultDefaultClientScopes : undefined;
            resourceInputs["defaultOptionalClientScopes"] = args ? args.defaultOptionalClientScopes : undefined;
            resourceInputs["defaultSignatureAlgorithm"] = args ? args.defaultSignatureAlgorithm : undefined;
            resourceInputs["directGrantFlow"] = args ? args.directGrantFlow : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["displayNameHtml"] = args ? args.displayNameHtml : undefined;
            resourceInputs["dockerAuthenticationFlow"] = args ? args.dockerAuthenticationFlow : undefined;
            resourceInputs["duplicateEmailsAllowed"] = args ? args.duplicateEmailsAllowed : undefined;
            resourceInputs["editUsernameAllowed"] = args ? args.editUsernameAllowed : undefined;
            resourceInputs["emailTheme"] = args ? args.emailTheme : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["internationalization"] = args ? args.internationalization : undefined;
            resourceInputs["loginTheme"] = args ? args.loginTheme : undefined;
            resourceInputs["loginWithEmailAllowed"] = args ? args.loginWithEmailAllowed : undefined;
            resourceInputs["offlineSessionIdleTimeout"] = args ? args.offlineSessionIdleTimeout : undefined;
            resourceInputs["offlineSessionMaxLifespan"] = args ? args.offlineSessionMaxLifespan : undefined;
            resourceInputs["offlineSessionMaxLifespanEnabled"] = args ? args.offlineSessionMaxLifespanEnabled : undefined;
            resourceInputs["otpPolicy"] = args ? args.otpPolicy : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["refreshTokenMaxReuse"] = args ? args.refreshTokenMaxReuse : undefined;
            resourceInputs["registrationAllowed"] = args ? args.registrationAllowed : undefined;
            resourceInputs["registrationEmailAsUsername"] = args ? args.registrationEmailAsUsername : undefined;
            resourceInputs["registrationFlow"] = args ? args.registrationFlow : undefined;
            resourceInputs["rememberMe"] = args ? args.rememberMe : undefined;
            resourceInputs["resetCredentialsFlow"] = args ? args.resetCredentialsFlow : undefined;
            resourceInputs["resetPasswordAllowed"] = args ? args.resetPasswordAllowed : undefined;
            resourceInputs["revokeRefreshToken"] = args ? args.revokeRefreshToken : undefined;
            resourceInputs["securityDefenses"] = args ? args.securityDefenses : undefined;
            resourceInputs["smtpServer"] = args ? args.smtpServer : undefined;
            resourceInputs["sslRequired"] = args ? args.sslRequired : undefined;
            resourceInputs["ssoSessionIdleTimeout"] = args ? args.ssoSessionIdleTimeout : undefined;
            resourceInputs["ssoSessionIdleTimeoutRememberMe"] = args ? args.ssoSessionIdleTimeoutRememberMe : undefined;
            resourceInputs["ssoSessionMaxLifespan"] = args ? args.ssoSessionMaxLifespan : undefined;
            resourceInputs["ssoSessionMaxLifespanRememberMe"] = args ? args.ssoSessionMaxLifespanRememberMe : undefined;
            resourceInputs["userManagedAccess"] = args ? args.userManagedAccess : undefined;
            resourceInputs["verifyEmail"] = args ? args.verifyEmail : undefined;
            resourceInputs["webAuthnPasswordlessPolicy"] = args ? args.webAuthnPasswordlessPolicy : undefined;
            resourceInputs["webAuthnPolicy"] = args ? args.webAuthnPolicy : undefined;
            resourceInputs["internalId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Realm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Realm resources.
 */
export interface RealmState {
    /**
     * The maximum amount of time a client has to finish the authorization code flow.
     */
    accessCodeLifespan?: pulumi.Input<string>;
    /**
     * The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
     */
    accessCodeLifespanLogin?: pulumi.Input<string>;
    /**
     * The maximum amount of time a user has to complete login related actions, such as updating a password.
     */
    accessCodeLifespanUserAction?: pulumi.Input<string>;
    /**
     * The amount of time an access token can be used before it expires.
     */
    accessTokenLifespan?: pulumi.Input<string>;
    /**
     * The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
     */
    accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    /**
     * Used for account management pages.
     */
    accountTheme?: pulumi.Input<string>;
    /**
     * The maximum time a user has to use an admin-generated permit before it expires.
     */
    actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    /**
     * The maximum time a user has to use a user-generated permit before it expires.
     */
    actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    /**
     * Used for the admin console.
     */
    adminTheme?: pulumi.Input<string>;
    /**
     * A map of custom attributes to add to the realm.
     */
    attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * The desired flow for browser authentication. Defaults to `browser`.
     */
    browserFlow?: pulumi.Input<string>;
    /**
     * The desired flow for client authentication. Defaults to `clients`.
     */
    clientAuthenticationFlow?: pulumi.Input<string>;
    defaultDefaultClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOptionalClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default algorithm used to sign tokens for the realm.
     */
    defaultSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * The desired flow for direct access authentication. Defaults to `direct grant`.
     */
    directGrantFlow?: pulumi.Input<string>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
     */
    displayNameHtml?: pulumi.Input<string>;
    /**
     * The desired flow for Docker authentication. Defaults to `docker auth`.
     */
    dockerAuthenticationFlow?: pulumi.Input<string>;
    /**
     * When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
     */
    duplicateEmailsAllowed?: pulumi.Input<boolean>;
    /**
     * When true, the username field is editable.
     */
    editUsernameAllowed?: pulumi.Input<boolean>;
    /**
     * Used for emails that are sent by Keycloak.
     */
    emailTheme?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    internalId?: pulumi.Input<string>;
    internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    /**
     * Used for the login, forgot password, and registration pages.
     */
    loginTheme?: pulumi.Input<string>;
    /**
     * When true, users may log in with their email address.
     */
    loginWithEmailAllowed?: pulumi.Input<boolean>;
    /**
     * The amount of time an offline session can be idle before it expires.
     */
    offlineSessionIdleTimeout?: pulumi.Input<string>;
    /**
     * The maximum amount of time before an offline session expires regardless of activity.
     */
    offlineSessionMaxLifespan?: pulumi.Input<string>;
    /**
     * Enable `offlineSessionMaxLifespan`.
     */
    offlineSessionMaxLifespanEnabled?: pulumi.Input<boolean>;
    otpPolicy?: pulumi.Input<inputs.RealmOtpPolicy>;
    /**
     * The password policy for users within the realm.
     */
    passwordPolicy?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
     */
    realm?: pulumi.Input<string>;
    /**
     * Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
     */
    refreshTokenMaxReuse?: pulumi.Input<number>;
    /**
     * When true, user registration will be enabled, and a link for registration will be displayed on the login page.
     */
    registrationAllowed?: pulumi.Input<boolean>;
    /**
     * When true, the user's email will be used as their username during registration.
     */
    registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * The desired flow for user registration. Defaults to `registration`.
     */
    registrationFlow?: pulumi.Input<string>;
    /**
     * When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
     */
    rememberMe?: pulumi.Input<boolean>;
    /**
     * The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
     */
    resetCredentialsFlow?: pulumi.Input<string>;
    /**
     * When true, a "forgot password" link will be displayed on the login page.
     */
    resetPasswordAllowed?: pulumi.Input<boolean>;
    /**
     * If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
     */
    revokeRefreshToken?: pulumi.Input<boolean>;
    securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * Can be one of following values: 'none, 'external' or 'all'
     */
    sslRequired?: pulumi.Input<string>;
    /**
     * The amount of time a session can be idle before it expires.
     */
    ssoSessionIdleTimeout?: pulumi.Input<string>;
    ssoSessionIdleTimeoutRememberMe?: pulumi.Input<string>;
    /**
     * The maximum amount of time before a session expires regardless of activity.
     */
    ssoSessionMaxLifespan?: pulumi.Input<string>;
    ssoSessionMaxLifespanRememberMe?: pulumi.Input<string>;
    /**
     * When `true`, users are allowed to manage their own resources. Defaults to `false`.
     */
    userManagedAccess?: pulumi.Input<boolean>;
    /**
     * When true, users are required to verify their email address after registration and after email address changes.
     */
    verifyEmail?: pulumi.Input<boolean>;
    /**
     * Configuration for WebAuthn Passwordless Policy authentication.
     */
    webAuthnPasswordlessPolicy?: pulumi.Input<inputs.RealmWebAuthnPasswordlessPolicy>;
    /**
     * Configuration for WebAuthn Policy authentication.
     */
    webAuthnPolicy?: pulumi.Input<inputs.RealmWebAuthnPolicy>;
}

/**
 * The set of arguments for constructing a Realm resource.
 */
export interface RealmArgs {
    /**
     * The maximum amount of time a client has to finish the authorization code flow.
     */
    accessCodeLifespan?: pulumi.Input<string>;
    /**
     * The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
     */
    accessCodeLifespanLogin?: pulumi.Input<string>;
    /**
     * The maximum amount of time a user has to complete login related actions, such as updating a password.
     */
    accessCodeLifespanUserAction?: pulumi.Input<string>;
    /**
     * The amount of time an access token can be used before it expires.
     */
    accessTokenLifespan?: pulumi.Input<string>;
    /**
     * The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
     */
    accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    /**
     * Used for account management pages.
     */
    accountTheme?: pulumi.Input<string>;
    /**
     * The maximum time a user has to use an admin-generated permit before it expires.
     */
    actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    /**
     * The maximum time a user has to use a user-generated permit before it expires.
     */
    actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    /**
     * Used for the admin console.
     */
    adminTheme?: pulumi.Input<string>;
    /**
     * A map of custom attributes to add to the realm.
     */
    attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * The desired flow for browser authentication. Defaults to `browser`.
     */
    browserFlow?: pulumi.Input<string>;
    /**
     * The desired flow for client authentication. Defaults to `clients`.
     */
    clientAuthenticationFlow?: pulumi.Input<string>;
    defaultDefaultClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOptionalClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default algorithm used to sign tokens for the realm.
     */
    defaultSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * The desired flow for direct access authentication. Defaults to `direct grant`.
     */
    directGrantFlow?: pulumi.Input<string>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
     */
    displayNameHtml?: pulumi.Input<string>;
    /**
     * The desired flow for Docker authentication. Defaults to `docker auth`.
     */
    dockerAuthenticationFlow?: pulumi.Input<string>;
    /**
     * When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
     */
    duplicateEmailsAllowed?: pulumi.Input<boolean>;
    /**
     * When true, the username field is editable.
     */
    editUsernameAllowed?: pulumi.Input<boolean>;
    /**
     * Used for emails that are sent by Keycloak.
     */
    emailTheme?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    /**
     * Used for the login, forgot password, and registration pages.
     */
    loginTheme?: pulumi.Input<string>;
    /**
     * When true, users may log in with their email address.
     */
    loginWithEmailAllowed?: pulumi.Input<boolean>;
    /**
     * The amount of time an offline session can be idle before it expires.
     */
    offlineSessionIdleTimeout?: pulumi.Input<string>;
    /**
     * The maximum amount of time before an offline session expires regardless of activity.
     */
    offlineSessionMaxLifespan?: pulumi.Input<string>;
    /**
     * Enable `offlineSessionMaxLifespan`.
     */
    offlineSessionMaxLifespanEnabled?: pulumi.Input<boolean>;
    otpPolicy?: pulumi.Input<inputs.RealmOtpPolicy>;
    /**
     * The password policy for users within the realm.
     */
    passwordPolicy?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
     */
    realm: pulumi.Input<string>;
    /**
     * Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
     */
    refreshTokenMaxReuse?: pulumi.Input<number>;
    /**
     * When true, user registration will be enabled, and a link for registration will be displayed on the login page.
     */
    registrationAllowed?: pulumi.Input<boolean>;
    /**
     * When true, the user's email will be used as their username during registration.
     */
    registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * The desired flow for user registration. Defaults to `registration`.
     */
    registrationFlow?: pulumi.Input<string>;
    /**
     * When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
     */
    rememberMe?: pulumi.Input<boolean>;
    /**
     * The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
     */
    resetCredentialsFlow?: pulumi.Input<string>;
    /**
     * When true, a "forgot password" link will be displayed on the login page.
     */
    resetPasswordAllowed?: pulumi.Input<boolean>;
    /**
     * If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
     */
    revokeRefreshToken?: pulumi.Input<boolean>;
    securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * Can be one of following values: 'none, 'external' or 'all'
     */
    sslRequired?: pulumi.Input<string>;
    /**
     * The amount of time a session can be idle before it expires.
     */
    ssoSessionIdleTimeout?: pulumi.Input<string>;
    ssoSessionIdleTimeoutRememberMe?: pulumi.Input<string>;
    /**
     * The maximum amount of time before a session expires regardless of activity.
     */
    ssoSessionMaxLifespan?: pulumi.Input<string>;
    ssoSessionMaxLifespanRememberMe?: pulumi.Input<string>;
    /**
     * When `true`, users are allowed to manage their own resources. Defaults to `false`.
     */
    userManagedAccess?: pulumi.Input<boolean>;
    /**
     * When true, users are required to verify their email address after registration and after email address changes.
     */
    verifyEmail?: pulumi.Input<boolean>;
    /**
     * Configuration for WebAuthn Passwordless Policy authentication.
     */
    webAuthnPasswordlessPolicy?: pulumi.Input<inputs.RealmWebAuthnPasswordlessPolicy>;
    /**
     * Configuration for WebAuthn Policy authentication.
     */
    webAuthnPolicy?: pulumi.Input<inputs.RealmWebAuthnPolicy>;
}
