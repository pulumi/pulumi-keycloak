// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Realm extends pulumi.CustomResource {
    /**
     * Get an existing Realm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmState, opts?: pulumi.CustomResourceOptions): Realm {
        return new Realm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realm:Realm';

    /**
     * Returns true if the given object is an instance of Realm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Realm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Realm.__pulumiType;
    }

    public readonly accessCodeLifespan!: pulumi.Output<string>;
    public readonly accessCodeLifespanLogin!: pulumi.Output<string>;
    public readonly accessCodeLifespanUserAction!: pulumi.Output<string>;
    public readonly accessTokenLifespan!: pulumi.Output<string>;
    public readonly accessTokenLifespanForImplicitFlow!: pulumi.Output<string>;
    public readonly accountTheme!: pulumi.Output<string | undefined>;
    public readonly actionTokenGeneratedByAdminLifespan!: pulumi.Output<string>;
    public readonly actionTokenGeneratedByUserLifespan!: pulumi.Output<string>;
    public readonly adminTheme!: pulumi.Output<string | undefined>;
    public readonly attributes!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Which flow should be used for BrowserFlow
     */
    public readonly browserFlow!: pulumi.Output<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    public readonly clientAuthenticationFlow!: pulumi.Output<string>;
    public readonly clientSessionIdleTimeout!: pulumi.Output<string>;
    public readonly clientSessionMaxLifespan!: pulumi.Output<string>;
    public readonly defaultDefaultClientScopes!: pulumi.Output<string[] | undefined>;
    public readonly defaultOptionalClientScopes!: pulumi.Output<string[] | undefined>;
    public readonly defaultSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    public readonly directGrantFlow!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly displayNameHtml!: pulumi.Output<string | undefined>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    public readonly dockerAuthenticationFlow!: pulumi.Output<string>;
    public readonly duplicateEmailsAllowed!: pulumi.Output<boolean>;
    public readonly editUsernameAllowed!: pulumi.Output<boolean>;
    public readonly emailTheme!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly internalId!: pulumi.Output<string>;
    public readonly internationalization!: pulumi.Output<outputs.RealmInternationalization | undefined>;
    public readonly loginTheme!: pulumi.Output<string | undefined>;
    public readonly loginWithEmailAllowed!: pulumi.Output<boolean>;
    public readonly oauth2DeviceCodeLifespan!: pulumi.Output<string>;
    public readonly oauth2DevicePollingInterval!: pulumi.Output<number>;
    public readonly offlineSessionIdleTimeout!: pulumi.Output<string>;
    public readonly offlineSessionMaxLifespan!: pulumi.Output<string>;
    public readonly offlineSessionMaxLifespanEnabled!: pulumi.Output<boolean | undefined>;
    public readonly otpPolicy!: pulumi.Output<outputs.RealmOtpPolicy>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
     * can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
     * and notUsername(undefined)"
     */
    public readonly passwordPolicy!: pulumi.Output<string | undefined>;
    public readonly realm!: pulumi.Output<string>;
    public readonly refreshTokenMaxReuse!: pulumi.Output<number | undefined>;
    public readonly registrationAllowed!: pulumi.Output<boolean>;
    public readonly registrationEmailAsUsername!: pulumi.Output<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    public readonly registrationFlow!: pulumi.Output<string>;
    public readonly rememberMe!: pulumi.Output<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    public readonly resetCredentialsFlow!: pulumi.Output<string>;
    public readonly resetPasswordAllowed!: pulumi.Output<boolean>;
    public readonly revokeRefreshToken!: pulumi.Output<boolean | undefined>;
    public readonly securityDefenses!: pulumi.Output<outputs.RealmSecurityDefenses | undefined>;
    public readonly smtpServer!: pulumi.Output<outputs.RealmSmtpServer | undefined>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    public readonly sslRequired!: pulumi.Output<string | undefined>;
    public readonly ssoSessionIdleTimeout!: pulumi.Output<string>;
    public readonly ssoSessionIdleTimeoutRememberMe!: pulumi.Output<string>;
    public readonly ssoSessionMaxLifespan!: pulumi.Output<string>;
    public readonly ssoSessionMaxLifespanRememberMe!: pulumi.Output<string>;
    public readonly userManagedAccess!: pulumi.Output<boolean | undefined>;
    public readonly verifyEmail!: pulumi.Output<boolean>;
    public readonly webAuthnPasswordlessPolicy!: pulumi.Output<outputs.RealmWebAuthnPasswordlessPolicy>;
    public readonly webAuthnPolicy!: pulumi.Output<outputs.RealmWebAuthnPolicy>;

    /**
     * Create a Realm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RealmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmArgs | RealmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RealmState | undefined;
            resourceInputs["accessCodeLifespan"] = state ? state.accessCodeLifespan : undefined;
            resourceInputs["accessCodeLifespanLogin"] = state ? state.accessCodeLifespanLogin : undefined;
            resourceInputs["accessCodeLifespanUserAction"] = state ? state.accessCodeLifespanUserAction : undefined;
            resourceInputs["accessTokenLifespan"] = state ? state.accessTokenLifespan : undefined;
            resourceInputs["accessTokenLifespanForImplicitFlow"] = state ? state.accessTokenLifespanForImplicitFlow : undefined;
            resourceInputs["accountTheme"] = state ? state.accountTheme : undefined;
            resourceInputs["actionTokenGeneratedByAdminLifespan"] = state ? state.actionTokenGeneratedByAdminLifespan : undefined;
            resourceInputs["actionTokenGeneratedByUserLifespan"] = state ? state.actionTokenGeneratedByUserLifespan : undefined;
            resourceInputs["adminTheme"] = state ? state.adminTheme : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["browserFlow"] = state ? state.browserFlow : undefined;
            resourceInputs["clientAuthenticationFlow"] = state ? state.clientAuthenticationFlow : undefined;
            resourceInputs["clientSessionIdleTimeout"] = state ? state.clientSessionIdleTimeout : undefined;
            resourceInputs["clientSessionMaxLifespan"] = state ? state.clientSessionMaxLifespan : undefined;
            resourceInputs["defaultDefaultClientScopes"] = state ? state.defaultDefaultClientScopes : undefined;
            resourceInputs["defaultOptionalClientScopes"] = state ? state.defaultOptionalClientScopes : undefined;
            resourceInputs["defaultSignatureAlgorithm"] = state ? state.defaultSignatureAlgorithm : undefined;
            resourceInputs["directGrantFlow"] = state ? state.directGrantFlow : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["displayNameHtml"] = state ? state.displayNameHtml : undefined;
            resourceInputs["dockerAuthenticationFlow"] = state ? state.dockerAuthenticationFlow : undefined;
            resourceInputs["duplicateEmailsAllowed"] = state ? state.duplicateEmailsAllowed : undefined;
            resourceInputs["editUsernameAllowed"] = state ? state.editUsernameAllowed : undefined;
            resourceInputs["emailTheme"] = state ? state.emailTheme : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["internationalization"] = state ? state.internationalization : undefined;
            resourceInputs["loginTheme"] = state ? state.loginTheme : undefined;
            resourceInputs["loginWithEmailAllowed"] = state ? state.loginWithEmailAllowed : undefined;
            resourceInputs["oauth2DeviceCodeLifespan"] = state ? state.oauth2DeviceCodeLifespan : undefined;
            resourceInputs["oauth2DevicePollingInterval"] = state ? state.oauth2DevicePollingInterval : undefined;
            resourceInputs["offlineSessionIdleTimeout"] = state ? state.offlineSessionIdleTimeout : undefined;
            resourceInputs["offlineSessionMaxLifespan"] = state ? state.offlineSessionMaxLifespan : undefined;
            resourceInputs["offlineSessionMaxLifespanEnabled"] = state ? state.offlineSessionMaxLifespanEnabled : undefined;
            resourceInputs["otpPolicy"] = state ? state.otpPolicy : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["refreshTokenMaxReuse"] = state ? state.refreshTokenMaxReuse : undefined;
            resourceInputs["registrationAllowed"] = state ? state.registrationAllowed : undefined;
            resourceInputs["registrationEmailAsUsername"] = state ? state.registrationEmailAsUsername : undefined;
            resourceInputs["registrationFlow"] = state ? state.registrationFlow : undefined;
            resourceInputs["rememberMe"] = state ? state.rememberMe : undefined;
            resourceInputs["resetCredentialsFlow"] = state ? state.resetCredentialsFlow : undefined;
            resourceInputs["resetPasswordAllowed"] = state ? state.resetPasswordAllowed : undefined;
            resourceInputs["revokeRefreshToken"] = state ? state.revokeRefreshToken : undefined;
            resourceInputs["securityDefenses"] = state ? state.securityDefenses : undefined;
            resourceInputs["smtpServer"] = state ? state.smtpServer : undefined;
            resourceInputs["sslRequired"] = state ? state.sslRequired : undefined;
            resourceInputs["ssoSessionIdleTimeout"] = state ? state.ssoSessionIdleTimeout : undefined;
            resourceInputs["ssoSessionIdleTimeoutRememberMe"] = state ? state.ssoSessionIdleTimeoutRememberMe : undefined;
            resourceInputs["ssoSessionMaxLifespan"] = state ? state.ssoSessionMaxLifespan : undefined;
            resourceInputs["ssoSessionMaxLifespanRememberMe"] = state ? state.ssoSessionMaxLifespanRememberMe : undefined;
            resourceInputs["userManagedAccess"] = state ? state.userManagedAccess : undefined;
            resourceInputs["verifyEmail"] = state ? state.verifyEmail : undefined;
            resourceInputs["webAuthnPasswordlessPolicy"] = state ? state.webAuthnPasswordlessPolicy : undefined;
            resourceInputs["webAuthnPolicy"] = state ? state.webAuthnPolicy : undefined;
        } else {
            const args = argsOrState as RealmArgs | undefined;
            if ((!args || args.realm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            resourceInputs["accessCodeLifespan"] = args ? args.accessCodeLifespan : undefined;
            resourceInputs["accessCodeLifespanLogin"] = args ? args.accessCodeLifespanLogin : undefined;
            resourceInputs["accessCodeLifespanUserAction"] = args ? args.accessCodeLifespanUserAction : undefined;
            resourceInputs["accessTokenLifespan"] = args ? args.accessTokenLifespan : undefined;
            resourceInputs["accessTokenLifespanForImplicitFlow"] = args ? args.accessTokenLifespanForImplicitFlow : undefined;
            resourceInputs["accountTheme"] = args ? args.accountTheme : undefined;
            resourceInputs["actionTokenGeneratedByAdminLifespan"] = args ? args.actionTokenGeneratedByAdminLifespan : undefined;
            resourceInputs["actionTokenGeneratedByUserLifespan"] = args ? args.actionTokenGeneratedByUserLifespan : undefined;
            resourceInputs["adminTheme"] = args ? args.adminTheme : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["browserFlow"] = args ? args.browserFlow : undefined;
            resourceInputs["clientAuthenticationFlow"] = args ? args.clientAuthenticationFlow : undefined;
            resourceInputs["clientSessionIdleTimeout"] = args ? args.clientSessionIdleTimeout : undefined;
            resourceInputs["clientSessionMaxLifespan"] = args ? args.clientSessionMaxLifespan : undefined;
            resourceInputs["defaultDefaultClientScopes"] = args ? args.defaultDefaultClientScopes : undefined;
            resourceInputs["defaultOptionalClientScopes"] = args ? args.defaultOptionalClientScopes : undefined;
            resourceInputs["defaultSignatureAlgorithm"] = args ? args.defaultSignatureAlgorithm : undefined;
            resourceInputs["directGrantFlow"] = args ? args.directGrantFlow : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["displayNameHtml"] = args ? args.displayNameHtml : undefined;
            resourceInputs["dockerAuthenticationFlow"] = args ? args.dockerAuthenticationFlow : undefined;
            resourceInputs["duplicateEmailsAllowed"] = args ? args.duplicateEmailsAllowed : undefined;
            resourceInputs["editUsernameAllowed"] = args ? args.editUsernameAllowed : undefined;
            resourceInputs["emailTheme"] = args ? args.emailTheme : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["internalId"] = args ? args.internalId : undefined;
            resourceInputs["internationalization"] = args ? args.internationalization : undefined;
            resourceInputs["loginTheme"] = args ? args.loginTheme : undefined;
            resourceInputs["loginWithEmailAllowed"] = args ? args.loginWithEmailAllowed : undefined;
            resourceInputs["oauth2DeviceCodeLifespan"] = args ? args.oauth2DeviceCodeLifespan : undefined;
            resourceInputs["oauth2DevicePollingInterval"] = args ? args.oauth2DevicePollingInterval : undefined;
            resourceInputs["offlineSessionIdleTimeout"] = args ? args.offlineSessionIdleTimeout : undefined;
            resourceInputs["offlineSessionMaxLifespan"] = args ? args.offlineSessionMaxLifespan : undefined;
            resourceInputs["offlineSessionMaxLifespanEnabled"] = args ? args.offlineSessionMaxLifespanEnabled : undefined;
            resourceInputs["otpPolicy"] = args ? args.otpPolicy : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["refreshTokenMaxReuse"] = args ? args.refreshTokenMaxReuse : undefined;
            resourceInputs["registrationAllowed"] = args ? args.registrationAllowed : undefined;
            resourceInputs["registrationEmailAsUsername"] = args ? args.registrationEmailAsUsername : undefined;
            resourceInputs["registrationFlow"] = args ? args.registrationFlow : undefined;
            resourceInputs["rememberMe"] = args ? args.rememberMe : undefined;
            resourceInputs["resetCredentialsFlow"] = args ? args.resetCredentialsFlow : undefined;
            resourceInputs["resetPasswordAllowed"] = args ? args.resetPasswordAllowed : undefined;
            resourceInputs["revokeRefreshToken"] = args ? args.revokeRefreshToken : undefined;
            resourceInputs["securityDefenses"] = args ? args.securityDefenses : undefined;
            resourceInputs["smtpServer"] = args ? args.smtpServer : undefined;
            resourceInputs["sslRequired"] = args ? args.sslRequired : undefined;
            resourceInputs["ssoSessionIdleTimeout"] = args ? args.ssoSessionIdleTimeout : undefined;
            resourceInputs["ssoSessionIdleTimeoutRememberMe"] = args ? args.ssoSessionIdleTimeoutRememberMe : undefined;
            resourceInputs["ssoSessionMaxLifespan"] = args ? args.ssoSessionMaxLifespan : undefined;
            resourceInputs["ssoSessionMaxLifespanRememberMe"] = args ? args.ssoSessionMaxLifespanRememberMe : undefined;
            resourceInputs["userManagedAccess"] = args ? args.userManagedAccess : undefined;
            resourceInputs["verifyEmail"] = args ? args.verifyEmail : undefined;
            resourceInputs["webAuthnPasswordlessPolicy"] = args ? args.webAuthnPasswordlessPolicy : undefined;
            resourceInputs["webAuthnPolicy"] = args ? args.webAuthnPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Realm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Realm resources.
 */
export interface RealmState {
    accessCodeLifespan?: pulumi.Input<string>;
    accessCodeLifespanLogin?: pulumi.Input<string>;
    accessCodeLifespanUserAction?: pulumi.Input<string>;
    accessTokenLifespan?: pulumi.Input<string>;
    accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    accountTheme?: pulumi.Input<string>;
    actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    adminTheme?: pulumi.Input<string>;
    attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * Which flow should be used for BrowserFlow
     */
    browserFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    clientAuthenticationFlow?: pulumi.Input<string>;
    clientSessionIdleTimeout?: pulumi.Input<string>;
    clientSessionMaxLifespan?: pulumi.Input<string>;
    defaultDefaultClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOptionalClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    directGrantFlow?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    displayNameHtml?: pulumi.Input<string>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    dockerAuthenticationFlow?: pulumi.Input<string>;
    duplicateEmailsAllowed?: pulumi.Input<boolean>;
    editUsernameAllowed?: pulumi.Input<boolean>;
    emailTheme?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    internalId?: pulumi.Input<string>;
    internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    loginTheme?: pulumi.Input<string>;
    loginWithEmailAllowed?: pulumi.Input<boolean>;
    oauth2DeviceCodeLifespan?: pulumi.Input<string>;
    oauth2DevicePollingInterval?: pulumi.Input<number>;
    offlineSessionIdleTimeout?: pulumi.Input<string>;
    offlineSessionMaxLifespan?: pulumi.Input<string>;
    offlineSessionMaxLifespanEnabled?: pulumi.Input<boolean>;
    otpPolicy?: pulumi.Input<inputs.RealmOtpPolicy>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
     * can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
     * and notUsername(undefined)"
     */
    passwordPolicy?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    refreshTokenMaxReuse?: pulumi.Input<number>;
    registrationAllowed?: pulumi.Input<boolean>;
    registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    registrationFlow?: pulumi.Input<string>;
    rememberMe?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    resetCredentialsFlow?: pulumi.Input<string>;
    resetPasswordAllowed?: pulumi.Input<boolean>;
    revokeRefreshToken?: pulumi.Input<boolean>;
    securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    sslRequired?: pulumi.Input<string>;
    ssoSessionIdleTimeout?: pulumi.Input<string>;
    ssoSessionIdleTimeoutRememberMe?: pulumi.Input<string>;
    ssoSessionMaxLifespan?: pulumi.Input<string>;
    ssoSessionMaxLifespanRememberMe?: pulumi.Input<string>;
    userManagedAccess?: pulumi.Input<boolean>;
    verifyEmail?: pulumi.Input<boolean>;
    webAuthnPasswordlessPolicy?: pulumi.Input<inputs.RealmWebAuthnPasswordlessPolicy>;
    webAuthnPolicy?: pulumi.Input<inputs.RealmWebAuthnPolicy>;
}

/**
 * The set of arguments for constructing a Realm resource.
 */
export interface RealmArgs {
    accessCodeLifespan?: pulumi.Input<string>;
    accessCodeLifespanLogin?: pulumi.Input<string>;
    accessCodeLifespanUserAction?: pulumi.Input<string>;
    accessTokenLifespan?: pulumi.Input<string>;
    accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    accountTheme?: pulumi.Input<string>;
    actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    adminTheme?: pulumi.Input<string>;
    attributes?: pulumi.Input<{[key: string]: any}>;
    /**
     * Which flow should be used for BrowserFlow
     */
    browserFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    clientAuthenticationFlow?: pulumi.Input<string>;
    clientSessionIdleTimeout?: pulumi.Input<string>;
    clientSessionMaxLifespan?: pulumi.Input<string>;
    defaultDefaultClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOptionalClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    directGrantFlow?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    displayNameHtml?: pulumi.Input<string>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    dockerAuthenticationFlow?: pulumi.Input<string>;
    duplicateEmailsAllowed?: pulumi.Input<boolean>;
    editUsernameAllowed?: pulumi.Input<boolean>;
    emailTheme?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    internalId?: pulumi.Input<string>;
    internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    loginTheme?: pulumi.Input<string>;
    loginWithEmailAllowed?: pulumi.Input<boolean>;
    oauth2DeviceCodeLifespan?: pulumi.Input<string>;
    oauth2DevicePollingInterval?: pulumi.Input<number>;
    offlineSessionIdleTimeout?: pulumi.Input<string>;
    offlineSessionMaxLifespan?: pulumi.Input<string>;
    offlineSessionMaxLifespanEnabled?: pulumi.Input<boolean>;
    otpPolicy?: pulumi.Input<inputs.RealmOtpPolicy>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies
     * can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365)
     * and notUsername(undefined)"
     */
    passwordPolicy?: pulumi.Input<string>;
    realm: pulumi.Input<string>;
    refreshTokenMaxReuse?: pulumi.Input<number>;
    registrationAllowed?: pulumi.Input<boolean>;
    registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    registrationFlow?: pulumi.Input<string>;
    rememberMe?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    resetCredentialsFlow?: pulumi.Input<string>;
    resetPasswordAllowed?: pulumi.Input<boolean>;
    revokeRefreshToken?: pulumi.Input<boolean>;
    securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    sslRequired?: pulumi.Input<string>;
    ssoSessionIdleTimeout?: pulumi.Input<string>;
    ssoSessionIdleTimeoutRememberMe?: pulumi.Input<string>;
    ssoSessionMaxLifespan?: pulumi.Input<string>;
    ssoSessionMaxLifespanRememberMe?: pulumi.Input<string>;
    userManagedAccess?: pulumi.Input<boolean>;
    verifyEmail?: pulumi.Input<boolean>;
    webAuthnPasswordlessPolicy?: pulumi.Input<inputs.RealmWebAuthnPasswordlessPolicy>;
    webAuthnPolicy?: pulumi.Input<inputs.RealmWebAuthnPolicy>;
}
