// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows for creating and managing Realms within Keycloak.
 *
 * A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated
 * from multiple sources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 *     displayName: "my realm",
 *     displayNameHtml: "<b>my realm</b>",
 *     loginTheme: "base",
 *     accessCodeLifespan: "1h",
 *     sslRequired: "external",
 *     passwordPolicy: "upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername",
 *     attributes: {
 *         mycustomAttribute: "myCustomValue",
 *     },
 *     smtpServer: {
 *         host: "smtp.example.com",
 *         from: "example@example.com",
 *         auth: {
 *             username: "tom",
 *             password: "password",
 *         },
 *     },
 *     internationalization: {
 *         supportedLocales: [
 *             "en",
 *             "de",
 *             "es",
 *         ],
 *         defaultLocale: "en",
 *     },
 *     securityDefenses: {
 *         headers: {
 *             xFrameOptions: "DENY",
 *             contentSecurityPolicy: "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
 *             contentSecurityPolicyReportOnly: "",
 *             xContentTypeOptions: "nosniff",
 *             xRobotsTag: "none",
 *             xXssProtection: "1; mode=block",
 *             strictTransportSecurity: "max-age=31536000; includeSubDomains",
 *         },
 *         bruteForceDetection: {
 *             permanentLockout: false,
 *             maxLoginFailures: 30,
 *             waitIncrementSeconds: 60,
 *             quickLoginCheckMilliSeconds: 1000,
 *             minimumQuickLoginWaitSeconds: 60,
 *             maxFailureWaitSeconds: 900,
 *             failureResetTimeSeconds: 43200,
 *         },
 *     },
 *     webAuthnPolicy: {
 *         relyingPartyEntityName: "Example",
 *         relyingPartyId: "keycloak.example.com",
 *         signatureAlgorithms: [
 *             "ES256",
 *             "RS256",
 *         ],
 *     },
 * });
 * ```
 *
 * ## Default Client Scopes
 *
 * - `defaultDefaultClientScopes` - (Optional) A list of default `default client scopes` to be used for client definitions. Defaults to `[]` or keycloak's built-in default `default client-scopes`. For an alternative, please refer to the dedicated resource `keycloak.RealmDefaultClientScopes`.
 * - `defaultOptionalClientScopes` - (Optional) A list of default `optional client scopes` to be used for client definitions. Defaults to `[]` or keycloak's built-in default `optional client-scopes`. For an alternative, please refer to the dedicated resource `keycloak.RealmOptionalClientScopes`.
 *
 * ## Import
 *
 * Realms can be imported using their name.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:index/realm:Realm realm my-realm
 * ```
 */
export class Realm extends pulumi.CustomResource {
    /**
     * Get an existing Realm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RealmState, opts?: pulumi.CustomResourceOptions): Realm {
        return new Realm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/realm:Realm';

    /**
     * Returns true if the given object is an instance of Realm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Realm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Realm.__pulumiType;
    }

    declare public readonly accessCodeLifespan: pulumi.Output<string>;
    declare public readonly accessCodeLifespanLogin: pulumi.Output<string>;
    declare public readonly accessCodeLifespanUserAction: pulumi.Output<string>;
    declare public readonly accessTokenLifespan: pulumi.Output<string>;
    declare public readonly accessTokenLifespanForImplicitFlow: pulumi.Output<string>;
    declare public readonly accountTheme: pulumi.Output<string | undefined>;
    declare public readonly actionTokenGeneratedByAdminLifespan: pulumi.Output<string>;
    declare public readonly actionTokenGeneratedByUserLifespan: pulumi.Output<string>;
    declare public readonly adminTheme: pulumi.Output<string | undefined>;
    /**
     * A map of custom attributes to add to the realm.
     */
    declare public readonly attributes: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Which flow should be used for BrowserFlow
     */
    declare public readonly browserFlow: pulumi.Output<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    declare public readonly clientAuthenticationFlow: pulumi.Output<string>;
    declare public readonly clientSessionIdleTimeout: pulumi.Output<string>;
    declare public readonly clientSessionMaxLifespan: pulumi.Output<string>;
    declare public readonly defaultDefaultClientScopes: pulumi.Output<string[] | undefined>;
    declare public readonly defaultOptionalClientScopes: pulumi.Output<string[] | undefined>;
    declare public readonly defaultSignatureAlgorithm: pulumi.Output<string | undefined>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    declare public readonly directGrantFlow: pulumi.Output<string>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    declare public readonly displayName: pulumi.Output<string | undefined>;
    /**
     * The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
     */
    declare public readonly displayNameHtml: pulumi.Output<string | undefined>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    declare public readonly dockerAuthenticationFlow: pulumi.Output<string>;
    declare public readonly duplicateEmailsAllowed: pulumi.Output<boolean>;
    declare public readonly editUsernameAllowed: pulumi.Output<boolean>;
    declare public readonly emailTheme: pulumi.Output<string | undefined>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Which flow should be used for FirstBrokerLoginFlow
     */
    declare public readonly firstBrokerLoginFlow: pulumi.Output<string>;
    /**
     * When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
     */
    declare public readonly internalId: pulumi.Output<string>;
    declare public readonly internationalization: pulumi.Output<outputs.RealmInternationalization | undefined>;
    declare public readonly loginTheme: pulumi.Output<string | undefined>;
    declare public readonly loginWithEmailAllowed: pulumi.Output<boolean>;
    declare public readonly oauth2DeviceCodeLifespan: pulumi.Output<string>;
    declare public readonly oauth2DevicePollingInterval: pulumi.Output<number>;
    declare public readonly offlineSessionIdleTimeout: pulumi.Output<string>;
    declare public readonly offlineSessionMaxLifespan: pulumi.Output<string>;
    declare public readonly offlineSessionMaxLifespanEnabled: pulumi.Output<boolean | undefined>;
    /**
     * When `true`, organization support is enabled. Defaults to `false`.
     */
    declare public readonly organizationsEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly otpPolicy: pulumi.Output<outputs.RealmOtpPolicy>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername(undefined)"
     */
    declare public readonly passwordPolicy: pulumi.Output<string | undefined>;
    /**
     * The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
     */
    declare public readonly realm: pulumi.Output<string>;
    declare public readonly refreshTokenMaxReuse: pulumi.Output<number | undefined>;
    declare public readonly registrationAllowed: pulumi.Output<boolean>;
    declare public readonly registrationEmailAsUsername: pulumi.Output<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    declare public readonly registrationFlow: pulumi.Output<string>;
    declare public readonly rememberMe: pulumi.Output<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    declare public readonly resetCredentialsFlow: pulumi.Output<string>;
    declare public readonly resetPasswordAllowed: pulumi.Output<boolean>;
    declare public readonly revokeRefreshToken: pulumi.Output<boolean | undefined>;
    declare public readonly securityDefenses: pulumi.Output<outputs.RealmSecurityDefenses | undefined>;
    declare public readonly smtpServer: pulumi.Output<outputs.RealmSmtpServer | undefined>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    declare public readonly sslRequired: pulumi.Output<string | undefined>;
    declare public readonly ssoSessionIdleTimeout: pulumi.Output<string>;
    declare public readonly ssoSessionIdleTimeoutRememberMe: pulumi.Output<string>;
    declare public readonly ssoSessionMaxLifespan: pulumi.Output<string>;
    declare public readonly ssoSessionMaxLifespanRememberMe: pulumi.Output<string>;
    /**
     * When `true`, users are allowed to manage their own resources. Defaults to `false`.
     */
    declare public readonly userManagedAccess: pulumi.Output<boolean | undefined>;
    declare public readonly verifyEmail: pulumi.Output<boolean>;
    declare public readonly webAuthnPasswordlessPolicy: pulumi.Output<outputs.RealmWebAuthnPasswordlessPolicy>;
    declare public readonly webAuthnPolicy: pulumi.Output<outputs.RealmWebAuthnPolicy>;

    /**
     * Create a Realm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RealmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RealmArgs | RealmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RealmState | undefined;
            resourceInputs["accessCodeLifespan"] = state?.accessCodeLifespan;
            resourceInputs["accessCodeLifespanLogin"] = state?.accessCodeLifespanLogin;
            resourceInputs["accessCodeLifespanUserAction"] = state?.accessCodeLifespanUserAction;
            resourceInputs["accessTokenLifespan"] = state?.accessTokenLifespan;
            resourceInputs["accessTokenLifespanForImplicitFlow"] = state?.accessTokenLifespanForImplicitFlow;
            resourceInputs["accountTheme"] = state?.accountTheme;
            resourceInputs["actionTokenGeneratedByAdminLifespan"] = state?.actionTokenGeneratedByAdminLifespan;
            resourceInputs["actionTokenGeneratedByUserLifespan"] = state?.actionTokenGeneratedByUserLifespan;
            resourceInputs["adminTheme"] = state?.adminTheme;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["browserFlow"] = state?.browserFlow;
            resourceInputs["clientAuthenticationFlow"] = state?.clientAuthenticationFlow;
            resourceInputs["clientSessionIdleTimeout"] = state?.clientSessionIdleTimeout;
            resourceInputs["clientSessionMaxLifespan"] = state?.clientSessionMaxLifespan;
            resourceInputs["defaultDefaultClientScopes"] = state?.defaultDefaultClientScopes;
            resourceInputs["defaultOptionalClientScopes"] = state?.defaultOptionalClientScopes;
            resourceInputs["defaultSignatureAlgorithm"] = state?.defaultSignatureAlgorithm;
            resourceInputs["directGrantFlow"] = state?.directGrantFlow;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["displayNameHtml"] = state?.displayNameHtml;
            resourceInputs["dockerAuthenticationFlow"] = state?.dockerAuthenticationFlow;
            resourceInputs["duplicateEmailsAllowed"] = state?.duplicateEmailsAllowed;
            resourceInputs["editUsernameAllowed"] = state?.editUsernameAllowed;
            resourceInputs["emailTheme"] = state?.emailTheme;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["firstBrokerLoginFlow"] = state?.firstBrokerLoginFlow;
            resourceInputs["internalId"] = state?.internalId;
            resourceInputs["internationalization"] = state?.internationalization;
            resourceInputs["loginTheme"] = state?.loginTheme;
            resourceInputs["loginWithEmailAllowed"] = state?.loginWithEmailAllowed;
            resourceInputs["oauth2DeviceCodeLifespan"] = state?.oauth2DeviceCodeLifespan;
            resourceInputs["oauth2DevicePollingInterval"] = state?.oauth2DevicePollingInterval;
            resourceInputs["offlineSessionIdleTimeout"] = state?.offlineSessionIdleTimeout;
            resourceInputs["offlineSessionMaxLifespan"] = state?.offlineSessionMaxLifespan;
            resourceInputs["offlineSessionMaxLifespanEnabled"] = state?.offlineSessionMaxLifespanEnabled;
            resourceInputs["organizationsEnabled"] = state?.organizationsEnabled;
            resourceInputs["otpPolicy"] = state?.otpPolicy;
            resourceInputs["passwordPolicy"] = state?.passwordPolicy;
            resourceInputs["realm"] = state?.realm;
            resourceInputs["refreshTokenMaxReuse"] = state?.refreshTokenMaxReuse;
            resourceInputs["registrationAllowed"] = state?.registrationAllowed;
            resourceInputs["registrationEmailAsUsername"] = state?.registrationEmailAsUsername;
            resourceInputs["registrationFlow"] = state?.registrationFlow;
            resourceInputs["rememberMe"] = state?.rememberMe;
            resourceInputs["resetCredentialsFlow"] = state?.resetCredentialsFlow;
            resourceInputs["resetPasswordAllowed"] = state?.resetPasswordAllowed;
            resourceInputs["revokeRefreshToken"] = state?.revokeRefreshToken;
            resourceInputs["securityDefenses"] = state?.securityDefenses;
            resourceInputs["smtpServer"] = state?.smtpServer;
            resourceInputs["sslRequired"] = state?.sslRequired;
            resourceInputs["ssoSessionIdleTimeout"] = state?.ssoSessionIdleTimeout;
            resourceInputs["ssoSessionIdleTimeoutRememberMe"] = state?.ssoSessionIdleTimeoutRememberMe;
            resourceInputs["ssoSessionMaxLifespan"] = state?.ssoSessionMaxLifespan;
            resourceInputs["ssoSessionMaxLifespanRememberMe"] = state?.ssoSessionMaxLifespanRememberMe;
            resourceInputs["userManagedAccess"] = state?.userManagedAccess;
            resourceInputs["verifyEmail"] = state?.verifyEmail;
            resourceInputs["webAuthnPasswordlessPolicy"] = state?.webAuthnPasswordlessPolicy;
            resourceInputs["webAuthnPolicy"] = state?.webAuthnPolicy;
        } else {
            const args = argsOrState as RealmArgs | undefined;
            resourceInputs["accessCodeLifespan"] = args?.accessCodeLifespan;
            resourceInputs["accessCodeLifespanLogin"] = args?.accessCodeLifespanLogin;
            resourceInputs["accessCodeLifespanUserAction"] = args?.accessCodeLifespanUserAction;
            resourceInputs["accessTokenLifespan"] = args?.accessTokenLifespan;
            resourceInputs["accessTokenLifespanForImplicitFlow"] = args?.accessTokenLifespanForImplicitFlow;
            resourceInputs["accountTheme"] = args?.accountTheme;
            resourceInputs["actionTokenGeneratedByAdminLifespan"] = args?.actionTokenGeneratedByAdminLifespan;
            resourceInputs["actionTokenGeneratedByUserLifespan"] = args?.actionTokenGeneratedByUserLifespan;
            resourceInputs["adminTheme"] = args?.adminTheme;
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["browserFlow"] = args?.browserFlow;
            resourceInputs["clientAuthenticationFlow"] = args?.clientAuthenticationFlow;
            resourceInputs["clientSessionIdleTimeout"] = args?.clientSessionIdleTimeout;
            resourceInputs["clientSessionMaxLifespan"] = args?.clientSessionMaxLifespan;
            resourceInputs["defaultDefaultClientScopes"] = args?.defaultDefaultClientScopes;
            resourceInputs["defaultOptionalClientScopes"] = args?.defaultOptionalClientScopes;
            resourceInputs["defaultSignatureAlgorithm"] = args?.defaultSignatureAlgorithm;
            resourceInputs["directGrantFlow"] = args?.directGrantFlow;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["displayNameHtml"] = args?.displayNameHtml;
            resourceInputs["dockerAuthenticationFlow"] = args?.dockerAuthenticationFlow;
            resourceInputs["duplicateEmailsAllowed"] = args?.duplicateEmailsAllowed;
            resourceInputs["editUsernameAllowed"] = args?.editUsernameAllowed;
            resourceInputs["emailTheme"] = args?.emailTheme;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["firstBrokerLoginFlow"] = args?.firstBrokerLoginFlow;
            resourceInputs["internalId"] = args?.internalId;
            resourceInputs["internationalization"] = args?.internationalization;
            resourceInputs["loginTheme"] = args?.loginTheme;
            resourceInputs["loginWithEmailAllowed"] = args?.loginWithEmailAllowed;
            resourceInputs["oauth2DeviceCodeLifespan"] = args?.oauth2DeviceCodeLifespan;
            resourceInputs["oauth2DevicePollingInterval"] = args?.oauth2DevicePollingInterval;
            resourceInputs["offlineSessionIdleTimeout"] = args?.offlineSessionIdleTimeout;
            resourceInputs["offlineSessionMaxLifespan"] = args?.offlineSessionMaxLifespan;
            resourceInputs["offlineSessionMaxLifespanEnabled"] = args?.offlineSessionMaxLifespanEnabled;
            resourceInputs["organizationsEnabled"] = args?.organizationsEnabled;
            resourceInputs["otpPolicy"] = args?.otpPolicy;
            resourceInputs["passwordPolicy"] = args?.passwordPolicy;
            resourceInputs["realm"] = args?.realm;
            resourceInputs["refreshTokenMaxReuse"] = args?.refreshTokenMaxReuse;
            resourceInputs["registrationAllowed"] = args?.registrationAllowed;
            resourceInputs["registrationEmailAsUsername"] = args?.registrationEmailAsUsername;
            resourceInputs["registrationFlow"] = args?.registrationFlow;
            resourceInputs["rememberMe"] = args?.rememberMe;
            resourceInputs["resetCredentialsFlow"] = args?.resetCredentialsFlow;
            resourceInputs["resetPasswordAllowed"] = args?.resetPasswordAllowed;
            resourceInputs["revokeRefreshToken"] = args?.revokeRefreshToken;
            resourceInputs["securityDefenses"] = args?.securityDefenses;
            resourceInputs["smtpServer"] = args?.smtpServer;
            resourceInputs["sslRequired"] = args?.sslRequired;
            resourceInputs["ssoSessionIdleTimeout"] = args?.ssoSessionIdleTimeout;
            resourceInputs["ssoSessionIdleTimeoutRememberMe"] = args?.ssoSessionIdleTimeoutRememberMe;
            resourceInputs["ssoSessionMaxLifespan"] = args?.ssoSessionMaxLifespan;
            resourceInputs["ssoSessionMaxLifespanRememberMe"] = args?.ssoSessionMaxLifespanRememberMe;
            resourceInputs["userManagedAccess"] = args?.userManagedAccess;
            resourceInputs["verifyEmail"] = args?.verifyEmail;
            resourceInputs["webAuthnPasswordlessPolicy"] = args?.webAuthnPasswordlessPolicy;
            resourceInputs["webAuthnPolicy"] = args?.webAuthnPolicy;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Realm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Realm resources.
 */
export interface RealmState {
    accessCodeLifespan?: pulumi.Input<string>;
    accessCodeLifespanLogin?: pulumi.Input<string>;
    accessCodeLifespanUserAction?: pulumi.Input<string>;
    accessTokenLifespan?: pulumi.Input<string>;
    accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    accountTheme?: pulumi.Input<string>;
    actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    adminTheme?: pulumi.Input<string>;
    /**
     * A map of custom attributes to add to the realm.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Which flow should be used for BrowserFlow
     */
    browserFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    clientAuthenticationFlow?: pulumi.Input<string>;
    clientSessionIdleTimeout?: pulumi.Input<string>;
    clientSessionMaxLifespan?: pulumi.Input<string>;
    defaultDefaultClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOptionalClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    directGrantFlow?: pulumi.Input<string>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
     */
    displayNameHtml?: pulumi.Input<string>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    dockerAuthenticationFlow?: pulumi.Input<string>;
    duplicateEmailsAllowed?: pulumi.Input<boolean>;
    editUsernameAllowed?: pulumi.Input<boolean>;
    emailTheme?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for FirstBrokerLoginFlow
     */
    firstBrokerLoginFlow?: pulumi.Input<string>;
    /**
     * When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
     */
    internalId?: pulumi.Input<string>;
    internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    loginTheme?: pulumi.Input<string>;
    loginWithEmailAllowed?: pulumi.Input<boolean>;
    oauth2DeviceCodeLifespan?: pulumi.Input<string>;
    oauth2DevicePollingInterval?: pulumi.Input<number>;
    offlineSessionIdleTimeout?: pulumi.Input<string>;
    offlineSessionMaxLifespan?: pulumi.Input<string>;
    offlineSessionMaxLifespanEnabled?: pulumi.Input<boolean>;
    /**
     * When `true`, organization support is enabled. Defaults to `false`.
     */
    organizationsEnabled?: pulumi.Input<boolean>;
    otpPolicy?: pulumi.Input<inputs.RealmOtpPolicy>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername(undefined)"
     */
    passwordPolicy?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
     */
    realm?: pulumi.Input<string>;
    refreshTokenMaxReuse?: pulumi.Input<number>;
    registrationAllowed?: pulumi.Input<boolean>;
    registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    registrationFlow?: pulumi.Input<string>;
    rememberMe?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    resetCredentialsFlow?: pulumi.Input<string>;
    resetPasswordAllowed?: pulumi.Input<boolean>;
    revokeRefreshToken?: pulumi.Input<boolean>;
    securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    sslRequired?: pulumi.Input<string>;
    ssoSessionIdleTimeout?: pulumi.Input<string>;
    ssoSessionIdleTimeoutRememberMe?: pulumi.Input<string>;
    ssoSessionMaxLifespan?: pulumi.Input<string>;
    ssoSessionMaxLifespanRememberMe?: pulumi.Input<string>;
    /**
     * When `true`, users are allowed to manage their own resources. Defaults to `false`.
     */
    userManagedAccess?: pulumi.Input<boolean>;
    verifyEmail?: pulumi.Input<boolean>;
    webAuthnPasswordlessPolicy?: pulumi.Input<inputs.RealmWebAuthnPasswordlessPolicy>;
    webAuthnPolicy?: pulumi.Input<inputs.RealmWebAuthnPolicy>;
}

/**
 * The set of arguments for constructing a Realm resource.
 */
export interface RealmArgs {
    accessCodeLifespan?: pulumi.Input<string>;
    accessCodeLifespanLogin?: pulumi.Input<string>;
    accessCodeLifespanUserAction?: pulumi.Input<string>;
    accessTokenLifespan?: pulumi.Input<string>;
    accessTokenLifespanForImplicitFlow?: pulumi.Input<string>;
    accountTheme?: pulumi.Input<string>;
    actionTokenGeneratedByAdminLifespan?: pulumi.Input<string>;
    actionTokenGeneratedByUserLifespan?: pulumi.Input<string>;
    adminTheme?: pulumi.Input<string>;
    /**
     * A map of custom attributes to add to the realm.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Which flow should be used for BrowserFlow
     */
    browserFlow?: pulumi.Input<string>;
    /**
     * Which flow should be used for ClientAuthenticationFlow
     */
    clientAuthenticationFlow?: pulumi.Input<string>;
    clientSessionIdleTimeout?: pulumi.Input<string>;
    clientSessionMaxLifespan?: pulumi.Input<string>;
    defaultDefaultClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOptionalClientScopes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Which flow should be used for DirectGrantFlow
     */
    directGrantFlow?: pulumi.Input<string>;
    /**
     * The display name for the realm that is shown when logging in to the admin console.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
     */
    displayNameHtml?: pulumi.Input<string>;
    /**
     * Which flow should be used for DockerAuthenticationFlow
     */
    dockerAuthenticationFlow?: pulumi.Input<string>;
    duplicateEmailsAllowed?: pulumi.Input<boolean>;
    editUsernameAllowed?: pulumi.Input<boolean>;
    emailTheme?: pulumi.Input<string>;
    /**
     * When `false`, users and clients will not be able to access this realm. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for FirstBrokerLoginFlow
     */
    firstBrokerLoginFlow?: pulumi.Input<string>;
    /**
     * When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
     */
    internalId?: pulumi.Input<string>;
    internationalization?: pulumi.Input<inputs.RealmInternationalization>;
    loginTheme?: pulumi.Input<string>;
    loginWithEmailAllowed?: pulumi.Input<boolean>;
    oauth2DeviceCodeLifespan?: pulumi.Input<string>;
    oauth2DevicePollingInterval?: pulumi.Input<number>;
    offlineSessionIdleTimeout?: pulumi.Input<string>;
    offlineSessionMaxLifespan?: pulumi.Input<string>;
    offlineSessionMaxLifespanEnabled?: pulumi.Input<boolean>;
    /**
     * When `true`, organization support is enabled. Defaults to `false`.
     */
    organizationsEnabled?: pulumi.Input<boolean>;
    otpPolicy?: pulumi.Input<inputs.RealmOtpPolicy>;
    /**
     * String that represents the passwordPolicies that are in place. Each policy is separated with " and ". Supported policies can be found in the server-info providers page. example: "upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername(undefined)"
     */
    passwordPolicy?: pulumi.Input<string>;
    /**
     * The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
     */
    realm?: pulumi.Input<string>;
    refreshTokenMaxReuse?: pulumi.Input<number>;
    registrationAllowed?: pulumi.Input<boolean>;
    registrationEmailAsUsername?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for RegistrationFlow
     */
    registrationFlow?: pulumi.Input<string>;
    rememberMe?: pulumi.Input<boolean>;
    /**
     * Which flow should be used for ResetCredentialsFlow
     */
    resetCredentialsFlow?: pulumi.Input<string>;
    resetPasswordAllowed?: pulumi.Input<boolean>;
    revokeRefreshToken?: pulumi.Input<boolean>;
    securityDefenses?: pulumi.Input<inputs.RealmSecurityDefenses>;
    smtpServer?: pulumi.Input<inputs.RealmSmtpServer>;
    /**
     * SSL Required: Values can be 'none', 'external' or 'all'.
     */
    sslRequired?: pulumi.Input<string>;
    ssoSessionIdleTimeout?: pulumi.Input<string>;
    ssoSessionIdleTimeoutRememberMe?: pulumi.Input<string>;
    ssoSessionMaxLifespan?: pulumi.Input<string>;
    ssoSessionMaxLifespanRememberMe?: pulumi.Input<string>;
    /**
     * When `true`, users are allowed to manage their own resources. Defaults to `false`.
     */
    userManagedAccess?: pulumi.Input<boolean>;
    verifyEmail?: pulumi.Input<boolean>;
    webAuthnPasswordlessPolicy?: pulumi.Input<inputs.RealmWebAuthnPasswordlessPolicy>;
    webAuthnPolicy?: pulumi.Input<inputs.RealmWebAuthnPolicy>;
}
