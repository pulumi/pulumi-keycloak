// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allow for creating and managing Organizations within Keycloak.
 *
 * Attributes can also be defined on Groups.
 *
 * Linkage with identity providers is managed with the identity provider resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const _this = new keycloak.Organization("this", {
 *     realm: realm.name,
 *     name: "org",
 *     alias: "org",
 *     enabled: true,
 *     domains: [{
 *         name: "example.com",
 *     }],
 * });
 * const thisIdentityProvider = new keycloak.oidc.IdentityProvider("this", {
 *     realm: realm.name,
 *     alias: "my-idp",
 *     authorizationUrl: "https://authorizationurl.com",
 *     clientId: "clientID",
 *     clientSecret: "clientSecret",
 *     tokenUrl: "https://tokenurl.com",
 *     organizationId: _this.id,
 *     orgDomain: "example.com",
 *     orgRedirectModeEmailMatches: true,
 * });
 * ```
 *
 * ## Import
 *
 * Organizations can be imported using the format `{{realm_id}}/{{organization_id}}`, where `organization_id` is the unique ID that Keycloak
 *
 * assigns to the organizations upon creation. This value can be found in the URI when editing this organization in the GUI, and is typically a GUID.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:index/organization:Organization this my-realm/cec54914-b702-4c7b-9431-b407817d059a
 * ```
 */
export class Organization extends pulumi.CustomResource {
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationState, opts?: pulumi.CustomResourceOptions): Organization {
        return new Organization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:index/organization:Organization';

    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Organization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Organization.__pulumiType;
    }

    /**
     * The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
     */
    public readonly attributes!: pulumi.Output<{[key: string]: string}>;
    /**
     * The description of the organization.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A list of domains. At least one domain is required.
     */
    public readonly domains!: pulumi.Output<outputs.OrganizationDomain[]>;
    /**
     * Enable/disable this organization.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the organization.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The realm this organization exists in.
     */
    public readonly realm!: pulumi.Output<string>;
    /**
     * The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
     */
    public readonly redirectUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a Organization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationArgs | OrganizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["redirectUrl"] = state ? state.redirectUrl : undefined;
        } else {
            const args = argsOrState as OrganizationArgs | undefined;
            if ((!args || args.domains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domains'");
            }
            if ((!args || args.realm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realm'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["redirectUrl"] = args ? args.redirectUrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Organization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Organization resources.
 */
export interface OrganizationState {
    /**
     * The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
     */
    alias?: pulumi.Input<string>;
    /**
     * A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The description of the organization.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of domains. At least one domain is required.
     */
    domains?: pulumi.Input<pulumi.Input<inputs.OrganizationDomain>[]>;
    /**
     * Enable/disable this organization.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the organization.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this organization exists in.
     */
    realm?: pulumi.Input<string>;
    /**
     * The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
     */
    redirectUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Organization resource.
 */
export interface OrganizationArgs {
    /**
     * The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
     */
    alias?: pulumi.Input<string>;
    /**
     * A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The description of the organization.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of domains. At least one domain is required.
     */
    domains: pulumi.Input<pulumi.Input<inputs.OrganizationDomain>[]>;
    /**
     * Enable/disable this organization.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the organization.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this organization exists in.
     */
    realm: pulumi.Input<string>;
    /**
     * The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
     */
    redirectUrl?: pulumi.Input<string>;
}
