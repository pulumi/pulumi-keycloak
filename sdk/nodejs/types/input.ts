// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface GetRealmInternationalization {
    defaultLocale?: string;
    supportedLocales?: string[];
}

export interface GetRealmSecurityDefense {
    bruteForceDetections?: inputs.GetRealmSecurityDefenseBruteForceDetection[];
    headers?: inputs.GetRealmSecurityDefenseHeader[];
}

export interface GetRealmSecurityDefenseBruteForceDetection {
    failureResetTimeSeconds?: number;
    maxFailureWaitSeconds?: number;
    maxLoginFailures?: number;
    minimumQuickLoginWaitSeconds?: number;
    permanentLockout?: boolean;
    quickLoginCheckMilliSeconds?: number;
    waitIncrementSeconds?: number;
}

export interface GetRealmSecurityDefenseHeader {
    contentSecurityPolicy?: string;
    contentSecurityPolicyReportOnly?: string;
    strictTransportSecurity?: string;
    xContentTypeOptions?: string;
    xFrameOptions?: string;
    xRobotsTag?: string;
    xXssProtection?: string;
}

export interface GetRealmSmtpServer {
    auths?: inputs.GetRealmSmtpServerAuth[];
    envelopeFrom?: string;
    from?: string;
    fromDisplayName?: string;
    host?: string;
    port?: string;
    replyTo?: string;
    replyToDisplayName?: string;
    ssl?: boolean;
    starttls?: boolean;
}

export interface GetRealmSmtpServerAuth {
    password?: string;
    username?: string;
}

export interface GetRealmWebAuthnPasswordlessPolicy {
    acceptableAaguids?: string[];
    attestationConveyancePreference?: string;
    authenticatorAttachment?: string;
    avoidSameAuthenticatorRegister?: boolean;
    createTimeout?: number;
    relyingPartyEntityName?: string;
    relyingPartyId?: string;
    requireResidentKey?: string;
    signatureAlgorithms?: string[];
    userVerificationRequirement?: string;
}

export interface GetRealmWebAuthnPolicy {
    acceptableAaguids?: string[];
    attestationConveyancePreference?: string;
    authenticatorAttachment?: string;
    avoidSameAuthenticatorRegister?: boolean;
    createTimeout?: number;
    relyingPartyEntityName?: string;
    relyingPartyId?: string;
    requireResidentKey?: string;
    signatureAlgorithms?: string[];
    userVerificationRequirement?: string;
}

export interface RealmInternationalization {
    /**
     * The locale to use by default. This locale code must be present within the `supportedLocales` list.
     */
    defaultLocale: pulumi.Input<string>;
    /**
     * A list of [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) locale codes that the realm should support.
     */
    supportedLocales: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RealmSecurityDefenses {
    bruteForceDetection?: pulumi.Input<inputs.RealmSecurityDefensesBruteForceDetection>;
    headers?: pulumi.Input<inputs.RealmSecurityDefensesHeaders>;
}

export interface RealmSecurityDefensesBruteForceDetection {
    /**
     * When will failure count be reset?
     */
    failureResetTimeSeconds?: pulumi.Input<number>;
    maxFailureWaitSeconds?: pulumi.Input<number>;
    /**
     * How many failures before wait is triggered.
     */
    maxLoginFailures?: pulumi.Input<number>;
    /**
     * How long to wait after a quick login failure.
     * - `maxFailureWaitSeconds ` - (Optional) Max. time a user will be locked out.
     */
    minimumQuickLoginWaitSeconds?: pulumi.Input<number>;
    /**
     * When `true`, this will lock the user permanently when the user exceeds the maximum login failures.
     */
    permanentLockout?: pulumi.Input<boolean>;
    /**
     * Configures the amount of time, in milliseconds, for consecutive failures to lock a user out.
     */
    quickLoginCheckMilliSeconds?: pulumi.Input<number>;
    /**
     * This represents the amount of time a user should be locked out when the login failure threshold has been met.
     */
    waitIncrementSeconds?: pulumi.Input<number>;
}

export interface RealmSecurityDefensesHeaders {
    /**
     * Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the [W3C-CSP](https://www.w3.org/TR/CSP/) Abstract.
     */
    contentSecurityPolicy?: pulumi.Input<string>;
    /**
     * Used for testing Content Security Policies.
     */
    contentSecurityPolicyReportOnly?: pulumi.Input<string>;
    /**
     * The Script-Transport-Security HTTP header tells browsers to always use HTTPS.
     */
    strictTransportSecurity?: pulumi.Input<string>;
    /**
     * Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type
     */
    xContentTypeOptions?: pulumi.Input<string>;
    /**
     * Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the [RFC7034](https://tools.ietf.org/html/rfc7034)
     */
    xFrameOptions?: pulumi.Input<string>;
    /**
     * Prevent pages from appearing in search engines.
     */
    xRobotsTag?: pulumi.Input<string>;
    /**
     * This header configures the Cross-site scripting (XSS) filter in your browser.
     */
    xXssProtection?: pulumi.Input<string>;
}

export interface RealmSmtpServer {
    /**
     * Enables authentication to the SMTP server.  This block supports the following arguments:
     */
    auth?: pulumi.Input<inputs.RealmSmtpServerAuth>;
    /**
     * The email address uses for bounces.
     */
    envelopeFrom?: pulumi.Input<string>;
    /**
     * The email address for the sender.
     */
    from: pulumi.Input<string>;
    /**
     * The display name of the sender email address.
     */
    fromDisplayName?: pulumi.Input<string>;
    /**
     * The host of the SMTP server.
     */
    host: pulumi.Input<string>;
    /**
     * The port of the SMTP server (defaults to 25).
     */
    port?: pulumi.Input<string>;
    /**
     * The "reply to" email address.
     */
    replyTo?: pulumi.Input<string>;
    /**
     * The display name of the "reply to" email address.
     */
    replyToDisplayName?: pulumi.Input<string>;
    /**
     * When `true`, enables SSL. Defaults to `false`.
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * When `true`, enables StartTLS. Defaults to `false`.
     */
    starttls?: pulumi.Input<boolean>;
}

export interface RealmSmtpServerAuth {
    /**
     * The SMTP server password.
     */
    password: pulumi.Input<string>;
    /**
     * The SMTP server username.
     */
    username: pulumi.Input<string>;
}

export interface RealmWebAuthnPasswordlessPolicy {
    /**
     * A set of AAGUIDs for which an authenticator can be registered.
     */
    acceptableAaguids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
     */
    attestationConveyancePreference?: pulumi.Input<string>;
    /**
     * The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
     */
    authenticatorAttachment?: pulumi.Input<string>;
    /**
     * When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
     */
    avoidSameAuthenticatorRegister?: pulumi.Input<boolean>;
    /**
     * The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
     */
    createTimeout?: pulumi.Input<number>;
    /**
     * A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
     */
    relyingPartyEntityName?: pulumi.Input<string>;
    /**
     * The WebAuthn relying party ID.
     */
    relyingPartyId?: pulumi.Input<string>;
    /**
     * Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
     */
    requireResidentKey?: pulumi.Input<string>;
    /**
     * A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
     */
    signatureAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
     */
    userVerificationRequirement?: pulumi.Input<string>;
}

export interface RealmWebAuthnPolicy {
    /**
     * A set of AAGUIDs for which an authenticator can be registered.
     */
    acceptableAaguids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
     */
    attestationConveyancePreference?: pulumi.Input<string>;
    /**
     * The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
     */
    authenticatorAttachment?: pulumi.Input<string>;
    /**
     * When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
     */
    avoidSameAuthenticatorRegister?: pulumi.Input<boolean>;
    /**
     * The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
     */
    createTimeout?: pulumi.Input<number>;
    /**
     * A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
     */
    relyingPartyEntityName?: pulumi.Input<string>;
    /**
     * The WebAuthn relying party ID.
     */
    relyingPartyId?: pulumi.Input<string>;
    /**
     * Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
     */
    requireResidentKey?: pulumi.Input<string>;
    /**
     * A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
     */
    signatureAlgorithms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
     */
    userVerificationRequirement?: pulumi.Input<string>;
}

export interface UserFederatedIdentity {
    /**
     * The name of the identity provider
     */
    identityProvider: pulumi.Input<string>;
    /**
     * The ID of the user defined in the identity provider
     */
    userId: pulumi.Input<string>;
    /**
     * The user name of the user defined in the identity provider
     */
    userName: pulumi.Input<string>;
}

export interface UserInitialPassword {
    /**
     * If set to `true`, the initial password is set up for renewal on first use. Default to `false`.
     */
    temporary?: pulumi.Input<boolean>;
    /**
     * The initial password.
     */
    value: pulumi.Input<string>;
}
export namespace ldap {
    export interface UserFederationCache {
        /**
         * Minute of day the entry will become invalid on.
         */
        evictionDay?: pulumi.Input<number>;
        /**
         * Hour of day the entry will become invalid on.
         */
        evictionHour?: pulumi.Input<number>;
        evictionMinute?: pulumi.Input<number>;
        /**
         * Max lifespan of cache entry (duration string).
         */
        maxLifespan?: pulumi.Input<string>;
        /**
         * Can be one of `DEFAULT`, `EVICT_DAILY`, `EVICT_WEEKLY`, `MAX_LIFESPAN`, or `NO_CACHE`. Defaults to `DEFAULT`.
         */
        policy?: pulumi.Input<string>;
    }

    export interface UserFederationKerberos {
        /**
         * The name of the kerberos realm, e.g. FOO.LOCAL.
         */
        kerberosRealm: pulumi.Input<string>;
        /**
         * Path to the kerberos keytab file on the server with credentials of the service principal.
         */
        keyTab: pulumi.Input<string>;
        /**
         * The kerberos server principal, e.g. 'HTTP/host.foo.com@FOO.LOCAL'.
         */
        serverPrincipal: pulumi.Input<string>;
        /**
         * Use kerberos login module instead of ldap service api. Defaults to `false`.
         */
        useKerberosForPasswordAuthentication?: pulumi.Input<boolean>;
    }
}

export namespace openid {
    export interface ClientAuthenticationFlowBindingOverrides {
        /**
         * Browser flow id, (flow needs to exist)
         */
        browserId?: pulumi.Input<string>;
        /**
         * Direct grant flow id (flow needs to exist)
         */
        directGrantId?: pulumi.Input<string>;
    }

    export interface ClientAuthorization {
        /**
         * When `true`, resources can be managed remotely by the resource server. Defaults to `false`.
         */
        allowRemoteResourceManagement?: pulumi.Input<boolean>;
        /**
         * When `true`, defaults set by Keycloak will be respected. Defaults to `false`.
         */
        keepDefaults?: pulumi.Input<boolean>;
        /**
         * Dictates how policies are enforced when evaluating authorization requests. Can be one of `ENFORCING`, `PERMISSIVE`, or `DISABLED`.
         */
        policyEnforcementMode: pulumi.Input<string>;
    }

    export interface ClientGroupPolicyGroup {
        extendChildren: pulumi.Input<boolean>;
        id: pulumi.Input<string>;
        path: pulumi.Input<string>;
    }

    export interface ClientRolePolicyRole {
        id: pulumi.Input<string>;
        required: pulumi.Input<boolean>;
    }

}
