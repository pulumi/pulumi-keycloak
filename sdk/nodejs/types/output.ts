// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";

export interface GetRealmInternationalization {
    defaultLocale: string;
    supportedLocales: string[];
}

export interface GetRealmKeysKey {
    algorithm: string;
    certificate: string;
    kid: string;
    providerId: string;
    providerPriority: number;
    publicKey: string;
    status: string;
    type: string;
}

export interface GetRealmSecurityDefense {
    bruteForceDetections: outputs.GetRealmSecurityDefenseBruteForceDetection[];
    headers: outputs.GetRealmSecurityDefenseHeader[];
}

export interface GetRealmSecurityDefenseBruteForceDetection {
    failureResetTimeSeconds: number;
    maxFailureWaitSeconds: number;
    maxLoginFailures: number;
    minimumQuickLoginWaitSeconds: number;
    permanentLockout: boolean;
    quickLoginCheckMilliSeconds: number;
    waitIncrementSeconds: number;
}

export interface GetRealmSecurityDefenseHeader {
    contentSecurityPolicy: string;
    contentSecurityPolicyReportOnly: string;
    strictTransportSecurity: string;
    xContentTypeOptions: string;
    xFrameOptions: string;
    xRobotsTag: string;
    xXssProtection: string;
}

export interface GetRealmSmtpServer {
    auths: outputs.GetRealmSmtpServerAuth[];
    envelopeFrom: string;
    from: string;
    fromDisplayName: string;
    host: string;
    port: string;
    replyTo: string;
    replyToDisplayName: string;
    ssl: boolean;
    starttls: boolean;
}

export interface GetRealmSmtpServerAuth {
    password: string;
    username: string;
}

export interface RealmInternationalization {
    defaultLocale: string;
    supportedLocales: string[];
}

export interface RealmSecurityDefenses {
    bruteForceDetection?: outputs.RealmSecurityDefensesBruteForceDetection;
    headers?: outputs.RealmSecurityDefensesHeaders;
}

export interface RealmSecurityDefensesBruteForceDetection {
    failureResetTimeSeconds?: number;
    maxFailureWaitSeconds?: number;
    maxLoginFailures?: number;
    minimumQuickLoginWaitSeconds?: number;
    permanentLockout?: boolean;
    quickLoginCheckMilliSeconds?: number;
    waitIncrementSeconds?: number;
}

export interface RealmSecurityDefensesHeaders {
    contentSecurityPolicy?: string;
    contentSecurityPolicyReportOnly?: string;
    strictTransportSecurity?: string;
    xContentTypeOptions?: string;
    xFrameOptions?: string;
    xRobotsTag?: string;
    xXssProtection?: string;
}

export interface RealmSmtpServer {
    auth?: outputs.RealmSmtpServerAuth;
    envelopeFrom?: string;
    from: string;
    fromDisplayName?: string;
    host: string;
    port?: string;
    replyTo?: string;
    replyToDisplayName?: string;
    ssl?: boolean;
    starttls?: boolean;
}

export interface RealmSmtpServerAuth {
    password: string;
    username: string;
}

export interface UserFederatedIdentity {
    identityProvider: string;
    userId: string;
    userName: string;
}

export interface UserInitialPassword {
    temporary?: boolean;
    value: string;
}

export namespace ldap {
    export interface UserFederationKerberos {
        kerberosRealm: string;
        keyTab: string;
        serverPrincipal: string;
        useKerberosForPasswordAuthentication?: boolean;
    }
}

export namespace openid {
    export interface ClientAuthenticationFlowBindingOverrides {
        browserId?: string;
        directGrantId?: string;
    }

    export interface ClientAuthorization {
        allowRemoteResourceManagement?: boolean;
        keepDefaults?: boolean;
        policyEnforcementMode: string;
    }

    export interface ClientGroupPolicyGroup {
        extendChildren: boolean;
        id: string;
        path: string;
    }

    export interface ClientRolePolicyRole {
        id: string;
        required: boolean;
    }

    export interface GetClientAuthenticationFlowBindingOverrides {
        browserId: string;
        directGrantId: string;
    }

    export interface GetClientAuthorization {
        allowRemoteResourceManagement: boolean;
        policyEnforcementMode: string;
    }

    export interface GetClientServiceAccountUserFederatedIdentity {
        identityProvider: string;
        userId: string;
        userName: string;
    }
}
