// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource can be used to create client policy.
 *
 * ## Example Usage
 *
 * In this example, we'll create a new OpenID client, then enabled permissions for the client. A client without permissions disabled cannot be assigned by a client policy. We'll use the `keycloak.openid.ClientPolicy` resource to create a new client policy, which could be applied to many clients, for a realm and a resource_server_id.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const openidClient = new keycloak.openid.Client("openid_client", {
 *     clientId: "openid_client",
 *     name: "openid_client",
 *     realmId: realm.id,
 *     accessType: "CONFIDENTIAL",
 *     serviceAccountsEnabled: true,
 * });
 * const myPermission = new keycloak.openid.ClientPermissions("my_permission", {
 *     realmId: realm.id,
 *     clientId: openidClient.id,
 * });
 * const realmManagement = keycloak.openid.getClient({
 *     realmId: "my-realm",
 *     clientId: "realm-management",
 * });
 * const tokenExchange = new keycloak.openid.ClientPolicy("token_exchange", {
 *     resourceServerId: realmManagement.then(realmManagement => realmManagement.id),
 *     realmId: realm.id,
 *     name: "my-policy",
 *     logic: "POSITIVE",
 *     decisionStrategy: "UNANIMOUS",
 *     clients: [openidClient.id],
 * });
 * ```
 */
export class ClientPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ClientPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientPolicyState, opts?: pulumi.CustomResourceOptions): ClientPolicy {
        return new ClientPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/clientPolicy:ClientPolicy';

    /**
     * Returns true if the given object is an instance of ClientPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientPolicy.__pulumiType;
    }

    /**
     * The clients allowed by this client policy.
     */
    declare public readonly clients: pulumi.Output<string[]>;
    /**
     * (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     */
    declare public readonly decisionStrategy: pulumi.Output<string | undefined>;
    /**
     * The description of this client policy.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
     */
    declare public readonly logic: pulumi.Output<string | undefined>;
    /**
     * The name of this client policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The realm this client policy exists within.
     */
    declare public readonly realmId: pulumi.Output<string>;
    /**
     * The ID of the resource server this client policy is attached to.
     */
    declare public readonly resourceServerId: pulumi.Output<string>;

    /**
     * Create a ClientPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientPolicyArgs | ClientPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientPolicyState | undefined;
            resourceInputs["clients"] = state?.clients;
            resourceInputs["decisionStrategy"] = state?.decisionStrategy;
            resourceInputs["description"] = state?.description;
            resourceInputs["logic"] = state?.logic;
            resourceInputs["name"] = state?.name;
            resourceInputs["realmId"] = state?.realmId;
            resourceInputs["resourceServerId"] = state?.resourceServerId;
        } else {
            const args = argsOrState as ClientPolicyArgs | undefined;
            if (args?.clients === undefined && !opts.urn) {
                throw new Error("Missing required property 'clients'");
            }
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if (args?.resourceServerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceServerId'");
            }
            resourceInputs["clients"] = args?.clients;
            resourceInputs["decisionStrategy"] = args?.decisionStrategy;
            resourceInputs["description"] = args?.description;
            resourceInputs["logic"] = args?.logic;
            resourceInputs["name"] = args?.name;
            resourceInputs["realmId"] = args?.realmId;
            resourceInputs["resourceServerId"] = args?.resourceServerId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientPolicy resources.
 */
export interface ClientPolicyState {
    /**
     * The clients allowed by this client policy.
     */
    clients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     */
    decisionStrategy?: pulumi.Input<string>;
    /**
     * The description of this client policy.
     */
    description?: pulumi.Input<string>;
    /**
     * (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
     */
    logic?: pulumi.Input<string>;
    /**
     * The name of this client policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this client policy exists within.
     */
    realmId?: pulumi.Input<string>;
    /**
     * The ID of the resource server this client policy is attached to.
     */
    resourceServerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClientPolicy resource.
 */
export interface ClientPolicyArgs {
    /**
     * The clients allowed by this client policy.
     */
    clients: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
     */
    decisionStrategy?: pulumi.Input<string>;
    /**
     * The description of this client policy.
     */
    description?: pulumi.Input<string>;
    /**
     * (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
     */
    logic?: pulumi.Input<string>;
    /**
     * The name of this client policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this client policy exists within.
     */
    realmId: pulumi.Input<string>;
    /**
     * The ID of the resource server this client policy is attached to.
     */
    resourceServerId: pulumi.Input<string>;
}
