// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Allows you to manage openid Client Authorization Client Scope type Policies.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const test = new keycloak.openid.Client("test", {
 *     clientId: "client_id",
 *     realmId: realm.id,
 *     accessType: "CONFIDENTIAL",
 *     serviceAccountsEnabled: true,
 *     authorization: {
 *         policyEnforcementMode: "ENFORCING",
 *     },
 * });
 * const test1 = new keycloak.openid.ClientScope("test1", {
 *     realmId: realm.id,
 *     name: "test1",
 *     description: "test1",
 * });
 * const test2 = new keycloak.openid.ClientScope("test2", {
 *     realmId: realm.id,
 *     name: "test2",
 *     description: "test2",
 * });
 * const testClientAuthorizationClientScopePolicy = new keycloak.openid.ClientAuthorizationClientScopePolicy("test", {
 *     resourceServerId: test.resourceServerId,
 *     realmId: realm.id,
 *     name: "test_policy_single",
 *     description: "test",
 *     decisionStrategy: "AFFIRMATIVE",
 *     logic: "POSITIVE",
 *     scopes: [{
 *         id: test1.id,
 *         required: false,
 *     }],
 * });
 * const testMultiple = new keycloak.openid.ClientAuthorizationClientScopePolicy("test_multiple", {
 *     resourceServerId: test.resourceServerId,
 *     realmId: realm.id,
 *     name: "test_policy_multiple",
 *     description: "test",
 *     decisionStrategy: "AFFIRMATIVE",
 *     logic: "POSITIVE",
 *     scopes: [
 *         {
 *             id: test1.id,
 *             required: false,
 *         },
 *         {
 *             id: test2.id,
 *             required: true,
 *         },
 *     ],
 * });
 * ```
 *
 * ### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `realmId` - (Required) The realm this group exists in.
 * - `resourceServerId` - (Required) The ID of the resource server.
 * - `name` - (Required) The name of the policy.
 * - `description` - (Optional) A description for the authorization policy.
 * - `decisionStrategy` - (Optional) The decision strategy, can be one of `UNANIMOUS`, `AFFIRMATIVE`, or `CONSENSUS`. Defaults to `UNANIMOUS`.
 * - `logic` - (Optional) The logic, can be one of `POSITIVE` or `NEGATIVE`. Defaults to `POSITIVE`.
 * - `scope` - An client scope to add client scope. At least one should be defined.
 *
 * ### Scope Arguments
 *
 * - `id` - (Required) Id of client scope.
 * - `required` - (Optional) When `true`, then this client scope will be set as required. Defaults to `false`.
 *
 * ### Attributes Reference
 *
 * In addition to the arguments listed above, the following computed attributes are exported:
 *
 * - `id` - Policy ID representing the policy.
 *
 * ## Import
 *
 * Client authorization policies can be imported using the format: `{{realmId}}/{{resourceServerId}}/{{policyId}}`.
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:openid/clientAuthorizationClientScopePolicy:ClientAuthorizationClientScopePolicy test my-realm/3bd4a686-1062-4b59-97b8-e4e3f10b99da/63b3cde8-987d-4cd9-9306-1955579281d9
 * ```
 */
export class ClientAuthorizationClientScopePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ClientAuthorizationClientScopePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientAuthorizationClientScopePolicyState, opts?: pulumi.CustomResourceOptions): ClientAuthorizationClientScopePolicy {
        return new ClientAuthorizationClientScopePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/clientAuthorizationClientScopePolicy:ClientAuthorizationClientScopePolicy';

    /**
     * Returns true if the given object is an instance of ClientAuthorizationClientScopePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientAuthorizationClientScopePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientAuthorizationClientScopePolicy.__pulumiType;
    }

    public readonly decisionStrategy!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly logic!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly realmId!: pulumi.Output<string>;
    public readonly resourceServerId!: pulumi.Output<string>;
    public readonly scopes!: pulumi.Output<outputs.openid.ClientAuthorizationClientScopePolicyScope[]>;

    /**
     * Create a ClientAuthorizationClientScopePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientAuthorizationClientScopePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientAuthorizationClientScopePolicyArgs | ClientAuthorizationClientScopePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientAuthorizationClientScopePolicyState | undefined;
            resourceInputs["decisionStrategy"] = state ? state.decisionStrategy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["logic"] = state ? state.logic : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["resourceServerId"] = state ? state.resourceServerId : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
        } else {
            const args = argsOrState as ClientAuthorizationClientScopePolicyArgs | undefined;
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if ((!args || args.resourceServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceServerId'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["decisionStrategy"] = args ? args.decisionStrategy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["logic"] = args ? args.logic : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["resourceServerId"] = args ? args.resourceServerId : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientAuthorizationClientScopePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientAuthorizationClientScopePolicy resources.
 */
export interface ClientAuthorizationClientScopePolicyState {
    decisionStrategy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    logic?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    realmId?: pulumi.Input<string>;
    resourceServerId?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.openid.ClientAuthorizationClientScopePolicyScope>[]>;
}

/**
 * The set of arguments for constructing a ClientAuthorizationClientScopePolicy resource.
 */
export interface ClientAuthorizationClientScopePolicyArgs {
    decisionStrategy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    logic?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    realmId: pulumi.Input<string>;
    resourceServerId: pulumi.Input<string>;
    scopes: pulumi.Input<pulumi.Input<inputs.openid.ClientAuthorizationClientScopePolicyScope>[]>;
}
