// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const client = new keycloak.openid.Client("client", {
 *     realmId: realm.id,
 *     clientId: "test-client",
 *     accessType: "CONFIDENTIAL",
 * });
 * const clientScope = new keycloak.openid.ClientScope("clientScope", {realmId: realm.id});
 * const clientOptionalScopes = new keycloak.openid.ClientOptionalScopes("clientOptionalScopes", {
 *     realmId: realm.id,
 *     clientId: client.id,
 *     optionalScopes: [
 *         "address",
 *         "phone",
 *         "offline_access",
 *         "microprofile-jwt",
 *         clientScope.name,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.
 */
export class ClientOptionalScopes extends pulumi.CustomResource {
    /**
     * Get an existing ClientOptionalScopes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientOptionalScopesState, opts?: pulumi.CustomResourceOptions): ClientOptionalScopes {
        return new ClientOptionalScopes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/clientOptionalScopes:ClientOptionalScopes';

    /**
     * Returns true if the given object is an instance of ClientOptionalScopes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientOptionalScopes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientOptionalScopes.__pulumiType;
    }

    /**
     * The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * An array of client scope names to attach to this client as optional scopes.
     */
    public readonly optionalScopes!: pulumi.Output<string[]>;
    /**
     * The realm this client and scopes exists in.
     */
    public readonly realmId!: pulumi.Output<string>;

    /**
     * Create a ClientOptionalScopes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientOptionalScopesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientOptionalScopesArgs | ClientOptionalScopesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientOptionalScopesState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["optionalScopes"] = state ? state.optionalScopes : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
        } else {
            const args = argsOrState as ClientOptionalScopesArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.optionalScopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'optionalScopes'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["optionalScopes"] = args ? args.optionalScopes : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientOptionalScopes.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientOptionalScopes resources.
 */
export interface ClientOptionalScopesState {
    /**
     * The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
     */
    clientId?: pulumi.Input<string>;
    /**
     * An array of client scope names to attach to this client as optional scopes.
     */
    optionalScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The realm this client and scopes exists in.
     */
    realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClientOptionalScopes resource.
 */
export interface ClientOptionalScopesArgs {
    /**
     * The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
     */
    clientId: pulumi.Input<string>;
    /**
     * An array of client scope names to attach to this client as optional scopes.
     */
    optionalScopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The realm this client and scopes exists in.
     */
    realmId: pulumi.Input<string>;
}
