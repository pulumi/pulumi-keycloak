// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## # keycloak.openid.ClientAuthorizationPermission
 *
 * Allows you to manage openid Client Authorization Permissions.
 *
 * ### Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const testClient = new keycloak.openid.Client("testClient", {
 *     clientId: "client_id",
 *     realmId: realm.id,
 *     accessType: "CONFIDENTIAL",
 *     serviceAccountsEnabled: true,
 *     authorization: {
 *         policyEnforcementMode: "ENFORCING",
 *     },
 * });
 * const default = keycloak.openid.getClientAuthorizationPolicyOutput({
 *     realmId: realm.id,
 *     resourceServerId: testClient.resourceServerId,
 *     name: "default",
 * });
 * const testClientAuthorizationResource = new keycloak.openid.ClientAuthorizationResource("testClientAuthorizationResource", {
 *     resourceServerId: testClient.resourceServerId,
 *     realmId: realm.id,
 *     uris: ["/endpoint/*"],
 * });
 * const testClientAuthorizationScope = new keycloak.openid.ClientAuthorizationScope("testClientAuthorizationScope", {
 *     resourceServerId: testClient.resourceServerId,
 *     realmId: realm.id,
 * });
 * const testClientAuthorizationPermission = new keycloak.openid.ClientAuthorizationPermission("testClientAuthorizationPermission", {
 *     resourceServerId: testClient.resourceServerId,
 *     realmId: realm.id,
 *     policies: [_default.apply(_default => _default.id)],
 *     resources: [testClientAuthorizationResource.id],
 * });
 * ```
 *
 * ### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `realmId` - (Required) The realm this group exists in.
 * - `resourceServerId` - (Required) The ID of the resource server.
 * - `name` - (Required) The name of the permission.
 * - `description` - (Optional) A description for the authorization permission.
 * - `decisionStrategy` - (Optional) The decision strategy, can be one of `UNANIMOUS`, `AFFIRMATIVE`, or `CONSENSUS`. Defaults to `UNANIMOUS`.
 * - `policies` - (Optional) A list of policy IDs that must be applied to the scopes defined by this permission.
 * - `resources` - (Optional) A list of resource IDs that this permission must be applied to. Conflicts with `resourceType`.
 * - `resourceType` - (Optional) When specified, this permission will be evaluated for all instances of a given resource type. Conflicts with `resources`.
 * - `scopes` - (Optional) A list of scope IDs that this permission must be applied to.
 * - `type` - (Optional) The type of permission, can be one of `resource` or `scope`.
 *
 * ### Attributes Reference
 *
 * In addition to the arguments listed above, the following computed attributes are exported:
 *
 * - `id` - Permission ID representing the permission.
 *
 * ## Import
 *
 * Client authorization permissions can be imported using the format`{{realmId}}/{{resourceServerId}}/{{permissionId}}`. Examplebash
 *
 * ```sh
 *  $ pulumi import keycloak:openid/clientAuthorizationPermission:ClientAuthorizationPermission test my-realm/3bd4a686-1062-4b59-97b8-e4e3f10b99da/63b3cde8-987d-4cd9-9306-1955579281d9
 * ```
 */
export class ClientAuthorizationPermission extends pulumi.CustomResource {
    /**
     * Get an existing ClientAuthorizationPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientAuthorizationPermissionState, opts?: pulumi.CustomResourceOptions): ClientAuthorizationPermission {
        return new ClientAuthorizationPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/clientAuthorizationPermission:ClientAuthorizationPermission';

    /**
     * Returns true if the given object is an instance of ClientAuthorizationPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientAuthorizationPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientAuthorizationPermission.__pulumiType;
    }

    public readonly decisionStrategy!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly policies!: pulumi.Output<string[] | undefined>;
    public readonly realmId!: pulumi.Output<string>;
    public readonly resourceServerId!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string | undefined>;
    public readonly resources!: pulumi.Output<string[] | undefined>;
    public readonly scopes!: pulumi.Output<string[] | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a ClientAuthorizationPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientAuthorizationPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientAuthorizationPermissionArgs | ClientAuthorizationPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientAuthorizationPermissionState | undefined;
            resourceInputs["decisionStrategy"] = state ? state.decisionStrategy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["resourceServerId"] = state ? state.resourceServerId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ClientAuthorizationPermissionArgs | undefined;
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if ((!args || args.resourceServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceServerId'");
            }
            resourceInputs["decisionStrategy"] = args ? args.decisionStrategy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["resourceServerId"] = args ? args.resourceServerId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientAuthorizationPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientAuthorizationPermission resources.
 */
export interface ClientAuthorizationPermissionState {
    decisionStrategy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    realmId?: pulumi.Input<string>;
    resourceServerId?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClientAuthorizationPermission resource.
 */
export interface ClientAuthorizationPermissionArgs {
    decisionStrategy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    realmId: pulumi.Input<string>;
    resourceServerId: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}
