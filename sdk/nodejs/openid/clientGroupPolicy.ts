// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ClientGroupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ClientGroupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientGroupPolicyState, opts?: pulumi.CustomResourceOptions): ClientGroupPolicy {
        return new ClientGroupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/clientGroupPolicy:ClientGroupPolicy';

    /**
     * Returns true if the given object is an instance of ClientGroupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientGroupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientGroupPolicy.__pulumiType;
    }

    declare public readonly decisionStrategy: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly groups: pulumi.Output<outputs.openid.ClientGroupPolicyGroup[]>;
    declare public readonly groupsClaim: pulumi.Output<string | undefined>;
    declare public readonly logic: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly realmId: pulumi.Output<string>;
    declare public readonly resourceServerId: pulumi.Output<string>;

    /**
     * Create a ClientGroupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientGroupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientGroupPolicyArgs | ClientGroupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientGroupPolicyState | undefined;
            resourceInputs["decisionStrategy"] = state?.decisionStrategy;
            resourceInputs["description"] = state?.description;
            resourceInputs["groups"] = state?.groups;
            resourceInputs["groupsClaim"] = state?.groupsClaim;
            resourceInputs["logic"] = state?.logic;
            resourceInputs["name"] = state?.name;
            resourceInputs["realmId"] = state?.realmId;
            resourceInputs["resourceServerId"] = state?.resourceServerId;
        } else {
            const args = argsOrState as ClientGroupPolicyArgs | undefined;
            if (args?.decisionStrategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'decisionStrategy'");
            }
            if (args?.groups === undefined && !opts.urn) {
                throw new Error("Missing required property 'groups'");
            }
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if (args?.resourceServerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceServerId'");
            }
            resourceInputs["decisionStrategy"] = args?.decisionStrategy;
            resourceInputs["description"] = args?.description;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["groupsClaim"] = args?.groupsClaim;
            resourceInputs["logic"] = args?.logic;
            resourceInputs["name"] = args?.name;
            resourceInputs["realmId"] = args?.realmId;
            resourceInputs["resourceServerId"] = args?.resourceServerId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientGroupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientGroupPolicy resources.
 */
export interface ClientGroupPolicyState {
    decisionStrategy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.openid.ClientGroupPolicyGroup>[]>;
    groupsClaim?: pulumi.Input<string>;
    logic?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    realmId?: pulumi.Input<string>;
    resourceServerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClientGroupPolicy resource.
 */
export interface ClientGroupPolicyArgs {
    decisionStrategy: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    groups: pulumi.Input<pulumi.Input<inputs.openid.ClientGroupPolicyGroup>[]>;
    groupsClaim?: pulumi.Input<string>;
    logic?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    realmId: pulumi.Input<string>;
    resourceServerId: pulumi.Input<string>;
}
