// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## # keycloak.openid.Client
 *
 * Allows for creating and managing Keycloak clients that use the OpenID Connect protocol.
 *
 * Clients are entities that can use Keycloak for user authentication. Typically,
 * clients are applications that redirect users to Keycloak for authentication
 * in order to take advantage of Keycloak's user sessions for SSO.
 *
 * ### Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     enabled: true,
 *     realm: "my-realm",
 * });
 * const openidClient = new keycloak.openid.Client("openid_client", {
 *     accessType: "CONFIDENTIAL",
 *     clientId: "test-client",
 *     enabled: true,
 *     realmId: realm.id,
 *     validRedirectUris: ["http://localhost:8080/openid-callback"],
 * });
 * ```
 *
 * ### Argument Reference
 *
 * The following arguments are supported:
 *
 * - `realmId` - (Required) The realm this client is attached to.
 * - `clientId` - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.
 * - `name` - (Optional) The display name of this client in the GUI.
 * - `enabled` - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
 * - `description` - (Optional) The description of this client in the GUI.
 * - `accessType` - (Required) Specifies the type of client, which can be one of the following:
 *     - `CONFIDENTIAL` - Used for server-side clients that require both client ID and secret when authenticating.
 *       This client should be used for applications using the Authorization Code or Client Credentials grant flows.
 *     - `PUBLIC` - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect
 *       URIs for security. This client should be used for applications using the Implicit grant flow.
 *     - `BEARER-ONLY` - Used for services that never initiate a login. This client will only allow bearer token requests.
 * - `clientSecret` - (Optional) The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and
 *   should be treated with the same care as a password. If omitted, Keycloak will generate a GUID for this attribute.
 * - `standardFlowEnabled` - (Optional) When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
 * - `implicitFlowEnabled` - (Optional) When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
 * - `directAccessGrantsEnabled` - (Optional) When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
 * - `serviceAccountsEnabled` - (Optional) When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
 * - `validRedirectUris` - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
 *   wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
 *   is set to `true`.
 * - `webOrigins` - (Optional) A list of allowed CORS origins. `+` can be used to permit all valid redirect URIs, and `*` can be used to permit all origins.
 * - `adminUrl` - (Optional) URL to the admin interface of the client.
 * - `baseUrl` - (Optional) Default URL to use when the auth server needs to redirect or link back to the client.
 * - `pkceCodeChallengeMethod` - (Optional) The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
 * - `fullScopeAllowed` - (Optional) - Allow to include all roles mappings in the access token.
 *
 * ### Attributes Reference
 *
 * In addition to the arguments listed above, the following computed attributes are exported:
 *
 * - `serviceAccountUserId` - When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
 */
export class Client extends pulumi.CustomResource {
    /**
     * Get an existing Client resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientState, opts?: pulumi.CustomResourceOptions): Client {
        return new Client(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/client:Client';

    /**
     * Returns true if the given object is an instance of Client.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Client {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Client.__pulumiType;
    }

    public readonly accessTokenLifespan!: pulumi.Output<string | undefined>;
    public readonly accessType!: pulumi.Output<string>;
    public readonly adminUrl!: pulumi.Output<string | undefined>;
    public readonly authenticationFlowBindingOverrides!: pulumi.Output<outputs.openid.ClientAuthenticationFlowBindingOverrides | undefined>;
    public readonly authorization!: pulumi.Output<outputs.openid.ClientAuthorization | undefined>;
    public readonly baseUrl!: pulumi.Output<string | undefined>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly consentRequired!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly directAccessGrantsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly excludeSessionStateFromAuthResponse!: pulumi.Output<boolean | undefined>;
    public readonly fullScopeAllowed!: pulumi.Output<boolean | undefined>;
    public readonly implicitFlowEnabled!: pulumi.Output<boolean | undefined>;
    public readonly loginTheme!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pkceCodeChallengeMethod!: pulumi.Output<string | undefined>;
    public readonly realmId!: pulumi.Output<string>;
    public /*out*/ readonly resourceServerId!: pulumi.Output<string>;
    public readonly rootUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly serviceAccountUserId!: pulumi.Output<string>;
    public readonly serviceAccountsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly standardFlowEnabled!: pulumi.Output<boolean | undefined>;
    public readonly validRedirectUris!: pulumi.Output<string[] | undefined>;
    public readonly webOrigins!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Client resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientArgs | ClientState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClientState | undefined;
            inputs["accessTokenLifespan"] = state ? state.accessTokenLifespan : undefined;
            inputs["accessType"] = state ? state.accessType : undefined;
            inputs["adminUrl"] = state ? state.adminUrl : undefined;
            inputs["authenticationFlowBindingOverrides"] = state ? state.authenticationFlowBindingOverrides : undefined;
            inputs["authorization"] = state ? state.authorization : undefined;
            inputs["baseUrl"] = state ? state.baseUrl : undefined;
            inputs["clientId"] = state ? state.clientId : undefined;
            inputs["clientSecret"] = state ? state.clientSecret : undefined;
            inputs["consentRequired"] = state ? state.consentRequired : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["directAccessGrantsEnabled"] = state ? state.directAccessGrantsEnabled : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["excludeSessionStateFromAuthResponse"] = state ? state.excludeSessionStateFromAuthResponse : undefined;
            inputs["fullScopeAllowed"] = state ? state.fullScopeAllowed : undefined;
            inputs["implicitFlowEnabled"] = state ? state.implicitFlowEnabled : undefined;
            inputs["loginTheme"] = state ? state.loginTheme : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pkceCodeChallengeMethod"] = state ? state.pkceCodeChallengeMethod : undefined;
            inputs["realmId"] = state ? state.realmId : undefined;
            inputs["resourceServerId"] = state ? state.resourceServerId : undefined;
            inputs["rootUrl"] = state ? state.rootUrl : undefined;
            inputs["serviceAccountUserId"] = state ? state.serviceAccountUserId : undefined;
            inputs["serviceAccountsEnabled"] = state ? state.serviceAccountsEnabled : undefined;
            inputs["standardFlowEnabled"] = state ? state.standardFlowEnabled : undefined;
            inputs["validRedirectUris"] = state ? state.validRedirectUris : undefined;
            inputs["webOrigins"] = state ? state.webOrigins : undefined;
        } else {
            const args = argsOrState as ClientArgs | undefined;
            if (!args || args.accessType === undefined) {
                throw new Error("Missing required property 'accessType'");
            }
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.realmId === undefined) {
                throw new Error("Missing required property 'realmId'");
            }
            inputs["accessTokenLifespan"] = args ? args.accessTokenLifespan : undefined;
            inputs["accessType"] = args ? args.accessType : undefined;
            inputs["adminUrl"] = args ? args.adminUrl : undefined;
            inputs["authenticationFlowBindingOverrides"] = args ? args.authenticationFlowBindingOverrides : undefined;
            inputs["authorization"] = args ? args.authorization : undefined;
            inputs["baseUrl"] = args ? args.baseUrl : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSecret"] = args ? args.clientSecret : undefined;
            inputs["consentRequired"] = args ? args.consentRequired : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["directAccessGrantsEnabled"] = args ? args.directAccessGrantsEnabled : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["excludeSessionStateFromAuthResponse"] = args ? args.excludeSessionStateFromAuthResponse : undefined;
            inputs["fullScopeAllowed"] = args ? args.fullScopeAllowed : undefined;
            inputs["implicitFlowEnabled"] = args ? args.implicitFlowEnabled : undefined;
            inputs["loginTheme"] = args ? args.loginTheme : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pkceCodeChallengeMethod"] = args ? args.pkceCodeChallengeMethod : undefined;
            inputs["realmId"] = args ? args.realmId : undefined;
            inputs["rootUrl"] = args ? args.rootUrl : undefined;
            inputs["serviceAccountsEnabled"] = args ? args.serviceAccountsEnabled : undefined;
            inputs["standardFlowEnabled"] = args ? args.standardFlowEnabled : undefined;
            inputs["validRedirectUris"] = args ? args.validRedirectUris : undefined;
            inputs["webOrigins"] = args ? args.webOrigins : undefined;
            inputs["resourceServerId"] = undefined /*out*/;
            inputs["serviceAccountUserId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Client.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Client resources.
 */
export interface ClientState {
    readonly accessTokenLifespan?: pulumi.Input<string>;
    readonly accessType?: pulumi.Input<string>;
    readonly adminUrl?: pulumi.Input<string>;
    readonly authenticationFlowBindingOverrides?: pulumi.Input<inputs.openid.ClientAuthenticationFlowBindingOverrides>;
    readonly authorization?: pulumi.Input<inputs.openid.ClientAuthorization>;
    readonly baseUrl?: pulumi.Input<string>;
    readonly clientId?: pulumi.Input<string>;
    readonly clientSecret?: pulumi.Input<string>;
    readonly consentRequired?: pulumi.Input<boolean>;
    readonly description?: pulumi.Input<string>;
    readonly directAccessGrantsEnabled?: pulumi.Input<boolean>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly excludeSessionStateFromAuthResponse?: pulumi.Input<boolean>;
    readonly fullScopeAllowed?: pulumi.Input<boolean>;
    readonly implicitFlowEnabled?: pulumi.Input<boolean>;
    readonly loginTheme?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly pkceCodeChallengeMethod?: pulumi.Input<string>;
    readonly realmId?: pulumi.Input<string>;
    readonly resourceServerId?: pulumi.Input<string>;
    readonly rootUrl?: pulumi.Input<string>;
    readonly serviceAccountUserId?: pulumi.Input<string>;
    readonly serviceAccountsEnabled?: pulumi.Input<boolean>;
    readonly standardFlowEnabled?: pulumi.Input<boolean>;
    readonly validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly webOrigins?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Client resource.
 */
export interface ClientArgs {
    readonly accessTokenLifespan?: pulumi.Input<string>;
    readonly accessType: pulumi.Input<string>;
    readonly adminUrl?: pulumi.Input<string>;
    readonly authenticationFlowBindingOverrides?: pulumi.Input<inputs.openid.ClientAuthenticationFlowBindingOverrides>;
    readonly authorization?: pulumi.Input<inputs.openid.ClientAuthorization>;
    readonly baseUrl?: pulumi.Input<string>;
    readonly clientId: pulumi.Input<string>;
    readonly clientSecret?: pulumi.Input<string>;
    readonly consentRequired?: pulumi.Input<boolean>;
    readonly description?: pulumi.Input<string>;
    readonly directAccessGrantsEnabled?: pulumi.Input<boolean>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly excludeSessionStateFromAuthResponse?: pulumi.Input<boolean>;
    readonly fullScopeAllowed?: pulumi.Input<boolean>;
    readonly implicitFlowEnabled?: pulumi.Input<boolean>;
    readonly loginTheme?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly pkceCodeChallengeMethod?: pulumi.Input<string>;
    readonly realmId: pulumi.Input<string>;
    readonly rootUrl?: pulumi.Input<string>;
    readonly serviceAccountsEnabled?: pulumi.Input<boolean>;
    readonly standardFlowEnabled?: pulumi.Input<boolean>;
    readonly validRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    readonly webOrigins?: pulumi.Input<pulumi.Input<string>[]>;
}
