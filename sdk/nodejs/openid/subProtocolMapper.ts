// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Allows for creating and managing sub protocol mappers within Keycloak.
 *
 * Sub protocol mappers add the Subject (sub) claim to tokens. The sub claim contains the user ID and is a standard claim in OpenID Connect tokens.
 *
 * Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between
 * multiple different clients.
 *
 * ## Example Usage
 *
 * ### Client)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const openidClient = new keycloak.openid.Client("openid_client", {
 *     realmId: realm.id,
 *     clientId: "client",
 *     name: "client",
 *     enabled: true,
 *     accessType: "CONFIDENTIAL",
 *     validRedirectUris: ["http://localhost:8080/openid-callback"],
 * });
 * const subMapper = new keycloak.openid.SubProtocolMapper("sub_mapper", {
 *     realmId: realm.id,
 *     clientId: openidClient.id,
 *     name: "sub-mapper",
 * });
 * ```
 *
 * ### Client Scope)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const clientScope = new keycloak.openid.ClientScope("client_scope", {
 *     realmId: realm.id,
 *     name: "client-scope",
 * });
 * const subMapper = new keycloak.openid.SubProtocolMapper("sub_mapper", {
 *     realmId: realm.id,
 *     clientScopeId: clientScope.id,
 *     name: "sub-mapper",
 * });
 * ```
 *
 * ## Import
 *
 * Protocol mappers can be imported using one of the following formats:
 *
 * - Client: `{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}`
 *
 * - Client Scope: `{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}`
 *
 * Example:
 *
 * bash
 *
 * ```sh
 * $ pulumi import keycloak:openid/subProtocolMapper:SubProtocolMapper sub_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4
 * ```
 *
 * ```sh
 * $ pulumi import keycloak:openid/subProtocolMapper:SubProtocolMapper sub_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4
 * ```
 */
export class SubProtocolMapper extends pulumi.CustomResource {
    /**
     * Get an existing SubProtocolMapper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubProtocolMapperState, opts?: pulumi.CustomResourceOptions): SubProtocolMapper {
        return new SubProtocolMapper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/subProtocolMapper:SubProtocolMapper';

    /**
     * Returns true if the given object is an instance of SubProtocolMapper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubProtocolMapper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubProtocolMapper.__pulumiType;
    }

    /**
     * Indicates if the sub claim should be added to the access token. Defaults to `true`.
     */
    declare public readonly addToAccessToken: pulumi.Output<boolean | undefined>;
    /**
     * Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
     */
    declare public readonly addToTokenIntrospection: pulumi.Output<boolean | undefined>;
    /**
     * The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     */
    declare public readonly clientId: pulumi.Output<string | undefined>;
    /**
     * The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     */
    declare public readonly clientScopeId: pulumi.Output<string | undefined>;
    /**
     * The display name of this protocol mapper in the GUI.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The realm this protocol mapper exists within.
     */
    declare public readonly realmId: pulumi.Output<string>;

    /**
     * Create a SubProtocolMapper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubProtocolMapperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubProtocolMapperArgs | SubProtocolMapperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubProtocolMapperState | undefined;
            resourceInputs["addToAccessToken"] = state?.addToAccessToken;
            resourceInputs["addToTokenIntrospection"] = state?.addToTokenIntrospection;
            resourceInputs["clientId"] = state?.clientId;
            resourceInputs["clientScopeId"] = state?.clientScopeId;
            resourceInputs["name"] = state?.name;
            resourceInputs["realmId"] = state?.realmId;
        } else {
            const args = argsOrState as SubProtocolMapperArgs | undefined;
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["addToAccessToken"] = args?.addToAccessToken;
            resourceInputs["addToTokenIntrospection"] = args?.addToTokenIntrospection;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientScopeId"] = args?.clientScopeId;
            resourceInputs["name"] = args?.name;
            resourceInputs["realmId"] = args?.realmId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubProtocolMapper.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubProtocolMapper resources.
 */
export interface SubProtocolMapperState {
    /**
     * Indicates if the sub claim should be added to the access token. Defaults to `true`.
     */
    addToAccessToken?: pulumi.Input<boolean>;
    /**
     * Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
     */
    addToTokenIntrospection?: pulumi.Input<boolean>;
    /**
     * The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientScopeId?: pulumi.Input<string>;
    /**
     * The display name of this protocol mapper in the GUI.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this protocol mapper exists within.
     */
    realmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubProtocolMapper resource.
 */
export interface SubProtocolMapperArgs {
    /**
     * Indicates if the sub claim should be added to the access token. Defaults to `true`.
     */
    addToAccessToken?: pulumi.Input<boolean>;
    /**
     * Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
     */
    addToTokenIntrospection?: pulumi.Input<boolean>;
    /**
     * The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
     */
    clientScopeId?: pulumi.Input<string>;
    /**
     * The display name of this protocol mapper in the GUI.
     */
    name?: pulumi.Input<string>;
    /**
     * The realm this protocol mapper exists within.
     */
    realmId: pulumi.Input<string>;
}
