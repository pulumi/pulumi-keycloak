// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This data source can be used to fetch properties of a Keycloak OpenID client scope for usage with other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const offlineAccess = keycloak.openid.getClientScope({
 *     realmId: "my-realm",
 *     name: "offline_access",
 * });
 * // use the data source
 * const audienceMapper = new keycloak.openid.AudienceProtocolMapper("audience_mapper", {
 *     realmId: offlineAccess.then(offlineAccess => offlineAccess.realmId),
 *     clientScopeId: offlineAccess.then(offlineAccess => offlineAccess.id),
 *     name: "audience-mapper",
 *     includedCustomAudience: "foo",
 * });
 * ```
 */
export function getClientScope(args: GetClientScopeArgs, opts?: pulumi.InvokeOptions): Promise<GetClientScopeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keycloak:openid/getClientScope:getClientScope", {
        "name": args.name,
        "realmId": args.realmId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClientScope.
 */
export interface GetClientScopeArgs {
    /**
     * The name of the client scope.
     */
    name: string;
    /**
     * The realm id.
     */
    realmId: string;
}

/**
 * A collection of values returned by getClientScope.
 */
export interface GetClientScopeResult {
    readonly consentScreenText: string;
    readonly description: string;
    readonly guiOrder: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeInTokenScope: boolean;
    readonly name: string;
    readonly realmId: string;
}
/**
 * This data source can be used to fetch properties of a Keycloak OpenID client scope for usage with other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const offlineAccess = keycloak.openid.getClientScope({
 *     realmId: "my-realm",
 *     name: "offline_access",
 * });
 * // use the data source
 * const audienceMapper = new keycloak.openid.AudienceProtocolMapper("audience_mapper", {
 *     realmId: offlineAccess.then(offlineAccess => offlineAccess.realmId),
 *     clientScopeId: offlineAccess.then(offlineAccess => offlineAccess.id),
 *     name: "audience-mapper",
 *     includedCustomAudience: "foo",
 * });
 * ```
 */
export function getClientScopeOutput(args: GetClientScopeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClientScopeResult> {
    return pulumi.output(args).apply((a: any) => getClientScope(a, opts))
}

/**
 * A collection of arguments for invoking getClientScope.
 */
export interface GetClientScopeOutputArgs {
    /**
     * The name of the client scope.
     */
    name: pulumi.Input<string>;
    /**
     * The realm id.
     */
    realmId: pulumi.Input<string>;
}
