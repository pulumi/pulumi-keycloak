// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source can be used to fetch information about the service account user that is associated with an OpenID client
 * that has service accounts enabled.
 *
 * ## Example Usage
 *
 * In this example, we'll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user
 * that represents the service account. We'll use this data source to grab this user's ID in order to assign some roles to this
 * user, using the `keycloak.UserRoles` resource.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const client = new keycloak.openid.Client("client", {
 *     realmId: realm.id,
 *     clientId: "client",
 *     name: "client",
 *     accessType: "CONFIDENTIAL",
 *     serviceAccountsEnabled: true,
 * });
 * const serviceAccountUser = keycloak.openid.getClientServiceAccountUserOutput({
 *     realmId: realm.id,
 *     clientId: client.id,
 * });
 * const offlineAccess = keycloak.getRoleOutput({
 *     realmId: realm.id,
 *     name: "offline_access",
 * });
 * const serviceAccountUserRoles = new keycloak.UserRoles("service_account_user_roles", {
 *     realmId: realm.id,
 *     userId: serviceAccountUser.apply(serviceAccountUser => serviceAccountUser.id),
 *     roleIds: [offlineAccess.apply(offlineAccess => offlineAccess.id)],
 * });
 * ```
 */
export function getClientServiceAccountUser(args: GetClientServiceAccountUserArgs, opts?: pulumi.InvokeOptions): Promise<GetClientServiceAccountUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keycloak:openid/getClientServiceAccountUser:getClientServiceAccountUser", {
        "clientId": args.clientId,
        "realmId": args.realmId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserArgs {
    /**
     * The ID of the OpenID client with service accounts enabled.
     */
    clientId: string;
    /**
     * The realm that the OpenID client exists within.
     */
    realmId: string;
}

/**
 * A collection of values returned by getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserResult {
    /**
     * (Computed) The service account user's attributes.
     */
    readonly attributes: {[key: string]: string};
    readonly clientId: string;
    /**
     * (Computed) The service account user's email.
     */
    readonly email: string;
    readonly emailVerified: boolean;
    /**
     * (Computed) Whether the service account user is enabled.
     */
    readonly enabled: boolean;
    /**
     * (Computed) This attribute exists in order to adhere to the spec of a Keycloak user, but a service account user will never have a federated identity, so this will always be `null`.
     */
    readonly federatedIdentities: outputs.openid.GetClientServiceAccountUserFederatedIdentity[];
    /**
     * (Computed) The service account user's first name.
     */
    readonly firstName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Computed) The service account user's last name.
     */
    readonly lastName: string;
    readonly realmId: string;
    readonly requiredActions: string[];
    /**
     * (Computed) The service account user's username.
     */
    readonly username: string;
}
/**
 * This data source can be used to fetch information about the service account user that is associated with an OpenID client
 * that has service accounts enabled.
 *
 * ## Example Usage
 *
 * In this example, we'll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user
 * that represents the service account. We'll use this data source to grab this user's ID in order to assign some roles to this
 * user, using the `keycloak.UserRoles` resource.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const client = new keycloak.openid.Client("client", {
 *     realmId: realm.id,
 *     clientId: "client",
 *     name: "client",
 *     accessType: "CONFIDENTIAL",
 *     serviceAccountsEnabled: true,
 * });
 * const serviceAccountUser = keycloak.openid.getClientServiceAccountUserOutput({
 *     realmId: realm.id,
 *     clientId: client.id,
 * });
 * const offlineAccess = keycloak.getRoleOutput({
 *     realmId: realm.id,
 *     name: "offline_access",
 * });
 * const serviceAccountUserRoles = new keycloak.UserRoles("service_account_user_roles", {
 *     realmId: realm.id,
 *     userId: serviceAccountUser.apply(serviceAccountUser => serviceAccountUser.id),
 *     roleIds: [offlineAccess.apply(offlineAccess => offlineAccess.id)],
 * });
 * ```
 */
export function getClientServiceAccountUserOutput(args: GetClientServiceAccountUserOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClientServiceAccountUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("keycloak:openid/getClientServiceAccountUser:getClientServiceAccountUser", {
        "clientId": args.clientId,
        "realmId": args.realmId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserOutputArgs {
    /**
     * The ID of the OpenID client with service accounts enabled.
     */
    clientId: pulumi.Input<string>;
    /**
     * The realm that the OpenID client exists within.
     */
    realmId: pulumi.Input<string>;
}
