// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * This data source can be used to fetch information about the service account user that is associated with an OpenID client
 * that has service accounts enabled.
 *
 * ## Example Usage
 *
 * In this example, we'll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user
 * that represents the service account. We'll use this data source to grab this user's ID in order to assign some roles to this
 * user, using the `keycloak.UserRoles` resource.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as keycloak from "@pulumi/keycloak";
 *
 * const realm = new keycloak.Realm("realm", {
 *     realm: "my-realm",
 *     enabled: true,
 * });
 * const client = new keycloak.openid.Client("client", {
 *     realmId: realm.id,
 *     clientId: "client",
 *     accessType: "CONFIDENTIAL",
 *     serviceAccountsEnabled: true,
 * });
 * const serviceAccountUser = pulumi.all([realm.id, client.id]).apply(([realmId, clientId]) => keycloak.openid.getClientServiceAccountUser({
 *     realmId: realmId,
 *     clientId: clientId,
 * }));
 * const offlineAccess = realm.id.apply(id => keycloak.getRole({
 *     realmId: id,
 *     name: "offline_access",
 * }));
 * const serviceAccountUserRoles = new keycloak.UserRoles("serviceAccountUserRoles", {
 *     realmId: realm.id,
 *     userId: serviceAccountUser.id,
 *     roleIds: [offlineAccess.id],
 * });
 * ```
 */
export function getClientServiceAccountUser(args: GetClientServiceAccountUserArgs, opts?: pulumi.InvokeOptions): Promise<GetClientServiceAccountUserResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("keycloak:openid/getClientServiceAccountUser:getClientServiceAccountUser", {
        "clientId": args.clientId,
        "realmId": args.realmId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserArgs {
    /**
     * The ID of the OpenID client with service accounts enabled.
     */
    readonly clientId: string;
    /**
     * The realm that the OpenID client exists within.
     */
    readonly realmId: string;
}

/**
 * A collection of values returned by getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserResult {
    readonly attributes: {[key: string]: any};
    readonly clientId: string;
    readonly email: string;
    readonly emailVerified: boolean;
    readonly enabled: boolean;
    readonly federatedIdentities: outputs.openid.GetClientServiceAccountUserFederatedIdentity[];
    readonly firstName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lastName: string;
    readonly realmId: string;
    readonly username: string;
}
