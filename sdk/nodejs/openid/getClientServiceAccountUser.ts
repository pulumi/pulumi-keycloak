// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source can be used to fetch information about the service account user that is associated with an OpenID client
 * that has service accounts enabled.
 */
export function getClientServiceAccountUser(args: GetClientServiceAccountUserArgs, opts?: pulumi.InvokeOptions): Promise<GetClientServiceAccountUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keycloak:openid/getClientServiceAccountUser:getClientServiceAccountUser", {
        "clientId": args.clientId,
        "realmId": args.realmId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserArgs {
    /**
     * The ID of the OpenID client with service accounts enabled.
     */
    clientId: string;
    /**
     * The realm that the OpenID client exists within.
     */
    realmId: string;
}

/**
 * A collection of values returned by getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserResult {
    readonly attributes: {[key: string]: any};
    readonly clientId: string;
    readonly email: string;
    readonly emailVerified: boolean;
    readonly enabled: boolean;
    readonly federatedIdentities: outputs.openid.GetClientServiceAccountUserFederatedIdentity[];
    readonly firstName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lastName: string;
    readonly realmId: string;
    readonly username: string;
}
/**
 * This data source can be used to fetch information about the service account user that is associated with an OpenID client
 * that has service accounts enabled.
 */
export function getClientServiceAccountUserOutput(args: GetClientServiceAccountUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClientServiceAccountUserResult> {
    return pulumi.output(args).apply((a: any) => getClientServiceAccountUser(a, opts))
}

/**
 * A collection of arguments for invoking getClientServiceAccountUser.
 */
export interface GetClientServiceAccountUserOutputArgs {
    /**
     * The ID of the OpenID client with service accounts enabled.
     */
    clientId: pulumi.Input<string>;
    /**
     * The realm that the OpenID client exists within.
     */
    realmId: pulumi.Input<string>;
}
