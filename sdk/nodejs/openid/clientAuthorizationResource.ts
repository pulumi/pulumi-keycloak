// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ClientAuthorizationResource extends pulumi.CustomResource {
    /**
     * Get an existing ClientAuthorizationResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientAuthorizationResourceState, opts?: pulumi.CustomResourceOptions): ClientAuthorizationResource {
        return new ClientAuthorizationResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:openid/clientAuthorizationResource:ClientAuthorizationResource';

    /**
     * Returns true if the given object is an instance of ClientAuthorizationResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientAuthorizationResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientAuthorizationResource.__pulumiType;
    }

    declare public readonly attributes: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly displayName: pulumi.Output<string | undefined>;
    declare public readonly iconUri: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly ownerManagedAccess: pulumi.Output<boolean | undefined>;
    declare public readonly realmId: pulumi.Output<string>;
    declare public readonly resourceServerId: pulumi.Output<string>;
    declare public readonly scopes: pulumi.Output<string[] | undefined>;
    declare public readonly type: pulumi.Output<string | undefined>;
    declare public readonly uris: pulumi.Output<string[] | undefined>;

    /**
     * Create a ClientAuthorizationResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientAuthorizationResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientAuthorizationResourceArgs | ClientAuthorizationResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientAuthorizationResourceState | undefined;
            resourceInputs["attributes"] = state?.attributes;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["iconUri"] = state?.iconUri;
            resourceInputs["name"] = state?.name;
            resourceInputs["ownerManagedAccess"] = state?.ownerManagedAccess;
            resourceInputs["realmId"] = state?.realmId;
            resourceInputs["resourceServerId"] = state?.resourceServerId;
            resourceInputs["scopes"] = state?.scopes;
            resourceInputs["type"] = state?.type;
            resourceInputs["uris"] = state?.uris;
        } else {
            const args = argsOrState as ClientAuthorizationResourceArgs | undefined;
            if (args?.realmId === undefined && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if (args?.resourceServerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceServerId'");
            }
            resourceInputs["attributes"] = args?.attributes;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["iconUri"] = args?.iconUri;
            resourceInputs["name"] = args?.name;
            resourceInputs["ownerManagedAccess"] = args?.ownerManagedAccess;
            resourceInputs["realmId"] = args?.realmId;
            resourceInputs["resourceServerId"] = args?.resourceServerId;
            resourceInputs["scopes"] = args?.scopes;
            resourceInputs["type"] = args?.type;
            resourceInputs["uris"] = args?.uris;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClientAuthorizationResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientAuthorizationResource resources.
 */
export interface ClientAuthorizationResourceState {
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    iconUri?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerManagedAccess?: pulumi.Input<boolean>;
    realmId?: pulumi.Input<string>;
    resourceServerId?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    uris?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ClientAuthorizationResource resource.
 */
export interface ClientAuthorizationResourceArgs {
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    iconUri?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerManagedAccess?: pulumi.Input<boolean>;
    realmId: pulumi.Input<string>;
    resourceServerId: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    uris?: pulumi.Input<pulumi.Input<string>[]>;
}
