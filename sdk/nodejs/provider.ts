// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the keycloak package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'keycloak';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    declare public readonly accessToken: pulumi.Output<string | undefined>;
    /**
     * The admin URL of the Keycloak instance if different from the main URL, before `/auth`
     */
    declare public readonly adminUrl: pulumi.Output<string | undefined>;
    declare public readonly basePath: pulumi.Output<string | undefined>;
    declare public readonly clientId: pulumi.Output<string | undefined>;
    declare public readonly clientSecret: pulumi.Output<string | undefined>;
    /**
     * The algorithm used to sign the JWT when client-jwt is used. Defaults to RS256.
     */
    declare public readonly jwtSigningAlg: pulumi.Output<string | undefined>;
    /**
     * The PEM-formatted private key used to sign the JWT when client-jwt is used.
     */
    declare public readonly jwtSigningKey: pulumi.Output<string | undefined>;
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly realm: pulumi.Output<string | undefined>;
    /**
     * Allows x509 calls using an unknown CA certificate (for development purposes)
     */
    declare public readonly rootCaCertificate: pulumi.Output<string | undefined>;
    /**
     * TLS client certificate as PEM string for mutual authentication
     */
    declare public readonly tlsClientCertificate: pulumi.Output<string | undefined>;
    /**
     * TLS client private key as PEM string for mutual authentication
     */
    declare public readonly tlsClientPrivateKey: pulumi.Output<string | undefined>;
    /**
     * The base URL of the Keycloak instance, before `/auth`
     */
    declare public readonly url: pulumi.Output<string | undefined>;
    declare public readonly username: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["accessToken"] = args?.accessToken;
            resourceInputs["additionalHeaders"] = pulumi.output(args?.additionalHeaders).apply(JSON.stringify);
            resourceInputs["adminUrl"] = args?.adminUrl;
            resourceInputs["basePath"] = args?.basePath;
            resourceInputs["clientId"] = args?.clientId;
            resourceInputs["clientSecret"] = args?.clientSecret;
            resourceInputs["clientTimeout"] = pulumi.output((args?.clientTimeout) ?? (utilities.getEnvNumber("KEYCLOAK_CLIENT_TIMEOUT") || 5)).apply(JSON.stringify);
            resourceInputs["initialLogin"] = pulumi.output(args?.initialLogin).apply(JSON.stringify);
            resourceInputs["jwtSigningAlg"] = args?.jwtSigningAlg;
            resourceInputs["jwtSigningKey"] = args?.jwtSigningKey ? pulumi.secret(args.jwtSigningKey) : undefined;
            resourceInputs["password"] = args?.password;
            resourceInputs["realm"] = args?.realm;
            resourceInputs["redHatSso"] = pulumi.output(args?.redHatSso).apply(JSON.stringify);
            resourceInputs["rootCaCertificate"] = args?.rootCaCertificate;
            resourceInputs["tlsClientCertificate"] = args?.tlsClientCertificate;
            resourceInputs["tlsClientPrivateKey"] = args?.tlsClientPrivateKey;
            resourceInputs["tlsInsecureSkipVerify"] = pulumi.output(args?.tlsInsecureSkipVerify).apply(JSON.stringify);
            resourceInputs["url"] = args?.url;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["jwtSigningKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }

    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult> {
        return pulumi.runtime.call("pulumi:providers:keycloak/terraformConfig", {
            "__self__": this,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    accessToken?: pulumi.Input<string>;
    additionalHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The admin URL of the Keycloak instance if different from the main URL, before `/auth`
     */
    adminUrl?: pulumi.Input<string>;
    basePath?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    /**
     * Timeout (in seconds) of the Keycloak client
     */
    clientTimeout?: pulumi.Input<number>;
    /**
     * Whether or not to login to Keycloak instance on provider initialization
     */
    initialLogin?: pulumi.Input<boolean>;
    /**
     * The algorithm used to sign the JWT when client-jwt is used. Defaults to RS256.
     */
    jwtSigningAlg?: pulumi.Input<string>;
    /**
     * The PEM-formatted private key used to sign the JWT when client-jwt is used.
     */
    jwtSigningKey?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    /**
     * When true, the provider will treat the Keycloak instance as a Red Hat SSO server, specifically when parsing the version returned from the /serverinfo API endpoint.
     */
    redHatSso?: pulumi.Input<boolean>;
    /**
     * Allows x509 calls using an unknown CA certificate (for development purposes)
     */
    rootCaCertificate?: pulumi.Input<string>;
    /**
     * TLS client certificate as PEM string for mutual authentication
     */
    tlsClientCertificate?: pulumi.Input<string>;
    /**
     * TLS client private key as PEM string for mutual authentication
     */
    tlsClientPrivateKey?: pulumi.Input<string>;
    /**
     * Allows ignoring insecure certificates when set to true. Defaults to false. Disabling security check is dangerous and should be avoided.
     */
    tlsInsecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * The base URL of the Keycloak instance, before `/auth`
     */
    url?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    export interface TerraformConfigResult {
        readonly result: {[key: string]: any};
    }

}
