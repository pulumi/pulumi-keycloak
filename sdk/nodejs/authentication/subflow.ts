// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Subflow extends pulumi.CustomResource {
    /**
     * Get an existing Subflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubflowState, opts?: pulumi.CustomResourceOptions): Subflow {
        return new Subflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keycloak:authentication/subflow:Subflow';

    /**
     * Returns true if the given object is an instance of Subflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subflow.__pulumiType;
    }

    public readonly alias!: pulumi.Output<string>;
    /**
     * Might be needed to be set with certain custom subflow with specific authenticator, in general this will remain empty
     */
    public readonly authenticator!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly parentFlowAlias!: pulumi.Output<string>;
    public readonly providerId!: pulumi.Output<string | undefined>;
    public readonly realmId!: pulumi.Output<string>;
    public readonly requirement!: pulumi.Output<string | undefined>;

    /**
     * Create a Subflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubflowArgs | SubflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubflowState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["authenticator"] = state ? state.authenticator : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["parentFlowAlias"] = state ? state.parentFlowAlias : undefined;
            resourceInputs["providerId"] = state ? state.providerId : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["requirement"] = state ? state.requirement : undefined;
        } else {
            const args = argsOrState as SubflowArgs | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.parentFlowAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentFlowAlias'");
            }
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["authenticator"] = args ? args.authenticator : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["parentFlowAlias"] = args ? args.parentFlowAlias : undefined;
            resourceInputs["providerId"] = args ? args.providerId : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["requirement"] = args ? args.requirement : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subflow resources.
 */
export interface SubflowState {
    alias?: pulumi.Input<string>;
    /**
     * Might be needed to be set with certain custom subflow with specific authenticator, in general this will remain empty
     */
    authenticator?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    parentFlowAlias?: pulumi.Input<string>;
    providerId?: pulumi.Input<string>;
    realmId?: pulumi.Input<string>;
    requirement?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subflow resource.
 */
export interface SubflowArgs {
    alias: pulumi.Input<string>;
    /**
     * Might be needed to be set with certain custom subflow with specific authenticator, in general this will remain empty
     */
    authenticator?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    parentFlowAlias: pulumi.Input<string>;
    providerId?: pulumi.Input<string>;
    realmId: pulumi.Input<string>;
    requirement?: pulumi.Input<string>;
}
