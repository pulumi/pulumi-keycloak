# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClientDefaultScopeArgs', 'ClientDefaultScope']

@pulumi.input_type
class ClientDefaultScopeArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 default_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 realm_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ClientDefaultScope resource.
        :param pulumi.Input[str] client_id: The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_scopes: An array of client scope names to attach to this client.
        :param pulumi.Input[str] realm_id: The realm this client and scopes exists in.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "default_scopes", default_scopes)
        pulumi.set(__self__, "realm_id", realm_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="defaultScopes")
    def default_scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        An array of client scope names to attach to this client.
        """
        return pulumi.get(self, "default_scopes")

    @default_scopes.setter
    def default_scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "default_scopes", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Input[str]:
        """
        The realm this client and scopes exists in.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm_id", value)


@pulumi.input_type
class _ClientDefaultScopeState:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 default_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClientDefaultScope resources.
        :param pulumi.Input[str] client_id: The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_scopes: An array of client scope names to attach to this client.
        :param pulumi.Input[str] realm_id: The realm this client and scopes exists in.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if default_scopes is not None:
            pulumi.set(__self__, "default_scopes", default_scopes)
        if realm_id is not None:
            pulumi.set(__self__, "realm_id", realm_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="defaultScopes")
    def default_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of client scope names to attach to this client.
        """
        return pulumi.get(self, "default_scopes")

    @default_scopes.setter
    def default_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_scopes", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The realm this client and scopes exists in.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm_id", value)


class ClientDefaultScope(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 default_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        saml_client = keycloak.saml.Client("samlClient",
            realm_id=realm.id,
            client_id="saml-client",
            sign_documents=False,
            sign_assertions=True,
            include_authn_statement=True,
            signing_certificate=(lambda path: open(path).read())("saml-cert.pem"),
            signing_private_key=(lambda path: open(path).read())("saml-key.pem"))
        client_scope = keycloak.saml.ClientScope("clientScope", realm_id=realm.id)
        client_default_scopes = keycloak.saml.ClientDefaultScope("clientDefaultScopes",
            realm_id=realm.id,
            client_id=keycloak_saml_client["client"]["id"],
            default_scopes=[
                "role_list",
                client_scope.name,
            ])
        ```

        ## Import

        This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_scopes: An array of client scope names to attach to this client.
        :param pulumi.Input[str] realm_id: The realm this client and scopes exists in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClientDefaultScopeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        saml_client = keycloak.saml.Client("samlClient",
            realm_id=realm.id,
            client_id="saml-client",
            sign_documents=False,
            sign_assertions=True,
            include_authn_statement=True,
            signing_certificate=(lambda path: open(path).read())("saml-cert.pem"),
            signing_private_key=(lambda path: open(path).read())("saml-key.pem"))
        client_scope = keycloak.saml.ClientScope("clientScope", realm_id=realm.id)
        client_default_scopes = keycloak.saml.ClientDefaultScope("clientDefaultScopes",
            realm_id=realm.id,
            client_id=keycloak_saml_client["client"]["id"],
            default_scopes=[
                "role_list",
                client_scope.name,
            ])
        ```

        ## Import

        This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.

        :param str resource_name: The name of the resource.
        :param ClientDefaultScopeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClientDefaultScopeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 default_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClientDefaultScopeArgs.__new__(ClientDefaultScopeArgs)

            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if default_scopes is None and not opts.urn:
                raise TypeError("Missing required property 'default_scopes'")
            __props__.__dict__["default_scopes"] = default_scopes
            if realm_id is None and not opts.urn:
                raise TypeError("Missing required property 'realm_id'")
            __props__.__dict__["realm_id"] = realm_id
        super(ClientDefaultScope, __self__).__init__(
            'keycloak:saml/clientDefaultScope:ClientDefaultScope',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            default_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            realm_id: Optional[pulumi.Input[str]] = None) -> 'ClientDefaultScope':
        """
        Get an existing ClientDefaultScope resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_scopes: An array of client scope names to attach to this client.
        :param pulumi.Input[str] realm_id: The realm this client and scopes exists in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClientDefaultScopeState.__new__(_ClientDefaultScopeState)

        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["default_scopes"] = default_scopes
        __props__.__dict__["realm_id"] = realm_id
        return ClientDefaultScope(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="defaultScopes")
    def default_scopes(self) -> pulumi.Output[Sequence[str]]:
        """
        An array of client scope names to attach to this client.
        """
        return pulumi.get(self, "default_scopes")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Output[str]:
        """
        The realm this client and scopes exists in.
        """
        return pulumi.get(self, "realm_id")

