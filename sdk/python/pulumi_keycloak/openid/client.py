# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClientArgs', 'Client']

@pulumi.input_type
class ClientArgs:
    def __init__(__self__, *,
                 access_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 realm_id: pulumi.Input[str],
                 access_token_lifespan: Optional[pulumi.Input[str]] = None,
                 admin_url: Optional[pulumi.Input[str]] = None,
                 authentication_flow_binding_overrides: Optional[pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs']] = None,
                 authorization: Optional[pulumi.Input['ClientAuthorizationArgs']] = None,
                 backchannel_logout_revoke_offline_sessions: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_session_required: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 client_authenticator_type: Optional[pulumi.Input[str]] = None,
                 client_offline_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_offline_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 consent_screen_text: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direct_access_grants_enabled: Optional[pulumi.Input[bool]] = None,
                 display_on_consent_screen: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_session_state_from_auth_response: Optional[pulumi.Input[bool]] = None,
                 extra_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frontchannel_logout_enabled: Optional[pulumi.Input[bool]] = None,
                 frontchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 full_scope_allowed: Optional[pulumi.Input[bool]] = None,
                 implicit_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 import_: Optional[pulumi.Input[bool]] = None,
                 login_theme: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_device_authorization_grant_enabled: Optional[pulumi.Input[bool]] = None,
                 oauth2_device_code_lifespan: Optional[pulumi.Input[str]] = None,
                 oauth2_device_polling_interval: Optional[pulumi.Input[str]] = None,
                 pkce_code_challenge_method: Optional[pulumi.Input[str]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 service_accounts_enabled: Optional[pulumi.Input[bool]] = None,
                 standard_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens_client_credentials: Optional[pulumi.Input[bool]] = None,
                 valid_post_logout_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 valid_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Client resource.
        :param pulumi.Input[str] access_type: Specifies the type of client, which can be one of the following:
        :param pulumi.Input[str] client_id: The Client ID for this client, referenced in the URI during authentication and in issued tokens.
        :param pulumi.Input[str] realm_id: The realm this client is attached to.
        :param pulumi.Input[str] access_token_lifespan: The amount of time in seconds before an access token expires. This will override the default for the realm.
        :param pulumi.Input[str] admin_url: URL to the admin interface of the client.
        :param pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs'] authentication_flow_binding_overrides: Override realm authentication flow bindings
        :param pulumi.Input['ClientAuthorizationArgs'] authorization: When this block is present, fine-grained authorization will be enabled for this client. The client's `access_type` must be `CONFIDENTIAL`, and `service_accounts_enabled` must be `true`. This block has the following arguments:
        :param pulumi.Input[bool] backchannel_logout_revoke_offline_sessions: Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
        :param pulumi.Input[bool] backchannel_logout_session_required: When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
        :param pulumi.Input[str] backchannel_logout_url: The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
        :param pulumi.Input[str] base_url: Default URL to use when the auth server needs to redirect or link back to the client.
        :param pulumi.Input[str] client_authenticator_type: Defaults to `client-secret` The authenticator type for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
               - `client-secret` (Default) Use client id and client secret to authenticate client.
               - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
               - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extra_config` with `attributes.x509.subjectdn = <subjectDn>`
               - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        :param pulumi.Input[str] client_offline_session_idle_timeout: Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
        :param pulumi.Input[str] client_offline_session_max_lifespan: Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
        :param pulumi.Input[str] client_secret: The secret for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
        :param pulumi.Input[str] client_session_idle_timeout: Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
        :param pulumi.Input[str] client_session_max_lifespan: Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
        :param pulumi.Input[bool] consent_required: When `true`, users have to consent to client access. Defaults to `false`.
        :param pulumi.Input[str] consent_screen_text: The text to display on the consent screen about permissions specific to this client. This is applicable only when `display_on_consent_screen` is `true`.
        :param pulumi.Input[str] description: The description of this client in the GUI.
        :param pulumi.Input[bool] direct_access_grants_enabled: When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] display_on_consent_screen: When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consent_required` is `true`.
        :param pulumi.Input[bool] enabled: When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
        :param pulumi.Input[bool] exclude_session_state_from_auth_response: When `true`, the parameter `session_state` will not be included in OpenID Connect Authentication Response.
        :param pulumi.Input[bool] frontchannel_logout_enabled: When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannel_logout_url`. Defaults to `false`.
        :param pulumi.Input[str] frontchannel_logout_url: The frontchannel logout url. This is applicable only when `frontchannel_logout_enabled` is `true`.
        :param pulumi.Input[bool] full_scope_allowed: Allow to include all roles mappings in the access token.
        :param pulumi.Input[bool] implicit_flow_enabled: When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] import_: When `true`, the client with the specified `client_id` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
        :param pulumi.Input[str] login_theme: The client login theme. This will override the default theme for the realm.
        :param pulumi.Input[str] name: The display name of this client in the GUI.
        :param pulumi.Input[bool] oauth2_device_authorization_grant_enabled: Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
        :param pulumi.Input[str] oauth2_device_code_lifespan: The maximum amount of time a client has to finish the device code flow before it expires.
        :param pulumi.Input[str] oauth2_device_polling_interval: The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
        :param pulumi.Input[str] pkce_code_challenge_method: The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
        :param pulumi.Input[str] root_url: When specified, this URL is prepended to any relative URLs found within `valid_redirect_uris`, `web_origins`, and `admin_url`. NOTE: Due to limitations in the Keycloak API, when the `root_url` attribute is used, the `valid_redirect_uris`, `web_origins`, and `admin_url` attributes will be required.
        :param pulumi.Input[bool] service_accounts_enabled: When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] standard_flow_enabled: When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] use_refresh_tokens: If this is `true`, a refresh_token will be created and added to the token response. If this is `false` then no refresh_token will be generated.  Defaults to `true`.
        :param pulumi.Input[bool] use_refresh_tokens_client_credentials: If this is `true`, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is `false` then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_post_logout_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful logout.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
               wildcards in the form of an asterisk can be used here. This attribute must be set if either `standard_flow_enabled` or `implicit_flow_enabled`
               is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_origins: A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "realm_id", realm_id)
        if access_token_lifespan is not None:
            pulumi.set(__self__, "access_token_lifespan", access_token_lifespan)
        if admin_url is not None:
            pulumi.set(__self__, "admin_url", admin_url)
        if authentication_flow_binding_overrides is not None:
            pulumi.set(__self__, "authentication_flow_binding_overrides", authentication_flow_binding_overrides)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if backchannel_logout_revoke_offline_sessions is not None:
            pulumi.set(__self__, "backchannel_logout_revoke_offline_sessions", backchannel_logout_revoke_offline_sessions)
        if backchannel_logout_session_required is not None:
            pulumi.set(__self__, "backchannel_logout_session_required", backchannel_logout_session_required)
        if backchannel_logout_url is not None:
            pulumi.set(__self__, "backchannel_logout_url", backchannel_logout_url)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if client_authenticator_type is not None:
            pulumi.set(__self__, "client_authenticator_type", client_authenticator_type)
        if client_offline_session_idle_timeout is not None:
            pulumi.set(__self__, "client_offline_session_idle_timeout", client_offline_session_idle_timeout)
        if client_offline_session_max_lifespan is not None:
            pulumi.set(__self__, "client_offline_session_max_lifespan", client_offline_session_max_lifespan)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_session_idle_timeout is not None:
            pulumi.set(__self__, "client_session_idle_timeout", client_session_idle_timeout)
        if client_session_max_lifespan is not None:
            pulumi.set(__self__, "client_session_max_lifespan", client_session_max_lifespan)
        if consent_required is not None:
            pulumi.set(__self__, "consent_required", consent_required)
        if consent_screen_text is not None:
            pulumi.set(__self__, "consent_screen_text", consent_screen_text)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direct_access_grants_enabled is not None:
            pulumi.set(__self__, "direct_access_grants_enabled", direct_access_grants_enabled)
        if display_on_consent_screen is not None:
            pulumi.set(__self__, "display_on_consent_screen", display_on_consent_screen)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_session_state_from_auth_response is not None:
            pulumi.set(__self__, "exclude_session_state_from_auth_response", exclude_session_state_from_auth_response)
        if extra_config is not None:
            pulumi.set(__self__, "extra_config", extra_config)
        if frontchannel_logout_enabled is not None:
            pulumi.set(__self__, "frontchannel_logout_enabled", frontchannel_logout_enabled)
        if frontchannel_logout_url is not None:
            pulumi.set(__self__, "frontchannel_logout_url", frontchannel_logout_url)
        if full_scope_allowed is not None:
            pulumi.set(__self__, "full_scope_allowed", full_scope_allowed)
        if implicit_flow_enabled is not None:
            pulumi.set(__self__, "implicit_flow_enabled", implicit_flow_enabled)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if login_theme is not None:
            pulumi.set(__self__, "login_theme", login_theme)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth2_device_authorization_grant_enabled is not None:
            pulumi.set(__self__, "oauth2_device_authorization_grant_enabled", oauth2_device_authorization_grant_enabled)
        if oauth2_device_code_lifespan is not None:
            pulumi.set(__self__, "oauth2_device_code_lifespan", oauth2_device_code_lifespan)
        if oauth2_device_polling_interval is not None:
            pulumi.set(__self__, "oauth2_device_polling_interval", oauth2_device_polling_interval)
        if pkce_code_challenge_method is not None:
            pulumi.set(__self__, "pkce_code_challenge_method", pkce_code_challenge_method)
        if root_url is not None:
            pulumi.set(__self__, "root_url", root_url)
        if service_accounts_enabled is not None:
            pulumi.set(__self__, "service_accounts_enabled", service_accounts_enabled)
        if standard_flow_enabled is not None:
            pulumi.set(__self__, "standard_flow_enabled", standard_flow_enabled)
        if use_refresh_tokens is not None:
            pulumi.set(__self__, "use_refresh_tokens", use_refresh_tokens)
        if use_refresh_tokens_client_credentials is not None:
            pulumi.set(__self__, "use_refresh_tokens_client_credentials", use_refresh_tokens_client_credentials)
        if valid_post_logout_redirect_uris is not None:
            pulumi.set(__self__, "valid_post_logout_redirect_uris", valid_post_logout_redirect_uris)
        if valid_redirect_uris is not None:
            pulumi.set(__self__, "valid_redirect_uris", valid_redirect_uris)
        if web_origins is not None:
            pulumi.set(__self__, "web_origins", web_origins)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> pulumi.Input[str]:
        """
        Specifies the type of client, which can be one of the following:
        """
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The Client ID for this client, referenced in the URI during authentication and in issued tokens.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Input[str]:
        """
        The realm this client is attached to.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="accessTokenLifespan")
    def access_token_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of time in seconds before an access token expires. This will override the default for the realm.
        """
        return pulumi.get(self, "access_token_lifespan")

    @access_token_lifespan.setter
    def access_token_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_lifespan", value)

    @property
    @pulumi.getter(name="adminUrl")
    def admin_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to the admin interface of the client.
        """
        return pulumi.get(self, "admin_url")

    @admin_url.setter
    def admin_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_url", value)

    @property
    @pulumi.getter(name="authenticationFlowBindingOverrides")
    def authentication_flow_binding_overrides(self) -> Optional[pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs']]:
        """
        Override realm authentication flow bindings
        """
        return pulumi.get(self, "authentication_flow_binding_overrides")

    @authentication_flow_binding_overrides.setter
    def authentication_flow_binding_overrides(self, value: Optional[pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs']]):
        pulumi.set(self, "authentication_flow_binding_overrides", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['ClientAuthorizationArgs']]:
        """
        When this block is present, fine-grained authorization will be enabled for this client. The client's `access_type` must be `CONFIDENTIAL`, and `service_accounts_enabled` must be `true`. This block has the following arguments:
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['ClientAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="backchannelLogoutRevokeOfflineSessions")
    def backchannel_logout_revoke_offline_sessions(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
        """
        return pulumi.get(self, "backchannel_logout_revoke_offline_sessions")

    @backchannel_logout_revoke_offline_sessions.setter
    def backchannel_logout_revoke_offline_sessions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backchannel_logout_revoke_offline_sessions", value)

    @property
    @pulumi.getter(name="backchannelLogoutSessionRequired")
    def backchannel_logout_session_required(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
        """
        return pulumi.get(self, "backchannel_logout_session_required")

    @backchannel_logout_session_required.setter
    def backchannel_logout_session_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backchannel_logout_session_required", value)

    @property
    @pulumi.getter(name="backchannelLogoutUrl")
    def backchannel_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
        """
        return pulumi.get(self, "backchannel_logout_url")

    @backchannel_logout_url.setter
    def backchannel_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backchannel_logout_url", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Default URL to use when the auth server needs to redirect or link back to the client.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter(name="clientAuthenticatorType")
    def client_authenticator_type(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `client-secret` The authenticator type for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
        - `client-secret` (Default) Use client id and client secret to authenticate client.
        - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extra_config` with `attributes.x509.subjectdn = <subjectDn>`
        - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        """
        return pulumi.get(self, "client_authenticator_type")

    @client_authenticator_type.setter
    def client_authenticator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_authenticator_type", value)

    @property
    @pulumi.getter(name="clientOfflineSessionIdleTimeout")
    def client_offline_session_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
        """
        return pulumi.get(self, "client_offline_session_idle_timeout")

    @client_offline_session_idle_timeout.setter
    def client_offline_session_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_offline_session_idle_timeout", value)

    @property
    @pulumi.getter(name="clientOfflineSessionMaxLifespan")
    def client_offline_session_max_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
        """
        return pulumi.get(self, "client_offline_session_max_lifespan")

    @client_offline_session_max_lifespan.setter
    def client_offline_session_max_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_offline_session_max_lifespan", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="clientSessionIdleTimeout")
    def client_session_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
        """
        return pulumi.get(self, "client_session_idle_timeout")

    @client_session_idle_timeout.setter
    def client_session_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_session_idle_timeout", value)

    @property
    @pulumi.getter(name="clientSessionMaxLifespan")
    def client_session_max_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
        """
        return pulumi.get(self, "client_session_max_lifespan")

    @client_session_max_lifespan.setter
    def client_session_max_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_session_max_lifespan", value)

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, users have to consent to client access. Defaults to `false`.
        """
        return pulumi.get(self, "consent_required")

    @consent_required.setter
    def consent_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consent_required", value)

    @property
    @pulumi.getter(name="consentScreenText")
    def consent_screen_text(self) -> Optional[pulumi.Input[str]]:
        """
        The text to display on the consent screen about permissions specific to this client. This is applicable only when `display_on_consent_screen` is `true`.
        """
        return pulumi.get(self, "consent_screen_text")

    @consent_screen_text.setter
    def consent_screen_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consent_screen_text", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this client in the GUI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="directAccessGrantsEnabled")
    def direct_access_grants_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "direct_access_grants_enabled")

    @direct_access_grants_enabled.setter
    def direct_access_grants_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_access_grants_enabled", value)

    @property
    @pulumi.getter(name="displayOnConsentScreen")
    def display_on_consent_screen(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consent_required` is `true`.
        """
        return pulumi.get(self, "display_on_consent_screen")

    @display_on_consent_screen.setter
    def display_on_consent_screen(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_on_consent_screen", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeSessionStateFromAuthResponse")
    def exclude_session_state_from_auth_response(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the parameter `session_state` will not be included in OpenID Connect Authentication Response.
        """
        return pulumi.get(self, "exclude_session_state_from_auth_response")

    @exclude_session_state_from_auth_response.setter
    def exclude_session_state_from_auth_response(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_session_state_from_auth_response", value)

    @property
    @pulumi.getter(name="extraConfig")
    def extra_config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_config")

    @extra_config.setter
    def extra_config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_config", value)

    @property
    @pulumi.getter(name="frontchannelLogoutEnabled")
    def frontchannel_logout_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannel_logout_url`. Defaults to `false`.
        """
        return pulumi.get(self, "frontchannel_logout_enabled")

    @frontchannel_logout_enabled.setter
    def frontchannel_logout_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "frontchannel_logout_enabled", value)

    @property
    @pulumi.getter(name="frontchannelLogoutUrl")
    def frontchannel_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        The frontchannel logout url. This is applicable only when `frontchannel_logout_enabled` is `true`.
        """
        return pulumi.get(self, "frontchannel_logout_url")

    @frontchannel_logout_url.setter
    def frontchannel_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frontchannel_logout_url", value)

    @property
    @pulumi.getter(name="fullScopeAllowed")
    def full_scope_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow to include all roles mappings in the access token.
        """
        return pulumi.get(self, "full_scope_allowed")

    @full_scope_allowed.setter
    def full_scope_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_scope_allowed", value)

    @property
    @pulumi.getter(name="implicitFlowEnabled")
    def implicit_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "implicit_flow_enabled")

    @implicit_flow_enabled.setter
    def implicit_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "implicit_flow_enabled", value)

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the client with the specified `client_id` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
        """
        return pulumi.get(self, "import_")

    @import_.setter
    def import_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "import_", value)

    @property
    @pulumi.getter(name="loginTheme")
    def login_theme(self) -> Optional[pulumi.Input[str]]:
        """
        The client login theme. This will override the default theme for the realm.
        """
        return pulumi.get(self, "login_theme")

    @login_theme.setter
    def login_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_theme", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of this client in the GUI.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauth2DeviceAuthorizationGrantEnabled")
    def oauth2_device_authorization_grant_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
        """
        return pulumi.get(self, "oauth2_device_authorization_grant_enabled")

    @oauth2_device_authorization_grant_enabled.setter
    def oauth2_device_authorization_grant_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oauth2_device_authorization_grant_enabled", value)

    @property
    @pulumi.getter(name="oauth2DeviceCodeLifespan")
    def oauth2_device_code_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of time a client has to finish the device code flow before it expires.
        """
        return pulumi.get(self, "oauth2_device_code_lifespan")

    @oauth2_device_code_lifespan.setter
    def oauth2_device_code_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_device_code_lifespan", value)

    @property
    @pulumi.getter(name="oauth2DevicePollingInterval")
    def oauth2_device_polling_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
        """
        return pulumi.get(self, "oauth2_device_polling_interval")

    @oauth2_device_polling_interval.setter
    def oauth2_device_polling_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_device_polling_interval", value)

    @property
    @pulumi.getter(name="pkceCodeChallengeMethod")
    def pkce_code_challenge_method(self) -> Optional[pulumi.Input[str]]:
        """
        The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
        """
        return pulumi.get(self, "pkce_code_challenge_method")

    @pkce_code_challenge_method.setter
    def pkce_code_challenge_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pkce_code_challenge_method", value)

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> Optional[pulumi.Input[str]]:
        """
        When specified, this URL is prepended to any relative URLs found within `valid_redirect_uris`, `web_origins`, and `admin_url`. NOTE: Due to limitations in the Keycloak API, when the `root_url` attribute is used, the `valid_redirect_uris`, `web_origins`, and `admin_url` attributes will be required.
        """
        return pulumi.get(self, "root_url")

    @root_url.setter
    def root_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_url", value)

    @property
    @pulumi.getter(name="serviceAccountsEnabled")
    def service_accounts_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "service_accounts_enabled")

    @service_accounts_enabled.setter
    def service_accounts_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_accounts_enabled", value)

    @property
    @pulumi.getter(name="standardFlowEnabled")
    def standard_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "standard_flow_enabled")

    @standard_flow_enabled.setter
    def standard_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_flow_enabled", value)

    @property
    @pulumi.getter(name="useRefreshTokens")
    def use_refresh_tokens(self) -> Optional[pulumi.Input[bool]]:
        """
        If this is `true`, a refresh_token will be created and added to the token response. If this is `false` then no refresh_token will be generated.  Defaults to `true`.
        """
        return pulumi.get(self, "use_refresh_tokens")

    @use_refresh_tokens.setter
    def use_refresh_tokens(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_refresh_tokens", value)

    @property
    @pulumi.getter(name="useRefreshTokensClientCredentials")
    def use_refresh_tokens_client_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        If this is `true`, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is `false` then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
        """
        return pulumi.get(self, "use_refresh_tokens_client_credentials")

    @use_refresh_tokens_client_credentials.setter
    def use_refresh_tokens_client_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_refresh_tokens_client_credentials", value)

    @property
    @pulumi.getter(name="validPostLogoutRedirectUris")
    def valid_post_logout_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid URIs a browser is permitted to redirect to after a successful logout.
        """
        return pulumi.get(self, "valid_post_logout_redirect_uris")

    @valid_post_logout_redirect_uris.setter
    def valid_post_logout_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "valid_post_logout_redirect_uris", value)

    @property
    @pulumi.getter(name="validRedirectUris")
    def valid_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
        wildcards in the form of an asterisk can be used here. This attribute must be set if either `standard_flow_enabled` or `implicit_flow_enabled`
        is set to `true`.
        """
        return pulumi.get(self, "valid_redirect_uris")

    @valid_redirect_uris.setter
    def valid_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "valid_redirect_uris", value)

    @property
    @pulumi.getter(name="webOrigins")
    def web_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
        """
        return pulumi.get(self, "web_origins")

    @web_origins.setter
    def web_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "web_origins", value)


@pulumi.input_type
class _ClientState:
    def __init__(__self__, *,
                 access_token_lifespan: Optional[pulumi.Input[str]] = None,
                 access_type: Optional[pulumi.Input[str]] = None,
                 admin_url: Optional[pulumi.Input[str]] = None,
                 authentication_flow_binding_overrides: Optional[pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs']] = None,
                 authorization: Optional[pulumi.Input['ClientAuthorizationArgs']] = None,
                 backchannel_logout_revoke_offline_sessions: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_session_required: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 client_authenticator_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_offline_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_offline_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 consent_screen_text: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direct_access_grants_enabled: Optional[pulumi.Input[bool]] = None,
                 display_on_consent_screen: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_session_state_from_auth_response: Optional[pulumi.Input[bool]] = None,
                 extra_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frontchannel_logout_enabled: Optional[pulumi.Input[bool]] = None,
                 frontchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 full_scope_allowed: Optional[pulumi.Input[bool]] = None,
                 implicit_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 import_: Optional[pulumi.Input[bool]] = None,
                 login_theme: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_device_authorization_grant_enabled: Optional[pulumi.Input[bool]] = None,
                 oauth2_device_code_lifespan: Optional[pulumi.Input[str]] = None,
                 oauth2_device_polling_interval: Optional[pulumi.Input[str]] = None,
                 pkce_code_challenge_method: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 resource_server_id: Optional[pulumi.Input[str]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 service_account_user_id: Optional[pulumi.Input[str]] = None,
                 service_accounts_enabled: Optional[pulumi.Input[bool]] = None,
                 standard_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens_client_credentials: Optional[pulumi.Input[bool]] = None,
                 valid_post_logout_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 valid_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Client resources.
        :param pulumi.Input[str] access_token_lifespan: The amount of time in seconds before an access token expires. This will override the default for the realm.
        :param pulumi.Input[str] access_type: Specifies the type of client, which can be one of the following:
        :param pulumi.Input[str] admin_url: URL to the admin interface of the client.
        :param pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs'] authentication_flow_binding_overrides: Override realm authentication flow bindings
        :param pulumi.Input['ClientAuthorizationArgs'] authorization: When this block is present, fine-grained authorization will be enabled for this client. The client's `access_type` must be `CONFIDENTIAL`, and `service_accounts_enabled` must be `true`. This block has the following arguments:
        :param pulumi.Input[bool] backchannel_logout_revoke_offline_sessions: Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
        :param pulumi.Input[bool] backchannel_logout_session_required: When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
        :param pulumi.Input[str] backchannel_logout_url: The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
        :param pulumi.Input[str] base_url: Default URL to use when the auth server needs to redirect or link back to the client.
        :param pulumi.Input[str] client_authenticator_type: Defaults to `client-secret` The authenticator type for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
               - `client-secret` (Default) Use client id and client secret to authenticate client.
               - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
               - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extra_config` with `attributes.x509.subjectdn = <subjectDn>`
               - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        :param pulumi.Input[str] client_id: The Client ID for this client, referenced in the URI during authentication and in issued tokens.
        :param pulumi.Input[str] client_offline_session_idle_timeout: Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
        :param pulumi.Input[str] client_offline_session_max_lifespan: Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
        :param pulumi.Input[str] client_secret: The secret for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
        :param pulumi.Input[str] client_session_idle_timeout: Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
        :param pulumi.Input[str] client_session_max_lifespan: Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
        :param pulumi.Input[bool] consent_required: When `true`, users have to consent to client access. Defaults to `false`.
        :param pulumi.Input[str] consent_screen_text: The text to display on the consent screen about permissions specific to this client. This is applicable only when `display_on_consent_screen` is `true`.
        :param pulumi.Input[str] description: The description of this client in the GUI.
        :param pulumi.Input[bool] direct_access_grants_enabled: When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] display_on_consent_screen: When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consent_required` is `true`.
        :param pulumi.Input[bool] enabled: When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
        :param pulumi.Input[bool] exclude_session_state_from_auth_response: When `true`, the parameter `session_state` will not be included in OpenID Connect Authentication Response.
        :param pulumi.Input[bool] frontchannel_logout_enabled: When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannel_logout_url`. Defaults to `false`.
        :param pulumi.Input[str] frontchannel_logout_url: The frontchannel logout url. This is applicable only when `frontchannel_logout_enabled` is `true`.
        :param pulumi.Input[bool] full_scope_allowed: Allow to include all roles mappings in the access token.
        :param pulumi.Input[bool] implicit_flow_enabled: When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] import_: When `true`, the client with the specified `client_id` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
        :param pulumi.Input[str] login_theme: The client login theme. This will override the default theme for the realm.
        :param pulumi.Input[str] name: The display name of this client in the GUI.
        :param pulumi.Input[bool] oauth2_device_authorization_grant_enabled: Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
        :param pulumi.Input[str] oauth2_device_code_lifespan: The maximum amount of time a client has to finish the device code flow before it expires.
        :param pulumi.Input[str] oauth2_device_polling_interval: The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
        :param pulumi.Input[str] pkce_code_challenge_method: The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
        :param pulumi.Input[str] realm_id: The realm this client is attached to.
        :param pulumi.Input[str] resource_server_id: (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
        :param pulumi.Input[str] root_url: When specified, this URL is prepended to any relative URLs found within `valid_redirect_uris`, `web_origins`, and `admin_url`. NOTE: Due to limitations in the Keycloak API, when the `root_url` attribute is used, the `valid_redirect_uris`, `web_origins`, and `admin_url` attributes will be required.
        :param pulumi.Input[str] service_account_user_id: (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
        :param pulumi.Input[bool] service_accounts_enabled: When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] standard_flow_enabled: When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] use_refresh_tokens: If this is `true`, a refresh_token will be created and added to the token response. If this is `false` then no refresh_token will be generated.  Defaults to `true`.
        :param pulumi.Input[bool] use_refresh_tokens_client_credentials: If this is `true`, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is `false` then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_post_logout_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful logout.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
               wildcards in the form of an asterisk can be used here. This attribute must be set if either `standard_flow_enabled` or `implicit_flow_enabled`
               is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_origins: A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
        """
        if access_token_lifespan is not None:
            pulumi.set(__self__, "access_token_lifespan", access_token_lifespan)
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if admin_url is not None:
            pulumi.set(__self__, "admin_url", admin_url)
        if authentication_flow_binding_overrides is not None:
            pulumi.set(__self__, "authentication_flow_binding_overrides", authentication_flow_binding_overrides)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if backchannel_logout_revoke_offline_sessions is not None:
            pulumi.set(__self__, "backchannel_logout_revoke_offline_sessions", backchannel_logout_revoke_offline_sessions)
        if backchannel_logout_session_required is not None:
            pulumi.set(__self__, "backchannel_logout_session_required", backchannel_logout_session_required)
        if backchannel_logout_url is not None:
            pulumi.set(__self__, "backchannel_logout_url", backchannel_logout_url)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if client_authenticator_type is not None:
            pulumi.set(__self__, "client_authenticator_type", client_authenticator_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_offline_session_idle_timeout is not None:
            pulumi.set(__self__, "client_offline_session_idle_timeout", client_offline_session_idle_timeout)
        if client_offline_session_max_lifespan is not None:
            pulumi.set(__self__, "client_offline_session_max_lifespan", client_offline_session_max_lifespan)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_session_idle_timeout is not None:
            pulumi.set(__self__, "client_session_idle_timeout", client_session_idle_timeout)
        if client_session_max_lifespan is not None:
            pulumi.set(__self__, "client_session_max_lifespan", client_session_max_lifespan)
        if consent_required is not None:
            pulumi.set(__self__, "consent_required", consent_required)
        if consent_screen_text is not None:
            pulumi.set(__self__, "consent_screen_text", consent_screen_text)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direct_access_grants_enabled is not None:
            pulumi.set(__self__, "direct_access_grants_enabled", direct_access_grants_enabled)
        if display_on_consent_screen is not None:
            pulumi.set(__self__, "display_on_consent_screen", display_on_consent_screen)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exclude_session_state_from_auth_response is not None:
            pulumi.set(__self__, "exclude_session_state_from_auth_response", exclude_session_state_from_auth_response)
        if extra_config is not None:
            pulumi.set(__self__, "extra_config", extra_config)
        if frontchannel_logout_enabled is not None:
            pulumi.set(__self__, "frontchannel_logout_enabled", frontchannel_logout_enabled)
        if frontchannel_logout_url is not None:
            pulumi.set(__self__, "frontchannel_logout_url", frontchannel_logout_url)
        if full_scope_allowed is not None:
            pulumi.set(__self__, "full_scope_allowed", full_scope_allowed)
        if implicit_flow_enabled is not None:
            pulumi.set(__self__, "implicit_flow_enabled", implicit_flow_enabled)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if login_theme is not None:
            pulumi.set(__self__, "login_theme", login_theme)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth2_device_authorization_grant_enabled is not None:
            pulumi.set(__self__, "oauth2_device_authorization_grant_enabled", oauth2_device_authorization_grant_enabled)
        if oauth2_device_code_lifespan is not None:
            pulumi.set(__self__, "oauth2_device_code_lifespan", oauth2_device_code_lifespan)
        if oauth2_device_polling_interval is not None:
            pulumi.set(__self__, "oauth2_device_polling_interval", oauth2_device_polling_interval)
        if pkce_code_challenge_method is not None:
            pulumi.set(__self__, "pkce_code_challenge_method", pkce_code_challenge_method)
        if realm_id is not None:
            pulumi.set(__self__, "realm_id", realm_id)
        if resource_server_id is not None:
            pulumi.set(__self__, "resource_server_id", resource_server_id)
        if root_url is not None:
            pulumi.set(__self__, "root_url", root_url)
        if service_account_user_id is not None:
            pulumi.set(__self__, "service_account_user_id", service_account_user_id)
        if service_accounts_enabled is not None:
            pulumi.set(__self__, "service_accounts_enabled", service_accounts_enabled)
        if standard_flow_enabled is not None:
            pulumi.set(__self__, "standard_flow_enabled", standard_flow_enabled)
        if use_refresh_tokens is not None:
            pulumi.set(__self__, "use_refresh_tokens", use_refresh_tokens)
        if use_refresh_tokens_client_credentials is not None:
            pulumi.set(__self__, "use_refresh_tokens_client_credentials", use_refresh_tokens_client_credentials)
        if valid_post_logout_redirect_uris is not None:
            pulumi.set(__self__, "valid_post_logout_redirect_uris", valid_post_logout_redirect_uris)
        if valid_redirect_uris is not None:
            pulumi.set(__self__, "valid_redirect_uris", valid_redirect_uris)
        if web_origins is not None:
            pulumi.set(__self__, "web_origins", web_origins)

    @property
    @pulumi.getter(name="accessTokenLifespan")
    def access_token_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of time in seconds before an access token expires. This will override the default for the realm.
        """
        return pulumi.get(self, "access_token_lifespan")

    @access_token_lifespan.setter
    def access_token_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_lifespan", value)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the type of client, which can be one of the following:
        """
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter(name="adminUrl")
    def admin_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to the admin interface of the client.
        """
        return pulumi.get(self, "admin_url")

    @admin_url.setter
    def admin_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_url", value)

    @property
    @pulumi.getter(name="authenticationFlowBindingOverrides")
    def authentication_flow_binding_overrides(self) -> Optional[pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs']]:
        """
        Override realm authentication flow bindings
        """
        return pulumi.get(self, "authentication_flow_binding_overrides")

    @authentication_flow_binding_overrides.setter
    def authentication_flow_binding_overrides(self, value: Optional[pulumi.Input['ClientAuthenticationFlowBindingOverridesArgs']]):
        pulumi.set(self, "authentication_flow_binding_overrides", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['ClientAuthorizationArgs']]:
        """
        When this block is present, fine-grained authorization will be enabled for this client. The client's `access_type` must be `CONFIDENTIAL`, and `service_accounts_enabled` must be `true`. This block has the following arguments:
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['ClientAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="backchannelLogoutRevokeOfflineSessions")
    def backchannel_logout_revoke_offline_sessions(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
        """
        return pulumi.get(self, "backchannel_logout_revoke_offline_sessions")

    @backchannel_logout_revoke_offline_sessions.setter
    def backchannel_logout_revoke_offline_sessions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backchannel_logout_revoke_offline_sessions", value)

    @property
    @pulumi.getter(name="backchannelLogoutSessionRequired")
    def backchannel_logout_session_required(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
        """
        return pulumi.get(self, "backchannel_logout_session_required")

    @backchannel_logout_session_required.setter
    def backchannel_logout_session_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backchannel_logout_session_required", value)

    @property
    @pulumi.getter(name="backchannelLogoutUrl")
    def backchannel_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
        """
        return pulumi.get(self, "backchannel_logout_url")

    @backchannel_logout_url.setter
    def backchannel_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backchannel_logout_url", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Default URL to use when the auth server needs to redirect or link back to the client.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter(name="clientAuthenticatorType")
    def client_authenticator_type(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `client-secret` The authenticator type for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
        - `client-secret` (Default) Use client id and client secret to authenticate client.
        - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extra_config` with `attributes.x509.subjectdn = <subjectDn>`
        - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        """
        return pulumi.get(self, "client_authenticator_type")

    @client_authenticator_type.setter
    def client_authenticator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_authenticator_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Client ID for this client, referenced in the URI during authentication and in issued tokens.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientOfflineSessionIdleTimeout")
    def client_offline_session_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
        """
        return pulumi.get(self, "client_offline_session_idle_timeout")

    @client_offline_session_idle_timeout.setter
    def client_offline_session_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_offline_session_idle_timeout", value)

    @property
    @pulumi.getter(name="clientOfflineSessionMaxLifespan")
    def client_offline_session_max_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
        """
        return pulumi.get(self, "client_offline_session_max_lifespan")

    @client_offline_session_max_lifespan.setter
    def client_offline_session_max_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_offline_session_max_lifespan", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="clientSessionIdleTimeout")
    def client_session_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
        """
        return pulumi.get(self, "client_session_idle_timeout")

    @client_session_idle_timeout.setter
    def client_session_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_session_idle_timeout", value)

    @property
    @pulumi.getter(name="clientSessionMaxLifespan")
    def client_session_max_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
        """
        return pulumi.get(self, "client_session_max_lifespan")

    @client_session_max_lifespan.setter
    def client_session_max_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_session_max_lifespan", value)

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, users have to consent to client access. Defaults to `false`.
        """
        return pulumi.get(self, "consent_required")

    @consent_required.setter
    def consent_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consent_required", value)

    @property
    @pulumi.getter(name="consentScreenText")
    def consent_screen_text(self) -> Optional[pulumi.Input[str]]:
        """
        The text to display on the consent screen about permissions specific to this client. This is applicable only when `display_on_consent_screen` is `true`.
        """
        return pulumi.get(self, "consent_screen_text")

    @consent_screen_text.setter
    def consent_screen_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consent_screen_text", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this client in the GUI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="directAccessGrantsEnabled")
    def direct_access_grants_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "direct_access_grants_enabled")

    @direct_access_grants_enabled.setter
    def direct_access_grants_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_access_grants_enabled", value)

    @property
    @pulumi.getter(name="displayOnConsentScreen")
    def display_on_consent_screen(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consent_required` is `true`.
        """
        return pulumi.get(self, "display_on_consent_screen")

    @display_on_consent_screen.setter
    def display_on_consent_screen(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_on_consent_screen", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="excludeSessionStateFromAuthResponse")
    def exclude_session_state_from_auth_response(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the parameter `session_state` will not be included in OpenID Connect Authentication Response.
        """
        return pulumi.get(self, "exclude_session_state_from_auth_response")

    @exclude_session_state_from_auth_response.setter
    def exclude_session_state_from_auth_response(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_session_state_from_auth_response", value)

    @property
    @pulumi.getter(name="extraConfig")
    def extra_config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_config")

    @extra_config.setter
    def extra_config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_config", value)

    @property
    @pulumi.getter(name="frontchannelLogoutEnabled")
    def frontchannel_logout_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannel_logout_url`. Defaults to `false`.
        """
        return pulumi.get(self, "frontchannel_logout_enabled")

    @frontchannel_logout_enabled.setter
    def frontchannel_logout_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "frontchannel_logout_enabled", value)

    @property
    @pulumi.getter(name="frontchannelLogoutUrl")
    def frontchannel_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        The frontchannel logout url. This is applicable only when `frontchannel_logout_enabled` is `true`.
        """
        return pulumi.get(self, "frontchannel_logout_url")

    @frontchannel_logout_url.setter
    def frontchannel_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frontchannel_logout_url", value)

    @property
    @pulumi.getter(name="fullScopeAllowed")
    def full_scope_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow to include all roles mappings in the access token.
        """
        return pulumi.get(self, "full_scope_allowed")

    @full_scope_allowed.setter
    def full_scope_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_scope_allowed", value)

    @property
    @pulumi.getter(name="implicitFlowEnabled")
    def implicit_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "implicit_flow_enabled")

    @implicit_flow_enabled.setter
    def implicit_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "implicit_flow_enabled", value)

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the client with the specified `client_id` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
        """
        return pulumi.get(self, "import_")

    @import_.setter
    def import_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "import_", value)

    @property
    @pulumi.getter(name="loginTheme")
    def login_theme(self) -> Optional[pulumi.Input[str]]:
        """
        The client login theme. This will override the default theme for the realm.
        """
        return pulumi.get(self, "login_theme")

    @login_theme.setter
    def login_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_theme", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of this client in the GUI.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauth2DeviceAuthorizationGrantEnabled")
    def oauth2_device_authorization_grant_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
        """
        return pulumi.get(self, "oauth2_device_authorization_grant_enabled")

    @oauth2_device_authorization_grant_enabled.setter
    def oauth2_device_authorization_grant_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oauth2_device_authorization_grant_enabled", value)

    @property
    @pulumi.getter(name="oauth2DeviceCodeLifespan")
    def oauth2_device_code_lifespan(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of time a client has to finish the device code flow before it expires.
        """
        return pulumi.get(self, "oauth2_device_code_lifespan")

    @oauth2_device_code_lifespan.setter
    def oauth2_device_code_lifespan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_device_code_lifespan", value)

    @property
    @pulumi.getter(name="oauth2DevicePollingInterval")
    def oauth2_device_polling_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
        """
        return pulumi.get(self, "oauth2_device_polling_interval")

    @oauth2_device_polling_interval.setter
    def oauth2_device_polling_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_device_polling_interval", value)

    @property
    @pulumi.getter(name="pkceCodeChallengeMethod")
    def pkce_code_challenge_method(self) -> Optional[pulumi.Input[str]]:
        """
        The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
        """
        return pulumi.get(self, "pkce_code_challenge_method")

    @pkce_code_challenge_method.setter
    def pkce_code_challenge_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pkce_code_challenge_method", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The realm this client is attached to.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="resourceServerId")
    def resource_server_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
        """
        return pulumi.get(self, "resource_server_id")

    @resource_server_id.setter
    def resource_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_server_id", value)

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> Optional[pulumi.Input[str]]:
        """
        When specified, this URL is prepended to any relative URLs found within `valid_redirect_uris`, `web_origins`, and `admin_url`. NOTE: Due to limitations in the Keycloak API, when the `root_url` attribute is used, the `valid_redirect_uris`, `web_origins`, and `admin_url` attributes will be required.
        """
        return pulumi.get(self, "root_url")

    @root_url.setter
    def root_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_url", value)

    @property
    @pulumi.getter(name="serviceAccountUserId")
    def service_account_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
        """
        return pulumi.get(self, "service_account_user_id")

    @service_account_user_id.setter
    def service_account_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_user_id", value)

    @property
    @pulumi.getter(name="serviceAccountsEnabled")
    def service_accounts_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "service_accounts_enabled")

    @service_accounts_enabled.setter
    def service_accounts_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_accounts_enabled", value)

    @property
    @pulumi.getter(name="standardFlowEnabled")
    def standard_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "standard_flow_enabled")

    @standard_flow_enabled.setter
    def standard_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_flow_enabled", value)

    @property
    @pulumi.getter(name="useRefreshTokens")
    def use_refresh_tokens(self) -> Optional[pulumi.Input[bool]]:
        """
        If this is `true`, a refresh_token will be created and added to the token response. If this is `false` then no refresh_token will be generated.  Defaults to `true`.
        """
        return pulumi.get(self, "use_refresh_tokens")

    @use_refresh_tokens.setter
    def use_refresh_tokens(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_refresh_tokens", value)

    @property
    @pulumi.getter(name="useRefreshTokensClientCredentials")
    def use_refresh_tokens_client_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        If this is `true`, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is `false` then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
        """
        return pulumi.get(self, "use_refresh_tokens_client_credentials")

    @use_refresh_tokens_client_credentials.setter
    def use_refresh_tokens_client_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_refresh_tokens_client_credentials", value)

    @property
    @pulumi.getter(name="validPostLogoutRedirectUris")
    def valid_post_logout_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid URIs a browser is permitted to redirect to after a successful logout.
        """
        return pulumi.get(self, "valid_post_logout_redirect_uris")

    @valid_post_logout_redirect_uris.setter
    def valid_post_logout_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "valid_post_logout_redirect_uris", value)

    @property
    @pulumi.getter(name="validRedirectUris")
    def valid_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
        wildcards in the form of an asterisk can be used here. This attribute must be set if either `standard_flow_enabled` or `implicit_flow_enabled`
        is set to `true`.
        """
        return pulumi.get(self, "valid_redirect_uris")

    @valid_redirect_uris.setter
    def valid_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "valid_redirect_uris", value)

    @property
    @pulumi.getter(name="webOrigins")
    def web_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
        """
        return pulumi.get(self, "web_origins")

    @web_origins.setter
    def web_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "web_origins", value)


class Client(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_lifespan: Optional[pulumi.Input[str]] = None,
                 access_type: Optional[pulumi.Input[str]] = None,
                 admin_url: Optional[pulumi.Input[str]] = None,
                 authentication_flow_binding_overrides: Optional[pulumi.Input[pulumi.InputType['ClientAuthenticationFlowBindingOverridesArgs']]] = None,
                 authorization: Optional[pulumi.Input[pulumi.InputType['ClientAuthorizationArgs']]] = None,
                 backchannel_logout_revoke_offline_sessions: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_session_required: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 client_authenticator_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_offline_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_offline_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 consent_screen_text: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direct_access_grants_enabled: Optional[pulumi.Input[bool]] = None,
                 display_on_consent_screen: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_session_state_from_auth_response: Optional[pulumi.Input[bool]] = None,
                 extra_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frontchannel_logout_enabled: Optional[pulumi.Input[bool]] = None,
                 frontchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 full_scope_allowed: Optional[pulumi.Input[bool]] = None,
                 implicit_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 import_: Optional[pulumi.Input[bool]] = None,
                 login_theme: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_device_authorization_grant_enabled: Optional[pulumi.Input[bool]] = None,
                 oauth2_device_code_lifespan: Optional[pulumi.Input[str]] = None,
                 oauth2_device_polling_interval: Optional[pulumi.Input[str]] = None,
                 pkce_code_challenge_method: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 service_accounts_enabled: Optional[pulumi.Input[bool]] = None,
                 standard_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens_client_credentials: Optional[pulumi.Input[bool]] = None,
                 valid_post_logout_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 valid_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Allows for creating and managing Keycloak clients that use the OpenID Connect protocol.

        Clients are entities that can use Keycloak for user authentication. Typically,
        clients are applications that redirect users to Keycloak for authentication
        in order to take advantage of Keycloak's user sessions for SSO.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        openid_client = keycloak.openid.Client("openidClient",
            realm_id=realm.id,
            client_id="test-client",
            enabled=True,
            access_type="CONFIDENTIAL",
            valid_redirect_uris=["http://localhost:8080/openid-callback"],
            login_theme="keycloak",
            extra_config={
                "key1": "value1",
                "key2": "value2",
            })
        ```

        ## Import

        Clients can be imported using the format `{{realm_id}}/{{client_keycloak_id}}`, where `client_keycloak_id` is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Examplebash

        ```sh
         $ pulumi import keycloak:openid/client:Client openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token_lifespan: The amount of time in seconds before an access token expires. This will override the default for the realm.
        :param pulumi.Input[str] access_type: Specifies the type of client, which can be one of the following:
        :param pulumi.Input[str] admin_url: URL to the admin interface of the client.
        :param pulumi.Input[pulumi.InputType['ClientAuthenticationFlowBindingOverridesArgs']] authentication_flow_binding_overrides: Override realm authentication flow bindings
        :param pulumi.Input[pulumi.InputType['ClientAuthorizationArgs']] authorization: When this block is present, fine-grained authorization will be enabled for this client. The client's `access_type` must be `CONFIDENTIAL`, and `service_accounts_enabled` must be `true`. This block has the following arguments:
        :param pulumi.Input[bool] backchannel_logout_revoke_offline_sessions: Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
        :param pulumi.Input[bool] backchannel_logout_session_required: When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
        :param pulumi.Input[str] backchannel_logout_url: The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
        :param pulumi.Input[str] base_url: Default URL to use when the auth server needs to redirect or link back to the client.
        :param pulumi.Input[str] client_authenticator_type: Defaults to `client-secret` The authenticator type for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
               - `client-secret` (Default) Use client id and client secret to authenticate client.
               - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
               - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extra_config` with `attributes.x509.subjectdn = <subjectDn>`
               - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        :param pulumi.Input[str] client_id: The Client ID for this client, referenced in the URI during authentication and in issued tokens.
        :param pulumi.Input[str] client_offline_session_idle_timeout: Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
        :param pulumi.Input[str] client_offline_session_max_lifespan: Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
        :param pulumi.Input[str] client_secret: The secret for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
        :param pulumi.Input[str] client_session_idle_timeout: Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
        :param pulumi.Input[str] client_session_max_lifespan: Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
        :param pulumi.Input[bool] consent_required: When `true`, users have to consent to client access. Defaults to `false`.
        :param pulumi.Input[str] consent_screen_text: The text to display on the consent screen about permissions specific to this client. This is applicable only when `display_on_consent_screen` is `true`.
        :param pulumi.Input[str] description: The description of this client in the GUI.
        :param pulumi.Input[bool] direct_access_grants_enabled: When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] display_on_consent_screen: When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consent_required` is `true`.
        :param pulumi.Input[bool] enabled: When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
        :param pulumi.Input[bool] exclude_session_state_from_auth_response: When `true`, the parameter `session_state` will not be included in OpenID Connect Authentication Response.
        :param pulumi.Input[bool] frontchannel_logout_enabled: When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannel_logout_url`. Defaults to `false`.
        :param pulumi.Input[str] frontchannel_logout_url: The frontchannel logout url. This is applicable only when `frontchannel_logout_enabled` is `true`.
        :param pulumi.Input[bool] full_scope_allowed: Allow to include all roles mappings in the access token.
        :param pulumi.Input[bool] implicit_flow_enabled: When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] import_: When `true`, the client with the specified `client_id` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
        :param pulumi.Input[str] login_theme: The client login theme. This will override the default theme for the realm.
        :param pulumi.Input[str] name: The display name of this client in the GUI.
        :param pulumi.Input[bool] oauth2_device_authorization_grant_enabled: Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
        :param pulumi.Input[str] oauth2_device_code_lifespan: The maximum amount of time a client has to finish the device code flow before it expires.
        :param pulumi.Input[str] oauth2_device_polling_interval: The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
        :param pulumi.Input[str] pkce_code_challenge_method: The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
        :param pulumi.Input[str] realm_id: The realm this client is attached to.
        :param pulumi.Input[str] root_url: When specified, this URL is prepended to any relative URLs found within `valid_redirect_uris`, `web_origins`, and `admin_url`. NOTE: Due to limitations in the Keycloak API, when the `root_url` attribute is used, the `valid_redirect_uris`, `web_origins`, and `admin_url` attributes will be required.
        :param pulumi.Input[bool] service_accounts_enabled: When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] standard_flow_enabled: When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] use_refresh_tokens: If this is `true`, a refresh_token will be created and added to the token response. If this is `false` then no refresh_token will be generated.  Defaults to `true`.
        :param pulumi.Input[bool] use_refresh_tokens_client_credentials: If this is `true`, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is `false` then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_post_logout_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful logout.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
               wildcards in the form of an asterisk can be used here. This attribute must be set if either `standard_flow_enabled` or `implicit_flow_enabled`
               is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_origins: A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClientArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Allows for creating and managing Keycloak clients that use the OpenID Connect protocol.

        Clients are entities that can use Keycloak for user authentication. Typically,
        clients are applications that redirect users to Keycloak for authentication
        in order to take advantage of Keycloak's user sessions for SSO.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm",
            realm="my-realm",
            enabled=True)
        openid_client = keycloak.openid.Client("openidClient",
            realm_id=realm.id,
            client_id="test-client",
            enabled=True,
            access_type="CONFIDENTIAL",
            valid_redirect_uris=["http://localhost:8080/openid-callback"],
            login_theme="keycloak",
            extra_config={
                "key1": "value1",
                "key2": "value2",
            })
        ```

        ## Import

        Clients can be imported using the format `{{realm_id}}/{{client_keycloak_id}}`, where `client_keycloak_id` is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Examplebash

        ```sh
         $ pulumi import keycloak:openid/client:Client openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352
        ```

        :param str resource_name: The name of the resource.
        :param ClientArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClientArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_lifespan: Optional[pulumi.Input[str]] = None,
                 access_type: Optional[pulumi.Input[str]] = None,
                 admin_url: Optional[pulumi.Input[str]] = None,
                 authentication_flow_binding_overrides: Optional[pulumi.Input[pulumi.InputType['ClientAuthenticationFlowBindingOverridesArgs']]] = None,
                 authorization: Optional[pulumi.Input[pulumi.InputType['ClientAuthorizationArgs']]] = None,
                 backchannel_logout_revoke_offline_sessions: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_session_required: Optional[pulumi.Input[bool]] = None,
                 backchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 client_authenticator_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_offline_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_offline_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_session_idle_timeout: Optional[pulumi.Input[str]] = None,
                 client_session_max_lifespan: Optional[pulumi.Input[str]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 consent_screen_text: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direct_access_grants_enabled: Optional[pulumi.Input[bool]] = None,
                 display_on_consent_screen: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_session_state_from_auth_response: Optional[pulumi.Input[bool]] = None,
                 extra_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frontchannel_logout_enabled: Optional[pulumi.Input[bool]] = None,
                 frontchannel_logout_url: Optional[pulumi.Input[str]] = None,
                 full_scope_allowed: Optional[pulumi.Input[bool]] = None,
                 implicit_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 import_: Optional[pulumi.Input[bool]] = None,
                 login_theme: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_device_authorization_grant_enabled: Optional[pulumi.Input[bool]] = None,
                 oauth2_device_code_lifespan: Optional[pulumi.Input[str]] = None,
                 oauth2_device_polling_interval: Optional[pulumi.Input[str]] = None,
                 pkce_code_challenge_method: Optional[pulumi.Input[str]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 service_accounts_enabled: Optional[pulumi.Input[bool]] = None,
                 standard_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens: Optional[pulumi.Input[bool]] = None,
                 use_refresh_tokens_client_credentials: Optional[pulumi.Input[bool]] = None,
                 valid_post_logout_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 valid_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClientArgs.__new__(ClientArgs)

            __props__.__dict__["access_token_lifespan"] = access_token_lifespan
            if access_type is None and not opts.urn:
                raise TypeError("Missing required property 'access_type'")
            __props__.__dict__["access_type"] = access_type
            __props__.__dict__["admin_url"] = admin_url
            __props__.__dict__["authentication_flow_binding_overrides"] = authentication_flow_binding_overrides
            __props__.__dict__["authorization"] = authorization
            __props__.__dict__["backchannel_logout_revoke_offline_sessions"] = backchannel_logout_revoke_offline_sessions
            __props__.__dict__["backchannel_logout_session_required"] = backchannel_logout_session_required
            __props__.__dict__["backchannel_logout_url"] = backchannel_logout_url
            __props__.__dict__["base_url"] = base_url
            __props__.__dict__["client_authenticator_type"] = client_authenticator_type
            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            __props__.__dict__["client_offline_session_idle_timeout"] = client_offline_session_idle_timeout
            __props__.__dict__["client_offline_session_max_lifespan"] = client_offline_session_max_lifespan
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            __props__.__dict__["client_session_idle_timeout"] = client_session_idle_timeout
            __props__.__dict__["client_session_max_lifespan"] = client_session_max_lifespan
            __props__.__dict__["consent_required"] = consent_required
            __props__.__dict__["consent_screen_text"] = consent_screen_text
            __props__.__dict__["description"] = description
            __props__.__dict__["direct_access_grants_enabled"] = direct_access_grants_enabled
            __props__.__dict__["display_on_consent_screen"] = display_on_consent_screen
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["exclude_session_state_from_auth_response"] = exclude_session_state_from_auth_response
            __props__.__dict__["extra_config"] = extra_config
            __props__.__dict__["frontchannel_logout_enabled"] = frontchannel_logout_enabled
            __props__.__dict__["frontchannel_logout_url"] = frontchannel_logout_url
            __props__.__dict__["full_scope_allowed"] = full_scope_allowed
            __props__.__dict__["implicit_flow_enabled"] = implicit_flow_enabled
            __props__.__dict__["import_"] = import_
            __props__.__dict__["login_theme"] = login_theme
            __props__.__dict__["name"] = name
            __props__.__dict__["oauth2_device_authorization_grant_enabled"] = oauth2_device_authorization_grant_enabled
            __props__.__dict__["oauth2_device_code_lifespan"] = oauth2_device_code_lifespan
            __props__.__dict__["oauth2_device_polling_interval"] = oauth2_device_polling_interval
            __props__.__dict__["pkce_code_challenge_method"] = pkce_code_challenge_method
            if realm_id is None and not opts.urn:
                raise TypeError("Missing required property 'realm_id'")
            __props__.__dict__["realm_id"] = realm_id
            __props__.__dict__["root_url"] = root_url
            __props__.__dict__["service_accounts_enabled"] = service_accounts_enabled
            __props__.__dict__["standard_flow_enabled"] = standard_flow_enabled
            __props__.__dict__["use_refresh_tokens"] = use_refresh_tokens
            __props__.__dict__["use_refresh_tokens_client_credentials"] = use_refresh_tokens_client_credentials
            __props__.__dict__["valid_post_logout_redirect_uris"] = valid_post_logout_redirect_uris
            __props__.__dict__["valid_redirect_uris"] = valid_redirect_uris
            __props__.__dict__["web_origins"] = web_origins
            __props__.__dict__["resource_server_id"] = None
            __props__.__dict__["service_account_user_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Client, __self__).__init__(
            'keycloak:openid/client:Client',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token_lifespan: Optional[pulumi.Input[str]] = None,
            access_type: Optional[pulumi.Input[str]] = None,
            admin_url: Optional[pulumi.Input[str]] = None,
            authentication_flow_binding_overrides: Optional[pulumi.Input[pulumi.InputType['ClientAuthenticationFlowBindingOverridesArgs']]] = None,
            authorization: Optional[pulumi.Input[pulumi.InputType['ClientAuthorizationArgs']]] = None,
            backchannel_logout_revoke_offline_sessions: Optional[pulumi.Input[bool]] = None,
            backchannel_logout_session_required: Optional[pulumi.Input[bool]] = None,
            backchannel_logout_url: Optional[pulumi.Input[str]] = None,
            base_url: Optional[pulumi.Input[str]] = None,
            client_authenticator_type: Optional[pulumi.Input[str]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_offline_session_idle_timeout: Optional[pulumi.Input[str]] = None,
            client_offline_session_max_lifespan: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            client_session_idle_timeout: Optional[pulumi.Input[str]] = None,
            client_session_max_lifespan: Optional[pulumi.Input[str]] = None,
            consent_required: Optional[pulumi.Input[bool]] = None,
            consent_screen_text: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            direct_access_grants_enabled: Optional[pulumi.Input[bool]] = None,
            display_on_consent_screen: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            exclude_session_state_from_auth_response: Optional[pulumi.Input[bool]] = None,
            extra_config: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            frontchannel_logout_enabled: Optional[pulumi.Input[bool]] = None,
            frontchannel_logout_url: Optional[pulumi.Input[str]] = None,
            full_scope_allowed: Optional[pulumi.Input[bool]] = None,
            implicit_flow_enabled: Optional[pulumi.Input[bool]] = None,
            import_: Optional[pulumi.Input[bool]] = None,
            login_theme: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oauth2_device_authorization_grant_enabled: Optional[pulumi.Input[bool]] = None,
            oauth2_device_code_lifespan: Optional[pulumi.Input[str]] = None,
            oauth2_device_polling_interval: Optional[pulumi.Input[str]] = None,
            pkce_code_challenge_method: Optional[pulumi.Input[str]] = None,
            realm_id: Optional[pulumi.Input[str]] = None,
            resource_server_id: Optional[pulumi.Input[str]] = None,
            root_url: Optional[pulumi.Input[str]] = None,
            service_account_user_id: Optional[pulumi.Input[str]] = None,
            service_accounts_enabled: Optional[pulumi.Input[bool]] = None,
            standard_flow_enabled: Optional[pulumi.Input[bool]] = None,
            use_refresh_tokens: Optional[pulumi.Input[bool]] = None,
            use_refresh_tokens_client_credentials: Optional[pulumi.Input[bool]] = None,
            valid_post_logout_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            valid_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Client':
        """
        Get an existing Client resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token_lifespan: The amount of time in seconds before an access token expires. This will override the default for the realm.
        :param pulumi.Input[str] access_type: Specifies the type of client, which can be one of the following:
        :param pulumi.Input[str] admin_url: URL to the admin interface of the client.
        :param pulumi.Input[pulumi.InputType['ClientAuthenticationFlowBindingOverridesArgs']] authentication_flow_binding_overrides: Override realm authentication flow bindings
        :param pulumi.Input[pulumi.InputType['ClientAuthorizationArgs']] authorization: When this block is present, fine-grained authorization will be enabled for this client. The client's `access_type` must be `CONFIDENTIAL`, and `service_accounts_enabled` must be `true`. This block has the following arguments:
        :param pulumi.Input[bool] backchannel_logout_revoke_offline_sessions: Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
        :param pulumi.Input[bool] backchannel_logout_session_required: When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
        :param pulumi.Input[str] backchannel_logout_url: The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
        :param pulumi.Input[str] base_url: Default URL to use when the auth server needs to redirect or link back to the client.
        :param pulumi.Input[str] client_authenticator_type: Defaults to `client-secret` The authenticator type for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
               - `client-secret` (Default) Use client id and client secret to authenticate client.
               - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
               - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extra_config` with `attributes.x509.subjectdn = <subjectDn>`
               - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        :param pulumi.Input[str] client_id: The Client ID for this client, referenced in the URI during authentication and in issued tokens.
        :param pulumi.Input[str] client_offline_session_idle_timeout: Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
        :param pulumi.Input[str] client_offline_session_max_lifespan: Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
        :param pulumi.Input[str] client_secret: The secret for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
        :param pulumi.Input[str] client_session_idle_timeout: Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
        :param pulumi.Input[str] client_session_max_lifespan: Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
        :param pulumi.Input[bool] consent_required: When `true`, users have to consent to client access. Defaults to `false`.
        :param pulumi.Input[str] consent_screen_text: The text to display on the consent screen about permissions specific to this client. This is applicable only when `display_on_consent_screen` is `true`.
        :param pulumi.Input[str] description: The description of this client in the GUI.
        :param pulumi.Input[bool] direct_access_grants_enabled: When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] display_on_consent_screen: When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consent_required` is `true`.
        :param pulumi.Input[bool] enabled: When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
        :param pulumi.Input[bool] exclude_session_state_from_auth_response: When `true`, the parameter `session_state` will not be included in OpenID Connect Authentication Response.
        :param pulumi.Input[bool] frontchannel_logout_enabled: When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannel_logout_url`. Defaults to `false`.
        :param pulumi.Input[str] frontchannel_logout_url: The frontchannel logout url. This is applicable only when `frontchannel_logout_enabled` is `true`.
        :param pulumi.Input[bool] full_scope_allowed: Allow to include all roles mappings in the access token.
        :param pulumi.Input[bool] implicit_flow_enabled: When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] import_: When `true`, the client with the specified `client_id` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
        :param pulumi.Input[str] login_theme: The client login theme. This will override the default theme for the realm.
        :param pulumi.Input[str] name: The display name of this client in the GUI.
        :param pulumi.Input[bool] oauth2_device_authorization_grant_enabled: Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
        :param pulumi.Input[str] oauth2_device_code_lifespan: The maximum amount of time a client has to finish the device code flow before it expires.
        :param pulumi.Input[str] oauth2_device_polling_interval: The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
        :param pulumi.Input[str] pkce_code_challenge_method: The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
        :param pulumi.Input[str] realm_id: The realm this client is attached to.
        :param pulumi.Input[str] resource_server_id: (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
        :param pulumi.Input[str] root_url: When specified, this URL is prepended to any relative URLs found within `valid_redirect_uris`, `web_origins`, and `admin_url`. NOTE: Due to limitations in the Keycloak API, when the `root_url` attribute is used, the `valid_redirect_uris`, `web_origins`, and `admin_url` attributes will be required.
        :param pulumi.Input[str] service_account_user_id: (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
        :param pulumi.Input[bool] service_accounts_enabled: When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] standard_flow_enabled: When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
        :param pulumi.Input[bool] use_refresh_tokens: If this is `true`, a refresh_token will be created and added to the token response. If this is `false` then no refresh_token will be generated.  Defaults to `true`.
        :param pulumi.Input[bool] use_refresh_tokens_client_credentials: If this is `true`, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is `false` then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_post_logout_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful logout.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_redirect_uris: A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
               wildcards in the form of an asterisk can be used here. This attribute must be set if either `standard_flow_enabled` or `implicit_flow_enabled`
               is set to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_origins: A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClientState.__new__(_ClientState)

        __props__.__dict__["access_token_lifespan"] = access_token_lifespan
        __props__.__dict__["access_type"] = access_type
        __props__.__dict__["admin_url"] = admin_url
        __props__.__dict__["authentication_flow_binding_overrides"] = authentication_flow_binding_overrides
        __props__.__dict__["authorization"] = authorization
        __props__.__dict__["backchannel_logout_revoke_offline_sessions"] = backchannel_logout_revoke_offline_sessions
        __props__.__dict__["backchannel_logout_session_required"] = backchannel_logout_session_required
        __props__.__dict__["backchannel_logout_url"] = backchannel_logout_url
        __props__.__dict__["base_url"] = base_url
        __props__.__dict__["client_authenticator_type"] = client_authenticator_type
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_offline_session_idle_timeout"] = client_offline_session_idle_timeout
        __props__.__dict__["client_offline_session_max_lifespan"] = client_offline_session_max_lifespan
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["client_session_idle_timeout"] = client_session_idle_timeout
        __props__.__dict__["client_session_max_lifespan"] = client_session_max_lifespan
        __props__.__dict__["consent_required"] = consent_required
        __props__.__dict__["consent_screen_text"] = consent_screen_text
        __props__.__dict__["description"] = description
        __props__.__dict__["direct_access_grants_enabled"] = direct_access_grants_enabled
        __props__.__dict__["display_on_consent_screen"] = display_on_consent_screen
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["exclude_session_state_from_auth_response"] = exclude_session_state_from_auth_response
        __props__.__dict__["extra_config"] = extra_config
        __props__.__dict__["frontchannel_logout_enabled"] = frontchannel_logout_enabled
        __props__.__dict__["frontchannel_logout_url"] = frontchannel_logout_url
        __props__.__dict__["full_scope_allowed"] = full_scope_allowed
        __props__.__dict__["implicit_flow_enabled"] = implicit_flow_enabled
        __props__.__dict__["import_"] = import_
        __props__.__dict__["login_theme"] = login_theme
        __props__.__dict__["name"] = name
        __props__.__dict__["oauth2_device_authorization_grant_enabled"] = oauth2_device_authorization_grant_enabled
        __props__.__dict__["oauth2_device_code_lifespan"] = oauth2_device_code_lifespan
        __props__.__dict__["oauth2_device_polling_interval"] = oauth2_device_polling_interval
        __props__.__dict__["pkce_code_challenge_method"] = pkce_code_challenge_method
        __props__.__dict__["realm_id"] = realm_id
        __props__.__dict__["resource_server_id"] = resource_server_id
        __props__.__dict__["root_url"] = root_url
        __props__.__dict__["service_account_user_id"] = service_account_user_id
        __props__.__dict__["service_accounts_enabled"] = service_accounts_enabled
        __props__.__dict__["standard_flow_enabled"] = standard_flow_enabled
        __props__.__dict__["use_refresh_tokens"] = use_refresh_tokens
        __props__.__dict__["use_refresh_tokens_client_credentials"] = use_refresh_tokens_client_credentials
        __props__.__dict__["valid_post_logout_redirect_uris"] = valid_post_logout_redirect_uris
        __props__.__dict__["valid_redirect_uris"] = valid_redirect_uris
        __props__.__dict__["web_origins"] = web_origins
        return Client(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessTokenLifespan")
    def access_token_lifespan(self) -> pulumi.Output[str]:
        """
        The amount of time in seconds before an access token expires. This will override the default for the realm.
        """
        return pulumi.get(self, "access_token_lifespan")

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> pulumi.Output[str]:
        """
        Specifies the type of client, which can be one of the following:
        """
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="adminUrl")
    def admin_url(self) -> pulumi.Output[str]:
        """
        URL to the admin interface of the client.
        """
        return pulumi.get(self, "admin_url")

    @property
    @pulumi.getter(name="authenticationFlowBindingOverrides")
    def authentication_flow_binding_overrides(self) -> pulumi.Output[Optional['outputs.ClientAuthenticationFlowBindingOverrides']]:
        """
        Override realm authentication flow bindings
        """
        return pulumi.get(self, "authentication_flow_binding_overrides")

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output[Optional['outputs.ClientAuthorization']]:
        """
        When this block is present, fine-grained authorization will be enabled for this client. The client's `access_type` must be `CONFIDENTIAL`, and `service_accounts_enabled` must be `true`. This block has the following arguments:
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="backchannelLogoutRevokeOfflineSessions")
    def backchannel_logout_revoke_offline_sessions(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
        """
        return pulumi.get(self, "backchannel_logout_revoke_offline_sessions")

    @property
    @pulumi.getter(name="backchannelLogoutSessionRequired")
    def backchannel_logout_session_required(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
        """
        return pulumi.get(self, "backchannel_logout_session_required")

    @property
    @pulumi.getter(name="backchannelLogoutUrl")
    def backchannel_logout_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
        """
        return pulumi.get(self, "backchannel_logout_url")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Output[str]:
        """
        Default URL to use when the auth server needs to redirect or link back to the client.
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="clientAuthenticatorType")
    def client_authenticator_type(self) -> pulumi.Output[Optional[str]]:
        """
        Defaults to `client-secret` The authenticator type for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
        - `client-secret` (Default) Use client id and client secret to authenticate client.
        - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extra_config` with `attributes.x509.subjectdn = <subjectDn>`
        - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extra_config` with `attributes.token.endpoint.auth.signing.alg = <alg>`
        """
        return pulumi.get(self, "client_authenticator_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        The Client ID for this client, referenced in the URI during authentication and in issued tokens.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientOfflineSessionIdleTimeout")
    def client_offline_session_idle_timeout(self) -> pulumi.Output[str]:
        """
        Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
        """
        return pulumi.get(self, "client_offline_session_idle_timeout")

    @property
    @pulumi.getter(name="clientOfflineSessionMaxLifespan")
    def client_offline_session_max_lifespan(self) -> pulumi.Output[str]:
        """
        Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
        """
        return pulumi.get(self, "client_offline_session_max_lifespan")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        """
        The secret for clients with an `access_type` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientSessionIdleTimeout")
    def client_session_idle_timeout(self) -> pulumi.Output[str]:
        """
        Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
        """
        return pulumi.get(self, "client_session_idle_timeout")

    @property
    @pulumi.getter(name="clientSessionMaxLifespan")
    def client_session_max_lifespan(self) -> pulumi.Output[str]:
        """
        Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
        """
        return pulumi.get(self, "client_session_max_lifespan")

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> pulumi.Output[bool]:
        """
        When `true`, users have to consent to client access. Defaults to `false`.
        """
        return pulumi.get(self, "consent_required")

    @property
    @pulumi.getter(name="consentScreenText")
    def consent_screen_text(self) -> pulumi.Output[str]:
        """
        The text to display on the consent screen about permissions specific to this client. This is applicable only when `display_on_consent_screen` is `true`.
        """
        return pulumi.get(self, "consent_screen_text")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of this client in the GUI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directAccessGrantsEnabled")
    def direct_access_grants_enabled(self) -> pulumi.Output[bool]:
        """
        When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "direct_access_grants_enabled")

    @property
    @pulumi.getter(name="displayOnConsentScreen")
    def display_on_consent_screen(self) -> pulumi.Output[bool]:
        """
        When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consent_required` is `true`.
        """
        return pulumi.get(self, "display_on_consent_screen")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeSessionStateFromAuthResponse")
    def exclude_session_state_from_auth_response(self) -> pulumi.Output[bool]:
        """
        When `true`, the parameter `session_state` will not be included in OpenID Connect Authentication Response.
        """
        return pulumi.get(self, "exclude_session_state_from_auth_response")

    @property
    @pulumi.getter(name="extraConfig")
    def extra_config(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_config")

    @property
    @pulumi.getter(name="frontchannelLogoutEnabled")
    def frontchannel_logout_enabled(self) -> pulumi.Output[bool]:
        """
        When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannel_logout_url`. Defaults to `false`.
        """
        return pulumi.get(self, "frontchannel_logout_enabled")

    @property
    @pulumi.getter(name="frontchannelLogoutUrl")
    def frontchannel_logout_url(self) -> pulumi.Output[Optional[str]]:
        """
        The frontchannel logout url. This is applicable only when `frontchannel_logout_enabled` is `true`.
        """
        return pulumi.get(self, "frontchannel_logout_url")

    @property
    @pulumi.getter(name="fullScopeAllowed")
    def full_scope_allowed(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow to include all roles mappings in the access token.
        """
        return pulumi.get(self, "full_scope_allowed")

    @property
    @pulumi.getter(name="implicitFlowEnabled")
    def implicit_flow_enabled(self) -> pulumi.Output[bool]:
        """
        When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "implicit_flow_enabled")

    @property
    @pulumi.getter(name="import")
    def import_(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, the client with the specified `client_id` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
        """
        return pulumi.get(self, "import_")

    @property
    @pulumi.getter(name="loginTheme")
    def login_theme(self) -> pulumi.Output[Optional[str]]:
        """
        The client login theme. This will override the default theme for the realm.
        """
        return pulumi.get(self, "login_theme")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name of this client in the GUI.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauth2DeviceAuthorizationGrantEnabled")
    def oauth2_device_authorization_grant_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
        """
        return pulumi.get(self, "oauth2_device_authorization_grant_enabled")

    @property
    @pulumi.getter(name="oauth2DeviceCodeLifespan")
    def oauth2_device_code_lifespan(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum amount of time a client has to finish the device code flow before it expires.
        """
        return pulumi.get(self, "oauth2_device_code_lifespan")

    @property
    @pulumi.getter(name="oauth2DevicePollingInterval")
    def oauth2_device_polling_interval(self) -> pulumi.Output[Optional[str]]:
        """
        The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
        """
        return pulumi.get(self, "oauth2_device_polling_interval")

    @property
    @pulumi.getter(name="pkceCodeChallengeMethod")
    def pkce_code_challenge_method(self) -> pulumi.Output[Optional[str]]:
        """
        The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
        """
        return pulumi.get(self, "pkce_code_challenge_method")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Output[str]:
        """
        The realm this client is attached to.
        """
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="resourceServerId")
    def resource_server_id(self) -> pulumi.Output[str]:
        """
        (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
        """
        return pulumi.get(self, "resource_server_id")

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> pulumi.Output[str]:
        """
        When specified, this URL is prepended to any relative URLs found within `valid_redirect_uris`, `web_origins`, and `admin_url`. NOTE: Due to limitations in the Keycloak API, when the `root_url` attribute is used, the `valid_redirect_uris`, `web_origins`, and `admin_url` attributes will be required.
        """
        return pulumi.get(self, "root_url")

    @property
    @pulumi.getter(name="serviceAccountUserId")
    def service_account_user_id(self) -> pulumi.Output[str]:
        """
        (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
        """
        return pulumi.get(self, "service_account_user_id")

    @property
    @pulumi.getter(name="serviceAccountsEnabled")
    def service_accounts_enabled(self) -> pulumi.Output[bool]:
        """
        When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "service_accounts_enabled")

    @property
    @pulumi.getter(name="standardFlowEnabled")
    def standard_flow_enabled(self) -> pulumi.Output[bool]:
        """
        When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
        """
        return pulumi.get(self, "standard_flow_enabled")

    @property
    @pulumi.getter(name="useRefreshTokens")
    def use_refresh_tokens(self) -> pulumi.Output[Optional[bool]]:
        """
        If this is `true`, a refresh_token will be created and added to the token response. If this is `false` then no refresh_token will be generated.  Defaults to `true`.
        """
        return pulumi.get(self, "use_refresh_tokens")

    @property
    @pulumi.getter(name="useRefreshTokensClientCredentials")
    def use_refresh_tokens_client_credentials(self) -> pulumi.Output[Optional[bool]]:
        """
        If this is `true`, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is `false` then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
        """
        return pulumi.get(self, "use_refresh_tokens_client_credentials")

    @property
    @pulumi.getter(name="validPostLogoutRedirectUris")
    def valid_post_logout_redirect_uris(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of valid URIs a browser is permitted to redirect to after a successful logout.
        """
        return pulumi.get(self, "valid_post_logout_redirect_uris")

    @property
    @pulumi.getter(name="validRedirectUris")
    def valid_redirect_uris(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
        wildcards in the form of an asterisk can be used here. This attribute must be set if either `standard_flow_enabled` or `implicit_flow_enabled`
        is set to `true`.
        """
        return pulumi.get(self, "valid_redirect_uris")

    @property
    @pulumi.getter(name="webOrigins")
    def web_origins(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
        """
        return pulumi.get(self, "web_origins")

