# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class ClientTimePolicy(pulumi.CustomResource):
    day_month: pulumi.Output[str]
    day_month_end: pulumi.Output[str]
    decision_strategy: pulumi.Output[str]
    description: pulumi.Output[str]
    hour: pulumi.Output[str]
    hour_end: pulumi.Output[str]
    logic: pulumi.Output[str]
    minute: pulumi.Output[str]
    minute_end: pulumi.Output[str]
    month: pulumi.Output[str]
    month_end: pulumi.Output[str]
    name: pulumi.Output[str]
    not_before: pulumi.Output[str]
    not_on_or_after: pulumi.Output[str]
    realm_id: pulumi.Output[str]
    resource_server_id: pulumi.Output[str]
    year: pulumi.Output[str]
    year_end: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, day_month=None, day_month_end=None, decision_strategy=None, description=None, hour=None, hour_end=None, logic=None, minute=None, minute_end=None, month=None, month_end=None, name=None, not_before=None, not_on_or_after=None, realm_id=None, resource_server_id=None, year=None, year_end=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a ClientTimePolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['day_month'] = day_month
            __props__['day_month_end'] = day_month_end
            if decision_strategy is None:
                raise TypeError("Missing required property 'decision_strategy'")
            __props__['decision_strategy'] = decision_strategy
            __props__['description'] = description
            __props__['hour'] = hour
            __props__['hour_end'] = hour_end
            __props__['logic'] = logic
            __props__['minute'] = minute
            __props__['minute_end'] = minute_end
            __props__['month'] = month
            __props__['month_end'] = month_end
            __props__['name'] = name
            __props__['not_before'] = not_before
            __props__['not_on_or_after'] = not_on_or_after
            if realm_id is None:
                raise TypeError("Missing required property 'realm_id'")
            __props__['realm_id'] = realm_id
            if resource_server_id is None:
                raise TypeError("Missing required property 'resource_server_id'")
            __props__['resource_server_id'] = resource_server_id
            __props__['year'] = year
            __props__['year_end'] = year_end
        super(ClientTimePolicy, __self__).__init__(
            'keycloak:openid/clientTimePolicy:ClientTimePolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, day_month=None, day_month_end=None, decision_strategy=None, description=None, hour=None, hour_end=None, logic=None, minute=None, minute_end=None, month=None, month_end=None, name=None, not_before=None, not_on_or_after=None, realm_id=None, resource_server_id=None, year=None, year_end=None):
        """
        Get an existing ClientTimePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["day_month"] = day_month
        __props__["day_month_end"] = day_month_end
        __props__["decision_strategy"] = decision_strategy
        __props__["description"] = description
        __props__["hour"] = hour
        __props__["hour_end"] = hour_end
        __props__["logic"] = logic
        __props__["minute"] = minute
        __props__["minute_end"] = minute_end
        __props__["month"] = month
        __props__["month_end"] = month_end
        __props__["name"] = name
        __props__["not_before"] = not_before
        __props__["not_on_or_after"] = not_on_or_after
        __props__["realm_id"] = realm_id
        __props__["resource_server_id"] = resource_server_id
        __props__["year"] = year
        __props__["year_end"] = year_end
        return ClientTimePolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
