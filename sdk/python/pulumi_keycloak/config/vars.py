# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

import types

__config__ = pulumi.Config('keycloak')


class _ExportableConfig(types.ModuleType):
    @_builtins.property
    def additional_headers(self) -> Optional[str]:
        return __config__.get('additionalHeaders')

    @_builtins.property
    def base_path(self) -> Optional[str]:
        return __config__.get('basePath')

    @_builtins.property
    def client_id(self) -> Optional[str]:
        return __config__.get('clientId')

    @_builtins.property
    def client_secret(self) -> Optional[str]:
        return __config__.get('clientSecret')

    @_builtins.property
    def client_timeout(self) -> int:
        """
        Timeout (in seconds) of the Keycloak client
        """
        return __config__.get_int('clientTimeout') or (_utilities.get_env_int('KEYCLOAK_CLIENT_TIMEOUT') or 5)

    @_builtins.property
    def initial_login(self) -> Optional[bool]:
        """
        Whether or not to login to Keycloak instance on provider initialization
        """
        return __config__.get_bool('initialLogin')

    @_builtins.property
    def jwt_signing_alg(self) -> Optional[str]:
        """
        The algorithm used to sign the JWT when client-jwt is used. Defaults to RS256.
        """
        return __config__.get('jwtSigningAlg')

    @_builtins.property
    def jwt_signing_key(self) -> Optional[str]:
        """
        The PEM-formatted private key used to sign the JWT when client-jwt is used.
        """
        return __config__.get('jwtSigningKey')

    @_builtins.property
    def password(self) -> Optional[str]:
        return __config__.get('password')

    @_builtins.property
    def realm(self) -> Optional[str]:
        return __config__.get('realm')

    @_builtins.property
    def red_hat_sso(self) -> Optional[bool]:
        """
        When true, the provider will treat the Keycloak instance as a Red Hat SSO server, specifically when parsing the version
        returned from the /serverinfo API endpoint.
        """
        return __config__.get_bool('redHatSso')

    @_builtins.property
    def root_ca_certificate(self) -> Optional[str]:
        """
        Allows x509 calls using an unknown CA certificate (for development purposes)
        """
        return __config__.get('rootCaCertificate')

    @_builtins.property
    def tls_insecure_skip_verify(self) -> Optional[bool]:
        """
        Allows ignoring insecure certificates when set to true. Defaults to false. Disabling security check is dangerous and
        should be avoided.
        """
        return __config__.get_bool('tlsInsecureSkipVerify')

    @_builtins.property
    def url(self) -> Optional[str]:
        """
        The base URL of the Keycloak instance, before `/auth`
        """
        return __config__.get('url')

    @_builtins.property
    def username(self) -> Optional[str]:
        return __config__.get('username')

