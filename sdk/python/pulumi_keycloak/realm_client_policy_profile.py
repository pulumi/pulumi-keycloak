# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RealmClientPolicyProfileArgs', 'RealmClientPolicyProfile']

@pulumi.input_type
class RealmClientPolicyProfileArgs:
    def __init__(__self__, *,
                 realm_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 executors: Optional[pulumi.Input[Sequence[pulumi.Input['RealmClientPolicyProfileExecutorArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RealmClientPolicyProfile resource.
        """
        pulumi.set(__self__, "realm_id", realm_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if executors is not None:
            pulumi.set(__self__, "executors", executors)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "realm_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def executors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealmClientPolicyProfileExecutorArgs']]]]:
        return pulumi.get(self, "executors")

    @executors.setter
    def executors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealmClientPolicyProfileExecutorArgs']]]]):
        pulumi.set(self, "executors", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RealmClientPolicyProfileState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 executors: Optional[pulumi.Input[Sequence[pulumi.Input['RealmClientPolicyProfileExecutorArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 realm_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering RealmClientPolicyProfile resources.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if executors is not None:
            pulumi.set(__self__, "executors", executors)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if realm_id is not None:
            pulumi.set(__self__, "realm_id", realm_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def executors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealmClientPolicyProfileExecutorArgs']]]]:
        return pulumi.get(self, "executors")

    @executors.setter
    def executors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealmClientPolicyProfileExecutorArgs']]]]):
        pulumi.set(self, "executors", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "realm_id", value)


@pulumi.type_token("keycloak:index/realmClientPolicyProfile:RealmClientPolicyProfile")
class RealmClientPolicyProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 executors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RealmClientPolicyProfileExecutorArgs', 'RealmClientPolicyProfileExecutorArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 realm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Allows for managing Realm Client Policy Profiles.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm", realm="my-realm")
        profile = keycloak.RealmClientPolicyProfile("profile",
            name="my-profile",
            realm_id=realm.id,
            executors=[
                {
                    "name": "intent-client-bind-checker",
                    "configuration": {
                        "auto-configure": "true",
                    },
                },
                {
                    "name": "secure-session",
                },
            ])
        ```

        ### Attribute Arguments

        - `name` - (Required) The name of the attribute.
        - `realm_id` - (Required) The realm id.
        - `executor` - (Optional) An ordered list of executors

        #### Executor Arguments

        - `name` - (Required) The name of the executor. NOTE! The executor needs to exist
        - `configuration` - (Optional) - A map of configuration values

        ## Import

        This resource currently does not support importing.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RealmClientPolicyProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Allows for managing Realm Client Policy Profiles.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm = keycloak.Realm("realm", realm="my-realm")
        profile = keycloak.RealmClientPolicyProfile("profile",
            name="my-profile",
            realm_id=realm.id,
            executors=[
                {
                    "name": "intent-client-bind-checker",
                    "configuration": {
                        "auto-configure": "true",
                    },
                },
                {
                    "name": "secure-session",
                },
            ])
        ```

        ### Attribute Arguments

        - `name` - (Required) The name of the attribute.
        - `realm_id` - (Required) The realm id.
        - `executor` - (Optional) An ordered list of executors

        #### Executor Arguments

        - `name` - (Required) The name of the executor. NOTE! The executor needs to exist
        - `configuration` - (Optional) - A map of configuration values

        ## Import

        This resource currently does not support importing.

        :param str resource_name: The name of the resource.
        :param RealmClientPolicyProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RealmClientPolicyProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 executors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RealmClientPolicyProfileExecutorArgs', 'RealmClientPolicyProfileExecutorArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 realm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RealmClientPolicyProfileArgs.__new__(RealmClientPolicyProfileArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["executors"] = executors
            __props__.__dict__["name"] = name
            if realm_id is None and not opts.urn:
                raise TypeError("Missing required property 'realm_id'")
            __props__.__dict__["realm_id"] = realm_id
        super(RealmClientPolicyProfile, __self__).__init__(
            'keycloak:index/realmClientPolicyProfile:RealmClientPolicyProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            executors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RealmClientPolicyProfileExecutorArgs', 'RealmClientPolicyProfileExecutorArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            realm_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'RealmClientPolicyProfile':
        """
        Get an existing RealmClientPolicyProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RealmClientPolicyProfileState.__new__(_RealmClientPolicyProfileState)

        __props__.__dict__["description"] = description
        __props__.__dict__["executors"] = executors
        __props__.__dict__["name"] = name
        __props__.__dict__["realm_id"] = realm_id
        return RealmClientPolicyProfile(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def executors(self) -> pulumi.Output[Optional[Sequence['outputs.RealmClientPolicyProfileExecutor']]]:
        return pulumi.get(self, "executors")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "realm_id")

