# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserAttributeMapperArgs', 'UserAttributeMapper']

@pulumi.input_type
class UserAttributeMapperArgs:
    def __init__(__self__, *,
                 ldap_attribute: pulumi.Input[str],
                 ldap_user_federation_id: pulumi.Input[str],
                 realm_id: pulumi.Input[str],
                 user_model_attribute: pulumi.Input[str],
                 always_read_value_from_ldap: Optional[pulumi.Input[bool]] = None,
                 attribute_default_value: Optional[pulumi.Input[str]] = None,
                 is_binary_attribute: Optional[pulumi.Input[bool]] = None,
                 is_mandatory_in_ldap: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a UserAttributeMapper resource.
        :param pulumi.Input[str] ldap_attribute: Name of the mapped attribute on the LDAP object.
        :param pulumi.Input[str] ldap_user_federation_id: The ID of the LDAP user federation provider to attach this mapper to.
        :param pulumi.Input[str] realm_id: The realm that this LDAP mapper will exist in.
        :param pulumi.Input[str] user_model_attribute: Name of the user property or attribute you want to map the LDAP attribute into.
        :param pulumi.Input[bool] always_read_value_from_ldap: When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
        :param pulumi.Input[str] attribute_default_value: Default value to set in LDAP if `is_mandatory_in_ldap` is true and the value is empty.
        :param pulumi.Input[bool] is_binary_attribute: Should be true for binary LDAP attributes.
        :param pulumi.Input[bool] is_mandatory_in_ldap: When `true`, this attribute must exist in LDAP. Defaults to `false`.
        :param pulumi.Input[str] name: Display name of this mapper when displayed in the console.
        :param pulumi.Input[bool] read_only: When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
        """
        UserAttributeMapperArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ldap_attribute=ldap_attribute,
            ldap_user_federation_id=ldap_user_federation_id,
            realm_id=realm_id,
            user_model_attribute=user_model_attribute,
            always_read_value_from_ldap=always_read_value_from_ldap,
            attribute_default_value=attribute_default_value,
            is_binary_attribute=is_binary_attribute,
            is_mandatory_in_ldap=is_mandatory_in_ldap,
            name=name,
            read_only=read_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ldap_attribute: Optional[pulumi.Input[str]] = None,
             ldap_user_federation_id: Optional[pulumi.Input[str]] = None,
             realm_id: Optional[pulumi.Input[str]] = None,
             user_model_attribute: Optional[pulumi.Input[str]] = None,
             always_read_value_from_ldap: Optional[pulumi.Input[bool]] = None,
             attribute_default_value: Optional[pulumi.Input[str]] = None,
             is_binary_attribute: Optional[pulumi.Input[bool]] = None,
             is_mandatory_in_ldap: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             read_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ldap_attribute is None and 'ldapAttribute' in kwargs:
            ldap_attribute = kwargs['ldapAttribute']
        if ldap_attribute is None:
            raise TypeError("Missing 'ldap_attribute' argument")
        if ldap_user_federation_id is None and 'ldapUserFederationId' in kwargs:
            ldap_user_federation_id = kwargs['ldapUserFederationId']
        if ldap_user_federation_id is None:
            raise TypeError("Missing 'ldap_user_federation_id' argument")
        if realm_id is None and 'realmId' in kwargs:
            realm_id = kwargs['realmId']
        if realm_id is None:
            raise TypeError("Missing 'realm_id' argument")
        if user_model_attribute is None and 'userModelAttribute' in kwargs:
            user_model_attribute = kwargs['userModelAttribute']
        if user_model_attribute is None:
            raise TypeError("Missing 'user_model_attribute' argument")
        if always_read_value_from_ldap is None and 'alwaysReadValueFromLdap' in kwargs:
            always_read_value_from_ldap = kwargs['alwaysReadValueFromLdap']
        if attribute_default_value is None and 'attributeDefaultValue' in kwargs:
            attribute_default_value = kwargs['attributeDefaultValue']
        if is_binary_attribute is None and 'isBinaryAttribute' in kwargs:
            is_binary_attribute = kwargs['isBinaryAttribute']
        if is_mandatory_in_ldap is None and 'isMandatoryInLdap' in kwargs:
            is_mandatory_in_ldap = kwargs['isMandatoryInLdap']
        if read_only is None and 'readOnly' in kwargs:
            read_only = kwargs['readOnly']

        _setter("ldap_attribute", ldap_attribute)
        _setter("ldap_user_federation_id", ldap_user_federation_id)
        _setter("realm_id", realm_id)
        _setter("user_model_attribute", user_model_attribute)
        if always_read_value_from_ldap is not None:
            _setter("always_read_value_from_ldap", always_read_value_from_ldap)
        if attribute_default_value is not None:
            _setter("attribute_default_value", attribute_default_value)
        if is_binary_attribute is not None:
            _setter("is_binary_attribute", is_binary_attribute)
        if is_mandatory_in_ldap is not None:
            _setter("is_mandatory_in_ldap", is_mandatory_in_ldap)
        if name is not None:
            _setter("name", name)
        if read_only is not None:
            _setter("read_only", read_only)

    @property
    @pulumi.getter(name="ldapAttribute")
    def ldap_attribute(self) -> pulumi.Input[str]:
        """
        Name of the mapped attribute on the LDAP object.
        """
        return pulumi.get(self, "ldap_attribute")

    @ldap_attribute.setter
    def ldap_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "ldap_attribute", value)

    @property
    @pulumi.getter(name="ldapUserFederationId")
    def ldap_user_federation_id(self) -> pulumi.Input[str]:
        """
        The ID of the LDAP user federation provider to attach this mapper to.
        """
        return pulumi.get(self, "ldap_user_federation_id")

    @ldap_user_federation_id.setter
    def ldap_user_federation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ldap_user_federation_id", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Input[str]:
        """
        The realm that this LDAP mapper will exist in.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="userModelAttribute")
    def user_model_attribute(self) -> pulumi.Input[str]:
        """
        Name of the user property or attribute you want to map the LDAP attribute into.
        """
        return pulumi.get(self, "user_model_attribute")

    @user_model_attribute.setter
    def user_model_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_model_attribute", value)

    @property
    @pulumi.getter(name="alwaysReadValueFromLdap")
    def always_read_value_from_ldap(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
        """
        return pulumi.get(self, "always_read_value_from_ldap")

    @always_read_value_from_ldap.setter
    def always_read_value_from_ldap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_read_value_from_ldap", value)

    @property
    @pulumi.getter(name="attributeDefaultValue")
    def attribute_default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Default value to set in LDAP if `is_mandatory_in_ldap` is true and the value is empty.
        """
        return pulumi.get(self, "attribute_default_value")

    @attribute_default_value.setter
    def attribute_default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_default_value", value)

    @property
    @pulumi.getter(name="isBinaryAttribute")
    def is_binary_attribute(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true for binary LDAP attributes.
        """
        return pulumi.get(self, "is_binary_attribute")

    @is_binary_attribute.setter
    def is_binary_attribute(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_binary_attribute", value)

    @property
    @pulumi.getter(name="isMandatoryInLdap")
    def is_mandatory_in_ldap(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, this attribute must exist in LDAP. Defaults to `false`.
        """
        return pulumi.get(self, "is_mandatory_in_ldap")

    @is_mandatory_in_ldap.setter
    def is_mandatory_in_ldap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_mandatory_in_ldap", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of this mapper when displayed in the console.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class _UserAttributeMapperState:
    def __init__(__self__, *,
                 always_read_value_from_ldap: Optional[pulumi.Input[bool]] = None,
                 attribute_default_value: Optional[pulumi.Input[str]] = None,
                 is_binary_attribute: Optional[pulumi.Input[bool]] = None,
                 is_mandatory_in_ldap: Optional[pulumi.Input[bool]] = None,
                 ldap_attribute: Optional[pulumi.Input[str]] = None,
                 ldap_user_federation_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 user_model_attribute: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserAttributeMapper resources.
        :param pulumi.Input[bool] always_read_value_from_ldap: When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
        :param pulumi.Input[str] attribute_default_value: Default value to set in LDAP if `is_mandatory_in_ldap` is true and the value is empty.
        :param pulumi.Input[bool] is_binary_attribute: Should be true for binary LDAP attributes.
        :param pulumi.Input[bool] is_mandatory_in_ldap: When `true`, this attribute must exist in LDAP. Defaults to `false`.
        :param pulumi.Input[str] ldap_attribute: Name of the mapped attribute on the LDAP object.
        :param pulumi.Input[str] ldap_user_federation_id: The ID of the LDAP user federation provider to attach this mapper to.
        :param pulumi.Input[str] name: Display name of this mapper when displayed in the console.
        :param pulumi.Input[bool] read_only: When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
        :param pulumi.Input[str] realm_id: The realm that this LDAP mapper will exist in.
        :param pulumi.Input[str] user_model_attribute: Name of the user property or attribute you want to map the LDAP attribute into.
        """
        _UserAttributeMapperState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            always_read_value_from_ldap=always_read_value_from_ldap,
            attribute_default_value=attribute_default_value,
            is_binary_attribute=is_binary_attribute,
            is_mandatory_in_ldap=is_mandatory_in_ldap,
            ldap_attribute=ldap_attribute,
            ldap_user_federation_id=ldap_user_federation_id,
            name=name,
            read_only=read_only,
            realm_id=realm_id,
            user_model_attribute=user_model_attribute,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             always_read_value_from_ldap: Optional[pulumi.Input[bool]] = None,
             attribute_default_value: Optional[pulumi.Input[str]] = None,
             is_binary_attribute: Optional[pulumi.Input[bool]] = None,
             is_mandatory_in_ldap: Optional[pulumi.Input[bool]] = None,
             ldap_attribute: Optional[pulumi.Input[str]] = None,
             ldap_user_federation_id: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             read_only: Optional[pulumi.Input[bool]] = None,
             realm_id: Optional[pulumi.Input[str]] = None,
             user_model_attribute: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if always_read_value_from_ldap is None and 'alwaysReadValueFromLdap' in kwargs:
            always_read_value_from_ldap = kwargs['alwaysReadValueFromLdap']
        if attribute_default_value is None and 'attributeDefaultValue' in kwargs:
            attribute_default_value = kwargs['attributeDefaultValue']
        if is_binary_attribute is None and 'isBinaryAttribute' in kwargs:
            is_binary_attribute = kwargs['isBinaryAttribute']
        if is_mandatory_in_ldap is None and 'isMandatoryInLdap' in kwargs:
            is_mandatory_in_ldap = kwargs['isMandatoryInLdap']
        if ldap_attribute is None and 'ldapAttribute' in kwargs:
            ldap_attribute = kwargs['ldapAttribute']
        if ldap_user_federation_id is None and 'ldapUserFederationId' in kwargs:
            ldap_user_federation_id = kwargs['ldapUserFederationId']
        if read_only is None and 'readOnly' in kwargs:
            read_only = kwargs['readOnly']
        if realm_id is None and 'realmId' in kwargs:
            realm_id = kwargs['realmId']
        if user_model_attribute is None and 'userModelAttribute' in kwargs:
            user_model_attribute = kwargs['userModelAttribute']

        if always_read_value_from_ldap is not None:
            _setter("always_read_value_from_ldap", always_read_value_from_ldap)
        if attribute_default_value is not None:
            _setter("attribute_default_value", attribute_default_value)
        if is_binary_attribute is not None:
            _setter("is_binary_attribute", is_binary_attribute)
        if is_mandatory_in_ldap is not None:
            _setter("is_mandatory_in_ldap", is_mandatory_in_ldap)
        if ldap_attribute is not None:
            _setter("ldap_attribute", ldap_attribute)
        if ldap_user_federation_id is not None:
            _setter("ldap_user_federation_id", ldap_user_federation_id)
        if name is not None:
            _setter("name", name)
        if read_only is not None:
            _setter("read_only", read_only)
        if realm_id is not None:
            _setter("realm_id", realm_id)
        if user_model_attribute is not None:
            _setter("user_model_attribute", user_model_attribute)

    @property
    @pulumi.getter(name="alwaysReadValueFromLdap")
    def always_read_value_from_ldap(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
        """
        return pulumi.get(self, "always_read_value_from_ldap")

    @always_read_value_from_ldap.setter
    def always_read_value_from_ldap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_read_value_from_ldap", value)

    @property
    @pulumi.getter(name="attributeDefaultValue")
    def attribute_default_value(self) -> Optional[pulumi.Input[str]]:
        """
        Default value to set in LDAP if `is_mandatory_in_ldap` is true and the value is empty.
        """
        return pulumi.get(self, "attribute_default_value")

    @attribute_default_value.setter
    def attribute_default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_default_value", value)

    @property
    @pulumi.getter(name="isBinaryAttribute")
    def is_binary_attribute(self) -> Optional[pulumi.Input[bool]]:
        """
        Should be true for binary LDAP attributes.
        """
        return pulumi.get(self, "is_binary_attribute")

    @is_binary_attribute.setter
    def is_binary_attribute(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_binary_attribute", value)

    @property
    @pulumi.getter(name="isMandatoryInLdap")
    def is_mandatory_in_ldap(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, this attribute must exist in LDAP. Defaults to `false`.
        """
        return pulumi.get(self, "is_mandatory_in_ldap")

    @is_mandatory_in_ldap.setter
    def is_mandatory_in_ldap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_mandatory_in_ldap", value)

    @property
    @pulumi.getter(name="ldapAttribute")
    def ldap_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the mapped attribute on the LDAP object.
        """
        return pulumi.get(self, "ldap_attribute")

    @ldap_attribute.setter
    def ldap_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_attribute", value)

    @property
    @pulumi.getter(name="ldapUserFederationId")
    def ldap_user_federation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the LDAP user federation provider to attach this mapper to.
        """
        return pulumi.get(self, "ldap_user_federation_id")

    @ldap_user_federation_id.setter
    def ldap_user_federation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_user_federation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of this mapper when displayed in the console.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The realm that this LDAP mapper will exist in.
        """
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="userModelAttribute")
    def user_model_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user property or attribute you want to map the LDAP attribute into.
        """
        return pulumi.get(self, "user_model_attribute")

    @user_model_attribute.setter
    def user_model_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_model_attribute", value)


class UserAttributeMapper(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_read_value_from_ldap: Optional[pulumi.Input[bool]] = None,
                 attribute_default_value: Optional[pulumi.Input[str]] = None,
                 is_binary_attribute: Optional[pulumi.Input[bool]] = None,
                 is_mandatory_in_ldap: Optional[pulumi.Input[bool]] = None,
                 ldap_attribute: Optional[pulumi.Input[str]] = None,
                 ldap_user_federation_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 user_model_attribute: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Allows for creating and managing user attribute mappers for Keycloak users
        federated via LDAP.

        The LDAP user attribute mapper can be used to map a single LDAP attribute
        to an attribute on the Keycloak user model.

        ## Import

        LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`. The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Examplebash

        ```sh
         $ pulumi import keycloak:ldap/userAttributeMapper:UserAttributeMapper ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] always_read_value_from_ldap: When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
        :param pulumi.Input[str] attribute_default_value: Default value to set in LDAP if `is_mandatory_in_ldap` is true and the value is empty.
        :param pulumi.Input[bool] is_binary_attribute: Should be true for binary LDAP attributes.
        :param pulumi.Input[bool] is_mandatory_in_ldap: When `true`, this attribute must exist in LDAP. Defaults to `false`.
        :param pulumi.Input[str] ldap_attribute: Name of the mapped attribute on the LDAP object.
        :param pulumi.Input[str] ldap_user_federation_id: The ID of the LDAP user federation provider to attach this mapper to.
        :param pulumi.Input[str] name: Display name of this mapper when displayed in the console.
        :param pulumi.Input[bool] read_only: When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
        :param pulumi.Input[str] realm_id: The realm that this LDAP mapper will exist in.
        :param pulumi.Input[str] user_model_attribute: Name of the user property or attribute you want to map the LDAP attribute into.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserAttributeMapperArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Allows for creating and managing user attribute mappers for Keycloak users
        federated via LDAP.

        The LDAP user attribute mapper can be used to map a single LDAP attribute
        to an attribute on the Keycloak user model.

        ## Import

        LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`. The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Examplebash

        ```sh
         $ pulumi import keycloak:ldap/userAttributeMapper:UserAttributeMapper ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
        ```

        :param str resource_name: The name of the resource.
        :param UserAttributeMapperArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserAttributeMapperArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            UserAttributeMapperArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_read_value_from_ldap: Optional[pulumi.Input[bool]] = None,
                 attribute_default_value: Optional[pulumi.Input[str]] = None,
                 is_binary_attribute: Optional[pulumi.Input[bool]] = None,
                 is_mandatory_in_ldap: Optional[pulumi.Input[bool]] = None,
                 ldap_attribute: Optional[pulumi.Input[str]] = None,
                 ldap_user_federation_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 realm_id: Optional[pulumi.Input[str]] = None,
                 user_model_attribute: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserAttributeMapperArgs.__new__(UserAttributeMapperArgs)

            __props__.__dict__["always_read_value_from_ldap"] = always_read_value_from_ldap
            __props__.__dict__["attribute_default_value"] = attribute_default_value
            __props__.__dict__["is_binary_attribute"] = is_binary_attribute
            __props__.__dict__["is_mandatory_in_ldap"] = is_mandatory_in_ldap
            if ldap_attribute is None and not opts.urn:
                raise TypeError("Missing required property 'ldap_attribute'")
            __props__.__dict__["ldap_attribute"] = ldap_attribute
            if ldap_user_federation_id is None and not opts.urn:
                raise TypeError("Missing required property 'ldap_user_federation_id'")
            __props__.__dict__["ldap_user_federation_id"] = ldap_user_federation_id
            __props__.__dict__["name"] = name
            __props__.__dict__["read_only"] = read_only
            if realm_id is None and not opts.urn:
                raise TypeError("Missing required property 'realm_id'")
            __props__.__dict__["realm_id"] = realm_id
            if user_model_attribute is None and not opts.urn:
                raise TypeError("Missing required property 'user_model_attribute'")
            __props__.__dict__["user_model_attribute"] = user_model_attribute
        super(UserAttributeMapper, __self__).__init__(
            'keycloak:ldap/userAttributeMapper:UserAttributeMapper',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            always_read_value_from_ldap: Optional[pulumi.Input[bool]] = None,
            attribute_default_value: Optional[pulumi.Input[str]] = None,
            is_binary_attribute: Optional[pulumi.Input[bool]] = None,
            is_mandatory_in_ldap: Optional[pulumi.Input[bool]] = None,
            ldap_attribute: Optional[pulumi.Input[str]] = None,
            ldap_user_federation_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            read_only: Optional[pulumi.Input[bool]] = None,
            realm_id: Optional[pulumi.Input[str]] = None,
            user_model_attribute: Optional[pulumi.Input[str]] = None) -> 'UserAttributeMapper':
        """
        Get an existing UserAttributeMapper resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] always_read_value_from_ldap: When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
        :param pulumi.Input[str] attribute_default_value: Default value to set in LDAP if `is_mandatory_in_ldap` is true and the value is empty.
        :param pulumi.Input[bool] is_binary_attribute: Should be true for binary LDAP attributes.
        :param pulumi.Input[bool] is_mandatory_in_ldap: When `true`, this attribute must exist in LDAP. Defaults to `false`.
        :param pulumi.Input[str] ldap_attribute: Name of the mapped attribute on the LDAP object.
        :param pulumi.Input[str] ldap_user_federation_id: The ID of the LDAP user federation provider to attach this mapper to.
        :param pulumi.Input[str] name: Display name of this mapper when displayed in the console.
        :param pulumi.Input[bool] read_only: When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
        :param pulumi.Input[str] realm_id: The realm that this LDAP mapper will exist in.
        :param pulumi.Input[str] user_model_attribute: Name of the user property or attribute you want to map the LDAP attribute into.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserAttributeMapperState.__new__(_UserAttributeMapperState)

        __props__.__dict__["always_read_value_from_ldap"] = always_read_value_from_ldap
        __props__.__dict__["attribute_default_value"] = attribute_default_value
        __props__.__dict__["is_binary_attribute"] = is_binary_attribute
        __props__.__dict__["is_mandatory_in_ldap"] = is_mandatory_in_ldap
        __props__.__dict__["ldap_attribute"] = ldap_attribute
        __props__.__dict__["ldap_user_federation_id"] = ldap_user_federation_id
        __props__.__dict__["name"] = name
        __props__.__dict__["read_only"] = read_only
        __props__.__dict__["realm_id"] = realm_id
        __props__.__dict__["user_model_attribute"] = user_model_attribute
        return UserAttributeMapper(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alwaysReadValueFromLdap")
    def always_read_value_from_ldap(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
        """
        return pulumi.get(self, "always_read_value_from_ldap")

    @property
    @pulumi.getter(name="attributeDefaultValue")
    def attribute_default_value(self) -> pulumi.Output[Optional[str]]:
        """
        Default value to set in LDAP if `is_mandatory_in_ldap` is true and the value is empty.
        """
        return pulumi.get(self, "attribute_default_value")

    @property
    @pulumi.getter(name="isBinaryAttribute")
    def is_binary_attribute(self) -> pulumi.Output[Optional[bool]]:
        """
        Should be true for binary LDAP attributes.
        """
        return pulumi.get(self, "is_binary_attribute")

    @property
    @pulumi.getter(name="isMandatoryInLdap")
    def is_mandatory_in_ldap(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, this attribute must exist in LDAP. Defaults to `false`.
        """
        return pulumi.get(self, "is_mandatory_in_ldap")

    @property
    @pulumi.getter(name="ldapAttribute")
    def ldap_attribute(self) -> pulumi.Output[str]:
        """
        Name of the mapped attribute on the LDAP object.
        """
        return pulumi.get(self, "ldap_attribute")

    @property
    @pulumi.getter(name="ldapUserFederationId")
    def ldap_user_federation_id(self) -> pulumi.Output[str]:
        """
        The ID of the LDAP user federation provider to attach this mapper to.
        """
        return pulumi.get(self, "ldap_user_federation_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Display name of this mapper when displayed in the console.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> pulumi.Output[Optional[bool]]:
        """
        When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Output[str]:
        """
        The realm that this LDAP mapper will exist in.
        """
        return pulumi.get(self, "realm_id")

    @property
    @pulumi.getter(name="userModelAttribute")
    def user_model_attribute(self) -> pulumi.Output[str]:
        """
        Name of the user property or attribute you want to map the LDAP attribute into.
        """
        return pulumi.get(self, "user_model_attribute")

