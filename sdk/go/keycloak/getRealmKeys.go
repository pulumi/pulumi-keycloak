// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # getRealmKeys data source
//
// Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status.
//
// Remarks:
//
// - A key must meet all filter criteria
// - This datasource may return more than one value.
// - If no key matches the filter criteria, then an error is returned.
func GetRealmKeys(ctx *pulumi.Context, args *GetRealmKeysArgs, opts ...pulumi.InvokeOption) (*GetRealmKeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRealmKeysResult
	err := ctx.Invoke("keycloak:index/getRealmKeys:getRealmKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRealmKeys.
type GetRealmKeysArgs struct {
	Algorithms []string `pulumi:"algorithms"`
	RealmId    string   `pulumi:"realmId"`
	Statuses   []string `pulumi:"statuses"`
}

// A collection of values returned by getRealmKeys.
type GetRealmKeysResult struct {
	Algorithms []string `pulumi:"algorithms"`
	// The provider-assigned unique ID for this managed resource.
	Id       string            `pulumi:"id"`
	Keys     []GetRealmKeysKey `pulumi:"keys"`
	RealmId  string            `pulumi:"realmId"`
	Statuses []string          `pulumi:"statuses"`
}

func GetRealmKeysOutput(ctx *pulumi.Context, args GetRealmKeysOutputArgs, opts ...pulumi.InvokeOption) GetRealmKeysResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRealmKeysResultOutput, error) {
			args := v.(GetRealmKeysArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetRealmKeysResult
			secret, err := ctx.InvokePackageRaw("keycloak:index/getRealmKeys:getRealmKeys", args, &rv, "", opts...)
			if err != nil {
				return GetRealmKeysResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetRealmKeysResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetRealmKeysResultOutput), nil
			}
			return output, nil
		}).(GetRealmKeysResultOutput)
}

// A collection of arguments for invoking getRealmKeys.
type GetRealmKeysOutputArgs struct {
	Algorithms pulumi.StringArrayInput `pulumi:"algorithms"`
	RealmId    pulumi.StringInput      `pulumi:"realmId"`
	Statuses   pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetRealmKeysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmKeysArgs)(nil)).Elem()
}

// A collection of values returned by getRealmKeys.
type GetRealmKeysResultOutput struct{ *pulumi.OutputState }

func (GetRealmKeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmKeysResult)(nil)).Elem()
}

func (o GetRealmKeysResultOutput) ToGetRealmKeysResultOutput() GetRealmKeysResultOutput {
	return o
}

func (o GetRealmKeysResultOutput) ToGetRealmKeysResultOutputWithContext(ctx context.Context) GetRealmKeysResultOutput {
	return o
}

func (o GetRealmKeysResultOutput) Algorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRealmKeysResult) []string { return v.Algorithms }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRealmKeysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRealmKeysResultOutput) Keys() GetRealmKeysKeyArrayOutput {
	return o.ApplyT(func(v GetRealmKeysResult) []GetRealmKeysKey { return v.Keys }).(GetRealmKeysKeyArrayOutput)
}

func (o GetRealmKeysResultOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysResult) string { return v.RealmId }).(pulumi.StringOutput)
}

func (o GetRealmKeysResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRealmKeysResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRealmKeysResultOutput{})
}
