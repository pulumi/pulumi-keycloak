// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows you to manage the set of default client scopes for a Keycloak realm, which are used when new clients are created.
//
// Note that this resource attempts to be an **authoritative** source over the default client scopes for a Keycloak realm,
// so any Keycloak defaults and manual adjustments will be overwritten.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			clientScope, err := openid.NewClientScope(ctx, "client_scope", &openid.ClientScopeArgs{
//				RealmId: realm.ID(),
//				Name:    pulumi.String("test-client-scope"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keycloak.NewRealmDefaultClientScopes(ctx, "default_scopes", &keycloak.RealmDefaultClientScopesArgs{
//				RealmId: realm.ID(),
//				DefaultScopes: pulumi.StringArray{
//					pulumi.String("profile"),
//					pulumi.String("email"),
//					pulumi.String("roles"),
//					pulumi.String("web-origins"),
//					clientScope.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource does not support import. Instead of importing, feel free to create this resource
//
// as if it did not already exist on the server.
type RealmDefaultClientScopes struct {
	pulumi.CustomResourceState

	// An array of default client scope names that should be used when creating new Keycloak clients.
	DefaultScopes pulumi.StringArrayOutput `pulumi:"defaultScopes"`
	// The realm this client and scopes exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewRealmDefaultClientScopes registers a new resource with the given unique name, arguments, and options.
func NewRealmDefaultClientScopes(ctx *pulumi.Context,
	name string, args *RealmDefaultClientScopesArgs, opts ...pulumi.ResourceOption) (*RealmDefaultClientScopes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultScopes == nil {
		return nil, errors.New("invalid value for required argument 'DefaultScopes'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RealmDefaultClientScopes
	err := ctx.RegisterResource("keycloak:index/realmDefaultClientScopes:RealmDefaultClientScopes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealmDefaultClientScopes gets an existing RealmDefaultClientScopes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealmDefaultClientScopes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmDefaultClientScopesState, opts ...pulumi.ResourceOption) (*RealmDefaultClientScopes, error) {
	var resource RealmDefaultClientScopes
	err := ctx.ReadResource("keycloak:index/realmDefaultClientScopes:RealmDefaultClientScopes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RealmDefaultClientScopes resources.
type realmDefaultClientScopesState struct {
	// An array of default client scope names that should be used when creating new Keycloak clients.
	DefaultScopes []string `pulumi:"defaultScopes"`
	// The realm this client and scopes exists in.
	RealmId *string `pulumi:"realmId"`
}

type RealmDefaultClientScopesState struct {
	// An array of default client scope names that should be used when creating new Keycloak clients.
	DefaultScopes pulumi.StringArrayInput
	// The realm this client and scopes exists in.
	RealmId pulumi.StringPtrInput
}

func (RealmDefaultClientScopesState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmDefaultClientScopesState)(nil)).Elem()
}

type realmDefaultClientScopesArgs struct {
	// An array of default client scope names that should be used when creating new Keycloak clients.
	DefaultScopes []string `pulumi:"defaultScopes"`
	// The realm this client and scopes exists in.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a RealmDefaultClientScopes resource.
type RealmDefaultClientScopesArgs struct {
	// An array of default client scope names that should be used when creating new Keycloak clients.
	DefaultScopes pulumi.StringArrayInput
	// The realm this client and scopes exists in.
	RealmId pulumi.StringInput
}

func (RealmDefaultClientScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmDefaultClientScopesArgs)(nil)).Elem()
}

type RealmDefaultClientScopesInput interface {
	pulumi.Input

	ToRealmDefaultClientScopesOutput() RealmDefaultClientScopesOutput
	ToRealmDefaultClientScopesOutputWithContext(ctx context.Context) RealmDefaultClientScopesOutput
}

func (*RealmDefaultClientScopes) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmDefaultClientScopes)(nil)).Elem()
}

func (i *RealmDefaultClientScopes) ToRealmDefaultClientScopesOutput() RealmDefaultClientScopesOutput {
	return i.ToRealmDefaultClientScopesOutputWithContext(context.Background())
}

func (i *RealmDefaultClientScopes) ToRealmDefaultClientScopesOutputWithContext(ctx context.Context) RealmDefaultClientScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmDefaultClientScopesOutput)
}

// RealmDefaultClientScopesArrayInput is an input type that accepts RealmDefaultClientScopesArray and RealmDefaultClientScopesArrayOutput values.
// You can construct a concrete instance of `RealmDefaultClientScopesArrayInput` via:
//
//	RealmDefaultClientScopesArray{ RealmDefaultClientScopesArgs{...} }
type RealmDefaultClientScopesArrayInput interface {
	pulumi.Input

	ToRealmDefaultClientScopesArrayOutput() RealmDefaultClientScopesArrayOutput
	ToRealmDefaultClientScopesArrayOutputWithContext(context.Context) RealmDefaultClientScopesArrayOutput
}

type RealmDefaultClientScopesArray []RealmDefaultClientScopesInput

func (RealmDefaultClientScopesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmDefaultClientScopes)(nil)).Elem()
}

func (i RealmDefaultClientScopesArray) ToRealmDefaultClientScopesArrayOutput() RealmDefaultClientScopesArrayOutput {
	return i.ToRealmDefaultClientScopesArrayOutputWithContext(context.Background())
}

func (i RealmDefaultClientScopesArray) ToRealmDefaultClientScopesArrayOutputWithContext(ctx context.Context) RealmDefaultClientScopesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmDefaultClientScopesArrayOutput)
}

// RealmDefaultClientScopesMapInput is an input type that accepts RealmDefaultClientScopesMap and RealmDefaultClientScopesMapOutput values.
// You can construct a concrete instance of `RealmDefaultClientScopesMapInput` via:
//
//	RealmDefaultClientScopesMap{ "key": RealmDefaultClientScopesArgs{...} }
type RealmDefaultClientScopesMapInput interface {
	pulumi.Input

	ToRealmDefaultClientScopesMapOutput() RealmDefaultClientScopesMapOutput
	ToRealmDefaultClientScopesMapOutputWithContext(context.Context) RealmDefaultClientScopesMapOutput
}

type RealmDefaultClientScopesMap map[string]RealmDefaultClientScopesInput

func (RealmDefaultClientScopesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmDefaultClientScopes)(nil)).Elem()
}

func (i RealmDefaultClientScopesMap) ToRealmDefaultClientScopesMapOutput() RealmDefaultClientScopesMapOutput {
	return i.ToRealmDefaultClientScopesMapOutputWithContext(context.Background())
}

func (i RealmDefaultClientScopesMap) ToRealmDefaultClientScopesMapOutputWithContext(ctx context.Context) RealmDefaultClientScopesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmDefaultClientScopesMapOutput)
}

type RealmDefaultClientScopesOutput struct{ *pulumi.OutputState }

func (RealmDefaultClientScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmDefaultClientScopes)(nil)).Elem()
}

func (o RealmDefaultClientScopesOutput) ToRealmDefaultClientScopesOutput() RealmDefaultClientScopesOutput {
	return o
}

func (o RealmDefaultClientScopesOutput) ToRealmDefaultClientScopesOutputWithContext(ctx context.Context) RealmDefaultClientScopesOutput {
	return o
}

// An array of default client scope names that should be used when creating new Keycloak clients.
func (o RealmDefaultClientScopesOutput) DefaultScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RealmDefaultClientScopes) pulumi.StringArrayOutput { return v.DefaultScopes }).(pulumi.StringArrayOutput)
}

// The realm this client and scopes exists in.
func (o RealmDefaultClientScopesOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmDefaultClientScopes) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type RealmDefaultClientScopesArrayOutput struct{ *pulumi.OutputState }

func (RealmDefaultClientScopesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmDefaultClientScopes)(nil)).Elem()
}

func (o RealmDefaultClientScopesArrayOutput) ToRealmDefaultClientScopesArrayOutput() RealmDefaultClientScopesArrayOutput {
	return o
}

func (o RealmDefaultClientScopesArrayOutput) ToRealmDefaultClientScopesArrayOutputWithContext(ctx context.Context) RealmDefaultClientScopesArrayOutput {
	return o
}

func (o RealmDefaultClientScopesArrayOutput) Index(i pulumi.IntInput) RealmDefaultClientScopesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RealmDefaultClientScopes {
		return vs[0].([]*RealmDefaultClientScopes)[vs[1].(int)]
	}).(RealmDefaultClientScopesOutput)
}

type RealmDefaultClientScopesMapOutput struct{ *pulumi.OutputState }

func (RealmDefaultClientScopesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmDefaultClientScopes)(nil)).Elem()
}

func (o RealmDefaultClientScopesMapOutput) ToRealmDefaultClientScopesMapOutput() RealmDefaultClientScopesMapOutput {
	return o
}

func (o RealmDefaultClientScopesMapOutput) ToRealmDefaultClientScopesMapOutputWithContext(ctx context.Context) RealmDefaultClientScopesMapOutput {
	return o
}

func (o RealmDefaultClientScopesMapOutput) MapIndex(k pulumi.StringInput) RealmDefaultClientScopesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RealmDefaultClientScopes {
		return vs[0].(map[string]*RealmDefaultClientScopes)[vs[1].(string)]
	}).(RealmDefaultClientScopesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmDefaultClientScopesInput)(nil)).Elem(), &RealmDefaultClientScopes{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmDefaultClientScopesArrayInput)(nil)).Elem(), RealmDefaultClientScopesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmDefaultClientScopesMapInput)(nil)).Elem(), RealmDefaultClientScopesMap{})
	pulumi.RegisterOutputType(RealmDefaultClientScopesOutput{})
	pulumi.RegisterOutputType(RealmDefaultClientScopesArrayOutput{})
	pulumi.RegisterOutputType(RealmDefaultClientScopesMapOutput{})
}
