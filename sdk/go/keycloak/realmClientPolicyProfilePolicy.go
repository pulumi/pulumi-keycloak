// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RealmClientPolicyProfilePolicy struct {
	pulumi.CustomResourceState

	Conditions  RealmClientPolicyProfilePolicyConditionArrayOutput `pulumi:"conditions"`
	Description pulumi.StringPtrOutput                             `pulumi:"description"`
	Enabled     pulumi.BoolPtrOutput                               `pulumi:"enabled"`
	Name        pulumi.StringOutput                                `pulumi:"name"`
	Profiles    pulumi.StringArrayOutput                           `pulumi:"profiles"`
	RealmId     pulumi.StringOutput                                `pulumi:"realmId"`
}

// NewRealmClientPolicyProfilePolicy registers a new resource with the given unique name, arguments, and options.
func NewRealmClientPolicyProfilePolicy(ctx *pulumi.Context,
	name string, args *RealmClientPolicyProfilePolicyArgs, opts ...pulumi.ResourceOption) (*RealmClientPolicyProfilePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Profiles == nil {
		return nil, errors.New("invalid value for required argument 'Profiles'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RealmClientPolicyProfilePolicy
	err := ctx.RegisterResource("keycloak:index/realmClientPolicyProfilePolicy:RealmClientPolicyProfilePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealmClientPolicyProfilePolicy gets an existing RealmClientPolicyProfilePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealmClientPolicyProfilePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmClientPolicyProfilePolicyState, opts ...pulumi.ResourceOption) (*RealmClientPolicyProfilePolicy, error) {
	var resource RealmClientPolicyProfilePolicy
	err := ctx.ReadResource("keycloak:index/realmClientPolicyProfilePolicy:RealmClientPolicyProfilePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RealmClientPolicyProfilePolicy resources.
type realmClientPolicyProfilePolicyState struct {
	Conditions  []RealmClientPolicyProfilePolicyCondition `pulumi:"conditions"`
	Description *string                                   `pulumi:"description"`
	Enabled     *bool                                     `pulumi:"enabled"`
	Name        *string                                   `pulumi:"name"`
	Profiles    []string                                  `pulumi:"profiles"`
	RealmId     *string                                   `pulumi:"realmId"`
}

type RealmClientPolicyProfilePolicyState struct {
	Conditions  RealmClientPolicyProfilePolicyConditionArrayInput
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	Profiles    pulumi.StringArrayInput
	RealmId     pulumi.StringPtrInput
}

func (RealmClientPolicyProfilePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmClientPolicyProfilePolicyState)(nil)).Elem()
}

type realmClientPolicyProfilePolicyArgs struct {
	Conditions  []RealmClientPolicyProfilePolicyCondition `pulumi:"conditions"`
	Description *string                                   `pulumi:"description"`
	Enabled     *bool                                     `pulumi:"enabled"`
	Name        *string                                   `pulumi:"name"`
	Profiles    []string                                  `pulumi:"profiles"`
	RealmId     string                                    `pulumi:"realmId"`
}

// The set of arguments for constructing a RealmClientPolicyProfilePolicy resource.
type RealmClientPolicyProfilePolicyArgs struct {
	Conditions  RealmClientPolicyProfilePolicyConditionArrayInput
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	Name        pulumi.StringPtrInput
	Profiles    pulumi.StringArrayInput
	RealmId     pulumi.StringInput
}

func (RealmClientPolicyProfilePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmClientPolicyProfilePolicyArgs)(nil)).Elem()
}

type RealmClientPolicyProfilePolicyInput interface {
	pulumi.Input

	ToRealmClientPolicyProfilePolicyOutput() RealmClientPolicyProfilePolicyOutput
	ToRealmClientPolicyProfilePolicyOutputWithContext(ctx context.Context) RealmClientPolicyProfilePolicyOutput
}

func (*RealmClientPolicyProfilePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmClientPolicyProfilePolicy)(nil)).Elem()
}

func (i *RealmClientPolicyProfilePolicy) ToRealmClientPolicyProfilePolicyOutput() RealmClientPolicyProfilePolicyOutput {
	return i.ToRealmClientPolicyProfilePolicyOutputWithContext(context.Background())
}

func (i *RealmClientPolicyProfilePolicy) ToRealmClientPolicyProfilePolicyOutputWithContext(ctx context.Context) RealmClientPolicyProfilePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmClientPolicyProfilePolicyOutput)
}

// RealmClientPolicyProfilePolicyArrayInput is an input type that accepts RealmClientPolicyProfilePolicyArray and RealmClientPolicyProfilePolicyArrayOutput values.
// You can construct a concrete instance of `RealmClientPolicyProfilePolicyArrayInput` via:
//
//	RealmClientPolicyProfilePolicyArray{ RealmClientPolicyProfilePolicyArgs{...} }
type RealmClientPolicyProfilePolicyArrayInput interface {
	pulumi.Input

	ToRealmClientPolicyProfilePolicyArrayOutput() RealmClientPolicyProfilePolicyArrayOutput
	ToRealmClientPolicyProfilePolicyArrayOutputWithContext(context.Context) RealmClientPolicyProfilePolicyArrayOutput
}

type RealmClientPolicyProfilePolicyArray []RealmClientPolicyProfilePolicyInput

func (RealmClientPolicyProfilePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmClientPolicyProfilePolicy)(nil)).Elem()
}

func (i RealmClientPolicyProfilePolicyArray) ToRealmClientPolicyProfilePolicyArrayOutput() RealmClientPolicyProfilePolicyArrayOutput {
	return i.ToRealmClientPolicyProfilePolicyArrayOutputWithContext(context.Background())
}

func (i RealmClientPolicyProfilePolicyArray) ToRealmClientPolicyProfilePolicyArrayOutputWithContext(ctx context.Context) RealmClientPolicyProfilePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmClientPolicyProfilePolicyArrayOutput)
}

// RealmClientPolicyProfilePolicyMapInput is an input type that accepts RealmClientPolicyProfilePolicyMap and RealmClientPolicyProfilePolicyMapOutput values.
// You can construct a concrete instance of `RealmClientPolicyProfilePolicyMapInput` via:
//
//	RealmClientPolicyProfilePolicyMap{ "key": RealmClientPolicyProfilePolicyArgs{...} }
type RealmClientPolicyProfilePolicyMapInput interface {
	pulumi.Input

	ToRealmClientPolicyProfilePolicyMapOutput() RealmClientPolicyProfilePolicyMapOutput
	ToRealmClientPolicyProfilePolicyMapOutputWithContext(context.Context) RealmClientPolicyProfilePolicyMapOutput
}

type RealmClientPolicyProfilePolicyMap map[string]RealmClientPolicyProfilePolicyInput

func (RealmClientPolicyProfilePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmClientPolicyProfilePolicy)(nil)).Elem()
}

func (i RealmClientPolicyProfilePolicyMap) ToRealmClientPolicyProfilePolicyMapOutput() RealmClientPolicyProfilePolicyMapOutput {
	return i.ToRealmClientPolicyProfilePolicyMapOutputWithContext(context.Background())
}

func (i RealmClientPolicyProfilePolicyMap) ToRealmClientPolicyProfilePolicyMapOutputWithContext(ctx context.Context) RealmClientPolicyProfilePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmClientPolicyProfilePolicyMapOutput)
}

type RealmClientPolicyProfilePolicyOutput struct{ *pulumi.OutputState }

func (RealmClientPolicyProfilePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmClientPolicyProfilePolicy)(nil)).Elem()
}

func (o RealmClientPolicyProfilePolicyOutput) ToRealmClientPolicyProfilePolicyOutput() RealmClientPolicyProfilePolicyOutput {
	return o
}

func (o RealmClientPolicyProfilePolicyOutput) ToRealmClientPolicyProfilePolicyOutputWithContext(ctx context.Context) RealmClientPolicyProfilePolicyOutput {
	return o
}

func (o RealmClientPolicyProfilePolicyOutput) Conditions() RealmClientPolicyProfilePolicyConditionArrayOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfilePolicy) RealmClientPolicyProfilePolicyConditionArrayOutput {
		return v.Conditions
	}).(RealmClientPolicyProfilePolicyConditionArrayOutput)
}

func (o RealmClientPolicyProfilePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfilePolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RealmClientPolicyProfilePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfilePolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o RealmClientPolicyProfilePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfilePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RealmClientPolicyProfilePolicyOutput) Profiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfilePolicy) pulumi.StringArrayOutput { return v.Profiles }).(pulumi.StringArrayOutput)
}

func (o RealmClientPolicyProfilePolicyOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfilePolicy) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type RealmClientPolicyProfilePolicyArrayOutput struct{ *pulumi.OutputState }

func (RealmClientPolicyProfilePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmClientPolicyProfilePolicy)(nil)).Elem()
}

func (o RealmClientPolicyProfilePolicyArrayOutput) ToRealmClientPolicyProfilePolicyArrayOutput() RealmClientPolicyProfilePolicyArrayOutput {
	return o
}

func (o RealmClientPolicyProfilePolicyArrayOutput) ToRealmClientPolicyProfilePolicyArrayOutputWithContext(ctx context.Context) RealmClientPolicyProfilePolicyArrayOutput {
	return o
}

func (o RealmClientPolicyProfilePolicyArrayOutput) Index(i pulumi.IntInput) RealmClientPolicyProfilePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RealmClientPolicyProfilePolicy {
		return vs[0].([]*RealmClientPolicyProfilePolicy)[vs[1].(int)]
	}).(RealmClientPolicyProfilePolicyOutput)
}

type RealmClientPolicyProfilePolicyMapOutput struct{ *pulumi.OutputState }

func (RealmClientPolicyProfilePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmClientPolicyProfilePolicy)(nil)).Elem()
}

func (o RealmClientPolicyProfilePolicyMapOutput) ToRealmClientPolicyProfilePolicyMapOutput() RealmClientPolicyProfilePolicyMapOutput {
	return o
}

func (o RealmClientPolicyProfilePolicyMapOutput) ToRealmClientPolicyProfilePolicyMapOutputWithContext(ctx context.Context) RealmClientPolicyProfilePolicyMapOutput {
	return o
}

func (o RealmClientPolicyProfilePolicyMapOutput) MapIndex(k pulumi.StringInput) RealmClientPolicyProfilePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RealmClientPolicyProfilePolicy {
		return vs[0].(map[string]*RealmClientPolicyProfilePolicy)[vs[1].(string)]
	}).(RealmClientPolicyProfilePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmClientPolicyProfilePolicyInput)(nil)).Elem(), &RealmClientPolicyProfilePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmClientPolicyProfilePolicyArrayInput)(nil)).Elem(), RealmClientPolicyProfilePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmClientPolicyProfilePolicyMapInput)(nil)).Elem(), RealmClientPolicyProfilePolicyMap{})
	pulumi.RegisterOutputType(RealmClientPolicyProfilePolicyOutput{})
	pulumi.RegisterOutputType(RealmClientPolicyProfilePolicyArrayOutput{})
	pulumi.RegisterOutputType(RealmClientPolicyProfilePolicyMapOutput{})
}
