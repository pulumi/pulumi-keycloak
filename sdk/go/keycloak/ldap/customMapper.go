// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for creating and managing custom attribute mappers for Keycloak users federated via LDAP.
//
// The LDAP custom mapper is implemented and deployed into Keycloak as a custom provider. This resource allows to
// specify the custom id and custom implementation class of the self-implemented attribute mapper as well as additional
// properties via config map.
//
// The custom mapper should already be deployed into keycloak in order to be correctly configured.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/ldap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ldap.NewUserFederation(ctx, "ldapUserFederation", &ldap.UserFederationArgs{
//				RealmId:               realm.ID(),
//				UsernameLdapAttribute: pulumi.String("cn"),
//				RdnLdapAttribute:      pulumi.String("cn"),
//				UuidLdapAttribute:     pulumi.String("entryDN"),
//				UserObjectClasses: pulumi.StringArray{
//					pulumi.String("simpleSecurityObject"),
//					pulumi.String("organizationalRole"),
//				},
//				ConnectionUrl:  pulumi.String("ldap://openldap"),
//				UsersDn:        pulumi.String("dc=example,dc=org"),
//				BindDn:         pulumi.String("cn=admin,dc=example,dc=org"),
//				BindCredential: pulumi.String("admin"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ldap.NewCustomMapper(ctx, "customMapper", &ldap.CustomMapperArgs{
//				RealmId:              pulumi.Any(keycloak_ldap_user_federation.Openldap.Realm_id),
//				LdapUserFederationId: pulumi.Any(keycloak_ldap_user_federation.Openldap.Id),
//				ProviderId:           pulumi.String("custom-provider-registered-in-keycloak"),
//				ProviderType:         pulumi.String("com.example.custom.ldap.mappers.CustomMapper"),
//				Config: pulumi.Map{
//					"attribute.name":  pulumi.Any("name"),
//					"attribute.value": pulumi.Any("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`.
//
// The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs.
//
// Example:
//
// bash
//
// ```sh
// $ pulumi import keycloak:ldap/customMapper:CustomMapper custom_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
// ```
type CustomMapper struct {
	pulumi.CustomResourceState

	// A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
	Config pulumi.MapOutput `pulumi:"config"`
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringOutput `pulumi:"ldapUserFederationId"`
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the LDAP mapper implemented in MapperFactory.
	ProviderId pulumi.StringOutput `pulumi:"providerId"`
	// The fully-qualified Java class name of the custom LDAP mapper.
	ProviderType pulumi.StringOutput `pulumi:"providerType"`
	// The realm that this LDAP mapper will exist in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewCustomMapper registers a new resource with the given unique name, arguments, and options.
func NewCustomMapper(ctx *pulumi.Context,
	name string, args *CustomMapperArgs, opts ...pulumi.ResourceOption) (*CustomMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LdapUserFederationId == nil {
		return nil, errors.New("invalid value for required argument 'LdapUserFederationId'")
	}
	if args.ProviderId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderId'")
	}
	if args.ProviderType == nil {
		return nil, errors.New("invalid value for required argument 'ProviderType'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomMapper
	err := ctx.RegisterResource("keycloak:ldap/customMapper:CustomMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomMapper gets an existing CustomMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomMapperState, opts ...pulumi.ResourceOption) (*CustomMapper, error) {
	var resource CustomMapper
	err := ctx.ReadResource("keycloak:ldap/customMapper:CustomMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomMapper resources.
type customMapperState struct {
	// A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
	Config map[string]interface{} `pulumi:"config"`
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId *string `pulumi:"ldapUserFederationId"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The id of the LDAP mapper implemented in MapperFactory.
	ProviderId *string `pulumi:"providerId"`
	// The fully-qualified Java class name of the custom LDAP mapper.
	ProviderType *string `pulumi:"providerType"`
	// The realm that this LDAP mapper will exist in.
	RealmId *string `pulumi:"realmId"`
}

type CustomMapperState struct {
	// A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
	Config pulumi.MapInput
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringPtrInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The id of the LDAP mapper implemented in MapperFactory.
	ProviderId pulumi.StringPtrInput
	// The fully-qualified Java class name of the custom LDAP mapper.
	ProviderType pulumi.StringPtrInput
	// The realm that this LDAP mapper will exist in.
	RealmId pulumi.StringPtrInput
}

func (CustomMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*customMapperState)(nil)).Elem()
}

type customMapperArgs struct {
	// A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
	Config map[string]interface{} `pulumi:"config"`
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId string `pulumi:"ldapUserFederationId"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The id of the LDAP mapper implemented in MapperFactory.
	ProviderId string `pulumi:"providerId"`
	// The fully-qualified Java class name of the custom LDAP mapper.
	ProviderType string `pulumi:"providerType"`
	// The realm that this LDAP mapper will exist in.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a CustomMapper resource.
type CustomMapperArgs struct {
	// A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
	Config pulumi.MapInput
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The id of the LDAP mapper implemented in MapperFactory.
	ProviderId pulumi.StringInput
	// The fully-qualified Java class name of the custom LDAP mapper.
	ProviderType pulumi.StringInput
	// The realm that this LDAP mapper will exist in.
	RealmId pulumi.StringInput
}

func (CustomMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customMapperArgs)(nil)).Elem()
}

type CustomMapperInput interface {
	pulumi.Input

	ToCustomMapperOutput() CustomMapperOutput
	ToCustomMapperOutputWithContext(ctx context.Context) CustomMapperOutput
}

func (*CustomMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMapper)(nil)).Elem()
}

func (i *CustomMapper) ToCustomMapperOutput() CustomMapperOutput {
	return i.ToCustomMapperOutputWithContext(context.Background())
}

func (i *CustomMapper) ToCustomMapperOutputWithContext(ctx context.Context) CustomMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMapperOutput)
}

// CustomMapperArrayInput is an input type that accepts CustomMapperArray and CustomMapperArrayOutput values.
// You can construct a concrete instance of `CustomMapperArrayInput` via:
//
//	CustomMapperArray{ CustomMapperArgs{...} }
type CustomMapperArrayInput interface {
	pulumi.Input

	ToCustomMapperArrayOutput() CustomMapperArrayOutput
	ToCustomMapperArrayOutputWithContext(context.Context) CustomMapperArrayOutput
}

type CustomMapperArray []CustomMapperInput

func (CustomMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMapper)(nil)).Elem()
}

func (i CustomMapperArray) ToCustomMapperArrayOutput() CustomMapperArrayOutput {
	return i.ToCustomMapperArrayOutputWithContext(context.Background())
}

func (i CustomMapperArray) ToCustomMapperArrayOutputWithContext(ctx context.Context) CustomMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMapperArrayOutput)
}

// CustomMapperMapInput is an input type that accepts CustomMapperMap and CustomMapperMapOutput values.
// You can construct a concrete instance of `CustomMapperMapInput` via:
//
//	CustomMapperMap{ "key": CustomMapperArgs{...} }
type CustomMapperMapInput interface {
	pulumi.Input

	ToCustomMapperMapOutput() CustomMapperMapOutput
	ToCustomMapperMapOutputWithContext(context.Context) CustomMapperMapOutput
}

type CustomMapperMap map[string]CustomMapperInput

func (CustomMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMapper)(nil)).Elem()
}

func (i CustomMapperMap) ToCustomMapperMapOutput() CustomMapperMapOutput {
	return i.ToCustomMapperMapOutputWithContext(context.Background())
}

func (i CustomMapperMap) ToCustomMapperMapOutputWithContext(ctx context.Context) CustomMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMapperMapOutput)
}

type CustomMapperOutput struct{ *pulumi.OutputState }

func (CustomMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomMapper)(nil)).Elem()
}

func (o CustomMapperOutput) ToCustomMapperOutput() CustomMapperOutput {
	return o
}

func (o CustomMapperOutput) ToCustomMapperOutputWithContext(ctx context.Context) CustomMapperOutput {
	return o
}

// A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.
func (o CustomMapperOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *CustomMapper) pulumi.MapOutput { return v.Config }).(pulumi.MapOutput)
}

// The ID of the LDAP user federation provider to attach this mapper to.
func (o CustomMapperOutput) LdapUserFederationId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMapper) pulumi.StringOutput { return v.LdapUserFederationId }).(pulumi.StringOutput)
}

// Display name of this mapper when displayed in the console.
func (o CustomMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the LDAP mapper implemented in MapperFactory.
func (o CustomMapperOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMapper) pulumi.StringOutput { return v.ProviderId }).(pulumi.StringOutput)
}

// The fully-qualified Java class name of the custom LDAP mapper.
func (o CustomMapperOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMapper) pulumi.StringOutput { return v.ProviderType }).(pulumi.StringOutput)
}

// The realm that this LDAP mapper will exist in.
func (o CustomMapperOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomMapper) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type CustomMapperArrayOutput struct{ *pulumi.OutputState }

func (CustomMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomMapper)(nil)).Elem()
}

func (o CustomMapperArrayOutput) ToCustomMapperArrayOutput() CustomMapperArrayOutput {
	return o
}

func (o CustomMapperArrayOutput) ToCustomMapperArrayOutputWithContext(ctx context.Context) CustomMapperArrayOutput {
	return o
}

func (o CustomMapperArrayOutput) Index(i pulumi.IntInput) CustomMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomMapper {
		return vs[0].([]*CustomMapper)[vs[1].(int)]
	}).(CustomMapperOutput)
}

type CustomMapperMapOutput struct{ *pulumi.OutputState }

func (CustomMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomMapper)(nil)).Elem()
}

func (o CustomMapperMapOutput) ToCustomMapperMapOutput() CustomMapperMapOutput {
	return o
}

func (o CustomMapperMapOutput) ToCustomMapperMapOutputWithContext(ctx context.Context) CustomMapperMapOutput {
	return o
}

func (o CustomMapperMapOutput) MapIndex(k pulumi.StringInput) CustomMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomMapper {
		return vs[0].(map[string]*CustomMapper)[vs[1].(string)]
	}).(CustomMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMapperInput)(nil)).Elem(), &CustomMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMapperArrayInput)(nil)).Elem(), CustomMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomMapperMapInput)(nil)).Elem(), CustomMapperMap{})
	pulumi.RegisterOutputType(CustomMapperOutput{})
	pulumi.RegisterOutputType(CustomMapperArrayOutput{})
	pulumi.RegisterOutputType(CustomMapperMapOutput{})
}
