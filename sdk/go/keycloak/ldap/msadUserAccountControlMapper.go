// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # ldap.MsadUserAccountControlMapper
//
// Allows for creating and managing MSAD user account control mappers for Keycloak
// users federated via LDAP.
//
// The MSAD (Microsoft Active Directory) user account control mapper is specific
// to LDAP user federation providers that are pulling from AD, and it can propagate
// AD user state to Keycloak in order to enforce settings like expired passwords
// or disabled accounts.
//
// ### Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/ldap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Enabled: pulumi.Bool(true),
//				Realm:   pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			ldapUserFederation, err := ldap.NewUserFederation(ctx, "ldapUserFederation", &ldap.UserFederationArgs{
//				BindCredential:   pulumi.String("admin"),
//				BindDn:           pulumi.String("cn=admin,dc=example,dc=org"),
//				ConnectionUrl:    pulumi.String("ldap://my-ad-server"),
//				RdnLdapAttribute: pulumi.String("cn"),
//				RealmId:          realm.ID(),
//				UserObjectClasses: pulumi.StringArray{
//					pulumi.String("person"),
//					pulumi.String("organizationalPerson"),
//					pulumi.String("user"),
//				},
//				UsernameLdapAttribute: pulumi.String("cn"),
//				UsersDn:               pulumi.String("dc=example,dc=org"),
//				UuidLdapAttribute:     pulumi.String("objectGUID"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ldap.NewMsadUserAccountControlMapper(ctx, "msadUserAccountControlMapper", &ldap.MsadUserAccountControlMapperArgs{
//				LdapUserFederationId: ldapUserFederation.ID(),
//				RealmId:              realm.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm that this LDAP mapper will exist in.
// - `ldapUserFederationId` - (Required) The ID of the LDAP user federation provider to attach this mapper to.
// - `name` - (Required) Display name of this mapper when displayed in the console.
// - `ldapPasswordPolicyHintsEnabled` - (Optional) When `true`, advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to `false`.
//
// ### Import
//
// LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`.
// The ID of the LDAP user federation provider and the mapper can be found within
// the Keycloak GUI, and they are typically GUIDs:
type MsadUserAccountControlMapper struct {
	pulumi.CustomResourceState

	LdapPasswordPolicyHintsEnabled pulumi.BoolPtrOutput `pulumi:"ldapPasswordPolicyHintsEnabled"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringOutput `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewMsadUserAccountControlMapper registers a new resource with the given unique name, arguments, and options.
func NewMsadUserAccountControlMapper(ctx *pulumi.Context,
	name string, args *MsadUserAccountControlMapperArgs, opts ...pulumi.ResourceOption) (*MsadUserAccountControlMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LdapUserFederationId == nil {
		return nil, errors.New("invalid value for required argument 'LdapUserFederationId'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MsadUserAccountControlMapper
	err := ctx.RegisterResource("keycloak:ldap/msadUserAccountControlMapper:MsadUserAccountControlMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMsadUserAccountControlMapper gets an existing MsadUserAccountControlMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMsadUserAccountControlMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MsadUserAccountControlMapperState, opts ...pulumi.ResourceOption) (*MsadUserAccountControlMapper, error) {
	var resource MsadUserAccountControlMapper
	err := ctx.ReadResource("keycloak:ldap/msadUserAccountControlMapper:MsadUserAccountControlMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MsadUserAccountControlMapper resources.
type msadUserAccountControlMapperState struct {
	LdapPasswordPolicyHintsEnabled *bool `pulumi:"ldapPasswordPolicyHintsEnabled"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId *string `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId *string `pulumi:"realmId"`
}

type MsadUserAccountControlMapperState struct {
	LdapPasswordPolicyHintsEnabled pulumi.BoolPtrInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringPtrInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringPtrInput
}

func (MsadUserAccountControlMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*msadUserAccountControlMapperState)(nil)).Elem()
}

type msadUserAccountControlMapperArgs struct {
	LdapPasswordPolicyHintsEnabled *bool `pulumi:"ldapPasswordPolicyHintsEnabled"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId string `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a MsadUserAccountControlMapper resource.
type MsadUserAccountControlMapperArgs struct {
	LdapPasswordPolicyHintsEnabled pulumi.BoolPtrInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringInput
}

func (MsadUserAccountControlMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*msadUserAccountControlMapperArgs)(nil)).Elem()
}

type MsadUserAccountControlMapperInput interface {
	pulumi.Input

	ToMsadUserAccountControlMapperOutput() MsadUserAccountControlMapperOutput
	ToMsadUserAccountControlMapperOutputWithContext(ctx context.Context) MsadUserAccountControlMapperOutput
}

func (*MsadUserAccountControlMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**MsadUserAccountControlMapper)(nil)).Elem()
}

func (i *MsadUserAccountControlMapper) ToMsadUserAccountControlMapperOutput() MsadUserAccountControlMapperOutput {
	return i.ToMsadUserAccountControlMapperOutputWithContext(context.Background())
}

func (i *MsadUserAccountControlMapper) ToMsadUserAccountControlMapperOutputWithContext(ctx context.Context) MsadUserAccountControlMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsadUserAccountControlMapperOutput)
}

// MsadUserAccountControlMapperArrayInput is an input type that accepts MsadUserAccountControlMapperArray and MsadUserAccountControlMapperArrayOutput values.
// You can construct a concrete instance of `MsadUserAccountControlMapperArrayInput` via:
//
//	MsadUserAccountControlMapperArray{ MsadUserAccountControlMapperArgs{...} }
type MsadUserAccountControlMapperArrayInput interface {
	pulumi.Input

	ToMsadUserAccountControlMapperArrayOutput() MsadUserAccountControlMapperArrayOutput
	ToMsadUserAccountControlMapperArrayOutputWithContext(context.Context) MsadUserAccountControlMapperArrayOutput
}

type MsadUserAccountControlMapperArray []MsadUserAccountControlMapperInput

func (MsadUserAccountControlMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MsadUserAccountControlMapper)(nil)).Elem()
}

func (i MsadUserAccountControlMapperArray) ToMsadUserAccountControlMapperArrayOutput() MsadUserAccountControlMapperArrayOutput {
	return i.ToMsadUserAccountControlMapperArrayOutputWithContext(context.Background())
}

func (i MsadUserAccountControlMapperArray) ToMsadUserAccountControlMapperArrayOutputWithContext(ctx context.Context) MsadUserAccountControlMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsadUserAccountControlMapperArrayOutput)
}

// MsadUserAccountControlMapperMapInput is an input type that accepts MsadUserAccountControlMapperMap and MsadUserAccountControlMapperMapOutput values.
// You can construct a concrete instance of `MsadUserAccountControlMapperMapInput` via:
//
//	MsadUserAccountControlMapperMap{ "key": MsadUserAccountControlMapperArgs{...} }
type MsadUserAccountControlMapperMapInput interface {
	pulumi.Input

	ToMsadUserAccountControlMapperMapOutput() MsadUserAccountControlMapperMapOutput
	ToMsadUserAccountControlMapperMapOutputWithContext(context.Context) MsadUserAccountControlMapperMapOutput
}

type MsadUserAccountControlMapperMap map[string]MsadUserAccountControlMapperInput

func (MsadUserAccountControlMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MsadUserAccountControlMapper)(nil)).Elem()
}

func (i MsadUserAccountControlMapperMap) ToMsadUserAccountControlMapperMapOutput() MsadUserAccountControlMapperMapOutput {
	return i.ToMsadUserAccountControlMapperMapOutputWithContext(context.Background())
}

func (i MsadUserAccountControlMapperMap) ToMsadUserAccountControlMapperMapOutputWithContext(ctx context.Context) MsadUserAccountControlMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsadUserAccountControlMapperMapOutput)
}

type MsadUserAccountControlMapperOutput struct{ *pulumi.OutputState }

func (MsadUserAccountControlMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MsadUserAccountControlMapper)(nil)).Elem()
}

func (o MsadUserAccountControlMapperOutput) ToMsadUserAccountControlMapperOutput() MsadUserAccountControlMapperOutput {
	return o
}

func (o MsadUserAccountControlMapperOutput) ToMsadUserAccountControlMapperOutputWithContext(ctx context.Context) MsadUserAccountControlMapperOutput {
	return o
}

func (o MsadUserAccountControlMapperOutput) LdapPasswordPolicyHintsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MsadUserAccountControlMapper) pulumi.BoolPtrOutput { return v.LdapPasswordPolicyHintsEnabled }).(pulumi.BoolPtrOutput)
}

// The ldap user federation provider to attach this mapper to.
func (o MsadUserAccountControlMapperOutput) LdapUserFederationId() pulumi.StringOutput {
	return o.ApplyT(func(v *MsadUserAccountControlMapper) pulumi.StringOutput { return v.LdapUserFederationId }).(pulumi.StringOutput)
}

// Display name of the mapper when displayed in the console.
func (o MsadUserAccountControlMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MsadUserAccountControlMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm in which the ldap user federation provider exists.
func (o MsadUserAccountControlMapperOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *MsadUserAccountControlMapper) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type MsadUserAccountControlMapperArrayOutput struct{ *pulumi.OutputState }

func (MsadUserAccountControlMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MsadUserAccountControlMapper)(nil)).Elem()
}

func (o MsadUserAccountControlMapperArrayOutput) ToMsadUserAccountControlMapperArrayOutput() MsadUserAccountControlMapperArrayOutput {
	return o
}

func (o MsadUserAccountControlMapperArrayOutput) ToMsadUserAccountControlMapperArrayOutputWithContext(ctx context.Context) MsadUserAccountControlMapperArrayOutput {
	return o
}

func (o MsadUserAccountControlMapperArrayOutput) Index(i pulumi.IntInput) MsadUserAccountControlMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MsadUserAccountControlMapper {
		return vs[0].([]*MsadUserAccountControlMapper)[vs[1].(int)]
	}).(MsadUserAccountControlMapperOutput)
}

type MsadUserAccountControlMapperMapOutput struct{ *pulumi.OutputState }

func (MsadUserAccountControlMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MsadUserAccountControlMapper)(nil)).Elem()
}

func (o MsadUserAccountControlMapperMapOutput) ToMsadUserAccountControlMapperMapOutput() MsadUserAccountControlMapperMapOutput {
	return o
}

func (o MsadUserAccountControlMapperMapOutput) ToMsadUserAccountControlMapperMapOutputWithContext(ctx context.Context) MsadUserAccountControlMapperMapOutput {
	return o
}

func (o MsadUserAccountControlMapperMapOutput) MapIndex(k pulumi.StringInput) MsadUserAccountControlMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MsadUserAccountControlMapper {
		return vs[0].(map[string]*MsadUserAccountControlMapper)[vs[1].(string)]
	}).(MsadUserAccountControlMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MsadUserAccountControlMapperInput)(nil)).Elem(), &MsadUserAccountControlMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsadUserAccountControlMapperArrayInput)(nil)).Elem(), MsadUserAccountControlMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsadUserAccountControlMapperMapInput)(nil)).Elem(), MsadUserAccountControlMapperMap{})
	pulumi.RegisterOutputType(MsadUserAccountControlMapperOutput{})
	pulumi.RegisterOutputType(MsadUserAccountControlMapperArrayOutput{})
	pulumi.RegisterOutputType(MsadUserAccountControlMapperMapOutput{})
}
