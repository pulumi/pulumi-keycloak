// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # ldap.GroupMapper
//
// Allows for creating and managing group mappers for Keycloak users federated
// via LDAP.
//
// The LDAP group mapper can be used to map an LDAP user's groups from some DN
// to Keycloak groups. This group mapper will also create the groups within Keycloak
// if they do not already exist.
//
// ### Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/ldap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Enabled: pulumi.Bool(true),
//				Realm:   pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			ldapUserFederation, err := ldap.NewUserFederation(ctx, "ldapUserFederation", &ldap.UserFederationArgs{
//				BindCredential:   pulumi.String("admin"),
//				BindDn:           pulumi.String("cn=admin,dc=example,dc=org"),
//				ConnectionUrl:    pulumi.String("ldap://openldap"),
//				RdnLdapAttribute: pulumi.String("cn"),
//				RealmId:          realm.ID(),
//				UserObjectClasses: pulumi.StringArray{
//					pulumi.String("simpleSecurityObject"),
//					pulumi.String("organizationalRole"),
//				},
//				UsernameLdapAttribute: pulumi.String("cn"),
//				UsersDn:               pulumi.String("dc=example,dc=org"),
//				UuidLdapAttribute:     pulumi.String("entryDN"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ldap.NewGroupMapper(ctx, "ldapGroupMapper", &ldap.GroupMapperArgs{
//				GroupNameLdapAttribute: pulumi.String("cn"),
//				GroupObjectClasses: pulumi.StringArray{
//					pulumi.String("groupOfNames"),
//				},
//				LdapGroupsDn:                pulumi.String("dc=example,dc=org"),
//				LdapUserFederationId:        ldapUserFederation.ID(),
//				MemberofLdapAttribute:       pulumi.String("memberOf"),
//				MembershipAttributeType:     pulumi.String("DN"),
//				MembershipLdapAttribute:     pulumi.String("member"),
//				MembershipUserLdapAttribute: pulumi.String("cn"),
//				RealmId:                     realm.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm that this LDAP mapper will exist in.
// - `ldapUserFederationId` - (Required) The ID of the LDAP user federation provider to attach this mapper to.
// - `name` - (Required) Display name of this mapper when displayed in the console.
// - `ldapGroupsDn` - (Required) The LDAP DN where groups can be found.
// - `groupNameLdapAttribute` - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically `cn`.
// - `groupObjectClasses` - (Required) Array of strings representing the object classes for the group. Must contain at least one.
// - `preserveGroupInheritance` - (Optional) When `true`, group inheritance will be propagated from LDAP to Keycloak. When `false`, all LDAP groups will be propagated as top level groups within Keycloak.
// - `ignoreMissingGroups` - (Optional) When `true`, missing groups in the hierarchy will be ignored.
// - `membershipLdapAttribute` - (Required) The name of the LDAP attribute that is used for membership mappings.
// - `membershipAttributeType` - (Optional) Can be one of `DN` or `UID`. Defaults to `DN`.
// - `membershipUserLdapAttribute` - (Required) The name of the LDAP attribute on a user that is used for membership mappings.
// - `groupsLdapFilter` - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with `(` and end with `)`.
// - `mode` - (Optional) Can be one of `READ_ONLY` or `LDAP_ONLY`. Defaults to `READ_ONLY`.
// - `userRolesRetrieveStrategy` - (Optional) Can be one of `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`, `GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE`, or `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY`. Defaults to `LOAD_GROUPS_BY_MEMBER_ATTRIBUTE`.
// - `memberofLdapAttribute` - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to `memberOf`.
// - `mappedGroupAttributes` - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
// - `dropNonExistingGroupsDuringSync` - (Optional) When `true`, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to `false`.
//
// ### Import
//
// LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`.
// The ID of the LDAP user federation provider and the mapper can be found within
// the Keycloak GUI, and they are typically GUIDs:
type GroupMapper struct {
	pulumi.CustomResourceState

	DropNonExistingGroupsDuringSync pulumi.BoolPtrOutput     `pulumi:"dropNonExistingGroupsDuringSync"`
	GroupNameLdapAttribute          pulumi.StringOutput      `pulumi:"groupNameLdapAttribute"`
	GroupObjectClasses              pulumi.StringArrayOutput `pulumi:"groupObjectClasses"`
	GroupsLdapFilter                pulumi.StringPtrOutput   `pulumi:"groupsLdapFilter"`
	GroupsPath                      pulumi.StringOutput      `pulumi:"groupsPath"`
	IgnoreMissingGroups             pulumi.BoolPtrOutput     `pulumi:"ignoreMissingGroups"`
	LdapGroupsDn                    pulumi.StringOutput      `pulumi:"ldapGroupsDn"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        pulumi.StringOutput      `pulumi:"ldapUserFederationId"`
	MappedGroupAttributes       pulumi.StringArrayOutput `pulumi:"mappedGroupAttributes"`
	MemberofLdapAttribute       pulumi.StringPtrOutput   `pulumi:"memberofLdapAttribute"`
	MembershipAttributeType     pulumi.StringPtrOutput   `pulumi:"membershipAttributeType"`
	MembershipLdapAttribute     pulumi.StringOutput      `pulumi:"membershipLdapAttribute"`
	MembershipUserLdapAttribute pulumi.StringOutput      `pulumi:"membershipUserLdapAttribute"`
	Mode                        pulumi.StringPtrOutput   `pulumi:"mode"`
	// Display name of the mapper when displayed in the console.
	Name                     pulumi.StringOutput  `pulumi:"name"`
	PreserveGroupInheritance pulumi.BoolPtrOutput `pulumi:"preserveGroupInheritance"`
	// The realm in which the ldap user federation provider exists.
	RealmId                   pulumi.StringOutput    `pulumi:"realmId"`
	UserRolesRetrieveStrategy pulumi.StringPtrOutput `pulumi:"userRolesRetrieveStrategy"`
}

// NewGroupMapper registers a new resource with the given unique name, arguments, and options.
func NewGroupMapper(ctx *pulumi.Context,
	name string, args *GroupMapperArgs, opts ...pulumi.ResourceOption) (*GroupMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupNameLdapAttribute == nil {
		return nil, errors.New("invalid value for required argument 'GroupNameLdapAttribute'")
	}
	if args.GroupObjectClasses == nil {
		return nil, errors.New("invalid value for required argument 'GroupObjectClasses'")
	}
	if args.LdapGroupsDn == nil {
		return nil, errors.New("invalid value for required argument 'LdapGroupsDn'")
	}
	if args.LdapUserFederationId == nil {
		return nil, errors.New("invalid value for required argument 'LdapUserFederationId'")
	}
	if args.MembershipLdapAttribute == nil {
		return nil, errors.New("invalid value for required argument 'MembershipLdapAttribute'")
	}
	if args.MembershipUserLdapAttribute == nil {
		return nil, errors.New("invalid value for required argument 'MembershipUserLdapAttribute'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupMapper
	err := ctx.RegisterResource("keycloak:ldap/groupMapper:GroupMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMapper gets an existing GroupMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMapperState, opts ...pulumi.ResourceOption) (*GroupMapper, error) {
	var resource GroupMapper
	err := ctx.ReadResource("keycloak:ldap/groupMapper:GroupMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMapper resources.
type groupMapperState struct {
	DropNonExistingGroupsDuringSync *bool    `pulumi:"dropNonExistingGroupsDuringSync"`
	GroupNameLdapAttribute          *string  `pulumi:"groupNameLdapAttribute"`
	GroupObjectClasses              []string `pulumi:"groupObjectClasses"`
	GroupsLdapFilter                *string  `pulumi:"groupsLdapFilter"`
	GroupsPath                      *string  `pulumi:"groupsPath"`
	IgnoreMissingGroups             *bool    `pulumi:"ignoreMissingGroups"`
	LdapGroupsDn                    *string  `pulumi:"ldapGroupsDn"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        *string  `pulumi:"ldapUserFederationId"`
	MappedGroupAttributes       []string `pulumi:"mappedGroupAttributes"`
	MemberofLdapAttribute       *string  `pulumi:"memberofLdapAttribute"`
	MembershipAttributeType     *string  `pulumi:"membershipAttributeType"`
	MembershipLdapAttribute     *string  `pulumi:"membershipLdapAttribute"`
	MembershipUserLdapAttribute *string  `pulumi:"membershipUserLdapAttribute"`
	Mode                        *string  `pulumi:"mode"`
	// Display name of the mapper when displayed in the console.
	Name                     *string `pulumi:"name"`
	PreserveGroupInheritance *bool   `pulumi:"preserveGroupInheritance"`
	// The realm in which the ldap user federation provider exists.
	RealmId                   *string `pulumi:"realmId"`
	UserRolesRetrieveStrategy *string `pulumi:"userRolesRetrieveStrategy"`
}

type GroupMapperState struct {
	DropNonExistingGroupsDuringSync pulumi.BoolPtrInput
	GroupNameLdapAttribute          pulumi.StringPtrInput
	GroupObjectClasses              pulumi.StringArrayInput
	GroupsLdapFilter                pulumi.StringPtrInput
	GroupsPath                      pulumi.StringPtrInput
	IgnoreMissingGroups             pulumi.BoolPtrInput
	LdapGroupsDn                    pulumi.StringPtrInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        pulumi.StringPtrInput
	MappedGroupAttributes       pulumi.StringArrayInput
	MemberofLdapAttribute       pulumi.StringPtrInput
	MembershipAttributeType     pulumi.StringPtrInput
	MembershipLdapAttribute     pulumi.StringPtrInput
	MembershipUserLdapAttribute pulumi.StringPtrInput
	Mode                        pulumi.StringPtrInput
	// Display name of the mapper when displayed in the console.
	Name                     pulumi.StringPtrInput
	PreserveGroupInheritance pulumi.BoolPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId                   pulumi.StringPtrInput
	UserRolesRetrieveStrategy pulumi.StringPtrInput
}

func (GroupMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMapperState)(nil)).Elem()
}

type groupMapperArgs struct {
	DropNonExistingGroupsDuringSync *bool    `pulumi:"dropNonExistingGroupsDuringSync"`
	GroupNameLdapAttribute          string   `pulumi:"groupNameLdapAttribute"`
	GroupObjectClasses              []string `pulumi:"groupObjectClasses"`
	GroupsLdapFilter                *string  `pulumi:"groupsLdapFilter"`
	GroupsPath                      *string  `pulumi:"groupsPath"`
	IgnoreMissingGroups             *bool    `pulumi:"ignoreMissingGroups"`
	LdapGroupsDn                    string   `pulumi:"ldapGroupsDn"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        string   `pulumi:"ldapUserFederationId"`
	MappedGroupAttributes       []string `pulumi:"mappedGroupAttributes"`
	MemberofLdapAttribute       *string  `pulumi:"memberofLdapAttribute"`
	MembershipAttributeType     *string  `pulumi:"membershipAttributeType"`
	MembershipLdapAttribute     string   `pulumi:"membershipLdapAttribute"`
	MembershipUserLdapAttribute string   `pulumi:"membershipUserLdapAttribute"`
	Mode                        *string  `pulumi:"mode"`
	// Display name of the mapper when displayed in the console.
	Name                     *string `pulumi:"name"`
	PreserveGroupInheritance *bool   `pulumi:"preserveGroupInheritance"`
	// The realm in which the ldap user federation provider exists.
	RealmId                   string  `pulumi:"realmId"`
	UserRolesRetrieveStrategy *string `pulumi:"userRolesRetrieveStrategy"`
}

// The set of arguments for constructing a GroupMapper resource.
type GroupMapperArgs struct {
	DropNonExistingGroupsDuringSync pulumi.BoolPtrInput
	GroupNameLdapAttribute          pulumi.StringInput
	GroupObjectClasses              pulumi.StringArrayInput
	GroupsLdapFilter                pulumi.StringPtrInput
	GroupsPath                      pulumi.StringPtrInput
	IgnoreMissingGroups             pulumi.BoolPtrInput
	LdapGroupsDn                    pulumi.StringInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId        pulumi.StringInput
	MappedGroupAttributes       pulumi.StringArrayInput
	MemberofLdapAttribute       pulumi.StringPtrInput
	MembershipAttributeType     pulumi.StringPtrInput
	MembershipLdapAttribute     pulumi.StringInput
	MembershipUserLdapAttribute pulumi.StringInput
	Mode                        pulumi.StringPtrInput
	// Display name of the mapper when displayed in the console.
	Name                     pulumi.StringPtrInput
	PreserveGroupInheritance pulumi.BoolPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId                   pulumi.StringInput
	UserRolesRetrieveStrategy pulumi.StringPtrInput
}

func (GroupMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMapperArgs)(nil)).Elem()
}

type GroupMapperInput interface {
	pulumi.Input

	ToGroupMapperOutput() GroupMapperOutput
	ToGroupMapperOutputWithContext(ctx context.Context) GroupMapperOutput
}

func (*GroupMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMapper)(nil)).Elem()
}

func (i *GroupMapper) ToGroupMapperOutput() GroupMapperOutput {
	return i.ToGroupMapperOutputWithContext(context.Background())
}

func (i *GroupMapper) ToGroupMapperOutputWithContext(ctx context.Context) GroupMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapperOutput)
}

// GroupMapperArrayInput is an input type that accepts GroupMapperArray and GroupMapperArrayOutput values.
// You can construct a concrete instance of `GroupMapperArrayInput` via:
//
//	GroupMapperArray{ GroupMapperArgs{...} }
type GroupMapperArrayInput interface {
	pulumi.Input

	ToGroupMapperArrayOutput() GroupMapperArrayOutput
	ToGroupMapperArrayOutputWithContext(context.Context) GroupMapperArrayOutput
}

type GroupMapperArray []GroupMapperInput

func (GroupMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMapper)(nil)).Elem()
}

func (i GroupMapperArray) ToGroupMapperArrayOutput() GroupMapperArrayOutput {
	return i.ToGroupMapperArrayOutputWithContext(context.Background())
}

func (i GroupMapperArray) ToGroupMapperArrayOutputWithContext(ctx context.Context) GroupMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapperArrayOutput)
}

// GroupMapperMapInput is an input type that accepts GroupMapperMap and GroupMapperMapOutput values.
// You can construct a concrete instance of `GroupMapperMapInput` via:
//
//	GroupMapperMap{ "key": GroupMapperArgs{...} }
type GroupMapperMapInput interface {
	pulumi.Input

	ToGroupMapperMapOutput() GroupMapperMapOutput
	ToGroupMapperMapOutputWithContext(context.Context) GroupMapperMapOutput
}

type GroupMapperMap map[string]GroupMapperInput

func (GroupMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMapper)(nil)).Elem()
}

func (i GroupMapperMap) ToGroupMapperMapOutput() GroupMapperMapOutput {
	return i.ToGroupMapperMapOutputWithContext(context.Background())
}

func (i GroupMapperMap) ToGroupMapperMapOutputWithContext(ctx context.Context) GroupMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapperMapOutput)
}

type GroupMapperOutput struct{ *pulumi.OutputState }

func (GroupMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMapper)(nil)).Elem()
}

func (o GroupMapperOutput) ToGroupMapperOutput() GroupMapperOutput {
	return o
}

func (o GroupMapperOutput) ToGroupMapperOutputWithContext(ctx context.Context) GroupMapperOutput {
	return o
}

func (o GroupMapperOutput) DropNonExistingGroupsDuringSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.BoolPtrOutput { return v.DropNonExistingGroupsDuringSync }).(pulumi.BoolPtrOutput)
}

func (o GroupMapperOutput) GroupNameLdapAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.GroupNameLdapAttribute }).(pulumi.StringOutput)
}

func (o GroupMapperOutput) GroupObjectClasses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringArrayOutput { return v.GroupObjectClasses }).(pulumi.StringArrayOutput)
}

func (o GroupMapperOutput) GroupsLdapFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringPtrOutput { return v.GroupsLdapFilter }).(pulumi.StringPtrOutput)
}

func (o GroupMapperOutput) GroupsPath() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.GroupsPath }).(pulumi.StringOutput)
}

func (o GroupMapperOutput) IgnoreMissingGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.BoolPtrOutput { return v.IgnoreMissingGroups }).(pulumi.BoolPtrOutput)
}

func (o GroupMapperOutput) LdapGroupsDn() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.LdapGroupsDn }).(pulumi.StringOutput)
}

// The ldap user federation provider to attach this mapper to.
func (o GroupMapperOutput) LdapUserFederationId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.LdapUserFederationId }).(pulumi.StringOutput)
}

func (o GroupMapperOutput) MappedGroupAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringArrayOutput { return v.MappedGroupAttributes }).(pulumi.StringArrayOutput)
}

func (o GroupMapperOutput) MemberofLdapAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringPtrOutput { return v.MemberofLdapAttribute }).(pulumi.StringPtrOutput)
}

func (o GroupMapperOutput) MembershipAttributeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringPtrOutput { return v.MembershipAttributeType }).(pulumi.StringPtrOutput)
}

func (o GroupMapperOutput) MembershipLdapAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.MembershipLdapAttribute }).(pulumi.StringOutput)
}

func (o GroupMapperOutput) MembershipUserLdapAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.MembershipUserLdapAttribute }).(pulumi.StringOutput)
}

func (o GroupMapperOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// Display name of the mapper when displayed in the console.
func (o GroupMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GroupMapperOutput) PreserveGroupInheritance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.BoolPtrOutput { return v.PreserveGroupInheritance }).(pulumi.BoolPtrOutput)
}

// The realm in which the ldap user federation provider exists.
func (o GroupMapperOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

func (o GroupMapperOutput) UserRolesRetrieveStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMapper) pulumi.StringPtrOutput { return v.UserRolesRetrieveStrategy }).(pulumi.StringPtrOutput)
}

type GroupMapperArrayOutput struct{ *pulumi.OutputState }

func (GroupMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMapper)(nil)).Elem()
}

func (o GroupMapperArrayOutput) ToGroupMapperArrayOutput() GroupMapperArrayOutput {
	return o
}

func (o GroupMapperArrayOutput) ToGroupMapperArrayOutputWithContext(ctx context.Context) GroupMapperArrayOutput {
	return o
}

func (o GroupMapperArrayOutput) Index(i pulumi.IntInput) GroupMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupMapper {
		return vs[0].([]*GroupMapper)[vs[1].(int)]
	}).(GroupMapperOutput)
}

type GroupMapperMapOutput struct{ *pulumi.OutputState }

func (GroupMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMapper)(nil)).Elem()
}

func (o GroupMapperMapOutput) ToGroupMapperMapOutput() GroupMapperMapOutput {
	return o
}

func (o GroupMapperMapOutput) ToGroupMapperMapOutputWithContext(ctx context.Context) GroupMapperMapOutput {
	return o
}

func (o GroupMapperMapOutput) MapIndex(k pulumi.StringInput) GroupMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupMapper {
		return vs[0].(map[string]*GroupMapper)[vs[1].(string)]
	}).(GroupMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapperInput)(nil)).Elem(), &GroupMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapperArrayInput)(nil)).Elem(), GroupMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapperMapInput)(nil)).Elem(), GroupMapperMap{})
	pulumi.RegisterOutputType(GroupMapperOutput{})
	pulumi.RegisterOutputType(GroupMapperArrayOutput{})
	pulumi.RegisterOutputType(GroupMapperMapOutput{})
}
