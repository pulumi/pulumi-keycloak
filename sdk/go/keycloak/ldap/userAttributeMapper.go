// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Allows for creating and managing user attribute mappers for Keycloak users
// federated via LDAP.
//
// The LDAP user attribute mapper can be used to map a single LDAP attribute
// to an attribute on the Keycloak user model.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v3/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v3/go/keycloak/ldap"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Realm:   pulumi.String("my-realm"),
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ldapUserFederation, err := ldap.NewUserFederation(ctx, "ldapUserFederation", &ldap.UserFederationArgs{
// 			RealmId:               realm.ID(),
// 			UsernameLdapAttribute: pulumi.String("cn"),
// 			RdnLdapAttribute:      pulumi.String("cn"),
// 			UuidLdapAttribute:     pulumi.String("entryDN"),
// 			UserObjectClasses: pulumi.StringArray{
// 				pulumi.String("simpleSecurityObject"),
// 				pulumi.String("organizationalRole"),
// 			},
// 			ConnectionUrl:  pulumi.String("ldap://openldap"),
// 			UsersDn:        pulumi.String("dc=example,dc=org"),
// 			BindDn:         pulumi.String("cn=admin,dc=example,dc=org"),
// 			BindCredential: pulumi.String("admin"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ldap.NewUserAttributeMapper(ctx, "ldapUserAttributeMapper", &ldap.UserAttributeMapperArgs{
// 			RealmId:              realm.ID(),
// 			LdapUserFederationId: ldapUserFederation.ID(),
// 			UserModelAttribute:   pulumi.String("foo"),
// 			LdapAttribute:        pulumi.String("bar"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LDAP mappers can be imported using the format `{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}`. The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Examplebash
//
// ```sh
//  $ pulumi import keycloak:ldap/userAttributeMapper:UserAttributeMapper ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67
// ```
type UserAttributeMapper struct {
	pulumi.CustomResourceState

	// When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
	AlwaysReadValueFromLdap pulumi.BoolPtrOutput `pulumi:"alwaysReadValueFromLdap"`
	// When `true`, this attribute must exist in LDAP. Defaults to `false`.
	IsMandatoryInLdap pulumi.BoolPtrOutput `pulumi:"isMandatoryInLdap"`
	// Name of the mapped attribute on the LDAP object.
	LdapAttribute pulumi.StringOutput `pulumi:"ldapAttribute"`
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringOutput `pulumi:"ldapUserFederationId"`
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// The realm that this LDAP mapper will exist in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// Name of the user property or attribute you want to map the LDAP attribute into.
	UserModelAttribute pulumi.StringOutput `pulumi:"userModelAttribute"`
}

// NewUserAttributeMapper registers a new resource with the given unique name, arguments, and options.
func NewUserAttributeMapper(ctx *pulumi.Context,
	name string, args *UserAttributeMapperArgs, opts ...pulumi.ResourceOption) (*UserAttributeMapper, error) {
	if args == nil || args.LdapAttribute == nil {
		return nil, errors.New("missing required argument 'LdapAttribute'")
	}
	if args == nil || args.LdapUserFederationId == nil {
		return nil, errors.New("missing required argument 'LdapUserFederationId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.UserModelAttribute == nil {
		return nil, errors.New("missing required argument 'UserModelAttribute'")
	}
	if args == nil {
		args = &UserAttributeMapperArgs{}
	}
	var resource UserAttributeMapper
	err := ctx.RegisterResource("keycloak:ldap/userAttributeMapper:UserAttributeMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAttributeMapper gets an existing UserAttributeMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAttributeMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAttributeMapperState, opts ...pulumi.ResourceOption) (*UserAttributeMapper, error) {
	var resource UserAttributeMapper
	err := ctx.ReadResource("keycloak:ldap/userAttributeMapper:UserAttributeMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAttributeMapper resources.
type userAttributeMapperState struct {
	// When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
	AlwaysReadValueFromLdap *bool `pulumi:"alwaysReadValueFromLdap"`
	// When `true`, this attribute must exist in LDAP. Defaults to `false`.
	IsMandatoryInLdap *bool `pulumi:"isMandatoryInLdap"`
	// Name of the mapped attribute on the LDAP object.
	LdapAttribute *string `pulumi:"ldapAttribute"`
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId *string `pulumi:"ldapUserFederationId"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// The realm that this LDAP mapper will exist in.
	RealmId *string `pulumi:"realmId"`
	// Name of the user property or attribute you want to map the LDAP attribute into.
	UserModelAttribute *string `pulumi:"userModelAttribute"`
}

type UserAttributeMapperState struct {
	// When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
	AlwaysReadValueFromLdap pulumi.BoolPtrInput
	// When `true`, this attribute must exist in LDAP. Defaults to `false`.
	IsMandatoryInLdap pulumi.BoolPtrInput
	// Name of the mapped attribute on the LDAP object.
	LdapAttribute pulumi.StringPtrInput
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringPtrInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
	ReadOnly pulumi.BoolPtrInput
	// The realm that this LDAP mapper will exist in.
	RealmId pulumi.StringPtrInput
	// Name of the user property or attribute you want to map the LDAP attribute into.
	UserModelAttribute pulumi.StringPtrInput
}

func (UserAttributeMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttributeMapperState)(nil)).Elem()
}

type userAttributeMapperArgs struct {
	// When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
	AlwaysReadValueFromLdap *bool `pulumi:"alwaysReadValueFromLdap"`
	// When `true`, this attribute must exist in LDAP. Defaults to `false`.
	IsMandatoryInLdap *bool `pulumi:"isMandatoryInLdap"`
	// Name of the mapped attribute on the LDAP object.
	LdapAttribute string `pulumi:"ldapAttribute"`
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId string `pulumi:"ldapUserFederationId"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// The realm that this LDAP mapper will exist in.
	RealmId string `pulumi:"realmId"`
	// Name of the user property or attribute you want to map the LDAP attribute into.
	UserModelAttribute string `pulumi:"userModelAttribute"`
}

// The set of arguments for constructing a UserAttributeMapper resource.
type UserAttributeMapperArgs struct {
	// When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
	AlwaysReadValueFromLdap pulumi.BoolPtrInput
	// When `true`, this attribute must exist in LDAP. Defaults to `false`.
	IsMandatoryInLdap pulumi.BoolPtrInput
	// Name of the mapped attribute on the LDAP object.
	LdapAttribute pulumi.StringInput
	// The ID of the LDAP user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
	ReadOnly pulumi.BoolPtrInput
	// The realm that this LDAP mapper will exist in.
	RealmId pulumi.StringInput
	// Name of the user property or attribute you want to map the LDAP attribute into.
	UserModelAttribute pulumi.StringInput
}

func (UserAttributeMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttributeMapperArgs)(nil)).Elem()
}

type UserAttributeMapperInput interface {
	pulumi.Input

	ToUserAttributeMapperOutput() UserAttributeMapperOutput
	ToUserAttributeMapperOutputWithContext(ctx context.Context) UserAttributeMapperOutput
}

func (UserAttributeMapper) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAttributeMapper)(nil)).Elem()
}

func (i UserAttributeMapper) ToUserAttributeMapperOutput() UserAttributeMapperOutput {
	return i.ToUserAttributeMapperOutputWithContext(context.Background())
}

func (i UserAttributeMapper) ToUserAttributeMapperOutputWithContext(ctx context.Context) UserAttributeMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAttributeMapperOutput)
}

type UserAttributeMapperOutput struct {
	*pulumi.OutputState
}

func (UserAttributeMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAttributeMapperOutput)(nil)).Elem()
}

func (o UserAttributeMapperOutput) ToUserAttributeMapperOutput() UserAttributeMapperOutput {
	return o
}

func (o UserAttributeMapperOutput) ToUserAttributeMapperOutputWithContext(ctx context.Context) UserAttributeMapperOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserAttributeMapperOutput{})
}
