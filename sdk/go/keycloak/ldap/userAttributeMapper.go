// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # ldap.UserAttributeMapper
//
// Allows for creating and managing user attribute mappers for Keycloak users
// federated via LDAP.
//
// The LDAP user attribute mapper can be used to map a single LDAP attribute
// to an attribute on the Keycloak user model.
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm that this LDAP mapper will exist in.
// - `ldapUserFederationId` - (Required) The ID of the LDAP user federation provider to attach this mapper to.
// - `name` - (Required) Display name of this mapper when displayed in the console.
// - `userModelAttribute` - (Required) Name of the user property or attribute you want to map the LDAP attribute into.
// - `ldapAttribute` - (Required) Name of the mapped attribute on the LDAP object.
// - `readOnly` - (Optional) When `true`, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to `false`.
// - `alwaysReadValueFromLdap` - (Optional) When `true`, the value fetched from LDAP will override the value stored in Keycloak. Defaults to `false`.
// - `isMandatoryInLdap` - (Optional) When `true`, this attribute must exist in LDAP. Defaults to `false`.
type UserAttributeMapper struct {
	pulumi.CustomResourceState

	// When true, the value fetched from LDAP will override the value stored in Keycloak.
	AlwaysReadValueFromLdap pulumi.BoolPtrOutput `pulumi:"alwaysReadValueFromLdap"`
	// When true, this attribute must exist in LDAP.
	IsMandatoryInLdap pulumi.BoolPtrOutput `pulumi:"isMandatoryInLdap"`
	// Name of the mapped attribute on LDAP object.
	LdapAttribute pulumi.StringOutput `pulumi:"ldapAttribute"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringOutput `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// Name of the UserModel property or attribute you want to map the LDAP attribute into.
	UserModelAttribute pulumi.StringOutput `pulumi:"userModelAttribute"`
}

// NewUserAttributeMapper registers a new resource with the given unique name, arguments, and options.
func NewUserAttributeMapper(ctx *pulumi.Context,
	name string, args *UserAttributeMapperArgs, opts ...pulumi.ResourceOption) (*UserAttributeMapper, error) {
	if args == nil || args.LdapAttribute == nil {
		return nil, errors.New("missing required argument 'LdapAttribute'")
	}
	if args == nil || args.LdapUserFederationId == nil {
		return nil, errors.New("missing required argument 'LdapUserFederationId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.UserModelAttribute == nil {
		return nil, errors.New("missing required argument 'UserModelAttribute'")
	}
	if args == nil {
		args = &UserAttributeMapperArgs{}
	}
	var resource UserAttributeMapper
	err := ctx.RegisterResource("keycloak:ldap/userAttributeMapper:UserAttributeMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAttributeMapper gets an existing UserAttributeMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAttributeMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAttributeMapperState, opts ...pulumi.ResourceOption) (*UserAttributeMapper, error) {
	var resource UserAttributeMapper
	err := ctx.ReadResource("keycloak:ldap/userAttributeMapper:UserAttributeMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAttributeMapper resources.
type userAttributeMapperState struct {
	// When true, the value fetched from LDAP will override the value stored in Keycloak.
	AlwaysReadValueFromLdap *bool `pulumi:"alwaysReadValueFromLdap"`
	// When true, this attribute must exist in LDAP.
	IsMandatoryInLdap *bool `pulumi:"isMandatoryInLdap"`
	// Name of the mapped attribute on LDAP object.
	LdapAttribute *string `pulumi:"ldapAttribute"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId *string `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
	ReadOnly *bool `pulumi:"readOnly"`
	// The realm in which the ldap user federation provider exists.
	RealmId *string `pulumi:"realmId"`
	// Name of the UserModel property or attribute you want to map the LDAP attribute into.
	UserModelAttribute *string `pulumi:"userModelAttribute"`
}

type UserAttributeMapperState struct {
	// When true, the value fetched from LDAP will override the value stored in Keycloak.
	AlwaysReadValueFromLdap pulumi.BoolPtrInput
	// When true, this attribute must exist in LDAP.
	IsMandatoryInLdap pulumi.BoolPtrInput
	// Name of the mapped attribute on LDAP object.
	LdapAttribute pulumi.StringPtrInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringPtrInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
	ReadOnly pulumi.BoolPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringPtrInput
	// Name of the UserModel property or attribute you want to map the LDAP attribute into.
	UserModelAttribute pulumi.StringPtrInput
}

func (UserAttributeMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttributeMapperState)(nil)).Elem()
}

type userAttributeMapperArgs struct {
	// When true, the value fetched from LDAP will override the value stored in Keycloak.
	AlwaysReadValueFromLdap *bool `pulumi:"alwaysReadValueFromLdap"`
	// When true, this attribute must exist in LDAP.
	IsMandatoryInLdap *bool `pulumi:"isMandatoryInLdap"`
	// Name of the mapped attribute on LDAP object.
	LdapAttribute string `pulumi:"ldapAttribute"`
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId string `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
	ReadOnly *bool `pulumi:"readOnly"`
	// The realm in which the ldap user federation provider exists.
	RealmId string `pulumi:"realmId"`
	// Name of the UserModel property or attribute you want to map the LDAP attribute into.
	UserModelAttribute string `pulumi:"userModelAttribute"`
}

// The set of arguments for constructing a UserAttributeMapper resource.
type UserAttributeMapperArgs struct {
	// When true, the value fetched from LDAP will override the value stored in Keycloak.
	AlwaysReadValueFromLdap pulumi.BoolPtrInput
	// When true, this attribute must exist in LDAP.
	IsMandatoryInLdap pulumi.BoolPtrInput
	// Name of the mapped attribute on LDAP object.
	LdapAttribute pulumi.StringInput
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak.
	ReadOnly pulumi.BoolPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringInput
	// Name of the UserModel property or attribute you want to map the LDAP attribute into.
	UserModelAttribute pulumi.StringInput
}

func (UserAttributeMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAttributeMapperArgs)(nil)).Elem()
}
