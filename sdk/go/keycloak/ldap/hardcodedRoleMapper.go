// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ldap

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # ldap.HardcodedRoleMapper
//
// This mapper will grant a specified Keycloak role to each Keycloak user linked with LDAP.
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm that this LDAP mapper will exist in.
// - `ldapUserFederationId` - (Required) The ID of the LDAP user federation provider to attach this mapper to.
// - `name` - (Required) Display name of this mapper when displayed in the console.
// - `role` - (Required) The role which should be assigned to the users.
type HardcodedRoleMapper struct {
	pulumi.CustomResourceState

	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringOutput `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// Role to grant to user.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewHardcodedRoleMapper registers a new resource with the given unique name, arguments, and options.
func NewHardcodedRoleMapper(ctx *pulumi.Context,
	name string, args *HardcodedRoleMapperArgs, opts ...pulumi.ResourceOption) (*HardcodedRoleMapper, error) {
	if args == nil || args.LdapUserFederationId == nil {
		return nil, errors.New("missing required argument 'LdapUserFederationId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil {
		args = &HardcodedRoleMapperArgs{}
	}
	var resource HardcodedRoleMapper
	err := ctx.RegisterResource("keycloak:ldap/hardcodedRoleMapper:HardcodedRoleMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHardcodedRoleMapper gets an existing HardcodedRoleMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHardcodedRoleMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HardcodedRoleMapperState, opts ...pulumi.ResourceOption) (*HardcodedRoleMapper, error) {
	var resource HardcodedRoleMapper
	err := ctx.ReadResource("keycloak:ldap/hardcodedRoleMapper:HardcodedRoleMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HardcodedRoleMapper resources.
type hardcodedRoleMapperState struct {
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId *string `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId *string `pulumi:"realmId"`
	// Role to grant to user.
	Role *string `pulumi:"role"`
}

type HardcodedRoleMapperState struct {
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringPtrInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringPtrInput
	// Role to grant to user.
	Role pulumi.StringPtrInput
}

func (HardcodedRoleMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedRoleMapperState)(nil)).Elem()
}

type hardcodedRoleMapperArgs struct {
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId string `pulumi:"ldapUserFederationId"`
	// Display name of the mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm in which the ldap user federation provider exists.
	RealmId string `pulumi:"realmId"`
	// Role to grant to user.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a HardcodedRoleMapper resource.
type HardcodedRoleMapperArgs struct {
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationId pulumi.StringInput
	// Display name of the mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm in which the ldap user federation provider exists.
	RealmId pulumi.StringInput
	// Role to grant to user.
	Role pulumi.StringInput
}

func (HardcodedRoleMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedRoleMapperArgs)(nil)).Elem()
}
