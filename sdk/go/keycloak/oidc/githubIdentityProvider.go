// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oidc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for creating and managing **GitHub**-based OIDC Identity Providers within Keycloak.
//
// OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard.
//
// The GitHub variant is specialized for the public GitHub instance (github.com) or GitHub Enterprise deployments.
//
// For example, it will obtain automatically the primary email from the logged in account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/oidc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oidc.NewGithubIdentityProvider(ctx, "github", &oidc.GithubIdentityProviderArgs{
//				Realm:        realm.ID(),
//				ClientId:     pulumi.Any(githubIdentityProviderClientId),
//				ClientSecret: pulumi.Any(githubIdentityProviderClientSecret),
//				TrustEmail:   pulumi.Bool(true),
//				SyncMode:     pulumi.String("IMPORT"),
//				ExtraConfig: pulumi.StringMap{
//					"myCustomConfigKey": pulumi.String("myValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GitHub Identity providers can be imported using the format {{realm_id}}/{{idp_alias}}, where idp_alias is the identity provider alias.
//
// Example:
//
// bash
//
// ```sh
// $ pulumi import keycloak:oidc/githubIdentityProvider:GithubIdentityProvider github_identity_provider my-realm/my-github-idp
// ```
type GithubIdentityProvider struct {
	pulumi.CustomResourceState

	// When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
	AddReadTokenRoleOnCreate pulumi.BoolPtrOutput `pulumi:"addReadTokenRoleOnCreate"`
	// The alias for the GitHub identity provider.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// The GitHub API URL, defaults to `https://api.github.com`.
	ApiUrl pulumi.StringPtrOutput `pulumi:"apiUrl"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrOutput `pulumi:"authenticateByDefault"`
	// The GitHub base URL, defaults to `https://github.com`
	BaseUrl pulumi.StringPtrOutput `pulumi:"baseUrl"`
	// The client or client identifier registered within the identity provider.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
	DefaultScopes pulumi.StringPtrOutput `pulumi:"defaultScopes"`
	// Display name for the GitHub identity provider in the GUI.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
	Enabled     pulumi.BoolPtrOutput   `pulumi:"enabled"`
	ExtraConfig pulumi.StringMapOutput `pulumi:"extraConfig"`
	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
	FirstBrokerLoginFlowAlias pulumi.StringPtrOutput `pulumi:"firstBrokerLoginFlowAlias"`
	// When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
	GithubJsonFormat pulumi.BoolPtrOutput `pulumi:"githubJsonFormat"`
	// A number defining the order of this identity provider in the GUI.
	GuiOrder pulumi.StringPtrOutput `pulumi:"guiOrder"`
	// When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
	HideOnLoginPage pulumi.BoolPtrOutput `pulumi:"hideOnLoginPage"`
	// (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
	LinkOnly                    pulumi.BoolPtrOutput   `pulumi:"linkOnly"`
	OrgDomain                   pulumi.StringPtrOutput `pulumi:"orgDomain"`
	OrgRedirectModeEmailMatches pulumi.BoolPtrOutput   `pulumi:"orgRedirectModeEmailMatches"`
	// ID of organization with which this identity is linked.
	OrganizationId pulumi.StringPtrOutput `pulumi:"organizationId"`
	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	PostBrokerLoginFlowAlias pulumi.StringPtrOutput `pulumi:"postBrokerLoginFlowAlias"`
	// The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
	ProviderId pulumi.StringPtrOutput `pulumi:"providerId"`
	// The name of the realm. This is unique across Keycloak.
	Realm pulumi.StringOutput `pulumi:"realm"`
	// When `true`, tokens will be stored after authenticating users. Defaults to `true`.
	StoreToken pulumi.BoolPtrOutput `pulumi:"storeToken"`
	// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
	SyncMode pulumi.StringPtrOutput `pulumi:"syncMode"`
	// When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
	TrustEmail pulumi.BoolPtrOutput `pulumi:"trustEmail"`
}

// NewGithubIdentityProvider registers a new resource with the given unique name, arguments, and options.
func NewGithubIdentityProvider(ctx *pulumi.Context,
	name string, args *GithubIdentityProviderArgs, opts ...pulumi.ResourceOption) (*GithubIdentityProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.Realm == nil {
		return nil, errors.New("invalid value for required argument 'Realm'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GithubIdentityProvider
	err := ctx.RegisterResource("keycloak:oidc/githubIdentityProvider:GithubIdentityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubIdentityProvider gets an existing GithubIdentityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubIdentityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubIdentityProviderState, opts ...pulumi.ResourceOption) (*GithubIdentityProvider, error) {
	var resource GithubIdentityProvider
	err := ctx.ReadResource("keycloak:oidc/githubIdentityProvider:GithubIdentityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubIdentityProvider resources.
type githubIdentityProviderState struct {
	// When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
	AddReadTokenRoleOnCreate *bool `pulumi:"addReadTokenRoleOnCreate"`
	// The alias for the GitHub identity provider.
	Alias *string `pulumi:"alias"`
	// The GitHub API URL, defaults to `https://api.github.com`.
	ApiUrl *string `pulumi:"apiUrl"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `pulumi:"authenticateByDefault"`
	// The GitHub base URL, defaults to `https://github.com`
	BaseUrl *string `pulumi:"baseUrl"`
	// The client or client identifier registered within the identity provider.
	ClientId *string `pulumi:"clientId"`
	// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
	ClientSecret *string `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
	DefaultScopes *string `pulumi:"defaultScopes"`
	// Display name for the GitHub identity provider in the GUI.
	DisplayName *string `pulumi:"displayName"`
	// When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
	Enabled     *bool             `pulumi:"enabled"`
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
	FirstBrokerLoginFlowAlias *string `pulumi:"firstBrokerLoginFlowAlias"`
	// When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
	GithubJsonFormat *bool `pulumi:"githubJsonFormat"`
	// A number defining the order of this identity provider in the GUI.
	GuiOrder *string `pulumi:"guiOrder"`
	// When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
	HideOnLoginPage *bool `pulumi:"hideOnLoginPage"`
	// (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
	InternalId *string `pulumi:"internalId"`
	// When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
	LinkOnly                    *bool   `pulumi:"linkOnly"`
	OrgDomain                   *string `pulumi:"orgDomain"`
	OrgRedirectModeEmailMatches *bool   `pulumi:"orgRedirectModeEmailMatches"`
	// ID of organization with which this identity is linked.
	OrganizationId *string `pulumi:"organizationId"`
	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	PostBrokerLoginFlowAlias *string `pulumi:"postBrokerLoginFlowAlias"`
	// The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
	ProviderId *string `pulumi:"providerId"`
	// The name of the realm. This is unique across Keycloak.
	Realm *string `pulumi:"realm"`
	// When `true`, tokens will be stored after authenticating users. Defaults to `true`.
	StoreToken *bool `pulumi:"storeToken"`
	// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
	SyncMode *string `pulumi:"syncMode"`
	// When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
	TrustEmail *bool `pulumi:"trustEmail"`
}

type GithubIdentityProviderState struct {
	// When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
	AddReadTokenRoleOnCreate pulumi.BoolPtrInput
	// The alias for the GitHub identity provider.
	Alias pulumi.StringPtrInput
	// The GitHub API URL, defaults to `https://api.github.com`.
	ApiUrl pulumi.StringPtrInput
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrInput
	// The GitHub base URL, defaults to `https://github.com`
	BaseUrl pulumi.StringPtrInput
	// The client or client identifier registered within the identity provider.
	ClientId pulumi.StringPtrInput
	// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
	ClientSecret pulumi.StringPtrInput
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
	DefaultScopes pulumi.StringPtrInput
	// Display name for the GitHub identity provider in the GUI.
	DisplayName pulumi.StringPtrInput
	// When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
	Enabled     pulumi.BoolPtrInput
	ExtraConfig pulumi.StringMapInput
	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
	FirstBrokerLoginFlowAlias pulumi.StringPtrInput
	// When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
	GithubJsonFormat pulumi.BoolPtrInput
	// A number defining the order of this identity provider in the GUI.
	GuiOrder pulumi.StringPtrInput
	// When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
	HideOnLoginPage pulumi.BoolPtrInput
	// (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
	InternalId pulumi.StringPtrInput
	// When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
	LinkOnly                    pulumi.BoolPtrInput
	OrgDomain                   pulumi.StringPtrInput
	OrgRedirectModeEmailMatches pulumi.BoolPtrInput
	// ID of organization with which this identity is linked.
	OrganizationId pulumi.StringPtrInput
	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	PostBrokerLoginFlowAlias pulumi.StringPtrInput
	// The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
	ProviderId pulumi.StringPtrInput
	// The name of the realm. This is unique across Keycloak.
	Realm pulumi.StringPtrInput
	// When `true`, tokens will be stored after authenticating users. Defaults to `true`.
	StoreToken pulumi.BoolPtrInput
	// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
	SyncMode pulumi.StringPtrInput
	// When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
	TrustEmail pulumi.BoolPtrInput
}

func (GithubIdentityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubIdentityProviderState)(nil)).Elem()
}

type githubIdentityProviderArgs struct {
	// When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
	AddReadTokenRoleOnCreate *bool `pulumi:"addReadTokenRoleOnCreate"`
	// The alias for the GitHub identity provider.
	Alias *string `pulumi:"alias"`
	// The GitHub API URL, defaults to `https://api.github.com`.
	ApiUrl *string `pulumi:"apiUrl"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `pulumi:"authenticateByDefault"`
	// The GitHub base URL, defaults to `https://github.com`
	BaseUrl *string `pulumi:"baseUrl"`
	// The client or client identifier registered within the identity provider.
	ClientId string `pulumi:"clientId"`
	// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
	ClientSecret string `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
	DefaultScopes *string `pulumi:"defaultScopes"`
	// Display name for the GitHub identity provider in the GUI.
	DisplayName *string `pulumi:"displayName"`
	// When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
	Enabled     *bool             `pulumi:"enabled"`
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
	FirstBrokerLoginFlowAlias *string `pulumi:"firstBrokerLoginFlowAlias"`
	// When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
	GithubJsonFormat *bool `pulumi:"githubJsonFormat"`
	// A number defining the order of this identity provider in the GUI.
	GuiOrder *string `pulumi:"guiOrder"`
	// When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
	HideOnLoginPage *bool `pulumi:"hideOnLoginPage"`
	// When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
	LinkOnly                    *bool   `pulumi:"linkOnly"`
	OrgDomain                   *string `pulumi:"orgDomain"`
	OrgRedirectModeEmailMatches *bool   `pulumi:"orgRedirectModeEmailMatches"`
	// ID of organization with which this identity is linked.
	OrganizationId *string `pulumi:"organizationId"`
	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	PostBrokerLoginFlowAlias *string `pulumi:"postBrokerLoginFlowAlias"`
	// The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
	ProviderId *string `pulumi:"providerId"`
	// The name of the realm. This is unique across Keycloak.
	Realm string `pulumi:"realm"`
	// When `true`, tokens will be stored after authenticating users. Defaults to `true`.
	StoreToken *bool `pulumi:"storeToken"`
	// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
	SyncMode *string `pulumi:"syncMode"`
	// When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
	TrustEmail *bool `pulumi:"trustEmail"`
}

// The set of arguments for constructing a GithubIdentityProvider resource.
type GithubIdentityProviderArgs struct {
	// When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
	AddReadTokenRoleOnCreate pulumi.BoolPtrInput
	// The alias for the GitHub identity provider.
	Alias pulumi.StringPtrInput
	// The GitHub API URL, defaults to `https://api.github.com`.
	ApiUrl pulumi.StringPtrInput
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrInput
	// The GitHub base URL, defaults to `https://github.com`
	BaseUrl pulumi.StringPtrInput
	// The client or client identifier registered within the identity provider.
	ClientId pulumi.StringInput
	// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
	ClientSecret pulumi.StringInput
	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
	DefaultScopes pulumi.StringPtrInput
	// Display name for the GitHub identity provider in the GUI.
	DisplayName pulumi.StringPtrInput
	// When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
	Enabled     pulumi.BoolPtrInput
	ExtraConfig pulumi.StringMapInput
	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
	FirstBrokerLoginFlowAlias pulumi.StringPtrInput
	// When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
	GithubJsonFormat pulumi.BoolPtrInput
	// A number defining the order of this identity provider in the GUI.
	GuiOrder pulumi.StringPtrInput
	// When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
	HideOnLoginPage pulumi.BoolPtrInput
	// When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
	LinkOnly                    pulumi.BoolPtrInput
	OrgDomain                   pulumi.StringPtrInput
	OrgRedirectModeEmailMatches pulumi.BoolPtrInput
	// ID of organization with which this identity is linked.
	OrganizationId pulumi.StringPtrInput
	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	PostBrokerLoginFlowAlias pulumi.StringPtrInput
	// The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
	ProviderId pulumi.StringPtrInput
	// The name of the realm. This is unique across Keycloak.
	Realm pulumi.StringInput
	// When `true`, tokens will be stored after authenticating users. Defaults to `true`.
	StoreToken pulumi.BoolPtrInput
	// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
	SyncMode pulumi.StringPtrInput
	// When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
	TrustEmail pulumi.BoolPtrInput
}

func (GithubIdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubIdentityProviderArgs)(nil)).Elem()
}

type GithubIdentityProviderInput interface {
	pulumi.Input

	ToGithubIdentityProviderOutput() GithubIdentityProviderOutput
	ToGithubIdentityProviderOutputWithContext(ctx context.Context) GithubIdentityProviderOutput
}

func (*GithubIdentityProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubIdentityProvider)(nil)).Elem()
}

func (i *GithubIdentityProvider) ToGithubIdentityProviderOutput() GithubIdentityProviderOutput {
	return i.ToGithubIdentityProviderOutputWithContext(context.Background())
}

func (i *GithubIdentityProvider) ToGithubIdentityProviderOutputWithContext(ctx context.Context) GithubIdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubIdentityProviderOutput)
}

// GithubIdentityProviderArrayInput is an input type that accepts GithubIdentityProviderArray and GithubIdentityProviderArrayOutput values.
// You can construct a concrete instance of `GithubIdentityProviderArrayInput` via:
//
//	GithubIdentityProviderArray{ GithubIdentityProviderArgs{...} }
type GithubIdentityProviderArrayInput interface {
	pulumi.Input

	ToGithubIdentityProviderArrayOutput() GithubIdentityProviderArrayOutput
	ToGithubIdentityProviderArrayOutputWithContext(context.Context) GithubIdentityProviderArrayOutput
}

type GithubIdentityProviderArray []GithubIdentityProviderInput

func (GithubIdentityProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubIdentityProvider)(nil)).Elem()
}

func (i GithubIdentityProviderArray) ToGithubIdentityProviderArrayOutput() GithubIdentityProviderArrayOutput {
	return i.ToGithubIdentityProviderArrayOutputWithContext(context.Background())
}

func (i GithubIdentityProviderArray) ToGithubIdentityProviderArrayOutputWithContext(ctx context.Context) GithubIdentityProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubIdentityProviderArrayOutput)
}

// GithubIdentityProviderMapInput is an input type that accepts GithubIdentityProviderMap and GithubIdentityProviderMapOutput values.
// You can construct a concrete instance of `GithubIdentityProviderMapInput` via:
//
//	GithubIdentityProviderMap{ "key": GithubIdentityProviderArgs{...} }
type GithubIdentityProviderMapInput interface {
	pulumi.Input

	ToGithubIdentityProviderMapOutput() GithubIdentityProviderMapOutput
	ToGithubIdentityProviderMapOutputWithContext(context.Context) GithubIdentityProviderMapOutput
}

type GithubIdentityProviderMap map[string]GithubIdentityProviderInput

func (GithubIdentityProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubIdentityProvider)(nil)).Elem()
}

func (i GithubIdentityProviderMap) ToGithubIdentityProviderMapOutput() GithubIdentityProviderMapOutput {
	return i.ToGithubIdentityProviderMapOutputWithContext(context.Background())
}

func (i GithubIdentityProviderMap) ToGithubIdentityProviderMapOutputWithContext(ctx context.Context) GithubIdentityProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubIdentityProviderMapOutput)
}

type GithubIdentityProviderOutput struct{ *pulumi.OutputState }

func (GithubIdentityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubIdentityProvider)(nil)).Elem()
}

func (o GithubIdentityProviderOutput) ToGithubIdentityProviderOutput() GithubIdentityProviderOutput {
	return o
}

func (o GithubIdentityProviderOutput) ToGithubIdentityProviderOutputWithContext(ctx context.Context) GithubIdentityProviderOutput {
	return o
}

// When `true`, new users will be able to read stored tokens. This will automatically assign the `broker.read-token` role. Defaults to `false`.
func (o GithubIdentityProviderOutput) AddReadTokenRoleOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.AddReadTokenRoleOnCreate }).(pulumi.BoolPtrOutput)
}

// The alias for the GitHub identity provider.
func (o GithubIdentityProviderOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// The GitHub API URL, defaults to `https://api.github.com`.
func (o GithubIdentityProviderOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// Enable/disable authenticate users by default.
func (o GithubIdentityProviderOutput) AuthenticateByDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.AuthenticateByDefault }).(pulumi.BoolPtrOutput)
}

// The GitHub base URL, defaults to `https://github.com`
func (o GithubIdentityProviderOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The client or client identifier registered within the identity provider.
func (o GithubIdentityProviderOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
func (o GithubIdentityProviderOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to `user:email`.
func (o GithubIdentityProviderOutput) DefaultScopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.DefaultScopes }).(pulumi.StringPtrOutput)
}

// Display name for the GitHub identity provider in the GUI.
func (o GithubIdentityProviderOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// When `true`, users will be able to log in to this realm using this identity provider. Defaults to `true`.
func (o GithubIdentityProviderOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o GithubIdentityProviderOutput) ExtraConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringMapOutput { return v.ExtraConfig }).(pulumi.StringMapOutput)
}

// The authentication flow to use when users log in for the first time through this identity provider. Defaults to `first broker login`.
func (o GithubIdentityProviderOutput) FirstBrokerLoginFlowAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.FirstBrokerLoginFlowAlias }).(pulumi.StringPtrOutput)
}

// When `true`, GitHub API is told explicitly to accept JSON during token authentication requests. Defaults to `false`.
func (o GithubIdentityProviderOutput) GithubJsonFormat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.GithubJsonFormat }).(pulumi.BoolPtrOutput)
}

// A number defining the order of this identity provider in the GUI.
func (o GithubIdentityProviderOutput) GuiOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.GuiOrder }).(pulumi.StringPtrOutput)
}

// When `true`, this identity provider will be hidden on the login page. Defaults to `false`.
func (o GithubIdentityProviderOutput) HideOnLoginPage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.HideOnLoginPage }).(pulumi.BoolPtrOutput)
}

// (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
func (o GithubIdentityProviderOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

// When `true`, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to `false`.
func (o GithubIdentityProviderOutput) LinkOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.LinkOnly }).(pulumi.BoolPtrOutput)
}

func (o GithubIdentityProviderOutput) OrgDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.OrgDomain }).(pulumi.StringPtrOutput)
}

func (o GithubIdentityProviderOutput) OrgRedirectModeEmailMatches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.OrgRedirectModeEmailMatches }).(pulumi.BoolPtrOutput)
}

// ID of organization with which this identity is linked.
func (o GithubIdentityProviderOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
func (o GithubIdentityProviderOutput) PostBrokerLoginFlowAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.PostBrokerLoginFlowAlias }).(pulumi.StringPtrOutput)
}

// The ID of the identity provider to use. Defaults to `github`, which should be used unless you have extended Keycloak and provided your own implementation.
func (o GithubIdentityProviderOutput) ProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.ProviderId }).(pulumi.StringPtrOutput)
}

// The name of the realm. This is unique across Keycloak.
func (o GithubIdentityProviderOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

// When `true`, tokens will be stored after authenticating users. Defaults to `true`.
func (o GithubIdentityProviderOutput) StoreToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.StoreToken }).(pulumi.BoolPtrOutput)
}

// The default sync mode to use for all mappers attached to this identity provider. Can be once of `IMPORT`, `FORCE`, or `LEGACY`.
func (o GithubIdentityProviderOutput) SyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.StringPtrOutput { return v.SyncMode }).(pulumi.StringPtrOutput)
}

// When `true`, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to `false`.
func (o GithubIdentityProviderOutput) TrustEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GithubIdentityProvider) pulumi.BoolPtrOutput { return v.TrustEmail }).(pulumi.BoolPtrOutput)
}

type GithubIdentityProviderArrayOutput struct{ *pulumi.OutputState }

func (GithubIdentityProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubIdentityProvider)(nil)).Elem()
}

func (o GithubIdentityProviderArrayOutput) ToGithubIdentityProviderArrayOutput() GithubIdentityProviderArrayOutput {
	return o
}

func (o GithubIdentityProviderArrayOutput) ToGithubIdentityProviderArrayOutputWithContext(ctx context.Context) GithubIdentityProviderArrayOutput {
	return o
}

func (o GithubIdentityProviderArrayOutput) Index(i pulumi.IntInput) GithubIdentityProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GithubIdentityProvider {
		return vs[0].([]*GithubIdentityProvider)[vs[1].(int)]
	}).(GithubIdentityProviderOutput)
}

type GithubIdentityProviderMapOutput struct{ *pulumi.OutputState }

func (GithubIdentityProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubIdentityProvider)(nil)).Elem()
}

func (o GithubIdentityProviderMapOutput) ToGithubIdentityProviderMapOutput() GithubIdentityProviderMapOutput {
	return o
}

func (o GithubIdentityProviderMapOutput) ToGithubIdentityProviderMapOutputWithContext(ctx context.Context) GithubIdentityProviderMapOutput {
	return o
}

func (o GithubIdentityProviderMapOutput) MapIndex(k pulumi.StringInput) GithubIdentityProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GithubIdentityProvider {
		return vs[0].(map[string]*GithubIdentityProvider)[vs[1].(string)]
	}).(GithubIdentityProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubIdentityProviderInput)(nil)).Elem(), &GithubIdentityProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubIdentityProviderArrayInput)(nil)).Elem(), GithubIdentityProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubIdentityProviderMapInput)(nil)).Elem(), GithubIdentityProviderMap{})
	pulumi.RegisterOutputType(GithubIdentityProviderOutput{})
	pulumi.RegisterOutputType(GithubIdentityProviderArrayOutput{})
	pulumi.RegisterOutputType(GithubIdentityProviderMapOutput{})
}
