// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oidc

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GoogleIdentityProvider struct {
	pulumi.CustomResourceState

	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient pulumi.BoolPtrOutput `pulumi:"acceptsPromptNoneForwardFromClient"`
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate pulumi.BoolPtrOutput `pulumi:"addReadTokenRoleOnCreate"`
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this
	// is computed and always google
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrOutput `pulumi:"authenticateByDefault"`
	// Client ID.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Client Secret.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
	// value'. Default: 'openid profile email'
	DefaultScopes pulumi.StringPtrOutput `pulumi:"defaultScopes"`
	// Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
	DisableUserInfo pulumi.BoolPtrOutput `pulumi:"disableUserInfo"`
	// Not used by this provider, Will be implicitly Google
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Enable/disable this identity provider.
	Enabled     pulumi.BoolPtrOutput `pulumi:"enabled"`
	ExtraConfig pulumi.MapOutput     `pulumi:"extraConfig"`
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias pulumi.StringPtrOutput `pulumi:"firstBrokerLoginFlowAlias"`
	// Hide On Login Page.
	HideOnLoginPage pulumi.BoolPtrOutput `pulumi:"hideOnLoginPage"`
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
	// that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	HostedDomain pulumi.StringPtrOutput `pulumi:"hostedDomain"`
	// Internal Identity Provider Id
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly pulumi.BoolPtrOutput `pulumi:"linkOnly"`
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias pulumi.StringPtrOutput `pulumi:"postBrokerLoginFlowAlias"`
	// provider id, is always google, unless you have a extended custom implementation
	ProviderId pulumi.StringPtrOutput `pulumi:"providerId"`
	// Realm Name
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
	// back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
	// the browser.
	RequestRefreshToken pulumi.BoolPtrOutput `pulumi:"requestRefreshToken"`
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken pulumi.BoolPtrOutput `pulumi:"storeToken"`
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail pulumi.BoolPtrOutput `pulumi:"trustEmail"`
	// Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
	// Google is throttling access to the User Info service.
	UseUserIpParam pulumi.BoolPtrOutput `pulumi:"useUserIpParam"`
}

// NewGoogleIdentityProvider registers a new resource with the given unique name, arguments, and options.
func NewGoogleIdentityProvider(ctx *pulumi.Context,
	name string, args *GoogleIdentityProviderArgs, opts ...pulumi.ResourceOption) (*GoogleIdentityProvider, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	if args == nil || args.Realm == nil {
		return nil, errors.New("missing required argument 'Realm'")
	}
	if args == nil {
		args = &GoogleIdentityProviderArgs{}
	}
	var resource GoogleIdentityProvider
	err := ctx.RegisterResource("keycloak:oidc/googleIdentityProvider:GoogleIdentityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoogleIdentityProvider gets an existing GoogleIdentityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoogleIdentityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoogleIdentityProviderState, opts ...pulumi.ResourceOption) (*GoogleIdentityProvider, error) {
	var resource GoogleIdentityProvider
	err := ctx.ReadResource("keycloak:oidc/googleIdentityProvider:GoogleIdentityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoogleIdentityProvider resources.
type googleIdentityProviderState struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient *bool `pulumi:"acceptsPromptNoneForwardFromClient"`
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate *bool `pulumi:"addReadTokenRoleOnCreate"`
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this
	// is computed and always google
	Alias *string `pulumi:"alias"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `pulumi:"authenticateByDefault"`
	// Client ID.
	ClientId *string `pulumi:"clientId"`
	// Client Secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
	// value'. Default: 'openid profile email'
	DefaultScopes *string `pulumi:"defaultScopes"`
	// Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
	DisableUserInfo *bool `pulumi:"disableUserInfo"`
	// Not used by this provider, Will be implicitly Google
	DisplayName *string `pulumi:"displayName"`
	// Enable/disable this identity provider.
	Enabled     *bool                  `pulumi:"enabled"`
	ExtraConfig map[string]interface{} `pulumi:"extraConfig"`
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias *string `pulumi:"firstBrokerLoginFlowAlias"`
	// Hide On Login Page.
	HideOnLoginPage *bool `pulumi:"hideOnLoginPage"`
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
	// that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	HostedDomain *string `pulumi:"hostedDomain"`
	// Internal Identity Provider Id
	InternalId *string `pulumi:"internalId"`
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly *bool `pulumi:"linkOnly"`
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias *string `pulumi:"postBrokerLoginFlowAlias"`
	// provider id, is always google, unless you have a extended custom implementation
	ProviderId *string `pulumi:"providerId"`
	// Realm Name
	Realm *string `pulumi:"realm"`
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
	// back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
	// the browser.
	RequestRefreshToken *bool `pulumi:"requestRefreshToken"`
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken *bool `pulumi:"storeToken"`
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail *bool `pulumi:"trustEmail"`
	// Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
	// Google is throttling access to the User Info service.
	UseUserIpParam *bool `pulumi:"useUserIpParam"`
}

type GoogleIdentityProviderState struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient pulumi.BoolPtrInput
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate pulumi.BoolPtrInput
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this
	// is computed and always google
	Alias pulumi.StringPtrInput
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrInput
	// Client ID.
	ClientId pulumi.StringPtrInput
	// Client Secret.
	ClientSecret pulumi.StringPtrInput
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
	// value'. Default: 'openid profile email'
	DefaultScopes pulumi.StringPtrInput
	// Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
	DisableUserInfo pulumi.BoolPtrInput
	// Not used by this provider, Will be implicitly Google
	DisplayName pulumi.StringPtrInput
	// Enable/disable this identity provider.
	Enabled     pulumi.BoolPtrInput
	ExtraConfig pulumi.MapInput
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias pulumi.StringPtrInput
	// Hide On Login Page.
	HideOnLoginPage pulumi.BoolPtrInput
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
	// that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	HostedDomain pulumi.StringPtrInput
	// Internal Identity Provider Id
	InternalId pulumi.StringPtrInput
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly pulumi.BoolPtrInput
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias pulumi.StringPtrInput
	// provider id, is always google, unless you have a extended custom implementation
	ProviderId pulumi.StringPtrInput
	// Realm Name
	Realm pulumi.StringPtrInput
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
	// back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
	// the browser.
	RequestRefreshToken pulumi.BoolPtrInput
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken pulumi.BoolPtrInput
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail pulumi.BoolPtrInput
	// Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
	// Google is throttling access to the User Info service.
	UseUserIpParam pulumi.BoolPtrInput
}

func (GoogleIdentityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*googleIdentityProviderState)(nil)).Elem()
}

type googleIdentityProviderArgs struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient *bool `pulumi:"acceptsPromptNoneForwardFromClient"`
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate *bool `pulumi:"addReadTokenRoleOnCreate"`
	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `pulumi:"authenticateByDefault"`
	// Client ID.
	ClientId string `pulumi:"clientId"`
	// Client Secret.
	ClientSecret string `pulumi:"clientSecret"`
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
	// value'. Default: 'openid profile email'
	DefaultScopes *string `pulumi:"defaultScopes"`
	// Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
	DisableUserInfo *bool `pulumi:"disableUserInfo"`
	// Enable/disable this identity provider.
	Enabled     *bool                  `pulumi:"enabled"`
	ExtraConfig map[string]interface{} `pulumi:"extraConfig"`
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias *string `pulumi:"firstBrokerLoginFlowAlias"`
	// Hide On Login Page.
	HideOnLoginPage *bool `pulumi:"hideOnLoginPage"`
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
	// that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	HostedDomain *string `pulumi:"hostedDomain"`
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly *bool `pulumi:"linkOnly"`
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias *string `pulumi:"postBrokerLoginFlowAlias"`
	// provider id, is always google, unless you have a extended custom implementation
	ProviderId *string `pulumi:"providerId"`
	// Realm Name
	Realm string `pulumi:"realm"`
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
	// back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
	// the browser.
	RequestRefreshToken *bool `pulumi:"requestRefreshToken"`
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken *bool `pulumi:"storeToken"`
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail *bool `pulumi:"trustEmail"`
	// Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
	// Google is throttling access to the User Info service.
	UseUserIpParam *bool `pulumi:"useUserIpParam"`
}

// The set of arguments for constructing a GoogleIdentityProvider resource.
type GoogleIdentityProviderArgs struct {
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In
	// case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly
	// returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient pulumi.BoolPtrInput
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate pulumi.BoolPtrInput
	// Enable/disable authenticate users by default.
	AuthenticateByDefault pulumi.BoolPtrInput
	// Client ID.
	ClientId pulumi.StringInput
	// Client Secret.
	ClientSecret pulumi.StringInput
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default
	// value'. Default: 'openid profile email'
	DefaultScopes pulumi.StringPtrInput
	// Disable usage of User Info service to obtain additional user information? Default is to use this OIDC service.
	DisableUserInfo pulumi.BoolPtrInput
	// Enable/disable this identity provider.
	Enabled     pulumi.BoolPtrInput
	ExtraConfig pulumi.MapInput
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
	// that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias pulumi.StringPtrInput
	// Hide On Login Page.
	HideOnLoginPage pulumi.BoolPtrInput
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates
	// that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	HostedDomain pulumi.StringPtrInput
	// If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
	// want to allow login from the provider, but want to integrate with a provider
	LinkOnly pulumi.BoolPtrInput
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
	// additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
	// you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
	// authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias pulumi.StringPtrInput
	// provider id, is always google, unless you have a extended custom implementation
	ProviderId pulumi.StringPtrInput
	// Realm Name
	Realm pulumi.StringInput
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token
	// back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at
	// the browser.
	RequestRefreshToken pulumi.BoolPtrInput
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken pulumi.BoolPtrInput
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail pulumi.BoolPtrInput
	// Set 'userIp' query parameter when invoking on Google's User Info service. This will use the user's ip address. Useful if
	// Google is throttling access to the User Info service.
	UseUserIpParam pulumi.BoolPtrInput
}

func (GoogleIdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*googleIdentityProviderArgs)(nil)).Elem()
}
