// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Exhaustive Roles)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v4/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v4/go/keycloak/openid"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Realm:   pulumi.String("my-realm"),
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		realmRole, err := keycloak.NewRole(ctx, "realmRole", &keycloak.RoleArgs{
// 			RealmId:     realm.ID(),
// 			Description: pulumi.String("My Realm Role"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = openid.NewClient(ctx, "client", &openid.ClientArgs{
// 			RealmId:    realm.ID(),
// 			ClientId:   pulumi.String("client"),
// 			Enabled:    pulumi.Bool(true),
// 			AccessType: pulumi.String("BEARER-ONLY"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		clientRole, err := keycloak.NewRole(ctx, "clientRole", &keycloak.RoleArgs{
// 			RealmId:     realm.ID(),
// 			ClientId:    pulumi.Any(keycloak_client.Client.Id),
// 			Description: pulumi.String("My Client Role"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		group, err := keycloak.NewGroup(ctx, "group", &keycloak.GroupArgs{
// 			RealmId: realm.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keycloak.NewGroupRoles(ctx, "groupRoles", &keycloak.GroupRolesArgs{
// 			RealmId: realm.ID(),
// 			GroupId: group.ID(),
// 			RoleIds: pulumi.StringArray{
// 				realmRole.ID(),
// 				clientRole.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Non Exhaustive Roles)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v4/go/keycloak"
// 	"github.com/pulumi/pulumi-keycloak/sdk/v4/go/keycloak/openid"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Realm:   pulumi.String("my-realm"),
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		realmRole, err := keycloak.NewRole(ctx, "realmRole", &keycloak.RoleArgs{
// 			RealmId:     realm.ID(),
// 			Description: pulumi.String("My Realm Role"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = openid.NewClient(ctx, "client", &openid.ClientArgs{
// 			RealmId:    realm.ID(),
// 			ClientId:   pulumi.String("client"),
// 			Enabled:    pulumi.Bool(true),
// 			AccessType: pulumi.String("BEARER-ONLY"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		clientRole, err := keycloak.NewRole(ctx, "clientRole", &keycloak.RoleArgs{
// 			RealmId:     realm.ID(),
// 			ClientId:    pulumi.Any(keycloak_client.Client.Id),
// 			Description: pulumi.String("My Client Role"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		group, err := keycloak.NewGroup(ctx, "group", &keycloak.GroupArgs{
// 			RealmId: realm.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keycloak.NewGroupRoles(ctx, "groupRoleAssociation1", &keycloak.GroupRolesArgs{
// 			RealmId:    realm.ID(),
// 			GroupId:    group.ID(),
// 			Exhaustive: pulumi.Bool(false),
// 			RoleIds: pulumi.StringArray{
// 				realmRole.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keycloak.NewGroupRoles(ctx, "groupRoleAssociation2", &keycloak.GroupRolesArgs{
// 			RealmId:    realm.ID(),
// 			GroupId:    group.ID(),
// 			Exhaustive: pulumi.Bool(false),
// 			RoleIds: pulumi.StringArray{
// 				clientRole.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using the format `{{realm_id}}/{{group_id}}`, where `group_id` is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Examplebash
//
// ```sh
//  $ pulumi import keycloak:index/groupRoles:GroupRoles group_roles my-realm/18cc6b87-2ce7-4e59-bdc8-b9d49ec98a94
// ```
type GroupRoles struct {
	pulumi.CustomResourceState

	// Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the group will be removed. Defaults to `true`.
	Exhaustive pulumi.BoolPtrOutput `pulumi:"exhaustive"`
	// The ID of the group this resource should manage roles for.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The realm this group exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// A list of role IDs to map to the group.
	RoleIds pulumi.StringArrayOutput `pulumi:"roleIds"`
}

// NewGroupRoles registers a new resource with the given unique name, arguments, and options.
func NewGroupRoles(ctx *pulumi.Context,
	name string, args *GroupRolesArgs, opts ...pulumi.ResourceOption) (*GroupRoles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.RoleIds == nil {
		return nil, errors.New("invalid value for required argument 'RoleIds'")
	}
	var resource GroupRoles
	err := ctx.RegisterResource("keycloak:index/groupRoles:GroupRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupRoles gets an existing GroupRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupRolesState, opts ...pulumi.ResourceOption) (*GroupRoles, error) {
	var resource GroupRoles
	err := ctx.ReadResource("keycloak:index/groupRoles:GroupRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupRoles resources.
type groupRolesState struct {
	// Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the group will be removed. Defaults to `true`.
	Exhaustive *bool `pulumi:"exhaustive"`
	// The ID of the group this resource should manage roles for.
	GroupId *string `pulumi:"groupId"`
	// The realm this group exists in.
	RealmId *string `pulumi:"realmId"`
	// A list of role IDs to map to the group.
	RoleIds []string `pulumi:"roleIds"`
}

type GroupRolesState struct {
	// Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the group will be removed. Defaults to `true`.
	Exhaustive pulumi.BoolPtrInput
	// The ID of the group this resource should manage roles for.
	GroupId pulumi.StringPtrInput
	// The realm this group exists in.
	RealmId pulumi.StringPtrInput
	// A list of role IDs to map to the group.
	RoleIds pulumi.StringArrayInput
}

func (GroupRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRolesState)(nil)).Elem()
}

type groupRolesArgs struct {
	// Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the group will be removed. Defaults to `true`.
	Exhaustive *bool `pulumi:"exhaustive"`
	// The ID of the group this resource should manage roles for.
	GroupId string `pulumi:"groupId"`
	// The realm this group exists in.
	RealmId string `pulumi:"realmId"`
	// A list of role IDs to map to the group.
	RoleIds []string `pulumi:"roleIds"`
}

// The set of arguments for constructing a GroupRoles resource.
type GroupRolesArgs struct {
	// Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the group will be removed. Defaults to `true`.
	Exhaustive pulumi.BoolPtrInput
	// The ID of the group this resource should manage roles for.
	GroupId pulumi.StringInput
	// The realm this group exists in.
	RealmId pulumi.StringInput
	// A list of role IDs to map to the group.
	RoleIds pulumi.StringArrayInput
}

func (GroupRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRolesArgs)(nil)).Elem()
}

type GroupRolesInput interface {
	pulumi.Input

	ToGroupRolesOutput() GroupRolesOutput
	ToGroupRolesOutputWithContext(ctx context.Context) GroupRolesOutput
}

func (*GroupRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRoles)(nil)).Elem()
}

func (i *GroupRoles) ToGroupRolesOutput() GroupRolesOutput {
	return i.ToGroupRolesOutputWithContext(context.Background())
}

func (i *GroupRoles) ToGroupRolesOutputWithContext(ctx context.Context) GroupRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRolesOutput)
}

// GroupRolesArrayInput is an input type that accepts GroupRolesArray and GroupRolesArrayOutput values.
// You can construct a concrete instance of `GroupRolesArrayInput` via:
//
//          GroupRolesArray{ GroupRolesArgs{...} }
type GroupRolesArrayInput interface {
	pulumi.Input

	ToGroupRolesArrayOutput() GroupRolesArrayOutput
	ToGroupRolesArrayOutputWithContext(context.Context) GroupRolesArrayOutput
}

type GroupRolesArray []GroupRolesInput

func (GroupRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRoles)(nil)).Elem()
}

func (i GroupRolesArray) ToGroupRolesArrayOutput() GroupRolesArrayOutput {
	return i.ToGroupRolesArrayOutputWithContext(context.Background())
}

func (i GroupRolesArray) ToGroupRolesArrayOutputWithContext(ctx context.Context) GroupRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRolesArrayOutput)
}

// GroupRolesMapInput is an input type that accepts GroupRolesMap and GroupRolesMapOutput values.
// You can construct a concrete instance of `GroupRolesMapInput` via:
//
//          GroupRolesMap{ "key": GroupRolesArgs{...} }
type GroupRolesMapInput interface {
	pulumi.Input

	ToGroupRolesMapOutput() GroupRolesMapOutput
	ToGroupRolesMapOutputWithContext(context.Context) GroupRolesMapOutput
}

type GroupRolesMap map[string]GroupRolesInput

func (GroupRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRoles)(nil)).Elem()
}

func (i GroupRolesMap) ToGroupRolesMapOutput() GroupRolesMapOutput {
	return i.ToGroupRolesMapOutputWithContext(context.Background())
}

func (i GroupRolesMap) ToGroupRolesMapOutputWithContext(ctx context.Context) GroupRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRolesMapOutput)
}

type GroupRolesOutput struct{ *pulumi.OutputState }

func (GroupRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRoles)(nil)).Elem()
}

func (o GroupRolesOutput) ToGroupRolesOutput() GroupRolesOutput {
	return o
}

func (o GroupRolesOutput) ToGroupRolesOutputWithContext(ctx context.Context) GroupRolesOutput {
	return o
}

type GroupRolesArrayOutput struct{ *pulumi.OutputState }

func (GroupRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRoles)(nil)).Elem()
}

func (o GroupRolesArrayOutput) ToGroupRolesArrayOutput() GroupRolesArrayOutput {
	return o
}

func (o GroupRolesArrayOutput) ToGroupRolesArrayOutputWithContext(ctx context.Context) GroupRolesArrayOutput {
	return o
}

func (o GroupRolesArrayOutput) Index(i pulumi.IntInput) GroupRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupRoles {
		return vs[0].([]*GroupRoles)[vs[1].(int)]
	}).(GroupRolesOutput)
}

type GroupRolesMapOutput struct{ *pulumi.OutputState }

func (GroupRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRoles)(nil)).Elem()
}

func (o GroupRolesMapOutput) ToGroupRolesMapOutput() GroupRolesMapOutput {
	return o
}

func (o GroupRolesMapOutput) ToGroupRolesMapOutputWithContext(ctx context.Context) GroupRolesMapOutput {
	return o
}

func (o GroupRolesMapOutput) MapIndex(k pulumi.StringInput) GroupRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupRoles {
		return vs[0].(map[string]*GroupRoles)[vs[1].(string)]
	}).(GroupRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRolesInput)(nil)).Elem(), &GroupRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRolesArrayInput)(nil)).Elem(), GroupRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRolesMapInput)(nil)).Elem(), GroupRolesMap{})
	pulumi.RegisterOutputType(GroupRolesOutput{})
	pulumi.RegisterOutputType(GroupRolesArrayOutput{})
	pulumi.RegisterOutputType(GroupRolesMapOutput{})
}
