// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// This resource can be imported using the format `{{realm_id}}/{{group_id}}`, where `group_id` is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Examplebash
//
// ```sh
//  $ pulumi import keycloak:index/groupRoles:GroupRoles group_roles my-realm/18cc6b87-2ce7-4e59-bdc8-b9d49ec98a94
// ```
type GroupRoles struct {
	pulumi.CustomResourceState

	// The ID of the group this resource should manage roles for.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The realm this group exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// A list of role IDs to map to the group
	RoleIds pulumi.StringArrayOutput `pulumi:"roleIds"`
}

// NewGroupRoles registers a new resource with the given unique name, arguments, and options.
func NewGroupRoles(ctx *pulumi.Context,
	name string, args *GroupRolesArgs, opts ...pulumi.ResourceOption) (*GroupRoles, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.RoleIds == nil {
		return nil, errors.New("missing required argument 'RoleIds'")
	}
	if args == nil {
		args = &GroupRolesArgs{}
	}
	var resource GroupRoles
	err := ctx.RegisterResource("keycloak:index/groupRoles:GroupRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupRoles gets an existing GroupRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupRolesState, opts ...pulumi.ResourceOption) (*GroupRoles, error) {
	var resource GroupRoles
	err := ctx.ReadResource("keycloak:index/groupRoles:GroupRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupRoles resources.
type groupRolesState struct {
	// The ID of the group this resource should manage roles for.
	GroupId *string `pulumi:"groupId"`
	// The realm this group exists in.
	RealmId *string `pulumi:"realmId"`
	// A list of role IDs to map to the group
	RoleIds []string `pulumi:"roleIds"`
}

type GroupRolesState struct {
	// The ID of the group this resource should manage roles for.
	GroupId pulumi.StringPtrInput
	// The realm this group exists in.
	RealmId pulumi.StringPtrInput
	// A list of role IDs to map to the group
	RoleIds pulumi.StringArrayInput
}

func (GroupRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRolesState)(nil)).Elem()
}

type groupRolesArgs struct {
	// The ID of the group this resource should manage roles for.
	GroupId string `pulumi:"groupId"`
	// The realm this group exists in.
	RealmId string `pulumi:"realmId"`
	// A list of role IDs to map to the group
	RoleIds []string `pulumi:"roleIds"`
}

// The set of arguments for constructing a GroupRoles resource.
type GroupRolesArgs struct {
	// The ID of the group this resource should manage roles for.
	GroupId pulumi.StringInput
	// The realm this group exists in.
	RealmId pulumi.StringInput
	// A list of role IDs to map to the group
	RoleIds pulumi.StringArrayInput
}

func (GroupRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRolesArgs)(nil)).Elem()
}

type GroupRolesInput interface {
	pulumi.Input

	ToGroupRolesOutput() GroupRolesOutput
	ToGroupRolesOutputWithContext(ctx context.Context) GroupRolesOutput
}

func (GroupRoles) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRoles)(nil)).Elem()
}

func (i GroupRoles) ToGroupRolesOutput() GroupRolesOutput {
	return i.ToGroupRolesOutputWithContext(context.Background())
}

func (i GroupRoles) ToGroupRolesOutputWithContext(ctx context.Context) GroupRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRolesOutput)
}

type GroupRolesOutput struct {
	*pulumi.OutputState
}

func (GroupRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupRolesOutput)(nil)).Elem()
}

func (o GroupRolesOutput) ToGroupRolesOutput() GroupRolesOutput {
	return o
}

func (o GroupRolesOutput) ToGroupRolesOutputWithContext(ctx context.Context) GroupRolesOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GroupRolesOutput{})
}
