// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GroupRoles struct {
	pulumi.CustomResourceState

	GroupId pulumi.StringPtrOutput   `pulumi:"groupId"`
	RealmId pulumi.StringOutput      `pulumi:"realmId"`
	RoleIds pulumi.StringArrayOutput `pulumi:"roleIds"`
}

// NewGroupRoles registers a new resource with the given unique name, arguments, and options.
func NewGroupRoles(ctx *pulumi.Context,
	name string, args *GroupRolesArgs, opts ...pulumi.ResourceOption) (*GroupRoles, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.RoleIds == nil {
		return nil, errors.New("missing required argument 'RoleIds'")
	}
	if args == nil {
		args = &GroupRolesArgs{}
	}
	var resource GroupRoles
	err := ctx.RegisterResource("keycloak:index/groupRoles:GroupRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupRoles gets an existing GroupRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupRolesState, opts ...pulumi.ResourceOption) (*GroupRoles, error) {
	var resource GroupRoles
	err := ctx.ReadResource("keycloak:index/groupRoles:GroupRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupRoles resources.
type groupRolesState struct {
	GroupId *string  `pulumi:"groupId"`
	RealmId *string  `pulumi:"realmId"`
	RoleIds []string `pulumi:"roleIds"`
}

type GroupRolesState struct {
	GroupId pulumi.StringPtrInput
	RealmId pulumi.StringPtrInput
	RoleIds pulumi.StringArrayInput
}

func (GroupRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRolesState)(nil)).Elem()
}

type groupRolesArgs struct {
	GroupId *string  `pulumi:"groupId"`
	RealmId string   `pulumi:"realmId"`
	RoleIds []string `pulumi:"roleIds"`
}

// The set of arguments for constructing a GroupRoles resource.
type GroupRolesArgs struct {
	GroupId pulumi.StringPtrInput
	RealmId pulumi.StringInput
	RoleIds pulumi.StringArrayInput
}

func (GroupRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRolesArgs)(nil)).Elem()
}
