// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allow for creating and managing Organizations within Keycloak.
//
// Attributes can also be defined on Groups.
//
// Linkage with identity providers is managed with the identity provider resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/oidc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			this, err := keycloak.NewOrganization(ctx, "this", &keycloak.OrganizationArgs{
//				Realm:   realm.Name,
//				Name:    pulumi.String("org"),
//				Alias:   pulumi.String("org"),
//				Enabled: pulumi.Bool(true),
//				Domains: keycloak.OrganizationDomainArray{
//					&keycloak.OrganizationDomainArgs{
//						Name: pulumi.String("example.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oidc.NewIdentityProvider(ctx, "this", &oidc.IdentityProviderArgs{
//				Realm:                       realm.Name,
//				Alias:                       pulumi.String("my-idp"),
//				AuthorizationUrl:            pulumi.String("https://authorizationurl.com"),
//				ClientId:                    pulumi.String("clientID"),
//				ClientSecret:                pulumi.String("clientSecret"),
//				TokenUrl:                    pulumi.String("https://tokenurl.com"),
//				OrganizationId:              this.ID(),
//				OrgDomain:                   pulumi.String("example.com"),
//				OrgRedirectModeEmailMatches: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Organizations can be imported using the format `{{realm_id}}/{{organization_id}}`, where `organization_id` is the unique ID that Keycloak
//
// assigns to the organizations upon creation. This value can be found in the URI when editing this organization in the GUI, and is typically a GUID.
//
// Example:
//
// bash
//
// ```sh
// $ pulumi import keycloak:index/organization:Organization this my-realm/cec54914-b702-4c7b-9431-b407817d059a
// ```
type Organization struct {
	pulumi.CustomResourceState

	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
	Attributes pulumi.StringMapOutput `pulumi:"attributes"`
	// The description of the organization.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of domains. At least one domain is required.
	Domains OrganizationDomainArrayOutput `pulumi:"domains"`
	// Enable/disable this organization.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The name of the organization.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm this organization exists in.
	Realm pulumi.StringOutput `pulumi:"realm"`
	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	RedirectUrl pulumi.StringPtrOutput `pulumi:"redirectUrl"`
}

// NewOrganization registers a new resource with the given unique name, arguments, and options.
func NewOrganization(ctx *pulumi.Context,
	name string, args *OrganizationArgs, opts ...pulumi.ResourceOption) (*Organization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	if args.Realm == nil {
		return nil, errors.New("invalid value for required argument 'Realm'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Organization
	err := ctx.RegisterResource("keycloak:index/organization:Organization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganization gets an existing Organization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationState, opts ...pulumi.ResourceOption) (*Organization, error) {
	var resource Organization
	err := ctx.ReadResource("keycloak:index/organization:Organization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Organization resources.
type organizationState struct {
	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	Alias *string `pulumi:"alias"`
	// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
	Attributes map[string]string `pulumi:"attributes"`
	// The description of the organization.
	Description *string `pulumi:"description"`
	// A list of domains. At least one domain is required.
	Domains []OrganizationDomain `pulumi:"domains"`
	// Enable/disable this organization.
	Enabled *bool `pulumi:"enabled"`
	// The name of the organization.
	Name *string `pulumi:"name"`
	// The realm this organization exists in.
	Realm *string `pulumi:"realm"`
	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	RedirectUrl *string `pulumi:"redirectUrl"`
}

type OrganizationState struct {
	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	Alias pulumi.StringPtrInput
	// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
	Attributes pulumi.StringMapInput
	// The description of the organization.
	Description pulumi.StringPtrInput
	// A list of domains. At least one domain is required.
	Domains OrganizationDomainArrayInput
	// Enable/disable this organization.
	Enabled pulumi.BoolPtrInput
	// The name of the organization.
	Name pulumi.StringPtrInput
	// The realm this organization exists in.
	Realm pulumi.StringPtrInput
	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	RedirectUrl pulumi.StringPtrInput
}

func (OrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationState)(nil)).Elem()
}

type organizationArgs struct {
	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	Alias *string `pulumi:"alias"`
	// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
	Attributes map[string]string `pulumi:"attributes"`
	// The description of the organization.
	Description *string `pulumi:"description"`
	// A list of domains. At least one domain is required.
	Domains []OrganizationDomain `pulumi:"domains"`
	// Enable/disable this organization.
	Enabled *bool `pulumi:"enabled"`
	// The name of the organization.
	Name *string `pulumi:"name"`
	// The realm this organization exists in.
	Realm string `pulumi:"realm"`
	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	RedirectUrl *string `pulumi:"redirectUrl"`
}

// The set of arguments for constructing a Organization resource.
type OrganizationArgs struct {
	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	Alias pulumi.StringPtrInput
	// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
	Attributes pulumi.StringMapInput
	// The description of the organization.
	Description pulumi.StringPtrInput
	// A list of domains. At least one domain is required.
	Domains OrganizationDomainArrayInput
	// Enable/disable this organization.
	Enabled pulumi.BoolPtrInput
	// The name of the organization.
	Name pulumi.StringPtrInput
	// The realm this organization exists in.
	Realm pulumi.StringInput
	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	RedirectUrl pulumi.StringPtrInput
}

func (OrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationArgs)(nil)).Elem()
}

type OrganizationInput interface {
	pulumi.Input

	ToOrganizationOutput() OrganizationOutput
	ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput
}

func (*Organization) ElementType() reflect.Type {
	return reflect.TypeOf((**Organization)(nil)).Elem()
}

func (i *Organization) ToOrganizationOutput() OrganizationOutput {
	return i.ToOrganizationOutputWithContext(context.Background())
}

func (i *Organization) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationOutput)
}

// OrganizationArrayInput is an input type that accepts OrganizationArray and OrganizationArrayOutput values.
// You can construct a concrete instance of `OrganizationArrayInput` via:
//
//	OrganizationArray{ OrganizationArgs{...} }
type OrganizationArrayInput interface {
	pulumi.Input

	ToOrganizationArrayOutput() OrganizationArrayOutput
	ToOrganizationArrayOutputWithContext(context.Context) OrganizationArrayOutput
}

type OrganizationArray []OrganizationInput

func (OrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Organization)(nil)).Elem()
}

func (i OrganizationArray) ToOrganizationArrayOutput() OrganizationArrayOutput {
	return i.ToOrganizationArrayOutputWithContext(context.Background())
}

func (i OrganizationArray) ToOrganizationArrayOutputWithContext(ctx context.Context) OrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationArrayOutput)
}

// OrganizationMapInput is an input type that accepts OrganizationMap and OrganizationMapOutput values.
// You can construct a concrete instance of `OrganizationMapInput` via:
//
//	OrganizationMap{ "key": OrganizationArgs{...} }
type OrganizationMapInput interface {
	pulumi.Input

	ToOrganizationMapOutput() OrganizationMapOutput
	ToOrganizationMapOutputWithContext(context.Context) OrganizationMapOutput
}

type OrganizationMap map[string]OrganizationInput

func (OrganizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Organization)(nil)).Elem()
}

func (i OrganizationMap) ToOrganizationMapOutput() OrganizationMapOutput {
	return i.ToOrganizationMapOutputWithContext(context.Background())
}

func (i OrganizationMap) ToOrganizationMapOutputWithContext(ctx context.Context) OrganizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationMapOutput)
}

type OrganizationOutput struct{ *pulumi.OutputState }

func (OrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Organization)(nil)).Elem()
}

func (o OrganizationOutput) ToOrganizationOutput() OrganizationOutput {
	return o
}

func (o OrganizationOutput) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return o
}

// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
func (o OrganizationOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// A map representing attributes for the group. In order to add multivalued attributes, use `##` to separate the values. Max length for each value is 255 chars.
func (o OrganizationOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

// The description of the organization.
func (o OrganizationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of domains. At least one domain is required.
func (o OrganizationOutput) Domains() OrganizationDomainArrayOutput {
	return o.ApplyT(func(v *Organization) OrganizationDomainArrayOutput { return v.Domains }).(OrganizationDomainArrayOutput)
}

// Enable/disable this organization.
func (o OrganizationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Organization) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name of the organization.
func (o OrganizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm this organization exists in.
func (o OrganizationOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
func (o OrganizationOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringPtrOutput { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

type OrganizationArrayOutput struct{ *pulumi.OutputState }

func (OrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Organization)(nil)).Elem()
}

func (o OrganizationArrayOutput) ToOrganizationArrayOutput() OrganizationArrayOutput {
	return o
}

func (o OrganizationArrayOutput) ToOrganizationArrayOutputWithContext(ctx context.Context) OrganizationArrayOutput {
	return o
}

func (o OrganizationArrayOutput) Index(i pulumi.IntInput) OrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Organization {
		return vs[0].([]*Organization)[vs[1].(int)]
	}).(OrganizationOutput)
}

type OrganizationMapOutput struct{ *pulumi.OutputState }

func (OrganizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Organization)(nil)).Elem()
}

func (o OrganizationMapOutput) ToOrganizationMapOutput() OrganizationMapOutput {
	return o
}

func (o OrganizationMapOutput) ToOrganizationMapOutputWithContext(ctx context.Context) OrganizationMapOutput {
	return o
}

func (o OrganizationMapOutput) MapIndex(k pulumi.StringInput) OrganizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Organization {
		return vs[0].(map[string]*Organization)[vs[1].(string)]
	}).(OrganizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationInput)(nil)).Elem(), &Organization{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationArrayInput)(nil)).Elem(), OrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationMapInput)(nil)).Elem(), OrganizationMap{})
	pulumi.RegisterOutputType(OrganizationOutput{})
	pulumi.RegisterOutputType(OrganizationArrayOutput{})
	pulumi.RegisterOutputType(OrganizationMapOutput{})
}
