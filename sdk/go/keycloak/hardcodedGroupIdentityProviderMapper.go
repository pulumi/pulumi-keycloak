// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for creating and managing hardcoded group mappers for Keycloak identity provider.
//
// The identity provider hardcoded group mapper grants a specified Keycloak group to each Keycloak user from the identity provider.
type HardcodedGroupIdentityProviderMapper struct {
	pulumi.CustomResourceState

	ExtraConfig pulumi.StringMapOutput `pulumi:"extraConfig"`
	// The name of the group which should be assigned to the users.
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// The IDP alias of the attribute to set.
	IdentityProviderAlias pulumi.StringOutput `pulumi:"identityProviderAlias"`
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm ID that this mapper will exist in.
	Realm pulumi.StringOutput `pulumi:"realm"`
}

// NewHardcodedGroupIdentityProviderMapper registers a new resource with the given unique name, arguments, and options.
func NewHardcodedGroupIdentityProviderMapper(ctx *pulumi.Context,
	name string, args *HardcodedGroupIdentityProviderMapperArgs, opts ...pulumi.ResourceOption) (*HardcodedGroupIdentityProviderMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityProviderAlias == nil {
		return nil, errors.New("invalid value for required argument 'IdentityProviderAlias'")
	}
	if args.Realm == nil {
		return nil, errors.New("invalid value for required argument 'Realm'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HardcodedGroupIdentityProviderMapper
	err := ctx.RegisterResource("keycloak:index/hardcodedGroupIdentityProviderMapper:HardcodedGroupIdentityProviderMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHardcodedGroupIdentityProviderMapper gets an existing HardcodedGroupIdentityProviderMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHardcodedGroupIdentityProviderMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HardcodedGroupIdentityProviderMapperState, opts ...pulumi.ResourceOption) (*HardcodedGroupIdentityProviderMapper, error) {
	var resource HardcodedGroupIdentityProviderMapper
	err := ctx.ReadResource("keycloak:index/hardcodedGroupIdentityProviderMapper:HardcodedGroupIdentityProviderMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HardcodedGroupIdentityProviderMapper resources.
type hardcodedGroupIdentityProviderMapperState struct {
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// The name of the group which should be assigned to the users.
	Group *string `pulumi:"group"`
	// The IDP alias of the attribute to set.
	IdentityProviderAlias *string `pulumi:"identityProviderAlias"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm ID that this mapper will exist in.
	Realm *string `pulumi:"realm"`
}

type HardcodedGroupIdentityProviderMapperState struct {
	ExtraConfig pulumi.StringMapInput
	// The name of the group which should be assigned to the users.
	Group pulumi.StringPtrInput
	// The IDP alias of the attribute to set.
	IdentityProviderAlias pulumi.StringPtrInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm ID that this mapper will exist in.
	Realm pulumi.StringPtrInput
}

func (HardcodedGroupIdentityProviderMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedGroupIdentityProviderMapperState)(nil)).Elem()
}

type hardcodedGroupIdentityProviderMapperArgs struct {
	ExtraConfig map[string]string `pulumi:"extraConfig"`
	// The name of the group which should be assigned to the users.
	Group *string `pulumi:"group"`
	// The IDP alias of the attribute to set.
	IdentityProviderAlias string `pulumi:"identityProviderAlias"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm ID that this mapper will exist in.
	Realm string `pulumi:"realm"`
}

// The set of arguments for constructing a HardcodedGroupIdentityProviderMapper resource.
type HardcodedGroupIdentityProviderMapperArgs struct {
	ExtraConfig pulumi.StringMapInput
	// The name of the group which should be assigned to the users.
	Group pulumi.StringPtrInput
	// The IDP alias of the attribute to set.
	IdentityProviderAlias pulumi.StringInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm ID that this mapper will exist in.
	Realm pulumi.StringInput
}

func (HardcodedGroupIdentityProviderMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedGroupIdentityProviderMapperArgs)(nil)).Elem()
}

type HardcodedGroupIdentityProviderMapperInput interface {
	pulumi.Input

	ToHardcodedGroupIdentityProviderMapperOutput() HardcodedGroupIdentityProviderMapperOutput
	ToHardcodedGroupIdentityProviderMapperOutputWithContext(ctx context.Context) HardcodedGroupIdentityProviderMapperOutput
}

func (*HardcodedGroupIdentityProviderMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedGroupIdentityProviderMapper)(nil)).Elem()
}

func (i *HardcodedGroupIdentityProviderMapper) ToHardcodedGroupIdentityProviderMapperOutput() HardcodedGroupIdentityProviderMapperOutput {
	return i.ToHardcodedGroupIdentityProviderMapperOutputWithContext(context.Background())
}

func (i *HardcodedGroupIdentityProviderMapper) ToHardcodedGroupIdentityProviderMapperOutputWithContext(ctx context.Context) HardcodedGroupIdentityProviderMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedGroupIdentityProviderMapperOutput)
}

// HardcodedGroupIdentityProviderMapperArrayInput is an input type that accepts HardcodedGroupIdentityProviderMapperArray and HardcodedGroupIdentityProviderMapperArrayOutput values.
// You can construct a concrete instance of `HardcodedGroupIdentityProviderMapperArrayInput` via:
//
//	HardcodedGroupIdentityProviderMapperArray{ HardcodedGroupIdentityProviderMapperArgs{...} }
type HardcodedGroupIdentityProviderMapperArrayInput interface {
	pulumi.Input

	ToHardcodedGroupIdentityProviderMapperArrayOutput() HardcodedGroupIdentityProviderMapperArrayOutput
	ToHardcodedGroupIdentityProviderMapperArrayOutputWithContext(context.Context) HardcodedGroupIdentityProviderMapperArrayOutput
}

type HardcodedGroupIdentityProviderMapperArray []HardcodedGroupIdentityProviderMapperInput

func (HardcodedGroupIdentityProviderMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedGroupIdentityProviderMapper)(nil)).Elem()
}

func (i HardcodedGroupIdentityProviderMapperArray) ToHardcodedGroupIdentityProviderMapperArrayOutput() HardcodedGroupIdentityProviderMapperArrayOutput {
	return i.ToHardcodedGroupIdentityProviderMapperArrayOutputWithContext(context.Background())
}

func (i HardcodedGroupIdentityProviderMapperArray) ToHardcodedGroupIdentityProviderMapperArrayOutputWithContext(ctx context.Context) HardcodedGroupIdentityProviderMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedGroupIdentityProviderMapperArrayOutput)
}

// HardcodedGroupIdentityProviderMapperMapInput is an input type that accepts HardcodedGroupIdentityProviderMapperMap and HardcodedGroupIdentityProviderMapperMapOutput values.
// You can construct a concrete instance of `HardcodedGroupIdentityProviderMapperMapInput` via:
//
//	HardcodedGroupIdentityProviderMapperMap{ "key": HardcodedGroupIdentityProviderMapperArgs{...} }
type HardcodedGroupIdentityProviderMapperMapInput interface {
	pulumi.Input

	ToHardcodedGroupIdentityProviderMapperMapOutput() HardcodedGroupIdentityProviderMapperMapOutput
	ToHardcodedGroupIdentityProviderMapperMapOutputWithContext(context.Context) HardcodedGroupIdentityProviderMapperMapOutput
}

type HardcodedGroupIdentityProviderMapperMap map[string]HardcodedGroupIdentityProviderMapperInput

func (HardcodedGroupIdentityProviderMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedGroupIdentityProviderMapper)(nil)).Elem()
}

func (i HardcodedGroupIdentityProviderMapperMap) ToHardcodedGroupIdentityProviderMapperMapOutput() HardcodedGroupIdentityProviderMapperMapOutput {
	return i.ToHardcodedGroupIdentityProviderMapperMapOutputWithContext(context.Background())
}

func (i HardcodedGroupIdentityProviderMapperMap) ToHardcodedGroupIdentityProviderMapperMapOutputWithContext(ctx context.Context) HardcodedGroupIdentityProviderMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedGroupIdentityProviderMapperMapOutput)
}

type HardcodedGroupIdentityProviderMapperOutput struct{ *pulumi.OutputState }

func (HardcodedGroupIdentityProviderMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedGroupIdentityProviderMapper)(nil)).Elem()
}

func (o HardcodedGroupIdentityProviderMapperOutput) ToHardcodedGroupIdentityProviderMapperOutput() HardcodedGroupIdentityProviderMapperOutput {
	return o
}

func (o HardcodedGroupIdentityProviderMapperOutput) ToHardcodedGroupIdentityProviderMapperOutputWithContext(ctx context.Context) HardcodedGroupIdentityProviderMapperOutput {
	return o
}

func (o HardcodedGroupIdentityProviderMapperOutput) ExtraConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HardcodedGroupIdentityProviderMapper) pulumi.StringMapOutput { return v.ExtraConfig }).(pulumi.StringMapOutput)
}

// The name of the group which should be assigned to the users.
func (o HardcodedGroupIdentityProviderMapperOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedGroupIdentityProviderMapper) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

// The IDP alias of the attribute to set.
func (o HardcodedGroupIdentityProviderMapperOutput) IdentityProviderAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedGroupIdentityProviderMapper) pulumi.StringOutput { return v.IdentityProviderAlias }).(pulumi.StringOutput)
}

// Display name of this mapper when displayed in the console.
func (o HardcodedGroupIdentityProviderMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedGroupIdentityProviderMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm ID that this mapper will exist in.
func (o HardcodedGroupIdentityProviderMapperOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedGroupIdentityProviderMapper) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

type HardcodedGroupIdentityProviderMapperArrayOutput struct{ *pulumi.OutputState }

func (HardcodedGroupIdentityProviderMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedGroupIdentityProviderMapper)(nil)).Elem()
}

func (o HardcodedGroupIdentityProviderMapperArrayOutput) ToHardcodedGroupIdentityProviderMapperArrayOutput() HardcodedGroupIdentityProviderMapperArrayOutput {
	return o
}

func (o HardcodedGroupIdentityProviderMapperArrayOutput) ToHardcodedGroupIdentityProviderMapperArrayOutputWithContext(ctx context.Context) HardcodedGroupIdentityProviderMapperArrayOutput {
	return o
}

func (o HardcodedGroupIdentityProviderMapperArrayOutput) Index(i pulumi.IntInput) HardcodedGroupIdentityProviderMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HardcodedGroupIdentityProviderMapper {
		return vs[0].([]*HardcodedGroupIdentityProviderMapper)[vs[1].(int)]
	}).(HardcodedGroupIdentityProviderMapperOutput)
}

type HardcodedGroupIdentityProviderMapperMapOutput struct{ *pulumi.OutputState }

func (HardcodedGroupIdentityProviderMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedGroupIdentityProviderMapper)(nil)).Elem()
}

func (o HardcodedGroupIdentityProviderMapperMapOutput) ToHardcodedGroupIdentityProviderMapperMapOutput() HardcodedGroupIdentityProviderMapperMapOutput {
	return o
}

func (o HardcodedGroupIdentityProviderMapperMapOutput) ToHardcodedGroupIdentityProviderMapperMapOutputWithContext(ctx context.Context) HardcodedGroupIdentityProviderMapperMapOutput {
	return o
}

func (o HardcodedGroupIdentityProviderMapperMapOutput) MapIndex(k pulumi.StringInput) HardcodedGroupIdentityProviderMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HardcodedGroupIdentityProviderMapper {
		return vs[0].(map[string]*HardcodedGroupIdentityProviderMapper)[vs[1].(string)]
	}).(HardcodedGroupIdentityProviderMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedGroupIdentityProviderMapperInput)(nil)).Elem(), &HardcodedGroupIdentityProviderMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedGroupIdentityProviderMapperArrayInput)(nil)).Elem(), HardcodedGroupIdentityProviderMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedGroupIdentityProviderMapperMapInput)(nil)).Elem(), HardcodedGroupIdentityProviderMapperMap{})
	pulumi.RegisterOutputType(HardcodedGroupIdentityProviderMapperOutput{})
	pulumi.RegisterOutputType(HardcodedGroupIdentityProviderMapperArrayOutput{})
	pulumi.RegisterOutputType(HardcodedGroupIdentityProviderMapperMapOutput{})
}
