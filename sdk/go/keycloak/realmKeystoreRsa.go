// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for creating and managing `rsa` Realm keystores within Keycloak.
//
// A realm keystore manages generated key pairs that are used by Keycloak to perform cryptographic signatures and encryption.
//
// ## Import
//
// Realm keys can be imported using realm name and keystore id, you can find it in web UI. Examplebash
//
// ```sh
//  $ pulumi import keycloak:index/realmKeystoreRsa:RealmKeystoreRsa keystore_rsa my-realm/my-realm/618cfba7-49aa-4c09-9a19-2f699b576f0b
// ```
type RealmKeystoreRsa struct {
	pulumi.CustomResourceState

	// When `false`, key in not used for signing. Defaults to `true`.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// Intended algorithm for the key. Defaults to `RS256`
	Algorithm pulumi.StringPtrOutput `pulumi:"algorithm"`
	// X509 Certificate encoded in PEM format.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// When `false`, key is not accessible in this realm. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Display name of provider when linked in admin console.
	Name pulumi.StringOutput `pulumi:"name"`
	// Priority for the provider. Defaults to `0`
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Private RSA Key encoded in PEM format.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The realm this keystore exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewRealmKeystoreRsa registers a new resource with the given unique name, arguments, and options.
func NewRealmKeystoreRsa(ctx *pulumi.Context,
	name string, args *RealmKeystoreRsaArgs, opts ...pulumi.ResourceOption) (*RealmKeystoreRsa, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	var resource RealmKeystoreRsa
	err := ctx.RegisterResource("keycloak:index/realmKeystoreRsa:RealmKeystoreRsa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealmKeystoreRsa gets an existing RealmKeystoreRsa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealmKeystoreRsa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmKeystoreRsaState, opts ...pulumi.ResourceOption) (*RealmKeystoreRsa, error) {
	var resource RealmKeystoreRsa
	err := ctx.ReadResource("keycloak:index/realmKeystoreRsa:RealmKeystoreRsa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RealmKeystoreRsa resources.
type realmKeystoreRsaState struct {
	// When `false`, key in not used for signing. Defaults to `true`.
	Active *bool `pulumi:"active"`
	// Intended algorithm for the key. Defaults to `RS256`
	Algorithm *string `pulumi:"algorithm"`
	// X509 Certificate encoded in PEM format.
	Certificate *string `pulumi:"certificate"`
	// When `false`, key is not accessible in this realm. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Display name of provider when linked in admin console.
	Name *string `pulumi:"name"`
	// Priority for the provider. Defaults to `0`
	Priority *int `pulumi:"priority"`
	// Private RSA Key encoded in PEM format.
	PrivateKey *string `pulumi:"privateKey"`
	// The realm this keystore exists in.
	RealmId *string `pulumi:"realmId"`
}

type RealmKeystoreRsaState struct {
	// When `false`, key in not used for signing. Defaults to `true`.
	Active pulumi.BoolPtrInput
	// Intended algorithm for the key. Defaults to `RS256`
	Algorithm pulumi.StringPtrInput
	// X509 Certificate encoded in PEM format.
	Certificate pulumi.StringPtrInput
	// When `false`, key is not accessible in this realm. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Display name of provider when linked in admin console.
	Name pulumi.StringPtrInput
	// Priority for the provider. Defaults to `0`
	Priority pulumi.IntPtrInput
	// Private RSA Key encoded in PEM format.
	PrivateKey pulumi.StringPtrInput
	// The realm this keystore exists in.
	RealmId pulumi.StringPtrInput
}

func (RealmKeystoreRsaState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmKeystoreRsaState)(nil)).Elem()
}

type realmKeystoreRsaArgs struct {
	// When `false`, key in not used for signing. Defaults to `true`.
	Active *bool `pulumi:"active"`
	// Intended algorithm for the key. Defaults to `RS256`
	Algorithm *string `pulumi:"algorithm"`
	// X509 Certificate encoded in PEM format.
	Certificate string `pulumi:"certificate"`
	// When `false`, key is not accessible in this realm. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Display name of provider when linked in admin console.
	Name *string `pulumi:"name"`
	// Priority for the provider. Defaults to `0`
	Priority *int `pulumi:"priority"`
	// Private RSA Key encoded in PEM format.
	PrivateKey string `pulumi:"privateKey"`
	// The realm this keystore exists in.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a RealmKeystoreRsa resource.
type RealmKeystoreRsaArgs struct {
	// When `false`, key in not used for signing. Defaults to `true`.
	Active pulumi.BoolPtrInput
	// Intended algorithm for the key. Defaults to `RS256`
	Algorithm pulumi.StringPtrInput
	// X509 Certificate encoded in PEM format.
	Certificate pulumi.StringInput
	// When `false`, key is not accessible in this realm. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Display name of provider when linked in admin console.
	Name pulumi.StringPtrInput
	// Priority for the provider. Defaults to `0`
	Priority pulumi.IntPtrInput
	// Private RSA Key encoded in PEM format.
	PrivateKey pulumi.StringInput
	// The realm this keystore exists in.
	RealmId pulumi.StringInput
}

func (RealmKeystoreRsaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmKeystoreRsaArgs)(nil)).Elem()
}

type RealmKeystoreRsaInput interface {
	pulumi.Input

	ToRealmKeystoreRsaOutput() RealmKeystoreRsaOutput
	ToRealmKeystoreRsaOutputWithContext(ctx context.Context) RealmKeystoreRsaOutput
}

func (*RealmKeystoreRsa) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmKeystoreRsa)(nil)).Elem()
}

func (i *RealmKeystoreRsa) ToRealmKeystoreRsaOutput() RealmKeystoreRsaOutput {
	return i.ToRealmKeystoreRsaOutputWithContext(context.Background())
}

func (i *RealmKeystoreRsa) ToRealmKeystoreRsaOutputWithContext(ctx context.Context) RealmKeystoreRsaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmKeystoreRsaOutput)
}

// RealmKeystoreRsaArrayInput is an input type that accepts RealmKeystoreRsaArray and RealmKeystoreRsaArrayOutput values.
// You can construct a concrete instance of `RealmKeystoreRsaArrayInput` via:
//
//          RealmKeystoreRsaArray{ RealmKeystoreRsaArgs{...} }
type RealmKeystoreRsaArrayInput interface {
	pulumi.Input

	ToRealmKeystoreRsaArrayOutput() RealmKeystoreRsaArrayOutput
	ToRealmKeystoreRsaArrayOutputWithContext(context.Context) RealmKeystoreRsaArrayOutput
}

type RealmKeystoreRsaArray []RealmKeystoreRsaInput

func (RealmKeystoreRsaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmKeystoreRsa)(nil)).Elem()
}

func (i RealmKeystoreRsaArray) ToRealmKeystoreRsaArrayOutput() RealmKeystoreRsaArrayOutput {
	return i.ToRealmKeystoreRsaArrayOutputWithContext(context.Background())
}

func (i RealmKeystoreRsaArray) ToRealmKeystoreRsaArrayOutputWithContext(ctx context.Context) RealmKeystoreRsaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmKeystoreRsaArrayOutput)
}

// RealmKeystoreRsaMapInput is an input type that accepts RealmKeystoreRsaMap and RealmKeystoreRsaMapOutput values.
// You can construct a concrete instance of `RealmKeystoreRsaMapInput` via:
//
//          RealmKeystoreRsaMap{ "key": RealmKeystoreRsaArgs{...} }
type RealmKeystoreRsaMapInput interface {
	pulumi.Input

	ToRealmKeystoreRsaMapOutput() RealmKeystoreRsaMapOutput
	ToRealmKeystoreRsaMapOutputWithContext(context.Context) RealmKeystoreRsaMapOutput
}

type RealmKeystoreRsaMap map[string]RealmKeystoreRsaInput

func (RealmKeystoreRsaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmKeystoreRsa)(nil)).Elem()
}

func (i RealmKeystoreRsaMap) ToRealmKeystoreRsaMapOutput() RealmKeystoreRsaMapOutput {
	return i.ToRealmKeystoreRsaMapOutputWithContext(context.Background())
}

func (i RealmKeystoreRsaMap) ToRealmKeystoreRsaMapOutputWithContext(ctx context.Context) RealmKeystoreRsaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmKeystoreRsaMapOutput)
}

type RealmKeystoreRsaOutput struct{ *pulumi.OutputState }

func (RealmKeystoreRsaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmKeystoreRsa)(nil)).Elem()
}

func (o RealmKeystoreRsaOutput) ToRealmKeystoreRsaOutput() RealmKeystoreRsaOutput {
	return o
}

func (o RealmKeystoreRsaOutput) ToRealmKeystoreRsaOutputWithContext(ctx context.Context) RealmKeystoreRsaOutput {
	return o
}

type RealmKeystoreRsaArrayOutput struct{ *pulumi.OutputState }

func (RealmKeystoreRsaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmKeystoreRsa)(nil)).Elem()
}

func (o RealmKeystoreRsaArrayOutput) ToRealmKeystoreRsaArrayOutput() RealmKeystoreRsaArrayOutput {
	return o
}

func (o RealmKeystoreRsaArrayOutput) ToRealmKeystoreRsaArrayOutputWithContext(ctx context.Context) RealmKeystoreRsaArrayOutput {
	return o
}

func (o RealmKeystoreRsaArrayOutput) Index(i pulumi.IntInput) RealmKeystoreRsaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RealmKeystoreRsa {
		return vs[0].([]*RealmKeystoreRsa)[vs[1].(int)]
	}).(RealmKeystoreRsaOutput)
}

type RealmKeystoreRsaMapOutput struct{ *pulumi.OutputState }

func (RealmKeystoreRsaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmKeystoreRsa)(nil)).Elem()
}

func (o RealmKeystoreRsaMapOutput) ToRealmKeystoreRsaMapOutput() RealmKeystoreRsaMapOutput {
	return o
}

func (o RealmKeystoreRsaMapOutput) ToRealmKeystoreRsaMapOutputWithContext(ctx context.Context) RealmKeystoreRsaMapOutput {
	return o
}

func (o RealmKeystoreRsaMapOutput) MapIndex(k pulumi.StringInput) RealmKeystoreRsaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RealmKeystoreRsa {
		return vs[0].(map[string]*RealmKeystoreRsa)[vs[1].(string)]
	}).(RealmKeystoreRsaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmKeystoreRsaInput)(nil)).Elem(), &RealmKeystoreRsa{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmKeystoreRsaArrayInput)(nil)).Elem(), RealmKeystoreRsaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmKeystoreRsaMapInput)(nil)).Elem(), RealmKeystoreRsaMap{})
	pulumi.RegisterOutputType(RealmKeystoreRsaOutput{})
	pulumi.RegisterOutputType(RealmKeystoreRsaArrayOutput{})
	pulumi.RegisterOutputType(RealmKeystoreRsaMapOutput{})
}
