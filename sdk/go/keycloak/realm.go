// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allows for creating and managing Realms within Keycloak.
//
// A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated
// from multiple sources.
//
// ## Default Client Scopes
//
// - `defaultDefaultClientScopes` - (Optional) A list of default default client scopes to be used for client definitions. Defaults to `[]` or keycloak's built-in default default client-scopes.
// - `defaultOptionalClientScopes` - (Optional) A list of default optional client scopes to be used for client definitions. Defaults to `[]` or keycloak's built-in default optional client-scopes.
//
// ## Import
//
// Realms can be imported using their name. Examplebash
//
// ```sh
//
//	$ pulumi import keycloak:index/realm:Realm realm my-realm
//
// ```
type Realm struct {
	pulumi.CustomResourceState

	// The maximum amount of time a client has to finish the authorization code flow.
	AccessCodeLifespan pulumi.StringOutput `pulumi:"accessCodeLifespan"`
	// The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
	AccessCodeLifespanLogin pulumi.StringOutput `pulumi:"accessCodeLifespanLogin"`
	// The maximum amount of time a user has to complete login related actions, such as updating a password.
	AccessCodeLifespanUserAction pulumi.StringOutput `pulumi:"accessCodeLifespanUserAction"`
	// The amount of time an access token can be used before it expires.
	AccessTokenLifespan pulumi.StringOutput `pulumi:"accessTokenLifespan"`
	// The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
	AccessTokenLifespanForImplicitFlow pulumi.StringOutput `pulumi:"accessTokenLifespanForImplicitFlow"`
	// Used for account management pages.
	AccountTheme pulumi.StringPtrOutput `pulumi:"accountTheme"`
	// The maximum time a user has to use an admin-generated permit before it expires.
	ActionTokenGeneratedByAdminLifespan pulumi.StringOutput `pulumi:"actionTokenGeneratedByAdminLifespan"`
	// The maximum time a user has to use a user-generated permit before it expires.
	ActionTokenGeneratedByUserLifespan pulumi.StringOutput `pulumi:"actionTokenGeneratedByUserLifespan"`
	// Used for the admin console.
	AdminTheme pulumi.StringPtrOutput `pulumi:"adminTheme"`
	// A map of custom attributes to add to the realm.
	Attributes pulumi.MapOutput `pulumi:"attributes"`
	// The desired flow for browser authentication. Defaults to `browser`.
	BrowserFlow pulumi.StringOutput `pulumi:"browserFlow"`
	// The desired flow for client authentication. Defaults to `clients`.
	ClientAuthenticationFlow pulumi.StringOutput `pulumi:"clientAuthenticationFlow"`
	// The amount of time a session can be idle before it expires. Users can override it for individual clients.
	ClientSessionIdleTimeout pulumi.StringOutput `pulumi:"clientSessionIdleTimeout"`
	// The maximum amount of time before a session expires regardless of activity. Users can override it for individual clients.
	ClientSessionMaxLifespan    pulumi.StringOutput      `pulumi:"clientSessionMaxLifespan"`
	DefaultDefaultClientScopes  pulumi.StringArrayOutput `pulumi:"defaultDefaultClientScopes"`
	DefaultOptionalClientScopes pulumi.StringArrayOutput `pulumi:"defaultOptionalClientScopes"`
	// Default algorithm used to sign tokens for the realm.
	DefaultSignatureAlgorithm pulumi.StringPtrOutput `pulumi:"defaultSignatureAlgorithm"`
	// The desired flow for direct access authentication. Defaults to `direct grant`.
	DirectGrantFlow pulumi.StringOutput `pulumi:"directGrantFlow"`
	// The display name for the realm that is shown when logging in to the admin console.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
	DisplayNameHtml pulumi.StringPtrOutput `pulumi:"displayNameHtml"`
	// The desired flow for Docker authentication. Defaults to `docker auth`.
	DockerAuthenticationFlow pulumi.StringOutput `pulumi:"dockerAuthenticationFlow"`
	// When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
	DuplicateEmailsAllowed pulumi.BoolOutput `pulumi:"duplicateEmailsAllowed"`
	// When true, the username field is editable.
	EditUsernameAllowed pulumi.BoolOutput `pulumi:"editUsernameAllowed"`
	// Used for emails that are sent by Keycloak.
	EmailTheme pulumi.StringPtrOutput `pulumi:"emailTheme"`
	// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
	InternalId           pulumi.StringOutput                `pulumi:"internalId"`
	Internationalization RealmInternationalizationPtrOutput `pulumi:"internationalization"`
	// Used for the login, forgot password, and registration pages.
	LoginTheme pulumi.StringPtrOutput `pulumi:"loginTheme"`
	// When true, users may log in with their email address.
	LoginWithEmailAllowed pulumi.BoolOutput `pulumi:"loginWithEmailAllowed"`
	// The maximum amount of time a client has to finish the device code flow before it expires.
	//
	// The attributes below should be specified in seconds.
	Oauth2DeviceCodeLifespan pulumi.StringOutput `pulumi:"oauth2DeviceCodeLifespan"`
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval pulumi.IntOutput `pulumi:"oauth2DevicePollingInterval"`
	// The amount of time an offline session can be idle before it expires.
	OfflineSessionIdleTimeout pulumi.StringOutput `pulumi:"offlineSessionIdleTimeout"`
	// The maximum amount of time before an offline session expires regardless of activity.
	OfflineSessionMaxLifespan pulumi.StringOutput `pulumi:"offlineSessionMaxLifespan"`
	// Enable `offlineSessionMaxLifespan`.
	OfflineSessionMaxLifespanEnabled pulumi.BoolPtrOutput `pulumi:"offlineSessionMaxLifespanEnabled"`
	OtpPolicy                        RealmOtpPolicyOutput `pulumi:"otpPolicy"`
	// The password policy for users within the realm.
	//
	// The arguments below can be used to configure authentication flow bindings:
	PasswordPolicy pulumi.StringPtrOutput `pulumi:"passwordPolicy"`
	// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
	//
	// The arguments below should be specified as [Go duration strings](https://golang.org/pkg/time/#Duration.String). They will default to Keycloak's default settings.
	RefreshTokenMaxReuse pulumi.IntPtrOutput `pulumi:"refreshTokenMaxReuse"`
	// When true, user registration will be enabled, and a link for registration will be displayed on the login page.
	RegistrationAllowed pulumi.BoolOutput `pulumi:"registrationAllowed"`
	// When true, the user's email will be used as their username during registration.
	RegistrationEmailAsUsername pulumi.BoolOutput `pulumi:"registrationEmailAsUsername"`
	// The desired flow for user registration. Defaults to `registration`.
	RegistrationFlow pulumi.StringOutput `pulumi:"registrationFlow"`
	// When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
	RememberMe pulumi.BoolOutput `pulumi:"rememberMe"`
	// The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
	ResetCredentialsFlow pulumi.StringOutput `pulumi:"resetCredentialsFlow"`
	// When true, a "forgot password" link will be displayed on the login page.
	ResetPasswordAllowed pulumi.BoolOutput `pulumi:"resetPasswordAllowed"`
	// If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
	RevokeRefreshToken pulumi.BoolPtrOutput           `pulumi:"revokeRefreshToken"`
	SecurityDefenses   RealmSecurityDefensesPtrOutput `pulumi:"securityDefenses"`
	SmtpServer         RealmSmtpServerPtrOutput       `pulumi:"smtpServer"`
	// Can be one of following values: 'none, 'external' or 'all'
	SslRequired pulumi.StringPtrOutput `pulumi:"sslRequired"`
	// The amount of time a session can be idle before it expires.
	SsoSessionIdleTimeout pulumi.StringOutput `pulumi:"ssoSessionIdleTimeout"`
	// Similar to `ssoSessionIdleTimeout`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionIdleTimeout`.
	SsoSessionIdleTimeoutRememberMe pulumi.StringOutput `pulumi:"ssoSessionIdleTimeoutRememberMe"`
	// The maximum amount of time before a session expires regardless of activity.
	SsoSessionMaxLifespan pulumi.StringOutput `pulumi:"ssoSessionMaxLifespan"`
	// Similar to `ssoSessionMaxLifespan`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionMaxLifespan`.
	SsoSessionMaxLifespanRememberMe pulumi.StringOutput `pulumi:"ssoSessionMaxLifespanRememberMe"`
	// When `true`, users are allowed to manage their own resources. Defaults to `false`.
	UserManagedAccess pulumi.BoolPtrOutput `pulumi:"userManagedAccess"`
	// When true, users are required to verify their email address after registration and after email address changes.
	VerifyEmail pulumi.BoolOutput `pulumi:"verifyEmail"`
	// Configuration for WebAuthn Passwordless Policy authentication.
	//
	// Each of these attributes are blocks with the following attributes:
	WebAuthnPasswordlessPolicy RealmWebAuthnPasswordlessPolicyOutput `pulumi:"webAuthnPasswordlessPolicy"`
	// Configuration for WebAuthn Policy authentication.
	WebAuthnPolicy RealmWebAuthnPolicyOutput `pulumi:"webAuthnPolicy"`
}

// NewRealm registers a new resource with the given unique name, arguments, and options.
func NewRealm(ctx *pulumi.Context,
	name string, args *RealmArgs, opts ...pulumi.ResourceOption) (*Realm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Realm == nil {
		return nil, errors.New("invalid value for required argument 'Realm'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Realm
	err := ctx.RegisterResource("keycloak:index/realm:Realm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealm gets an existing Realm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmState, opts ...pulumi.ResourceOption) (*Realm, error) {
	var resource Realm
	err := ctx.ReadResource("keycloak:index/realm:Realm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Realm resources.
type realmState struct {
	// The maximum amount of time a client has to finish the authorization code flow.
	AccessCodeLifespan *string `pulumi:"accessCodeLifespan"`
	// The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
	AccessCodeLifespanLogin *string `pulumi:"accessCodeLifespanLogin"`
	// The maximum amount of time a user has to complete login related actions, such as updating a password.
	AccessCodeLifespanUserAction *string `pulumi:"accessCodeLifespanUserAction"`
	// The amount of time an access token can be used before it expires.
	AccessTokenLifespan *string `pulumi:"accessTokenLifespan"`
	// The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
	AccessTokenLifespanForImplicitFlow *string `pulumi:"accessTokenLifespanForImplicitFlow"`
	// Used for account management pages.
	AccountTheme *string `pulumi:"accountTheme"`
	// The maximum time a user has to use an admin-generated permit before it expires.
	ActionTokenGeneratedByAdminLifespan *string `pulumi:"actionTokenGeneratedByAdminLifespan"`
	// The maximum time a user has to use a user-generated permit before it expires.
	ActionTokenGeneratedByUserLifespan *string `pulumi:"actionTokenGeneratedByUserLifespan"`
	// Used for the admin console.
	AdminTheme *string `pulumi:"adminTheme"`
	// A map of custom attributes to add to the realm.
	Attributes map[string]interface{} `pulumi:"attributes"`
	// The desired flow for browser authentication. Defaults to `browser`.
	BrowserFlow *string `pulumi:"browserFlow"`
	// The desired flow for client authentication. Defaults to `clients`.
	ClientAuthenticationFlow *string `pulumi:"clientAuthenticationFlow"`
	// The amount of time a session can be idle before it expires. Users can override it for individual clients.
	ClientSessionIdleTimeout *string `pulumi:"clientSessionIdleTimeout"`
	// The maximum amount of time before a session expires regardless of activity. Users can override it for individual clients.
	ClientSessionMaxLifespan    *string  `pulumi:"clientSessionMaxLifespan"`
	DefaultDefaultClientScopes  []string `pulumi:"defaultDefaultClientScopes"`
	DefaultOptionalClientScopes []string `pulumi:"defaultOptionalClientScopes"`
	// Default algorithm used to sign tokens for the realm.
	DefaultSignatureAlgorithm *string `pulumi:"defaultSignatureAlgorithm"`
	// The desired flow for direct access authentication. Defaults to `direct grant`.
	DirectGrantFlow *string `pulumi:"directGrantFlow"`
	// The display name for the realm that is shown when logging in to the admin console.
	DisplayName *string `pulumi:"displayName"`
	// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
	DisplayNameHtml *string `pulumi:"displayNameHtml"`
	// The desired flow for Docker authentication. Defaults to `docker auth`.
	DockerAuthenticationFlow *string `pulumi:"dockerAuthenticationFlow"`
	// When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
	DuplicateEmailsAllowed *bool `pulumi:"duplicateEmailsAllowed"`
	// When true, the username field is editable.
	EditUsernameAllowed *bool `pulumi:"editUsernameAllowed"`
	// Used for emails that are sent by Keycloak.
	EmailTheme *string `pulumi:"emailTheme"`
	// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
	InternalId           *string                    `pulumi:"internalId"`
	Internationalization *RealmInternationalization `pulumi:"internationalization"`
	// Used for the login, forgot password, and registration pages.
	LoginTheme *string `pulumi:"loginTheme"`
	// When true, users may log in with their email address.
	LoginWithEmailAllowed *bool `pulumi:"loginWithEmailAllowed"`
	// The maximum amount of time a client has to finish the device code flow before it expires.
	//
	// The attributes below should be specified in seconds.
	Oauth2DeviceCodeLifespan *string `pulumi:"oauth2DeviceCodeLifespan"`
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval *int `pulumi:"oauth2DevicePollingInterval"`
	// The amount of time an offline session can be idle before it expires.
	OfflineSessionIdleTimeout *string `pulumi:"offlineSessionIdleTimeout"`
	// The maximum amount of time before an offline session expires regardless of activity.
	OfflineSessionMaxLifespan *string `pulumi:"offlineSessionMaxLifespan"`
	// Enable `offlineSessionMaxLifespan`.
	OfflineSessionMaxLifespanEnabled *bool           `pulumi:"offlineSessionMaxLifespanEnabled"`
	OtpPolicy                        *RealmOtpPolicy `pulumi:"otpPolicy"`
	// The password policy for users within the realm.
	//
	// The arguments below can be used to configure authentication flow bindings:
	PasswordPolicy *string `pulumi:"passwordPolicy"`
	// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
	Realm *string `pulumi:"realm"`
	// Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
	//
	// The arguments below should be specified as [Go duration strings](https://golang.org/pkg/time/#Duration.String). They will default to Keycloak's default settings.
	RefreshTokenMaxReuse *int `pulumi:"refreshTokenMaxReuse"`
	// When true, user registration will be enabled, and a link for registration will be displayed on the login page.
	RegistrationAllowed *bool `pulumi:"registrationAllowed"`
	// When true, the user's email will be used as their username during registration.
	RegistrationEmailAsUsername *bool `pulumi:"registrationEmailAsUsername"`
	// The desired flow for user registration. Defaults to `registration`.
	RegistrationFlow *string `pulumi:"registrationFlow"`
	// When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
	RememberMe *bool `pulumi:"rememberMe"`
	// The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
	ResetCredentialsFlow *string `pulumi:"resetCredentialsFlow"`
	// When true, a "forgot password" link will be displayed on the login page.
	ResetPasswordAllowed *bool `pulumi:"resetPasswordAllowed"`
	// If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
	RevokeRefreshToken *bool                  `pulumi:"revokeRefreshToken"`
	SecurityDefenses   *RealmSecurityDefenses `pulumi:"securityDefenses"`
	SmtpServer         *RealmSmtpServer       `pulumi:"smtpServer"`
	// Can be one of following values: 'none, 'external' or 'all'
	SslRequired *string `pulumi:"sslRequired"`
	// The amount of time a session can be idle before it expires.
	SsoSessionIdleTimeout *string `pulumi:"ssoSessionIdleTimeout"`
	// Similar to `ssoSessionIdleTimeout`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionIdleTimeout`.
	SsoSessionIdleTimeoutRememberMe *string `pulumi:"ssoSessionIdleTimeoutRememberMe"`
	// The maximum amount of time before a session expires regardless of activity.
	SsoSessionMaxLifespan *string `pulumi:"ssoSessionMaxLifespan"`
	// Similar to `ssoSessionMaxLifespan`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionMaxLifespan`.
	SsoSessionMaxLifespanRememberMe *string `pulumi:"ssoSessionMaxLifespanRememberMe"`
	// When `true`, users are allowed to manage their own resources. Defaults to `false`.
	UserManagedAccess *bool `pulumi:"userManagedAccess"`
	// When true, users are required to verify their email address after registration and after email address changes.
	VerifyEmail *bool `pulumi:"verifyEmail"`
	// Configuration for WebAuthn Passwordless Policy authentication.
	//
	// Each of these attributes are blocks with the following attributes:
	WebAuthnPasswordlessPolicy *RealmWebAuthnPasswordlessPolicy `pulumi:"webAuthnPasswordlessPolicy"`
	// Configuration for WebAuthn Policy authentication.
	WebAuthnPolicy *RealmWebAuthnPolicy `pulumi:"webAuthnPolicy"`
}

type RealmState struct {
	// The maximum amount of time a client has to finish the authorization code flow.
	AccessCodeLifespan pulumi.StringPtrInput
	// The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
	AccessCodeLifespanLogin pulumi.StringPtrInput
	// The maximum amount of time a user has to complete login related actions, such as updating a password.
	AccessCodeLifespanUserAction pulumi.StringPtrInput
	// The amount of time an access token can be used before it expires.
	AccessTokenLifespan pulumi.StringPtrInput
	// The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
	AccessTokenLifespanForImplicitFlow pulumi.StringPtrInput
	// Used for account management pages.
	AccountTheme pulumi.StringPtrInput
	// The maximum time a user has to use an admin-generated permit before it expires.
	ActionTokenGeneratedByAdminLifespan pulumi.StringPtrInput
	// The maximum time a user has to use a user-generated permit before it expires.
	ActionTokenGeneratedByUserLifespan pulumi.StringPtrInput
	// Used for the admin console.
	AdminTheme pulumi.StringPtrInput
	// A map of custom attributes to add to the realm.
	Attributes pulumi.MapInput
	// The desired flow for browser authentication. Defaults to `browser`.
	BrowserFlow pulumi.StringPtrInput
	// The desired flow for client authentication. Defaults to `clients`.
	ClientAuthenticationFlow pulumi.StringPtrInput
	// The amount of time a session can be idle before it expires. Users can override it for individual clients.
	ClientSessionIdleTimeout pulumi.StringPtrInput
	// The maximum amount of time before a session expires regardless of activity. Users can override it for individual clients.
	ClientSessionMaxLifespan    pulumi.StringPtrInput
	DefaultDefaultClientScopes  pulumi.StringArrayInput
	DefaultOptionalClientScopes pulumi.StringArrayInput
	// Default algorithm used to sign tokens for the realm.
	DefaultSignatureAlgorithm pulumi.StringPtrInput
	// The desired flow for direct access authentication. Defaults to `direct grant`.
	DirectGrantFlow pulumi.StringPtrInput
	// The display name for the realm that is shown when logging in to the admin console.
	DisplayName pulumi.StringPtrInput
	// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
	DisplayNameHtml pulumi.StringPtrInput
	// The desired flow for Docker authentication. Defaults to `docker auth`.
	DockerAuthenticationFlow pulumi.StringPtrInput
	// When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
	DuplicateEmailsAllowed pulumi.BoolPtrInput
	// When true, the username field is editable.
	EditUsernameAllowed pulumi.BoolPtrInput
	// Used for emails that are sent by Keycloak.
	EmailTheme pulumi.StringPtrInput
	// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
	InternalId           pulumi.StringPtrInput
	Internationalization RealmInternationalizationPtrInput
	// Used for the login, forgot password, and registration pages.
	LoginTheme pulumi.StringPtrInput
	// When true, users may log in with their email address.
	LoginWithEmailAllowed pulumi.BoolPtrInput
	// The maximum amount of time a client has to finish the device code flow before it expires.
	//
	// The attributes below should be specified in seconds.
	Oauth2DeviceCodeLifespan pulumi.StringPtrInput
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval pulumi.IntPtrInput
	// The amount of time an offline session can be idle before it expires.
	OfflineSessionIdleTimeout pulumi.StringPtrInput
	// The maximum amount of time before an offline session expires regardless of activity.
	OfflineSessionMaxLifespan pulumi.StringPtrInput
	// Enable `offlineSessionMaxLifespan`.
	OfflineSessionMaxLifespanEnabled pulumi.BoolPtrInput
	OtpPolicy                        RealmOtpPolicyPtrInput
	// The password policy for users within the realm.
	//
	// The arguments below can be used to configure authentication flow bindings:
	PasswordPolicy pulumi.StringPtrInput
	// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
	Realm pulumi.StringPtrInput
	// Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
	//
	// The arguments below should be specified as [Go duration strings](https://golang.org/pkg/time/#Duration.String). They will default to Keycloak's default settings.
	RefreshTokenMaxReuse pulumi.IntPtrInput
	// When true, user registration will be enabled, and a link for registration will be displayed on the login page.
	RegistrationAllowed pulumi.BoolPtrInput
	// When true, the user's email will be used as their username during registration.
	RegistrationEmailAsUsername pulumi.BoolPtrInput
	// The desired flow for user registration. Defaults to `registration`.
	RegistrationFlow pulumi.StringPtrInput
	// When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
	RememberMe pulumi.BoolPtrInput
	// The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
	ResetCredentialsFlow pulumi.StringPtrInput
	// When true, a "forgot password" link will be displayed on the login page.
	ResetPasswordAllowed pulumi.BoolPtrInput
	// If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
	RevokeRefreshToken pulumi.BoolPtrInput
	SecurityDefenses   RealmSecurityDefensesPtrInput
	SmtpServer         RealmSmtpServerPtrInput
	// Can be one of following values: 'none, 'external' or 'all'
	SslRequired pulumi.StringPtrInput
	// The amount of time a session can be idle before it expires.
	SsoSessionIdleTimeout pulumi.StringPtrInput
	// Similar to `ssoSessionIdleTimeout`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionIdleTimeout`.
	SsoSessionIdleTimeoutRememberMe pulumi.StringPtrInput
	// The maximum amount of time before a session expires regardless of activity.
	SsoSessionMaxLifespan pulumi.StringPtrInput
	// Similar to `ssoSessionMaxLifespan`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionMaxLifespan`.
	SsoSessionMaxLifespanRememberMe pulumi.StringPtrInput
	// When `true`, users are allowed to manage their own resources. Defaults to `false`.
	UserManagedAccess pulumi.BoolPtrInput
	// When true, users are required to verify their email address after registration and after email address changes.
	VerifyEmail pulumi.BoolPtrInput
	// Configuration for WebAuthn Passwordless Policy authentication.
	//
	// Each of these attributes are blocks with the following attributes:
	WebAuthnPasswordlessPolicy RealmWebAuthnPasswordlessPolicyPtrInput
	// Configuration for WebAuthn Policy authentication.
	WebAuthnPolicy RealmWebAuthnPolicyPtrInput
}

func (RealmState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmState)(nil)).Elem()
}

type realmArgs struct {
	// The maximum amount of time a client has to finish the authorization code flow.
	AccessCodeLifespan *string `pulumi:"accessCodeLifespan"`
	// The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
	AccessCodeLifespanLogin *string `pulumi:"accessCodeLifespanLogin"`
	// The maximum amount of time a user has to complete login related actions, such as updating a password.
	AccessCodeLifespanUserAction *string `pulumi:"accessCodeLifespanUserAction"`
	// The amount of time an access token can be used before it expires.
	AccessTokenLifespan *string `pulumi:"accessTokenLifespan"`
	// The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
	AccessTokenLifespanForImplicitFlow *string `pulumi:"accessTokenLifespanForImplicitFlow"`
	// Used for account management pages.
	AccountTheme *string `pulumi:"accountTheme"`
	// The maximum time a user has to use an admin-generated permit before it expires.
	ActionTokenGeneratedByAdminLifespan *string `pulumi:"actionTokenGeneratedByAdminLifespan"`
	// The maximum time a user has to use a user-generated permit before it expires.
	ActionTokenGeneratedByUserLifespan *string `pulumi:"actionTokenGeneratedByUserLifespan"`
	// Used for the admin console.
	AdminTheme *string `pulumi:"adminTheme"`
	// A map of custom attributes to add to the realm.
	Attributes map[string]interface{} `pulumi:"attributes"`
	// The desired flow for browser authentication. Defaults to `browser`.
	BrowserFlow *string `pulumi:"browserFlow"`
	// The desired flow for client authentication. Defaults to `clients`.
	ClientAuthenticationFlow *string `pulumi:"clientAuthenticationFlow"`
	// The amount of time a session can be idle before it expires. Users can override it for individual clients.
	ClientSessionIdleTimeout *string `pulumi:"clientSessionIdleTimeout"`
	// The maximum amount of time before a session expires regardless of activity. Users can override it for individual clients.
	ClientSessionMaxLifespan    *string  `pulumi:"clientSessionMaxLifespan"`
	DefaultDefaultClientScopes  []string `pulumi:"defaultDefaultClientScopes"`
	DefaultOptionalClientScopes []string `pulumi:"defaultOptionalClientScopes"`
	// Default algorithm used to sign tokens for the realm.
	DefaultSignatureAlgorithm *string `pulumi:"defaultSignatureAlgorithm"`
	// The desired flow for direct access authentication. Defaults to `direct grant`.
	DirectGrantFlow *string `pulumi:"directGrantFlow"`
	// The display name for the realm that is shown when logging in to the admin console.
	DisplayName *string `pulumi:"displayName"`
	// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
	DisplayNameHtml *string `pulumi:"displayNameHtml"`
	// The desired flow for Docker authentication. Defaults to `docker auth`.
	DockerAuthenticationFlow *string `pulumi:"dockerAuthenticationFlow"`
	// When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
	DuplicateEmailsAllowed *bool `pulumi:"duplicateEmailsAllowed"`
	// When true, the username field is editable.
	EditUsernameAllowed *bool `pulumi:"editUsernameAllowed"`
	// Used for emails that are sent by Keycloak.
	EmailTheme *string `pulumi:"emailTheme"`
	// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
	InternalId           *string                    `pulumi:"internalId"`
	Internationalization *RealmInternationalization `pulumi:"internationalization"`
	// Used for the login, forgot password, and registration pages.
	LoginTheme *string `pulumi:"loginTheme"`
	// When true, users may log in with their email address.
	LoginWithEmailAllowed *bool `pulumi:"loginWithEmailAllowed"`
	// The maximum amount of time a client has to finish the device code flow before it expires.
	//
	// The attributes below should be specified in seconds.
	Oauth2DeviceCodeLifespan *string `pulumi:"oauth2DeviceCodeLifespan"`
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval *int `pulumi:"oauth2DevicePollingInterval"`
	// The amount of time an offline session can be idle before it expires.
	OfflineSessionIdleTimeout *string `pulumi:"offlineSessionIdleTimeout"`
	// The maximum amount of time before an offline session expires regardless of activity.
	OfflineSessionMaxLifespan *string `pulumi:"offlineSessionMaxLifespan"`
	// Enable `offlineSessionMaxLifespan`.
	OfflineSessionMaxLifespanEnabled *bool           `pulumi:"offlineSessionMaxLifespanEnabled"`
	OtpPolicy                        *RealmOtpPolicy `pulumi:"otpPolicy"`
	// The password policy for users within the realm.
	//
	// The arguments below can be used to configure authentication flow bindings:
	PasswordPolicy *string `pulumi:"passwordPolicy"`
	// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
	Realm string `pulumi:"realm"`
	// Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
	//
	// The arguments below should be specified as [Go duration strings](https://golang.org/pkg/time/#Duration.String). They will default to Keycloak's default settings.
	RefreshTokenMaxReuse *int `pulumi:"refreshTokenMaxReuse"`
	// When true, user registration will be enabled, and a link for registration will be displayed on the login page.
	RegistrationAllowed *bool `pulumi:"registrationAllowed"`
	// When true, the user's email will be used as their username during registration.
	RegistrationEmailAsUsername *bool `pulumi:"registrationEmailAsUsername"`
	// The desired flow for user registration. Defaults to `registration`.
	RegistrationFlow *string `pulumi:"registrationFlow"`
	// When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
	RememberMe *bool `pulumi:"rememberMe"`
	// The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
	ResetCredentialsFlow *string `pulumi:"resetCredentialsFlow"`
	// When true, a "forgot password" link will be displayed on the login page.
	ResetPasswordAllowed *bool `pulumi:"resetPasswordAllowed"`
	// If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
	RevokeRefreshToken *bool                  `pulumi:"revokeRefreshToken"`
	SecurityDefenses   *RealmSecurityDefenses `pulumi:"securityDefenses"`
	SmtpServer         *RealmSmtpServer       `pulumi:"smtpServer"`
	// Can be one of following values: 'none, 'external' or 'all'
	SslRequired *string `pulumi:"sslRequired"`
	// The amount of time a session can be idle before it expires.
	SsoSessionIdleTimeout *string `pulumi:"ssoSessionIdleTimeout"`
	// Similar to `ssoSessionIdleTimeout`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionIdleTimeout`.
	SsoSessionIdleTimeoutRememberMe *string `pulumi:"ssoSessionIdleTimeoutRememberMe"`
	// The maximum amount of time before a session expires regardless of activity.
	SsoSessionMaxLifespan *string `pulumi:"ssoSessionMaxLifespan"`
	// Similar to `ssoSessionMaxLifespan`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionMaxLifespan`.
	SsoSessionMaxLifespanRememberMe *string `pulumi:"ssoSessionMaxLifespanRememberMe"`
	// When `true`, users are allowed to manage their own resources. Defaults to `false`.
	UserManagedAccess *bool `pulumi:"userManagedAccess"`
	// When true, users are required to verify their email address after registration and after email address changes.
	VerifyEmail *bool `pulumi:"verifyEmail"`
	// Configuration for WebAuthn Passwordless Policy authentication.
	//
	// Each of these attributes are blocks with the following attributes:
	WebAuthnPasswordlessPolicy *RealmWebAuthnPasswordlessPolicy `pulumi:"webAuthnPasswordlessPolicy"`
	// Configuration for WebAuthn Policy authentication.
	WebAuthnPolicy *RealmWebAuthnPolicy `pulumi:"webAuthnPolicy"`
}

// The set of arguments for constructing a Realm resource.
type RealmArgs struct {
	// The maximum amount of time a client has to finish the authorization code flow.
	AccessCodeLifespan pulumi.StringPtrInput
	// The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
	AccessCodeLifespanLogin pulumi.StringPtrInput
	// The maximum amount of time a user has to complete login related actions, such as updating a password.
	AccessCodeLifespanUserAction pulumi.StringPtrInput
	// The amount of time an access token can be used before it expires.
	AccessTokenLifespan pulumi.StringPtrInput
	// The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
	AccessTokenLifespanForImplicitFlow pulumi.StringPtrInput
	// Used for account management pages.
	AccountTheme pulumi.StringPtrInput
	// The maximum time a user has to use an admin-generated permit before it expires.
	ActionTokenGeneratedByAdminLifespan pulumi.StringPtrInput
	// The maximum time a user has to use a user-generated permit before it expires.
	ActionTokenGeneratedByUserLifespan pulumi.StringPtrInput
	// Used for the admin console.
	AdminTheme pulumi.StringPtrInput
	// A map of custom attributes to add to the realm.
	Attributes pulumi.MapInput
	// The desired flow for browser authentication. Defaults to `browser`.
	BrowserFlow pulumi.StringPtrInput
	// The desired flow for client authentication. Defaults to `clients`.
	ClientAuthenticationFlow pulumi.StringPtrInput
	// The amount of time a session can be idle before it expires. Users can override it for individual clients.
	ClientSessionIdleTimeout pulumi.StringPtrInput
	// The maximum amount of time before a session expires regardless of activity. Users can override it for individual clients.
	ClientSessionMaxLifespan    pulumi.StringPtrInput
	DefaultDefaultClientScopes  pulumi.StringArrayInput
	DefaultOptionalClientScopes pulumi.StringArrayInput
	// Default algorithm used to sign tokens for the realm.
	DefaultSignatureAlgorithm pulumi.StringPtrInput
	// The desired flow for direct access authentication. Defaults to `direct grant`.
	DirectGrantFlow pulumi.StringPtrInput
	// The display name for the realm that is shown when logging in to the admin console.
	DisplayName pulumi.StringPtrInput
	// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
	DisplayNameHtml pulumi.StringPtrInput
	// The desired flow for Docker authentication. Defaults to `docker auth`.
	DockerAuthenticationFlow pulumi.StringPtrInput
	// When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
	DuplicateEmailsAllowed pulumi.BoolPtrInput
	// When true, the username field is editable.
	EditUsernameAllowed pulumi.BoolPtrInput
	// Used for emails that are sent by Keycloak.
	EmailTheme pulumi.StringPtrInput
	// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
	InternalId           pulumi.StringPtrInput
	Internationalization RealmInternationalizationPtrInput
	// Used for the login, forgot password, and registration pages.
	LoginTheme pulumi.StringPtrInput
	// When true, users may log in with their email address.
	LoginWithEmailAllowed pulumi.BoolPtrInput
	// The maximum amount of time a client has to finish the device code flow before it expires.
	//
	// The attributes below should be specified in seconds.
	Oauth2DeviceCodeLifespan pulumi.StringPtrInput
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval pulumi.IntPtrInput
	// The amount of time an offline session can be idle before it expires.
	OfflineSessionIdleTimeout pulumi.StringPtrInput
	// The maximum amount of time before an offline session expires regardless of activity.
	OfflineSessionMaxLifespan pulumi.StringPtrInput
	// Enable `offlineSessionMaxLifespan`.
	OfflineSessionMaxLifespanEnabled pulumi.BoolPtrInput
	OtpPolicy                        RealmOtpPolicyPtrInput
	// The password policy for users within the realm.
	//
	// The arguments below can be used to configure authentication flow bindings:
	PasswordPolicy pulumi.StringPtrInput
	// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
	Realm pulumi.StringInput
	// Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
	//
	// The arguments below should be specified as [Go duration strings](https://golang.org/pkg/time/#Duration.String). They will default to Keycloak's default settings.
	RefreshTokenMaxReuse pulumi.IntPtrInput
	// When true, user registration will be enabled, and a link for registration will be displayed on the login page.
	RegistrationAllowed pulumi.BoolPtrInput
	// When true, the user's email will be used as their username during registration.
	RegistrationEmailAsUsername pulumi.BoolPtrInput
	// The desired flow for user registration. Defaults to `registration`.
	RegistrationFlow pulumi.StringPtrInput
	// When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
	RememberMe pulumi.BoolPtrInput
	// The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
	ResetCredentialsFlow pulumi.StringPtrInput
	// When true, a "forgot password" link will be displayed on the login page.
	ResetPasswordAllowed pulumi.BoolPtrInput
	// If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
	RevokeRefreshToken pulumi.BoolPtrInput
	SecurityDefenses   RealmSecurityDefensesPtrInput
	SmtpServer         RealmSmtpServerPtrInput
	// Can be one of following values: 'none, 'external' or 'all'
	SslRequired pulumi.StringPtrInput
	// The amount of time a session can be idle before it expires.
	SsoSessionIdleTimeout pulumi.StringPtrInput
	// Similar to `ssoSessionIdleTimeout`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionIdleTimeout`.
	SsoSessionIdleTimeoutRememberMe pulumi.StringPtrInput
	// The maximum amount of time before a session expires regardless of activity.
	SsoSessionMaxLifespan pulumi.StringPtrInput
	// Similar to `ssoSessionMaxLifespan`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionMaxLifespan`.
	SsoSessionMaxLifespanRememberMe pulumi.StringPtrInput
	// When `true`, users are allowed to manage their own resources. Defaults to `false`.
	UserManagedAccess pulumi.BoolPtrInput
	// When true, users are required to verify their email address after registration and after email address changes.
	VerifyEmail pulumi.BoolPtrInput
	// Configuration for WebAuthn Passwordless Policy authentication.
	//
	// Each of these attributes are blocks with the following attributes:
	WebAuthnPasswordlessPolicy RealmWebAuthnPasswordlessPolicyPtrInput
	// Configuration for WebAuthn Policy authentication.
	WebAuthnPolicy RealmWebAuthnPolicyPtrInput
}

func (RealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmArgs)(nil)).Elem()
}

type RealmInput interface {
	pulumi.Input

	ToRealmOutput() RealmOutput
	ToRealmOutputWithContext(ctx context.Context) RealmOutput
}

func (*Realm) ElementType() reflect.Type {
	return reflect.TypeOf((**Realm)(nil)).Elem()
}

func (i *Realm) ToRealmOutput() RealmOutput {
	return i.ToRealmOutputWithContext(context.Background())
}

func (i *Realm) ToRealmOutputWithContext(ctx context.Context) RealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmOutput)
}

func (i *Realm) ToOutput(ctx context.Context) pulumix.Output[*Realm] {
	return pulumix.Output[*Realm]{
		OutputState: i.ToRealmOutputWithContext(ctx).OutputState,
	}
}

// RealmArrayInput is an input type that accepts RealmArray and RealmArrayOutput values.
// You can construct a concrete instance of `RealmArrayInput` via:
//
//	RealmArray{ RealmArgs{...} }
type RealmArrayInput interface {
	pulumi.Input

	ToRealmArrayOutput() RealmArrayOutput
	ToRealmArrayOutputWithContext(context.Context) RealmArrayOutput
}

type RealmArray []RealmInput

func (RealmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Realm)(nil)).Elem()
}

func (i RealmArray) ToRealmArrayOutput() RealmArrayOutput {
	return i.ToRealmArrayOutputWithContext(context.Background())
}

func (i RealmArray) ToRealmArrayOutputWithContext(ctx context.Context) RealmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmArrayOutput)
}

func (i RealmArray) ToOutput(ctx context.Context) pulumix.Output[[]*Realm] {
	return pulumix.Output[[]*Realm]{
		OutputState: i.ToRealmArrayOutputWithContext(ctx).OutputState,
	}
}

// RealmMapInput is an input type that accepts RealmMap and RealmMapOutput values.
// You can construct a concrete instance of `RealmMapInput` via:
//
//	RealmMap{ "key": RealmArgs{...} }
type RealmMapInput interface {
	pulumi.Input

	ToRealmMapOutput() RealmMapOutput
	ToRealmMapOutputWithContext(context.Context) RealmMapOutput
}

type RealmMap map[string]RealmInput

func (RealmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Realm)(nil)).Elem()
}

func (i RealmMap) ToRealmMapOutput() RealmMapOutput {
	return i.ToRealmMapOutputWithContext(context.Background())
}

func (i RealmMap) ToRealmMapOutputWithContext(ctx context.Context) RealmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmMapOutput)
}

func (i RealmMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Realm] {
	return pulumix.Output[map[string]*Realm]{
		OutputState: i.ToRealmMapOutputWithContext(ctx).OutputState,
	}
}

type RealmOutput struct{ *pulumi.OutputState }

func (RealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Realm)(nil)).Elem()
}

func (o RealmOutput) ToRealmOutput() RealmOutput {
	return o
}

func (o RealmOutput) ToRealmOutputWithContext(ctx context.Context) RealmOutput {
	return o
}

func (o RealmOutput) ToOutput(ctx context.Context) pulumix.Output[*Realm] {
	return pulumix.Output[*Realm]{
		OutputState: o.OutputState,
	}
}

// The maximum amount of time a client has to finish the authorization code flow.
func (o RealmOutput) AccessCodeLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.AccessCodeLifespan }).(pulumi.StringOutput)
}

// The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.
func (o RealmOutput) AccessCodeLifespanLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.AccessCodeLifespanLogin }).(pulumi.StringOutput)
}

// The maximum amount of time a user has to complete login related actions, such as updating a password.
func (o RealmOutput) AccessCodeLifespanUserAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.AccessCodeLifespanUserAction }).(pulumi.StringOutput)
}

// The amount of time an access token can be used before it expires.
func (o RealmOutput) AccessTokenLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.AccessTokenLifespan }).(pulumi.StringOutput)
}

// The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.
func (o RealmOutput) AccessTokenLifespanForImplicitFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.AccessTokenLifespanForImplicitFlow }).(pulumi.StringOutput)
}

// Used for account management pages.
func (o RealmOutput) AccountTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.AccountTheme }).(pulumi.StringPtrOutput)
}

// The maximum time a user has to use an admin-generated permit before it expires.
func (o RealmOutput) ActionTokenGeneratedByAdminLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.ActionTokenGeneratedByAdminLifespan }).(pulumi.StringOutput)
}

// The maximum time a user has to use a user-generated permit before it expires.
func (o RealmOutput) ActionTokenGeneratedByUserLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.ActionTokenGeneratedByUserLifespan }).(pulumi.StringOutput)
}

// Used for the admin console.
func (o RealmOutput) AdminTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.AdminTheme }).(pulumi.StringPtrOutput)
}

// A map of custom attributes to add to the realm.
func (o RealmOutput) Attributes() pulumi.MapOutput {
	return o.ApplyT(func(v *Realm) pulumi.MapOutput { return v.Attributes }).(pulumi.MapOutput)
}

// The desired flow for browser authentication. Defaults to `browser`.
func (o RealmOutput) BrowserFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.BrowserFlow }).(pulumi.StringOutput)
}

// The desired flow for client authentication. Defaults to `clients`.
func (o RealmOutput) ClientAuthenticationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.ClientAuthenticationFlow }).(pulumi.StringOutput)
}

// The amount of time a session can be idle before it expires. Users can override it for individual clients.
func (o RealmOutput) ClientSessionIdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.ClientSessionIdleTimeout }).(pulumi.StringOutput)
}

// The maximum amount of time before a session expires regardless of activity. Users can override it for individual clients.
func (o RealmOutput) ClientSessionMaxLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.ClientSessionMaxLifespan }).(pulumi.StringOutput)
}

func (o RealmOutput) DefaultDefaultClientScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringArrayOutput { return v.DefaultDefaultClientScopes }).(pulumi.StringArrayOutput)
}

func (o RealmOutput) DefaultOptionalClientScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringArrayOutput { return v.DefaultOptionalClientScopes }).(pulumi.StringArrayOutput)
}

// Default algorithm used to sign tokens for the realm.
func (o RealmOutput) DefaultSignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.DefaultSignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// The desired flow for direct access authentication. Defaults to `direct grant`.
func (o RealmOutput) DirectGrantFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.DirectGrantFlow }).(pulumi.StringOutput)
}

// The display name for the realm that is shown when logging in to the admin console.
func (o RealmOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.
func (o RealmOutput) DisplayNameHtml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.DisplayNameHtml }).(pulumi.StringPtrOutput)
}

// The desired flow for Docker authentication. Defaults to `docker auth`.
func (o RealmOutput) DockerAuthenticationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.DockerAuthenticationFlow }).(pulumi.StringOutput)
}

// When true, multiple users will be allowed to have the same email address. This argument must be set to `false` if `loginWithEmailAllowed` is set to `true`.
func (o RealmOutput) DuplicateEmailsAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.DuplicateEmailsAllowed }).(pulumi.BoolOutput)
}

// When true, the username field is editable.
func (o RealmOutput) EditUsernameAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.EditUsernameAllowed }).(pulumi.BoolOutput)
}

// Used for emails that are sent by Keycloak.
func (o RealmOutput) EmailTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.EmailTheme }).(pulumi.StringPtrOutput)
}

// When `false`, users and clients will not be able to access this realm. Defaults to `true`.
func (o RealmOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// When specified, this will be used as the realm's internal ID within Keycloak. When not specified, the realm's internal ID will be set to the realm's name.
func (o RealmOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

func (o RealmOutput) Internationalization() RealmInternationalizationPtrOutput {
	return o.ApplyT(func(v *Realm) RealmInternationalizationPtrOutput { return v.Internationalization }).(RealmInternationalizationPtrOutput)
}

// Used for the login, forgot password, and registration pages.
func (o RealmOutput) LoginTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.LoginTheme }).(pulumi.StringPtrOutput)
}

// When true, users may log in with their email address.
func (o RealmOutput) LoginWithEmailAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.LoginWithEmailAllowed }).(pulumi.BoolOutput)
}

// The maximum amount of time a client has to finish the device code flow before it expires.
//
// The attributes below should be specified in seconds.
func (o RealmOutput) Oauth2DeviceCodeLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.Oauth2DeviceCodeLifespan }).(pulumi.StringOutput)
}

// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
func (o RealmOutput) Oauth2DevicePollingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Realm) pulumi.IntOutput { return v.Oauth2DevicePollingInterval }).(pulumi.IntOutput)
}

// The amount of time an offline session can be idle before it expires.
func (o RealmOutput) OfflineSessionIdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.OfflineSessionIdleTimeout }).(pulumi.StringOutput)
}

// The maximum amount of time before an offline session expires regardless of activity.
func (o RealmOutput) OfflineSessionMaxLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.OfflineSessionMaxLifespan }).(pulumi.StringOutput)
}

// Enable `offlineSessionMaxLifespan`.
func (o RealmOutput) OfflineSessionMaxLifespanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolPtrOutput { return v.OfflineSessionMaxLifespanEnabled }).(pulumi.BoolPtrOutput)
}

func (o RealmOutput) OtpPolicy() RealmOtpPolicyOutput {
	return o.ApplyT(func(v *Realm) RealmOtpPolicyOutput { return v.OtpPolicy }).(RealmOtpPolicyOutput)
}

// The password policy for users within the realm.
//
// The arguments below can be used to configure authentication flow bindings:
func (o RealmOutput) PasswordPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.PasswordPolicy }).(pulumi.StringPtrOutput)
}

// The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak.
func (o RealmOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

// Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused.
//
// The arguments below should be specified as [Go duration strings](https://golang.org/pkg/time/#Duration.String). They will default to Keycloak's default settings.
func (o RealmOutput) RefreshTokenMaxReuse() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.IntPtrOutput { return v.RefreshTokenMaxReuse }).(pulumi.IntPtrOutput)
}

// When true, user registration will be enabled, and a link for registration will be displayed on the login page.
func (o RealmOutput) RegistrationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.RegistrationAllowed }).(pulumi.BoolOutput)
}

// When true, the user's email will be used as their username during registration.
func (o RealmOutput) RegistrationEmailAsUsername() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.RegistrationEmailAsUsername }).(pulumi.BoolOutput)
}

// The desired flow for user registration. Defaults to `registration`.
func (o RealmOutput) RegistrationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.RegistrationFlow }).(pulumi.StringOutput)
}

// When true, a "remember me" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.
func (o RealmOutput) RememberMe() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.RememberMe }).(pulumi.BoolOutput)
}

// The desired flow to use when a user attempts to reset their credentials. Defaults to `reset credentials`.
func (o RealmOutput) ResetCredentialsFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.ResetCredentialsFlow }).(pulumi.StringOutput)
}

// When true, a "forgot password" link will be displayed on the login page.
func (o RealmOutput) ResetPasswordAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.ResetPasswordAllowed }).(pulumi.BoolOutput)
}

// If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused.
func (o RealmOutput) RevokeRefreshToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolPtrOutput { return v.RevokeRefreshToken }).(pulumi.BoolPtrOutput)
}

func (o RealmOutput) SecurityDefenses() RealmSecurityDefensesPtrOutput {
	return o.ApplyT(func(v *Realm) RealmSecurityDefensesPtrOutput { return v.SecurityDefenses }).(RealmSecurityDefensesPtrOutput)
}

func (o RealmOutput) SmtpServer() RealmSmtpServerPtrOutput {
	return o.ApplyT(func(v *Realm) RealmSmtpServerPtrOutput { return v.SmtpServer }).(RealmSmtpServerPtrOutput)
}

// Can be one of following values: 'none, 'external' or 'all'
func (o RealmOutput) SslRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringPtrOutput { return v.SslRequired }).(pulumi.StringPtrOutput)
}

// The amount of time a session can be idle before it expires.
func (o RealmOutput) SsoSessionIdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.SsoSessionIdleTimeout }).(pulumi.StringOutput)
}

// Similar to `ssoSessionIdleTimeout`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionIdleTimeout`.
func (o RealmOutput) SsoSessionIdleTimeoutRememberMe() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.SsoSessionIdleTimeoutRememberMe }).(pulumi.StringOutput)
}

// The maximum amount of time before a session expires regardless of activity.
func (o RealmOutput) SsoSessionMaxLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.SsoSessionMaxLifespan }).(pulumi.StringOutput)
}

// Similar to `ssoSessionMaxLifespan`, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of `ssoSessionMaxLifespan`.
func (o RealmOutput) SsoSessionMaxLifespanRememberMe() pulumi.StringOutput {
	return o.ApplyT(func(v *Realm) pulumi.StringOutput { return v.SsoSessionMaxLifespanRememberMe }).(pulumi.StringOutput)
}

// When `true`, users are allowed to manage their own resources. Defaults to `false`.
func (o RealmOutput) UserManagedAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolPtrOutput { return v.UserManagedAccess }).(pulumi.BoolPtrOutput)
}

// When true, users are required to verify their email address after registration and after email address changes.
func (o RealmOutput) VerifyEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v *Realm) pulumi.BoolOutput { return v.VerifyEmail }).(pulumi.BoolOutput)
}

// Configuration for WebAuthn Passwordless Policy authentication.
//
// Each of these attributes are blocks with the following attributes:
func (o RealmOutput) WebAuthnPasswordlessPolicy() RealmWebAuthnPasswordlessPolicyOutput {
	return o.ApplyT(func(v *Realm) RealmWebAuthnPasswordlessPolicyOutput { return v.WebAuthnPasswordlessPolicy }).(RealmWebAuthnPasswordlessPolicyOutput)
}

// Configuration for WebAuthn Policy authentication.
func (o RealmOutput) WebAuthnPolicy() RealmWebAuthnPolicyOutput {
	return o.ApplyT(func(v *Realm) RealmWebAuthnPolicyOutput { return v.WebAuthnPolicy }).(RealmWebAuthnPolicyOutput)
}

type RealmArrayOutput struct{ *pulumi.OutputState }

func (RealmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Realm)(nil)).Elem()
}

func (o RealmArrayOutput) ToRealmArrayOutput() RealmArrayOutput {
	return o
}

func (o RealmArrayOutput) ToRealmArrayOutputWithContext(ctx context.Context) RealmArrayOutput {
	return o
}

func (o RealmArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Realm] {
	return pulumix.Output[[]*Realm]{
		OutputState: o.OutputState,
	}
}

func (o RealmArrayOutput) Index(i pulumi.IntInput) RealmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Realm {
		return vs[0].([]*Realm)[vs[1].(int)]
	}).(RealmOutput)
}

type RealmMapOutput struct{ *pulumi.OutputState }

func (RealmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Realm)(nil)).Elem()
}

func (o RealmMapOutput) ToRealmMapOutput() RealmMapOutput {
	return o
}

func (o RealmMapOutput) ToRealmMapOutputWithContext(ctx context.Context) RealmMapOutput {
	return o
}

func (o RealmMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Realm] {
	return pulumix.Output[map[string]*Realm]{
		OutputState: o.OutputState,
	}
}

func (o RealmMapOutput) MapIndex(k pulumi.StringInput) RealmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Realm {
		return vs[0].(map[string]*Realm)[vs[1].(string)]
	}).(RealmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmInput)(nil)).Elem(), &Realm{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmArrayInput)(nil)).Elem(), RealmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmMapInput)(nil)).Elem(), RealmMap{})
	pulumi.RegisterOutputType(RealmOutput{})
	pulumi.RegisterOutputType(RealmArrayOutput{})
	pulumi.RegisterOutputType(RealmMapOutput{})
}
