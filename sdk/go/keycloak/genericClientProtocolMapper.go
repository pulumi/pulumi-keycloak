// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # GenericClientProtocolMapper
//
// Allows for creating and managing protocol mapper for both types of clients (openid-connect and saml) within Keycloak.
//
// There are two uses cases for using this resource:
// * If you implemented a custom protocol mapper, this resource can be used to configure it
// * If the provider doesn't support a particular protocol mapper, this resource can be used instead.
//
// Due to the generic nature of this mapper, it is less user-friendly and more prone to configuration errors.
// Therefore, if possible, a specific mapper should be used.
//
// ### Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/saml"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			samlClient, err := saml.NewClient(ctx, "saml_client", &saml.ClientArgs{
//				RealmId:  realm.ID(),
//				ClientId: pulumi.String("test-client"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keycloak.NewGenericClientProtocolMapper(ctx, "saml_hardcode_attribute_mapper", &keycloak.GenericClientProtocolMapperArgs{
//				RealmId:        realm.ID(),
//				ClientId:       samlClient.ID(),
//				Name:           pulumi.String("tes-mapper"),
//				Protocol:       pulumi.String("saml"),
//				ProtocolMapper: pulumi.String("saml-hardcode-attribute-mapper"),
//				Config: pulumi.StringMap{
//					"attribute.name":       pulumi.String("name"),
//					"attribute.nameformat": pulumi.String("Basic"),
//					"attribute.value":      pulumi.String("value"),
//					"friendly.name":        pulumi.String("display name"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Argument Reference
//
// The following arguments are supported:
//
//   - `realmId` - (Required) The realm this protocol mapper exists within.
//   - `clientId` - (Required) The client this protocol mapper is attached to.
//   - `name` - (Required) The display name of this protocol mapper in the GUI.
//   - `protocol` - (Required) The type of client (either `openid-connect` or `saml`). The type must match the type of the client.
//   - `protocolMapper` - (Required) The name of the protocol mapper. The protocol mapper must be
//     compatible with the specified client.
//   - `config` - (Required) A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.
//
// ### Import
//
// Protocol mappers can be imported using the following format: `{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}`
//
// Example:
type GenericClientProtocolMapper struct {
	pulumi.CustomResourceState

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrOutput `pulumi:"clientScopeId"`
	Config        pulumi.StringMapOutput `pulumi:"config"`
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The protocol of the client (openid-connect / saml).
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The type of the protocol mapper.
	ProtocolMapper pulumi.StringOutput `pulumi:"protocolMapper"`
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewGenericClientProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewGenericClientProtocolMapper(ctx *pulumi.Context,
	name string, args *GenericClientProtocolMapperArgs, opts ...pulumi.ResourceOption) (*GenericClientProtocolMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ProtocolMapper == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolMapper'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenericClientProtocolMapper
	err := ctx.RegisterResource("keycloak:index/genericClientProtocolMapper:GenericClientProtocolMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenericClientProtocolMapper gets an existing GenericClientProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenericClientProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenericClientProtocolMapperState, opts ...pulumi.ResourceOption) (*GenericClientProtocolMapper, error) {
	var resource GenericClientProtocolMapper
	err := ctx.ReadResource("keycloak:index/genericClientProtocolMapper:GenericClientProtocolMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenericClientProtocolMapper resources.
type genericClientProtocolMapperState struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string           `pulumi:"clientScopeId"`
	Config        map[string]string `pulumi:"config"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The protocol of the client (openid-connect / saml).
	Protocol *string `pulumi:"protocol"`
	// The type of the protocol mapper.
	ProtocolMapper *string `pulumi:"protocolMapper"`
	// The realm id where the associated client or client scope exists.
	RealmId *string `pulumi:"realmId"`
}

type GenericClientProtocolMapperState struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	Config        pulumi.StringMapInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The protocol of the client (openid-connect / saml).
	Protocol pulumi.StringPtrInput
	// The type of the protocol mapper.
	ProtocolMapper pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringPtrInput
}

func (GenericClientProtocolMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*genericClientProtocolMapperState)(nil)).Elem()
}

type genericClientProtocolMapperArgs struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string           `pulumi:"clientScopeId"`
	Config        map[string]string `pulumi:"config"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The protocol of the client (openid-connect / saml).
	Protocol string `pulumi:"protocol"`
	// The type of the protocol mapper.
	ProtocolMapper string `pulumi:"protocolMapper"`
	// The realm id where the associated client or client scope exists.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a GenericClientProtocolMapper resource.
type GenericClientProtocolMapperArgs struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	Config        pulumi.StringMapInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The protocol of the client (openid-connect / saml).
	Protocol pulumi.StringInput
	// The type of the protocol mapper.
	ProtocolMapper pulumi.StringInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringInput
}

func (GenericClientProtocolMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genericClientProtocolMapperArgs)(nil)).Elem()
}

type GenericClientProtocolMapperInput interface {
	pulumi.Input

	ToGenericClientProtocolMapperOutput() GenericClientProtocolMapperOutput
	ToGenericClientProtocolMapperOutputWithContext(ctx context.Context) GenericClientProtocolMapperOutput
}

func (*GenericClientProtocolMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericClientProtocolMapper)(nil)).Elem()
}

func (i *GenericClientProtocolMapper) ToGenericClientProtocolMapperOutput() GenericClientProtocolMapperOutput {
	return i.ToGenericClientProtocolMapperOutputWithContext(context.Background())
}

func (i *GenericClientProtocolMapper) ToGenericClientProtocolMapperOutputWithContext(ctx context.Context) GenericClientProtocolMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericClientProtocolMapperOutput)
}

// GenericClientProtocolMapperArrayInput is an input type that accepts GenericClientProtocolMapperArray and GenericClientProtocolMapperArrayOutput values.
// You can construct a concrete instance of `GenericClientProtocolMapperArrayInput` via:
//
//	GenericClientProtocolMapperArray{ GenericClientProtocolMapperArgs{...} }
type GenericClientProtocolMapperArrayInput interface {
	pulumi.Input

	ToGenericClientProtocolMapperArrayOutput() GenericClientProtocolMapperArrayOutput
	ToGenericClientProtocolMapperArrayOutputWithContext(context.Context) GenericClientProtocolMapperArrayOutput
}

type GenericClientProtocolMapperArray []GenericClientProtocolMapperInput

func (GenericClientProtocolMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericClientProtocolMapper)(nil)).Elem()
}

func (i GenericClientProtocolMapperArray) ToGenericClientProtocolMapperArrayOutput() GenericClientProtocolMapperArrayOutput {
	return i.ToGenericClientProtocolMapperArrayOutputWithContext(context.Background())
}

func (i GenericClientProtocolMapperArray) ToGenericClientProtocolMapperArrayOutputWithContext(ctx context.Context) GenericClientProtocolMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericClientProtocolMapperArrayOutput)
}

// GenericClientProtocolMapperMapInput is an input type that accepts GenericClientProtocolMapperMap and GenericClientProtocolMapperMapOutput values.
// You can construct a concrete instance of `GenericClientProtocolMapperMapInput` via:
//
//	GenericClientProtocolMapperMap{ "key": GenericClientProtocolMapperArgs{...} }
type GenericClientProtocolMapperMapInput interface {
	pulumi.Input

	ToGenericClientProtocolMapperMapOutput() GenericClientProtocolMapperMapOutput
	ToGenericClientProtocolMapperMapOutputWithContext(context.Context) GenericClientProtocolMapperMapOutput
}

type GenericClientProtocolMapperMap map[string]GenericClientProtocolMapperInput

func (GenericClientProtocolMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericClientProtocolMapper)(nil)).Elem()
}

func (i GenericClientProtocolMapperMap) ToGenericClientProtocolMapperMapOutput() GenericClientProtocolMapperMapOutput {
	return i.ToGenericClientProtocolMapperMapOutputWithContext(context.Background())
}

func (i GenericClientProtocolMapperMap) ToGenericClientProtocolMapperMapOutputWithContext(ctx context.Context) GenericClientProtocolMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericClientProtocolMapperMapOutput)
}

type GenericClientProtocolMapperOutput struct{ *pulumi.OutputState }

func (GenericClientProtocolMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericClientProtocolMapper)(nil)).Elem()
}

func (o GenericClientProtocolMapperOutput) ToGenericClientProtocolMapperOutput() GenericClientProtocolMapperOutput {
	return o
}

func (o GenericClientProtocolMapperOutput) ToGenericClientProtocolMapperOutputWithContext(ctx context.Context) GenericClientProtocolMapperOutput {
	return o
}

// The mapper's associated client. Cannot be used at the same time as client_scope_id.
func (o GenericClientProtocolMapperOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericClientProtocolMapper) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The mapper's associated client scope. Cannot be used at the same time as client_id.
func (o GenericClientProtocolMapperOutput) ClientScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenericClientProtocolMapper) pulumi.StringPtrOutput { return v.ClientScopeId }).(pulumi.StringPtrOutput)
}

func (o GenericClientProtocolMapperOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GenericClientProtocolMapper) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// A human-friendly name that will appear in the Keycloak console.
func (o GenericClientProtocolMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericClientProtocolMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The protocol of the client (openid-connect / saml).
func (o GenericClientProtocolMapperOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericClientProtocolMapper) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The type of the protocol mapper.
func (o GenericClientProtocolMapperOutput) ProtocolMapper() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericClientProtocolMapper) pulumi.StringOutput { return v.ProtocolMapper }).(pulumi.StringOutput)
}

// The realm id where the associated client or client scope exists.
func (o GenericClientProtocolMapperOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *GenericClientProtocolMapper) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type GenericClientProtocolMapperArrayOutput struct{ *pulumi.OutputState }

func (GenericClientProtocolMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericClientProtocolMapper)(nil)).Elem()
}

func (o GenericClientProtocolMapperArrayOutput) ToGenericClientProtocolMapperArrayOutput() GenericClientProtocolMapperArrayOutput {
	return o
}

func (o GenericClientProtocolMapperArrayOutput) ToGenericClientProtocolMapperArrayOutputWithContext(ctx context.Context) GenericClientProtocolMapperArrayOutput {
	return o
}

func (o GenericClientProtocolMapperArrayOutput) Index(i pulumi.IntInput) GenericClientProtocolMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenericClientProtocolMapper {
		return vs[0].([]*GenericClientProtocolMapper)[vs[1].(int)]
	}).(GenericClientProtocolMapperOutput)
}

type GenericClientProtocolMapperMapOutput struct{ *pulumi.OutputState }

func (GenericClientProtocolMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericClientProtocolMapper)(nil)).Elem()
}

func (o GenericClientProtocolMapperMapOutput) ToGenericClientProtocolMapperMapOutput() GenericClientProtocolMapperMapOutput {
	return o
}

func (o GenericClientProtocolMapperMapOutput) ToGenericClientProtocolMapperMapOutputWithContext(ctx context.Context) GenericClientProtocolMapperMapOutput {
	return o
}

func (o GenericClientProtocolMapperMapOutput) MapIndex(k pulumi.StringInput) GenericClientProtocolMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenericClientProtocolMapper {
		return vs[0].(map[string]*GenericClientProtocolMapper)[vs[1].(string)]
	}).(GenericClientProtocolMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenericClientProtocolMapperInput)(nil)).Elem(), &GenericClientProtocolMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericClientProtocolMapperArrayInput)(nil)).Elem(), GenericClientProtocolMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenericClientProtocolMapperMapInput)(nil)).Elem(), GenericClientProtocolMapperMap{})
	pulumi.RegisterOutputType(GenericClientProtocolMapperOutput{})
	pulumi.RegisterOutputType(GenericClientProtocolMapperArrayOutput{})
	pulumi.RegisterOutputType(GenericClientProtocolMapperMapOutput{})
}
