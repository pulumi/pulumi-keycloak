// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # openid.HardcodedClaimProtocolMapper
//
// Allows for creating and managing hardcoded claim protocol mappers within
// Keycloak.
//
// Hardcoded claim protocol mappers allow you to define a claim with a hardcoded
// value. Protocol mappers can be defined for a single client, or they can
// be defined for a client scope which can be shared between multiple different
// clients.
//
// ### Example Usage (Client)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			openidClient, err := openid.NewClient(ctx, "openid_client", &openid.ClientArgs{
//				RealmId:    realm.ID(),
//				ClientId:   pulumi.String("test-client"),
//				Name:       pulumi.String("test client"),
//				Enabled:    pulumi.Bool(true),
//				AccessType: pulumi.String("CONFIDENTIAL"),
//				ValidRedirectUris: pulumi.StringArray{
//					pulumi.String("http://localhost:8080/openid-callback"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewHardcodedClaimProtocolMapper(ctx, "hardcoded_claim_mapper", &openid.HardcodedClaimProtocolMapperArgs{
//				RealmId:    realm.ID(),
//				ClientId:   openidClient.ID(),
//				Name:       pulumi.String("hardcoded-claim-mapper"),
//				ClaimName:  pulumi.String("foo"),
//				ClaimValue: pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Usage (Client Scope)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			clientScope, err := openid.NewClientScope(ctx, "client_scope", &openid.ClientScopeArgs{
//				RealmId: realm.ID(),
//				Name:    pulumi.String("test-client-scope"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewHardcodedClaimProtocolMapper(ctx, "hardcoded_claim_mapper", &openid.HardcodedClaimProtocolMapperArgs{
//				RealmId:       realm.ID(),
//				ClientScopeId: clientScope.ID(),
//				Name:          pulumi.String("hardcoded-claim-mapper"),
//				ClaimName:     pulumi.String("foo"),
//				ClaimValue:    pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm this protocol mapper exists within.
// - `clientId` - (Required if `clientScopeId` is not specified) The client this protocol mapper is attached to.
// - `clientScopeId` - (Required if `clientId` is not specified) The client scope this protocol mapper is attached to.
// - `name` - (Required) The display name of this protocol mapper in the GUI.
// - `claimName` - (Required) The name of the claim to insert into a token.
// - `claimValue` - (Required) The hardcoded value of the claim.
// - `claimValueType` - (Optional) The claim type used when serializing JSON tokens. Can be one of `String`, `long`, `int`, or `boolean`. Defaults to `String`.
// - `addToIdToken` - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to `true`.
// - `addToAccessToken` - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to `true`.
// - `addToUserinfo` - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to `true`.
//
// ### Import
//
// Protocol mappers can be imported using one of the following formats:
// - Client: `{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}`
// - Client Scope: `{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}`
//
// Example:
type HardcodedClaimProtocolMapper struct {
	pulumi.CustomResourceState

	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken pulumi.BoolPtrOutput `pulumi:"addToAccessToken"`
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken pulumi.BoolPtrOutput `pulumi:"addToIdToken"`
	// Indicates if the attribute should appear in the userinfo response body.
	AddToUserinfo pulumi.BoolPtrOutput `pulumi:"addToUserinfo"`
	ClaimName     pulumi.StringOutput  `pulumi:"claimName"`
	ClaimValue    pulumi.StringOutput  `pulumi:"claimValue"`
	// Claim type used when serializing tokens.
	ClaimValueType pulumi.StringPtrOutput `pulumi:"claimValueType"`
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrOutput `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewHardcodedClaimProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewHardcodedClaimProtocolMapper(ctx *pulumi.Context,
	name string, args *HardcodedClaimProtocolMapperArgs, opts ...pulumi.ResourceOption) (*HardcodedClaimProtocolMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClaimName == nil {
		return nil, errors.New("invalid value for required argument 'ClaimName'")
	}
	if args.ClaimValue == nil {
		return nil, errors.New("invalid value for required argument 'ClaimValue'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HardcodedClaimProtocolMapper
	err := ctx.RegisterResource("keycloak:openid/hardcodedClaimProtocolMapper:HardcodedClaimProtocolMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHardcodedClaimProtocolMapper gets an existing HardcodedClaimProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHardcodedClaimProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HardcodedClaimProtocolMapperState, opts ...pulumi.ResourceOption) (*HardcodedClaimProtocolMapper, error) {
	var resource HardcodedClaimProtocolMapper
	err := ctx.ReadResource("keycloak:openid/hardcodedClaimProtocolMapper:HardcodedClaimProtocolMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HardcodedClaimProtocolMapper resources.
type hardcodedClaimProtocolMapperState struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken *bool `pulumi:"addToAccessToken"`
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken *bool `pulumi:"addToIdToken"`
	// Indicates if the attribute should appear in the userinfo response body.
	AddToUserinfo *bool   `pulumi:"addToUserinfo"`
	ClaimName     *string `pulumi:"claimName"`
	ClaimValue    *string `pulumi:"claimValue"`
	// Claim type used when serializing tokens.
	ClaimValueType *string `pulumi:"claimValueType"`
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId *string `pulumi:"realmId"`
}

type HardcodedClaimProtocolMapperState struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken pulumi.BoolPtrInput
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken pulumi.BoolPtrInput
	// Indicates if the attribute should appear in the userinfo response body.
	AddToUserinfo pulumi.BoolPtrInput
	ClaimName     pulumi.StringPtrInput
	ClaimValue    pulumi.StringPtrInput
	// Claim type used when serializing tokens.
	ClaimValueType pulumi.StringPtrInput
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringPtrInput
}

func (HardcodedClaimProtocolMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedClaimProtocolMapperState)(nil)).Elem()
}

type hardcodedClaimProtocolMapperArgs struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken *bool `pulumi:"addToAccessToken"`
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken *bool `pulumi:"addToIdToken"`
	// Indicates if the attribute should appear in the userinfo response body.
	AddToUserinfo *bool  `pulumi:"addToUserinfo"`
	ClaimName     string `pulumi:"claimName"`
	ClaimValue    string `pulumi:"claimValue"`
	// Claim type used when serializing tokens.
	ClaimValueType *string `pulumi:"claimValueType"`
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a HardcodedClaimProtocolMapper resource.
type HardcodedClaimProtocolMapperArgs struct {
	// Indicates if the attribute should be a claim in the access token.
	AddToAccessToken pulumi.BoolPtrInput
	// Indicates if the attribute should be a claim in the id token.
	AddToIdToken pulumi.BoolPtrInput
	// Indicates if the attribute should appear in the userinfo response body.
	AddToUserinfo pulumi.BoolPtrInput
	ClaimName     pulumi.StringInput
	ClaimValue    pulumi.StringInput
	// Claim type used when serializing tokens.
	ClaimValueType pulumi.StringPtrInput
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringInput
}

func (HardcodedClaimProtocolMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedClaimProtocolMapperArgs)(nil)).Elem()
}

type HardcodedClaimProtocolMapperInput interface {
	pulumi.Input

	ToHardcodedClaimProtocolMapperOutput() HardcodedClaimProtocolMapperOutput
	ToHardcodedClaimProtocolMapperOutputWithContext(ctx context.Context) HardcodedClaimProtocolMapperOutput
}

func (*HardcodedClaimProtocolMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedClaimProtocolMapper)(nil)).Elem()
}

func (i *HardcodedClaimProtocolMapper) ToHardcodedClaimProtocolMapperOutput() HardcodedClaimProtocolMapperOutput {
	return i.ToHardcodedClaimProtocolMapperOutputWithContext(context.Background())
}

func (i *HardcodedClaimProtocolMapper) ToHardcodedClaimProtocolMapperOutputWithContext(ctx context.Context) HardcodedClaimProtocolMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedClaimProtocolMapperOutput)
}

// HardcodedClaimProtocolMapperArrayInput is an input type that accepts HardcodedClaimProtocolMapperArray and HardcodedClaimProtocolMapperArrayOutput values.
// You can construct a concrete instance of `HardcodedClaimProtocolMapperArrayInput` via:
//
//	HardcodedClaimProtocolMapperArray{ HardcodedClaimProtocolMapperArgs{...} }
type HardcodedClaimProtocolMapperArrayInput interface {
	pulumi.Input

	ToHardcodedClaimProtocolMapperArrayOutput() HardcodedClaimProtocolMapperArrayOutput
	ToHardcodedClaimProtocolMapperArrayOutputWithContext(context.Context) HardcodedClaimProtocolMapperArrayOutput
}

type HardcodedClaimProtocolMapperArray []HardcodedClaimProtocolMapperInput

func (HardcodedClaimProtocolMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedClaimProtocolMapper)(nil)).Elem()
}

func (i HardcodedClaimProtocolMapperArray) ToHardcodedClaimProtocolMapperArrayOutput() HardcodedClaimProtocolMapperArrayOutput {
	return i.ToHardcodedClaimProtocolMapperArrayOutputWithContext(context.Background())
}

func (i HardcodedClaimProtocolMapperArray) ToHardcodedClaimProtocolMapperArrayOutputWithContext(ctx context.Context) HardcodedClaimProtocolMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedClaimProtocolMapperArrayOutput)
}

// HardcodedClaimProtocolMapperMapInput is an input type that accepts HardcodedClaimProtocolMapperMap and HardcodedClaimProtocolMapperMapOutput values.
// You can construct a concrete instance of `HardcodedClaimProtocolMapperMapInput` via:
//
//	HardcodedClaimProtocolMapperMap{ "key": HardcodedClaimProtocolMapperArgs{...} }
type HardcodedClaimProtocolMapperMapInput interface {
	pulumi.Input

	ToHardcodedClaimProtocolMapperMapOutput() HardcodedClaimProtocolMapperMapOutput
	ToHardcodedClaimProtocolMapperMapOutputWithContext(context.Context) HardcodedClaimProtocolMapperMapOutput
}

type HardcodedClaimProtocolMapperMap map[string]HardcodedClaimProtocolMapperInput

func (HardcodedClaimProtocolMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedClaimProtocolMapper)(nil)).Elem()
}

func (i HardcodedClaimProtocolMapperMap) ToHardcodedClaimProtocolMapperMapOutput() HardcodedClaimProtocolMapperMapOutput {
	return i.ToHardcodedClaimProtocolMapperMapOutputWithContext(context.Background())
}

func (i HardcodedClaimProtocolMapperMap) ToHardcodedClaimProtocolMapperMapOutputWithContext(ctx context.Context) HardcodedClaimProtocolMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedClaimProtocolMapperMapOutput)
}

type HardcodedClaimProtocolMapperOutput struct{ *pulumi.OutputState }

func (HardcodedClaimProtocolMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedClaimProtocolMapper)(nil)).Elem()
}

func (o HardcodedClaimProtocolMapperOutput) ToHardcodedClaimProtocolMapperOutput() HardcodedClaimProtocolMapperOutput {
	return o
}

func (o HardcodedClaimProtocolMapperOutput) ToHardcodedClaimProtocolMapperOutputWithContext(ctx context.Context) HardcodedClaimProtocolMapperOutput {
	return o
}

// Indicates if the attribute should be a claim in the access token.
func (o HardcodedClaimProtocolMapperOutput) AddToAccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.BoolPtrOutput { return v.AddToAccessToken }).(pulumi.BoolPtrOutput)
}

// Indicates if the attribute should be a claim in the id token.
func (o HardcodedClaimProtocolMapperOutput) AddToIdToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.BoolPtrOutput { return v.AddToIdToken }).(pulumi.BoolPtrOutput)
}

// Indicates if the attribute should appear in the userinfo response body.
func (o HardcodedClaimProtocolMapperOutput) AddToUserinfo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.BoolPtrOutput { return v.AddToUserinfo }).(pulumi.BoolPtrOutput)
}

func (o HardcodedClaimProtocolMapperOutput) ClaimName() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.StringOutput { return v.ClaimName }).(pulumi.StringOutput)
}

func (o HardcodedClaimProtocolMapperOutput) ClaimValue() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.StringOutput { return v.ClaimValue }).(pulumi.StringOutput)
}

// Claim type used when serializing tokens.
func (o HardcodedClaimProtocolMapperOutput) ClaimValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.StringPtrOutput { return v.ClaimValueType }).(pulumi.StringPtrOutput)
}

// The mapper's associated client. Cannot be used at the same time as client_scope_id.
func (o HardcodedClaimProtocolMapperOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The mapper's associated client scope. Cannot be used at the same time as client_id.
func (o HardcodedClaimProtocolMapperOutput) ClientScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.StringPtrOutput { return v.ClientScopeId }).(pulumi.StringPtrOutput)
}

// A human-friendly name that will appear in the Keycloak console.
func (o HardcodedClaimProtocolMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm id where the associated client or client scope exists.
func (o HardcodedClaimProtocolMapperOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedClaimProtocolMapper) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type HardcodedClaimProtocolMapperArrayOutput struct{ *pulumi.OutputState }

func (HardcodedClaimProtocolMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedClaimProtocolMapper)(nil)).Elem()
}

func (o HardcodedClaimProtocolMapperArrayOutput) ToHardcodedClaimProtocolMapperArrayOutput() HardcodedClaimProtocolMapperArrayOutput {
	return o
}

func (o HardcodedClaimProtocolMapperArrayOutput) ToHardcodedClaimProtocolMapperArrayOutputWithContext(ctx context.Context) HardcodedClaimProtocolMapperArrayOutput {
	return o
}

func (o HardcodedClaimProtocolMapperArrayOutput) Index(i pulumi.IntInput) HardcodedClaimProtocolMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HardcodedClaimProtocolMapper {
		return vs[0].([]*HardcodedClaimProtocolMapper)[vs[1].(int)]
	}).(HardcodedClaimProtocolMapperOutput)
}

type HardcodedClaimProtocolMapperMapOutput struct{ *pulumi.OutputState }

func (HardcodedClaimProtocolMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedClaimProtocolMapper)(nil)).Elem()
}

func (o HardcodedClaimProtocolMapperMapOutput) ToHardcodedClaimProtocolMapperMapOutput() HardcodedClaimProtocolMapperMapOutput {
	return o
}

func (o HardcodedClaimProtocolMapperMapOutput) ToHardcodedClaimProtocolMapperMapOutputWithContext(ctx context.Context) HardcodedClaimProtocolMapperMapOutput {
	return o
}

func (o HardcodedClaimProtocolMapperMapOutput) MapIndex(k pulumi.StringInput) HardcodedClaimProtocolMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HardcodedClaimProtocolMapper {
		return vs[0].(map[string]*HardcodedClaimProtocolMapper)[vs[1].(string)]
	}).(HardcodedClaimProtocolMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedClaimProtocolMapperInput)(nil)).Elem(), &HardcodedClaimProtocolMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedClaimProtocolMapperArrayInput)(nil)).Elem(), HardcodedClaimProtocolMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedClaimProtocolMapperMapInput)(nil)).Elem(), HardcodedClaimProtocolMapperMap{})
	pulumi.RegisterOutputType(HardcodedClaimProtocolMapperOutput{})
	pulumi.RegisterOutputType(HardcodedClaimProtocolMapperArrayOutput{})
	pulumi.RegisterOutputType(HardcodedClaimProtocolMapperMapOutput{})
}
