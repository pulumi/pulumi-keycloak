// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClientAuthorizationResource struct {
	pulumi.CustomResourceState

	Attributes         pulumi.MapOutput         `pulumi:"attributes"`
	DisplayName        pulumi.StringPtrOutput   `pulumi:"displayName"`
	IconUri            pulumi.StringPtrOutput   `pulumi:"iconUri"`
	Name               pulumi.StringOutput      `pulumi:"name"`
	OwnerManagedAccess pulumi.BoolPtrOutput     `pulumi:"ownerManagedAccess"`
	RealmId            pulumi.StringOutput      `pulumi:"realmId"`
	ResourceServerId   pulumi.StringOutput      `pulumi:"resourceServerId"`
	Scopes             pulumi.StringArrayOutput `pulumi:"scopes"`
	Type               pulumi.StringPtrOutput   `pulumi:"type"`
	Uris               pulumi.StringArrayOutput `pulumi:"uris"`
}

// NewClientAuthorizationResource registers a new resource with the given unique name, arguments, and options.
func NewClientAuthorizationResource(ctx *pulumi.Context,
	name string, args *ClientAuthorizationResourceArgs, opts ...pulumi.ResourceOption) (*ClientAuthorizationResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.ResourceServerId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceServerId'")
	}
	var resource ClientAuthorizationResource
	err := ctx.RegisterResource("keycloak:openid/clientAuthorizationResource:ClientAuthorizationResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientAuthorizationResource gets an existing ClientAuthorizationResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientAuthorizationResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientAuthorizationResourceState, opts ...pulumi.ResourceOption) (*ClientAuthorizationResource, error) {
	var resource ClientAuthorizationResource
	err := ctx.ReadResource("keycloak:openid/clientAuthorizationResource:ClientAuthorizationResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientAuthorizationResource resources.
type clientAuthorizationResourceState struct {
	Attributes         map[string]interface{} `pulumi:"attributes"`
	DisplayName        *string                `pulumi:"displayName"`
	IconUri            *string                `pulumi:"iconUri"`
	Name               *string                `pulumi:"name"`
	OwnerManagedAccess *bool                  `pulumi:"ownerManagedAccess"`
	RealmId            *string                `pulumi:"realmId"`
	ResourceServerId   *string                `pulumi:"resourceServerId"`
	Scopes             []string               `pulumi:"scopes"`
	Type               *string                `pulumi:"type"`
	Uris               []string               `pulumi:"uris"`
}

type ClientAuthorizationResourceState struct {
	Attributes         pulumi.MapInput
	DisplayName        pulumi.StringPtrInput
	IconUri            pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	OwnerManagedAccess pulumi.BoolPtrInput
	RealmId            pulumi.StringPtrInput
	ResourceServerId   pulumi.StringPtrInput
	Scopes             pulumi.StringArrayInput
	Type               pulumi.StringPtrInput
	Uris               pulumi.StringArrayInput
}

func (ClientAuthorizationResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientAuthorizationResourceState)(nil)).Elem()
}

type clientAuthorizationResourceArgs struct {
	Attributes         map[string]interface{} `pulumi:"attributes"`
	DisplayName        *string                `pulumi:"displayName"`
	IconUri            *string                `pulumi:"iconUri"`
	Name               *string                `pulumi:"name"`
	OwnerManagedAccess *bool                  `pulumi:"ownerManagedAccess"`
	RealmId            string                 `pulumi:"realmId"`
	ResourceServerId   string                 `pulumi:"resourceServerId"`
	Scopes             []string               `pulumi:"scopes"`
	Type               *string                `pulumi:"type"`
	Uris               []string               `pulumi:"uris"`
}

// The set of arguments for constructing a ClientAuthorizationResource resource.
type ClientAuthorizationResourceArgs struct {
	Attributes         pulumi.MapInput
	DisplayName        pulumi.StringPtrInput
	IconUri            pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	OwnerManagedAccess pulumi.BoolPtrInput
	RealmId            pulumi.StringInput
	ResourceServerId   pulumi.StringInput
	Scopes             pulumi.StringArrayInput
	Type               pulumi.StringPtrInput
	Uris               pulumi.StringArrayInput
}

func (ClientAuthorizationResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientAuthorizationResourceArgs)(nil)).Elem()
}

type ClientAuthorizationResourceInput interface {
	pulumi.Input

	ToClientAuthorizationResourceOutput() ClientAuthorizationResourceOutput
	ToClientAuthorizationResourceOutputWithContext(ctx context.Context) ClientAuthorizationResourceOutput
}

func (*ClientAuthorizationResource) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientAuthorizationResource)(nil)).Elem()
}

func (i *ClientAuthorizationResource) ToClientAuthorizationResourceOutput() ClientAuthorizationResourceOutput {
	return i.ToClientAuthorizationResourceOutputWithContext(context.Background())
}

func (i *ClientAuthorizationResource) ToClientAuthorizationResourceOutputWithContext(ctx context.Context) ClientAuthorizationResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAuthorizationResourceOutput)
}

// ClientAuthorizationResourceArrayInput is an input type that accepts ClientAuthorizationResourceArray and ClientAuthorizationResourceArrayOutput values.
// You can construct a concrete instance of `ClientAuthorizationResourceArrayInput` via:
//
//          ClientAuthorizationResourceArray{ ClientAuthorizationResourceArgs{...} }
type ClientAuthorizationResourceArrayInput interface {
	pulumi.Input

	ToClientAuthorizationResourceArrayOutput() ClientAuthorizationResourceArrayOutput
	ToClientAuthorizationResourceArrayOutputWithContext(context.Context) ClientAuthorizationResourceArrayOutput
}

type ClientAuthorizationResourceArray []ClientAuthorizationResourceInput

func (ClientAuthorizationResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientAuthorizationResource)(nil)).Elem()
}

func (i ClientAuthorizationResourceArray) ToClientAuthorizationResourceArrayOutput() ClientAuthorizationResourceArrayOutput {
	return i.ToClientAuthorizationResourceArrayOutputWithContext(context.Background())
}

func (i ClientAuthorizationResourceArray) ToClientAuthorizationResourceArrayOutputWithContext(ctx context.Context) ClientAuthorizationResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAuthorizationResourceArrayOutput)
}

// ClientAuthorizationResourceMapInput is an input type that accepts ClientAuthorizationResourceMap and ClientAuthorizationResourceMapOutput values.
// You can construct a concrete instance of `ClientAuthorizationResourceMapInput` via:
//
//          ClientAuthorizationResourceMap{ "key": ClientAuthorizationResourceArgs{...} }
type ClientAuthorizationResourceMapInput interface {
	pulumi.Input

	ToClientAuthorizationResourceMapOutput() ClientAuthorizationResourceMapOutput
	ToClientAuthorizationResourceMapOutputWithContext(context.Context) ClientAuthorizationResourceMapOutput
}

type ClientAuthorizationResourceMap map[string]ClientAuthorizationResourceInput

func (ClientAuthorizationResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientAuthorizationResource)(nil)).Elem()
}

func (i ClientAuthorizationResourceMap) ToClientAuthorizationResourceMapOutput() ClientAuthorizationResourceMapOutput {
	return i.ToClientAuthorizationResourceMapOutputWithContext(context.Background())
}

func (i ClientAuthorizationResourceMap) ToClientAuthorizationResourceMapOutputWithContext(ctx context.Context) ClientAuthorizationResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAuthorizationResourceMapOutput)
}

type ClientAuthorizationResourceOutput struct{ *pulumi.OutputState }

func (ClientAuthorizationResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientAuthorizationResource)(nil)).Elem()
}

func (o ClientAuthorizationResourceOutput) ToClientAuthorizationResourceOutput() ClientAuthorizationResourceOutput {
	return o
}

func (o ClientAuthorizationResourceOutput) ToClientAuthorizationResourceOutputWithContext(ctx context.Context) ClientAuthorizationResourceOutput {
	return o
}

type ClientAuthorizationResourceArrayOutput struct{ *pulumi.OutputState }

func (ClientAuthorizationResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientAuthorizationResource)(nil)).Elem()
}

func (o ClientAuthorizationResourceArrayOutput) ToClientAuthorizationResourceArrayOutput() ClientAuthorizationResourceArrayOutput {
	return o
}

func (o ClientAuthorizationResourceArrayOutput) ToClientAuthorizationResourceArrayOutputWithContext(ctx context.Context) ClientAuthorizationResourceArrayOutput {
	return o
}

func (o ClientAuthorizationResourceArrayOutput) Index(i pulumi.IntInput) ClientAuthorizationResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientAuthorizationResource {
		return vs[0].([]*ClientAuthorizationResource)[vs[1].(int)]
	}).(ClientAuthorizationResourceOutput)
}

type ClientAuthorizationResourceMapOutput struct{ *pulumi.OutputState }

func (ClientAuthorizationResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientAuthorizationResource)(nil)).Elem()
}

func (o ClientAuthorizationResourceMapOutput) ToClientAuthorizationResourceMapOutput() ClientAuthorizationResourceMapOutput {
	return o
}

func (o ClientAuthorizationResourceMapOutput) ToClientAuthorizationResourceMapOutputWithContext(ctx context.Context) ClientAuthorizationResourceMapOutput {
	return o
}

func (o ClientAuthorizationResourceMapOutput) MapIndex(k pulumi.StringInput) ClientAuthorizationResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientAuthorizationResource {
		return vs[0].(map[string]*ClientAuthorizationResource)[vs[1].(string)]
	}).(ClientAuthorizationResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientAuthorizationResourceInput)(nil)).Elem(), &ClientAuthorizationResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientAuthorizationResourceArrayInput)(nil)).Elem(), ClientAuthorizationResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientAuthorizationResourceMapInput)(nil)).Elem(), ClientAuthorizationResourceMap{})
	pulumi.RegisterOutputType(ClientAuthorizationResourceOutput{})
	pulumi.RegisterOutputType(ClientAuthorizationResourceArrayOutput{})
	pulumi.RegisterOutputType(ClientAuthorizationResourceMapOutput{})
}
