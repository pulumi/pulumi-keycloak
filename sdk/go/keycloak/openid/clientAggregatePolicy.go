// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClientAggregatePolicy struct {
	pulumi.CustomResourceState

	DecisionStrategy pulumi.StringOutput      `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrOutput   `pulumi:"description"`
	Logic            pulumi.StringPtrOutput   `pulumi:"logic"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	Policies         pulumi.StringArrayOutput `pulumi:"policies"`
	RealmId          pulumi.StringOutput      `pulumi:"realmId"`
	ResourceServerId pulumi.StringOutput      `pulumi:"resourceServerId"`
}

// NewClientAggregatePolicy registers a new resource with the given unique name, arguments, and options.
func NewClientAggregatePolicy(ctx *pulumi.Context,
	name string, args *ClientAggregatePolicyArgs, opts ...pulumi.ResourceOption) (*ClientAggregatePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DecisionStrategy == nil {
		return nil, errors.New("invalid value for required argument 'DecisionStrategy'")
	}
	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.ResourceServerId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceServerId'")
	}
	var resource ClientAggregatePolicy
	err := ctx.RegisterResource("keycloak:openid/clientAggregatePolicy:ClientAggregatePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientAggregatePolicy gets an existing ClientAggregatePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientAggregatePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientAggregatePolicyState, opts ...pulumi.ResourceOption) (*ClientAggregatePolicy, error) {
	var resource ClientAggregatePolicy
	err := ctx.ReadResource("keycloak:openid/clientAggregatePolicy:ClientAggregatePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientAggregatePolicy resources.
type clientAggregatePolicyState struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Logic            *string  `pulumi:"logic"`
	Name             *string  `pulumi:"name"`
	Policies         []string `pulumi:"policies"`
	RealmId          *string  `pulumi:"realmId"`
	ResourceServerId *string  `pulumi:"resourceServerId"`
}

type ClientAggregatePolicyState struct {
	DecisionStrategy pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Logic            pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Policies         pulumi.StringArrayInput
	RealmId          pulumi.StringPtrInput
	ResourceServerId pulumi.StringPtrInput
}

func (ClientAggregatePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientAggregatePolicyState)(nil)).Elem()
}

type clientAggregatePolicyArgs struct {
	DecisionStrategy string   `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Logic            *string  `pulumi:"logic"`
	Name             *string  `pulumi:"name"`
	Policies         []string `pulumi:"policies"`
	RealmId          string   `pulumi:"realmId"`
	ResourceServerId string   `pulumi:"resourceServerId"`
}

// The set of arguments for constructing a ClientAggregatePolicy resource.
type ClientAggregatePolicyArgs struct {
	DecisionStrategy pulumi.StringInput
	Description      pulumi.StringPtrInput
	Logic            pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Policies         pulumi.StringArrayInput
	RealmId          pulumi.StringInput
	ResourceServerId pulumi.StringInput
}

func (ClientAggregatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientAggregatePolicyArgs)(nil)).Elem()
}

type ClientAggregatePolicyInput interface {
	pulumi.Input

	ToClientAggregatePolicyOutput() ClientAggregatePolicyOutput
	ToClientAggregatePolicyOutputWithContext(ctx context.Context) ClientAggregatePolicyOutput
}

func (*ClientAggregatePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientAggregatePolicy)(nil)).Elem()
}

func (i *ClientAggregatePolicy) ToClientAggregatePolicyOutput() ClientAggregatePolicyOutput {
	return i.ToClientAggregatePolicyOutputWithContext(context.Background())
}

func (i *ClientAggregatePolicy) ToClientAggregatePolicyOutputWithContext(ctx context.Context) ClientAggregatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAggregatePolicyOutput)
}

// ClientAggregatePolicyArrayInput is an input type that accepts ClientAggregatePolicyArray and ClientAggregatePolicyArrayOutput values.
// You can construct a concrete instance of `ClientAggregatePolicyArrayInput` via:
//
//          ClientAggregatePolicyArray{ ClientAggregatePolicyArgs{...} }
type ClientAggregatePolicyArrayInput interface {
	pulumi.Input

	ToClientAggregatePolicyArrayOutput() ClientAggregatePolicyArrayOutput
	ToClientAggregatePolicyArrayOutputWithContext(context.Context) ClientAggregatePolicyArrayOutput
}

type ClientAggregatePolicyArray []ClientAggregatePolicyInput

func (ClientAggregatePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientAggregatePolicy)(nil)).Elem()
}

func (i ClientAggregatePolicyArray) ToClientAggregatePolicyArrayOutput() ClientAggregatePolicyArrayOutput {
	return i.ToClientAggregatePolicyArrayOutputWithContext(context.Background())
}

func (i ClientAggregatePolicyArray) ToClientAggregatePolicyArrayOutputWithContext(ctx context.Context) ClientAggregatePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAggregatePolicyArrayOutput)
}

// ClientAggregatePolicyMapInput is an input type that accepts ClientAggregatePolicyMap and ClientAggregatePolicyMapOutput values.
// You can construct a concrete instance of `ClientAggregatePolicyMapInput` via:
//
//          ClientAggregatePolicyMap{ "key": ClientAggregatePolicyArgs{...} }
type ClientAggregatePolicyMapInput interface {
	pulumi.Input

	ToClientAggregatePolicyMapOutput() ClientAggregatePolicyMapOutput
	ToClientAggregatePolicyMapOutputWithContext(context.Context) ClientAggregatePolicyMapOutput
}

type ClientAggregatePolicyMap map[string]ClientAggregatePolicyInput

func (ClientAggregatePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientAggregatePolicy)(nil)).Elem()
}

func (i ClientAggregatePolicyMap) ToClientAggregatePolicyMapOutput() ClientAggregatePolicyMapOutput {
	return i.ToClientAggregatePolicyMapOutputWithContext(context.Background())
}

func (i ClientAggregatePolicyMap) ToClientAggregatePolicyMapOutputWithContext(ctx context.Context) ClientAggregatePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientAggregatePolicyMapOutput)
}

type ClientAggregatePolicyOutput struct{ *pulumi.OutputState }

func (ClientAggregatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientAggregatePolicy)(nil)).Elem()
}

func (o ClientAggregatePolicyOutput) ToClientAggregatePolicyOutput() ClientAggregatePolicyOutput {
	return o
}

func (o ClientAggregatePolicyOutput) ToClientAggregatePolicyOutputWithContext(ctx context.Context) ClientAggregatePolicyOutput {
	return o
}

type ClientAggregatePolicyArrayOutput struct{ *pulumi.OutputState }

func (ClientAggregatePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientAggregatePolicy)(nil)).Elem()
}

func (o ClientAggregatePolicyArrayOutput) ToClientAggregatePolicyArrayOutput() ClientAggregatePolicyArrayOutput {
	return o
}

func (o ClientAggregatePolicyArrayOutput) ToClientAggregatePolicyArrayOutputWithContext(ctx context.Context) ClientAggregatePolicyArrayOutput {
	return o
}

func (o ClientAggregatePolicyArrayOutput) Index(i pulumi.IntInput) ClientAggregatePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientAggregatePolicy {
		return vs[0].([]*ClientAggregatePolicy)[vs[1].(int)]
	}).(ClientAggregatePolicyOutput)
}

type ClientAggregatePolicyMapOutput struct{ *pulumi.OutputState }

func (ClientAggregatePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientAggregatePolicy)(nil)).Elem()
}

func (o ClientAggregatePolicyMapOutput) ToClientAggregatePolicyMapOutput() ClientAggregatePolicyMapOutput {
	return o
}

func (o ClientAggregatePolicyMapOutput) ToClientAggregatePolicyMapOutputWithContext(ctx context.Context) ClientAggregatePolicyMapOutput {
	return o
}

func (o ClientAggregatePolicyMapOutput) MapIndex(k pulumi.StringInput) ClientAggregatePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientAggregatePolicy {
		return vs[0].(map[string]*ClientAggregatePolicy)[vs[1].(string)]
	}).(ClientAggregatePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientAggregatePolicyInput)(nil)).Elem(), &ClientAggregatePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientAggregatePolicyArrayInput)(nil)).Elem(), ClientAggregatePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientAggregatePolicyMapInput)(nil)).Elem(), ClientAggregatePolicyMap{})
	pulumi.RegisterOutputType(ClientAggregatePolicyOutput{})
	pulumi.RegisterOutputType(ClientAggregatePolicyArrayOutput{})
	pulumi.RegisterOutputType(ClientAggregatePolicyMapOutput{})
}
