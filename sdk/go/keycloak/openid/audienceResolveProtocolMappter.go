// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: keycloak.openid/audienceresolveprotocolmappter.AudienceResolveProtocolMappter has been deprecated in favor of keycloak.openid/audienceresolveprotocolmapper.AudienceResolveProtocolMapper
type AudienceResolveProtocolMappter struct {
	pulumi.CustomResourceState

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrOutput `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewAudienceResolveProtocolMappter registers a new resource with the given unique name, arguments, and options.
func NewAudienceResolveProtocolMappter(ctx *pulumi.Context,
	name string, args *AudienceResolveProtocolMappterArgs, opts ...pulumi.ResourceOption) (*AudienceResolveProtocolMappter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AudienceResolveProtocolMappter
	err := ctx.RegisterResource("keycloak:openid/audienceResolveProtocolMappter:AudienceResolveProtocolMappter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAudienceResolveProtocolMappter gets an existing AudienceResolveProtocolMappter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAudienceResolveProtocolMappter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AudienceResolveProtocolMappterState, opts ...pulumi.ResourceOption) (*AudienceResolveProtocolMappter, error) {
	var resource AudienceResolveProtocolMappter
	err := ctx.ReadResource("keycloak:openid/audienceResolveProtocolMappter:AudienceResolveProtocolMappter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AudienceResolveProtocolMappter resources.
type audienceResolveProtocolMappterState struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId *string `pulumi:"realmId"`
}

type AudienceResolveProtocolMappterState struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringPtrInput
}

func (AudienceResolveProtocolMappterState) ElementType() reflect.Type {
	return reflect.TypeOf((*audienceResolveProtocolMappterState)(nil)).Elem()
}

type audienceResolveProtocolMappterArgs struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a AudienceResolveProtocolMappter resource.
type AudienceResolveProtocolMappterArgs struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringInput
}

func (AudienceResolveProtocolMappterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*audienceResolveProtocolMappterArgs)(nil)).Elem()
}

type AudienceResolveProtocolMappterInput interface {
	pulumi.Input

	ToAudienceResolveProtocolMappterOutput() AudienceResolveProtocolMappterOutput
	ToAudienceResolveProtocolMappterOutputWithContext(ctx context.Context) AudienceResolveProtocolMappterOutput
}

func (*AudienceResolveProtocolMappter) ElementType() reflect.Type {
	return reflect.TypeOf((**AudienceResolveProtocolMappter)(nil)).Elem()
}

func (i *AudienceResolveProtocolMappter) ToAudienceResolveProtocolMappterOutput() AudienceResolveProtocolMappterOutput {
	return i.ToAudienceResolveProtocolMappterOutputWithContext(context.Background())
}

func (i *AudienceResolveProtocolMappter) ToAudienceResolveProtocolMappterOutputWithContext(ctx context.Context) AudienceResolveProtocolMappterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudienceResolveProtocolMappterOutput)
}

// AudienceResolveProtocolMappterArrayInput is an input type that accepts AudienceResolveProtocolMappterArray and AudienceResolveProtocolMappterArrayOutput values.
// You can construct a concrete instance of `AudienceResolveProtocolMappterArrayInput` via:
//
//	AudienceResolveProtocolMappterArray{ AudienceResolveProtocolMappterArgs{...} }
type AudienceResolveProtocolMappterArrayInput interface {
	pulumi.Input

	ToAudienceResolveProtocolMappterArrayOutput() AudienceResolveProtocolMappterArrayOutput
	ToAudienceResolveProtocolMappterArrayOutputWithContext(context.Context) AudienceResolveProtocolMappterArrayOutput
}

type AudienceResolveProtocolMappterArray []AudienceResolveProtocolMappterInput

func (AudienceResolveProtocolMappterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AudienceResolveProtocolMappter)(nil)).Elem()
}

func (i AudienceResolveProtocolMappterArray) ToAudienceResolveProtocolMappterArrayOutput() AudienceResolveProtocolMappterArrayOutput {
	return i.ToAudienceResolveProtocolMappterArrayOutputWithContext(context.Background())
}

func (i AudienceResolveProtocolMappterArray) ToAudienceResolveProtocolMappterArrayOutputWithContext(ctx context.Context) AudienceResolveProtocolMappterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudienceResolveProtocolMappterArrayOutput)
}

// AudienceResolveProtocolMappterMapInput is an input type that accepts AudienceResolveProtocolMappterMap and AudienceResolveProtocolMappterMapOutput values.
// You can construct a concrete instance of `AudienceResolveProtocolMappterMapInput` via:
//
//	AudienceResolveProtocolMappterMap{ "key": AudienceResolveProtocolMappterArgs{...} }
type AudienceResolveProtocolMappterMapInput interface {
	pulumi.Input

	ToAudienceResolveProtocolMappterMapOutput() AudienceResolveProtocolMappterMapOutput
	ToAudienceResolveProtocolMappterMapOutputWithContext(context.Context) AudienceResolveProtocolMappterMapOutput
}

type AudienceResolveProtocolMappterMap map[string]AudienceResolveProtocolMappterInput

func (AudienceResolveProtocolMappterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AudienceResolveProtocolMappter)(nil)).Elem()
}

func (i AudienceResolveProtocolMappterMap) ToAudienceResolveProtocolMappterMapOutput() AudienceResolveProtocolMappterMapOutput {
	return i.ToAudienceResolveProtocolMappterMapOutputWithContext(context.Background())
}

func (i AudienceResolveProtocolMappterMap) ToAudienceResolveProtocolMappterMapOutputWithContext(ctx context.Context) AudienceResolveProtocolMappterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudienceResolveProtocolMappterMapOutput)
}

type AudienceResolveProtocolMappterOutput struct{ *pulumi.OutputState }

func (AudienceResolveProtocolMappterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AudienceResolveProtocolMappter)(nil)).Elem()
}

func (o AudienceResolveProtocolMappterOutput) ToAudienceResolveProtocolMappterOutput() AudienceResolveProtocolMappterOutput {
	return o
}

func (o AudienceResolveProtocolMappterOutput) ToAudienceResolveProtocolMappterOutputWithContext(ctx context.Context) AudienceResolveProtocolMappterOutput {
	return o
}

// The mapper's associated client. Cannot be used at the same time as client_scope_id.
func (o AudienceResolveProtocolMappterOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AudienceResolveProtocolMappter) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The mapper's associated client scope. Cannot be used at the same time as client_id.
func (o AudienceResolveProtocolMappterOutput) ClientScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AudienceResolveProtocolMappter) pulumi.StringPtrOutput { return v.ClientScopeId }).(pulumi.StringPtrOutput)
}

// A human-friendly name that will appear in the Keycloak console.
func (o AudienceResolveProtocolMappterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AudienceResolveProtocolMappter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm id where the associated client or client scope exists.
func (o AudienceResolveProtocolMappterOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *AudienceResolveProtocolMappter) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type AudienceResolveProtocolMappterArrayOutput struct{ *pulumi.OutputState }

func (AudienceResolveProtocolMappterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AudienceResolveProtocolMappter)(nil)).Elem()
}

func (o AudienceResolveProtocolMappterArrayOutput) ToAudienceResolveProtocolMappterArrayOutput() AudienceResolveProtocolMappterArrayOutput {
	return o
}

func (o AudienceResolveProtocolMappterArrayOutput) ToAudienceResolveProtocolMappterArrayOutputWithContext(ctx context.Context) AudienceResolveProtocolMappterArrayOutput {
	return o
}

func (o AudienceResolveProtocolMappterArrayOutput) Index(i pulumi.IntInput) AudienceResolveProtocolMappterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AudienceResolveProtocolMappter {
		return vs[0].([]*AudienceResolveProtocolMappter)[vs[1].(int)]
	}).(AudienceResolveProtocolMappterOutput)
}

type AudienceResolveProtocolMappterMapOutput struct{ *pulumi.OutputState }

func (AudienceResolveProtocolMappterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AudienceResolveProtocolMappter)(nil)).Elem()
}

func (o AudienceResolveProtocolMappterMapOutput) ToAudienceResolveProtocolMappterMapOutput() AudienceResolveProtocolMappterMapOutput {
	return o
}

func (o AudienceResolveProtocolMappterMapOutput) ToAudienceResolveProtocolMappterMapOutputWithContext(ctx context.Context) AudienceResolveProtocolMappterMapOutput {
	return o
}

func (o AudienceResolveProtocolMappterMapOutput) MapIndex(k pulumi.StringInput) AudienceResolveProtocolMappterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AudienceResolveProtocolMappter {
		return vs[0].(map[string]*AudienceResolveProtocolMappter)[vs[1].(string)]
	}).(AudienceResolveProtocolMappterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AudienceResolveProtocolMappterInput)(nil)).Elem(), &AudienceResolveProtocolMappter{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudienceResolveProtocolMappterArrayInput)(nil)).Elem(), AudienceResolveProtocolMappterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudienceResolveProtocolMappterMapInput)(nil)).Elem(), AudienceResolveProtocolMappterMap{})
	pulumi.RegisterOutputType(AudienceResolveProtocolMappterOutput{})
	pulumi.RegisterOutputType(AudienceResolveProtocolMappterArrayOutput{})
	pulumi.RegisterOutputType(AudienceResolveProtocolMappterMapOutput{})
}
