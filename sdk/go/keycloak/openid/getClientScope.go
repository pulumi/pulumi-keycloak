// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can be used to fetch properties of a Keycloak OpenID client scope for usage with other resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			offlineAccess, err := openid.LookupClientScope(ctx, &openid.LookupClientScopeArgs{
//				RealmId: "my-realm",
//				Name:    "offline_access",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// use the data source
//			_, err = openid.NewAudienceProtocolMapper(ctx, "audience_mapper", &openid.AudienceProtocolMapperArgs{
//				RealmId:                pulumi.String(offlineAccess.RealmId),
//				ClientScopeId:          pulumi.String(offlineAccess.Id),
//				Name:                   pulumi.String("audience-mapper"),
//				IncludedCustomAudience: pulumi.String("foo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupClientScope(ctx *pulumi.Context, args *LookupClientScopeArgs, opts ...pulumi.InvokeOption) (*LookupClientScopeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClientScopeResult
	err := ctx.Invoke("keycloak:openid/getClientScope:getClientScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClientScope.
type LookupClientScopeArgs struct {
	// The name of the client scope.
	Name string `pulumi:"name"`
	// The realm id.
	RealmId string `pulumi:"realmId"`
}

// A collection of values returned by getClientScope.
type LookupClientScopeResult struct {
	ConsentScreenText string `pulumi:"consentScreenText"`
	Description       string `pulumi:"description"`
	GuiOrder          int    `pulumi:"guiOrder"`
	// The provider-assigned unique ID for this managed resource.
	Id                  string `pulumi:"id"`
	IncludeInTokenScope bool   `pulumi:"includeInTokenScope"`
	Name                string `pulumi:"name"`
	RealmId             string `pulumi:"realmId"`
}

func LookupClientScopeOutput(ctx *pulumi.Context, args LookupClientScopeOutputArgs, opts ...pulumi.InvokeOption) LookupClientScopeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClientScopeResult, error) {
			args := v.(LookupClientScopeArgs)
			r, err := LookupClientScope(ctx, &args, opts...)
			var s LookupClientScopeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClientScopeResultOutput)
}

// A collection of arguments for invoking getClientScope.
type LookupClientScopeOutputArgs struct {
	// The name of the client scope.
	Name pulumi.StringInput `pulumi:"name"`
	// The realm id.
	RealmId pulumi.StringInput `pulumi:"realmId"`
}

func (LookupClientScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClientScopeArgs)(nil)).Elem()
}

// A collection of values returned by getClientScope.
type LookupClientScopeResultOutput struct{ *pulumi.OutputState }

func (LookupClientScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClientScopeResult)(nil)).Elem()
}

func (o LookupClientScopeResultOutput) ToLookupClientScopeResultOutput() LookupClientScopeResultOutput {
	return o
}

func (o LookupClientScopeResultOutput) ToLookupClientScopeResultOutputWithContext(ctx context.Context) LookupClientScopeResultOutput {
	return o
}

func (o LookupClientScopeResultOutput) ConsentScreenText() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientScopeResult) string { return v.ConsentScreenText }).(pulumi.StringOutput)
}

func (o LookupClientScopeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientScopeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupClientScopeResultOutput) GuiOrder() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClientScopeResult) int { return v.GuiOrder }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupClientScopeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientScopeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupClientScopeResultOutput) IncludeInTokenScope() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClientScopeResult) bool { return v.IncludeInTokenScope }).(pulumi.BoolOutput)
}

func (o LookupClientScopeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientScopeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupClientScopeResultOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientScopeResult) string { return v.RealmId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClientScopeResultOutput{})
}
