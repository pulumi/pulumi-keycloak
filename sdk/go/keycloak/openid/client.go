// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allows for creating and managing Keycloak clients that use the OpenID Connect protocol.
//
// Clients are entities that can use Keycloak for user authentication. Typically,
// clients are applications that redirect users to Keycloak for authentication
// in order to take advantage of Keycloak's user sessions for SSO.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewClient(ctx, "openidClient", &openid.ClientArgs{
//				RealmId:    realm.ID(),
//				ClientId:   pulumi.String("test-client"),
//				Enabled:    pulumi.Bool(true),
//				AccessType: pulumi.String("CONFIDENTIAL"),
//				ValidRedirectUris: pulumi.StringArray{
//					pulumi.String("http://localhost:8080/openid-callback"),
//				},
//				LoginTheme: pulumi.String("keycloak"),
//				ExtraConfig: pulumi.Map{
//					"key1": pulumi.Any("value1"),
//					"key2": pulumi.Any("value2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Clients can be imported using the format `{{realm_id}}/{{client_keycloak_id}}`, where `client_keycloak_id` is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Examplebash
//
// ```sh
//
//	$ pulumi import keycloak:openid/client:Client openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352
//
// ```
type Client struct {
	pulumi.CustomResourceState

	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	AccessTokenLifespan pulumi.StringOutput `pulumi:"accessTokenLifespan"`
	// Specifies the type of client, which can be one of the following:
	AccessType pulumi.StringOutput `pulumi:"accessType"`
	// URL to the admin interface of the client.
	AdminUrl pulumi.StringOutput `pulumi:"adminUrl"`
	// Override realm authentication flow bindings
	AuthenticationFlowBindingOverrides ClientAuthenticationFlowBindingOverridesPtrOutput `pulumi:"authenticationFlowBindingOverrides"`
	// When this block is present, fine-grained authorization will be enabled for this client. The client's `accessType` must be `CONFIDENTIAL`, and `serviceAccountsEnabled` must be `true`. This block has the following arguments:
	Authorization ClientAuthorizationPtrOutput `pulumi:"authorization"`
	// Specifying whether a "revokeOfflineAccess" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	BackchannelLogoutRevokeOfflineSessions pulumi.BoolPtrOutput `pulumi:"backchannelLogoutRevokeOfflineSessions"`
	// When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
	BackchannelLogoutSessionRequired pulumi.BoolPtrOutput `pulumi:"backchannelLogoutSessionRequired"`
	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	BackchannelLogoutUrl pulumi.StringPtrOutput `pulumi:"backchannelLogoutUrl"`
	// Default URL to use when the auth server needs to redirect or link back to the client.
	BaseUrl pulumi.StringOutput `pulumi:"baseUrl"`
	// Defaults to `client-secret` The authenticator type for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
	// - `client-secret` (Default) Use client id and client secret to authenticate client.
	// - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	// - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extraConfig` with `attributes.x509.subjectdn = <subjectDn>`
	// - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	ClientAuthenticatorType pulumi.StringPtrOutput `pulumi:"clientAuthenticatorType"`
	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	ClientOfflineSessionIdleTimeout pulumi.StringOutput `pulumi:"clientOfflineSessionIdleTimeout"`
	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	ClientOfflineSessionMaxLifespan pulumi.StringOutput `pulumi:"clientOfflineSessionMaxLifespan"`
	// The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	ClientSessionIdleTimeout pulumi.StringOutput `pulumi:"clientSessionIdleTimeout"`
	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	ClientSessionMaxLifespan pulumi.StringOutput `pulumi:"clientSessionMaxLifespan"`
	// When `true`, users have to consent to client access. Defaults to `false`.
	ConsentRequired pulumi.BoolOutput `pulumi:"consentRequired"`
	// The text to display on the consent screen about permissions specific to this client. This is applicable only when `displayOnConsentScreen` is `true`.
	ConsentScreenText pulumi.StringOutput `pulumi:"consentScreenText"`
	// The description of this client in the GUI.
	Description pulumi.StringOutput `pulumi:"description"`
	// When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
	DirectAccessGrantsEnabled pulumi.BoolOutput `pulumi:"directAccessGrantsEnabled"`
	// When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consentRequired` is `true`.
	DisplayOnConsentScreen pulumi.BoolOutput `pulumi:"displayOnConsentScreen"`
	// When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// When `true`, the parameter `sessionState` will not be included in OpenID Connect Authentication Response.
	ExcludeSessionStateFromAuthResponse pulumi.BoolOutput `pulumi:"excludeSessionStateFromAuthResponse"`
	ExtraConfig                         pulumi.MapOutput  `pulumi:"extraConfig"`
	// When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannelLogoutUrl`. Defaults to `false`.
	FrontchannelLogoutEnabled pulumi.BoolOutput `pulumi:"frontchannelLogoutEnabled"`
	// The frontchannel logout url. This is applicable only when `frontchannelLogoutEnabled` is `true`.
	FrontchannelLogoutUrl pulumi.StringPtrOutput `pulumi:"frontchannelLogoutUrl"`
	// Allow to include all roles mappings in the access token.
	FullScopeAllowed pulumi.BoolPtrOutput `pulumi:"fullScopeAllowed"`
	// When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
	ImplicitFlowEnabled pulumi.BoolOutput `pulumi:"implicitFlowEnabled"`
	// When `true`, the client with the specified `clientId` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
	Import pulumi.BoolPtrOutput `pulumi:"import"`
	// The client login theme. This will override the default theme for the realm.
	LoginTheme pulumi.StringPtrOutput `pulumi:"loginTheme"`
	// The display name of this client in the GUI.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	Oauth2DeviceAuthorizationGrantEnabled pulumi.BoolPtrOutput `pulumi:"oauth2DeviceAuthorizationGrantEnabled"`
	// The maximum amount of time a client has to finish the device code flow before it expires.
	Oauth2DeviceCodeLifespan pulumi.StringPtrOutput `pulumi:"oauth2DeviceCodeLifespan"`
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval pulumi.StringPtrOutput `pulumi:"oauth2DevicePollingInterval"`
	// The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
	PkceCodeChallengeMethod pulumi.StringPtrOutput `pulumi:"pkceCodeChallengeMethod"`
	// The realm this client is attached to.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
	ResourceServerId pulumi.StringOutput `pulumi:"resourceServerId"`
	// When specified, this URL is prepended to any relative URLs found within `validRedirectUris`, `webOrigins`, and `adminUrl`. NOTE: Due to limitations in the Keycloak API, when the `rootUrl` attribute is used, the `validRedirectUris`, `webOrigins`, and `adminUrl` attributes will be required.
	RootUrl pulumi.StringOutput `pulumi:"rootUrl"`
	// (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
	ServiceAccountUserId pulumi.StringOutput `pulumi:"serviceAccountUserId"`
	// When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
	ServiceAccountsEnabled pulumi.BoolOutput `pulumi:"serviceAccountsEnabled"`
	// When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
	StandardFlowEnabled pulumi.BoolOutput `pulumi:"standardFlowEnabled"`
	// If this is `true`, a refreshToken will be created and added to the token response. If this is `false` then no refreshToken will be generated.  Defaults to `true`.
	UseRefreshTokens pulumi.BoolPtrOutput `pulumi:"useRefreshTokens"`
	// If this is `true`, a refreshToken will be created and added to the token response if the clientCredentials grant is used and a user session will be created. If this is `false` then no refreshToken will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
	UseRefreshTokensClientCredentials pulumi.BoolPtrOutput `pulumi:"useRefreshTokensClientCredentials"`
	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	ValidPostLogoutRedirectUris pulumi.StringArrayOutput `pulumi:"validPostLogoutRedirectUris"`
	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
	// is set to `true`.
	ValidRedirectUris pulumi.StringArrayOutput `pulumi:"validRedirectUris"`
	// A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
	WebOrigins pulumi.StringArrayOutput `pulumi:"webOrigins"`
}

// NewClient registers a new resource with the given unique name, arguments, and options.
func NewClient(ctx *pulumi.Context,
	name string, args *ClientArgs, opts ...pulumi.ResourceOption) (*Client, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessType == nil {
		return nil, errors.New("invalid value for required argument 'AccessType'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Client
	err := ctx.RegisterResource("keycloak:openid/client:Client", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClient gets an existing Client resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientState, opts ...pulumi.ResourceOption) (*Client, error) {
	var resource Client
	err := ctx.ReadResource("keycloak:openid/client:Client", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Client resources.
type clientState struct {
	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	AccessTokenLifespan *string `pulumi:"accessTokenLifespan"`
	// Specifies the type of client, which can be one of the following:
	AccessType *string `pulumi:"accessType"`
	// URL to the admin interface of the client.
	AdminUrl *string `pulumi:"adminUrl"`
	// Override realm authentication flow bindings
	AuthenticationFlowBindingOverrides *ClientAuthenticationFlowBindingOverrides `pulumi:"authenticationFlowBindingOverrides"`
	// When this block is present, fine-grained authorization will be enabled for this client. The client's `accessType` must be `CONFIDENTIAL`, and `serviceAccountsEnabled` must be `true`. This block has the following arguments:
	Authorization *ClientAuthorization `pulumi:"authorization"`
	// Specifying whether a "revokeOfflineAccess" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	BackchannelLogoutRevokeOfflineSessions *bool `pulumi:"backchannelLogoutRevokeOfflineSessions"`
	// When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
	BackchannelLogoutSessionRequired *bool `pulumi:"backchannelLogoutSessionRequired"`
	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	BackchannelLogoutUrl *string `pulumi:"backchannelLogoutUrl"`
	// Default URL to use when the auth server needs to redirect or link back to the client.
	BaseUrl *string `pulumi:"baseUrl"`
	// Defaults to `client-secret` The authenticator type for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
	// - `client-secret` (Default) Use client id and client secret to authenticate client.
	// - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	// - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extraConfig` with `attributes.x509.subjectdn = <subjectDn>`
	// - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	ClientAuthenticatorType *string `pulumi:"clientAuthenticatorType"`
	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	ClientId *string `pulumi:"clientId"`
	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	ClientOfflineSessionIdleTimeout *string `pulumi:"clientOfflineSessionIdleTimeout"`
	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	ClientOfflineSessionMaxLifespan *string `pulumi:"clientOfflineSessionMaxLifespan"`
	// The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
	ClientSecret *string `pulumi:"clientSecret"`
	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	ClientSessionIdleTimeout *string `pulumi:"clientSessionIdleTimeout"`
	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	ClientSessionMaxLifespan *string `pulumi:"clientSessionMaxLifespan"`
	// When `true`, users have to consent to client access. Defaults to `false`.
	ConsentRequired *bool `pulumi:"consentRequired"`
	// The text to display on the consent screen about permissions specific to this client. This is applicable only when `displayOnConsentScreen` is `true`.
	ConsentScreenText *string `pulumi:"consentScreenText"`
	// The description of this client in the GUI.
	Description *string `pulumi:"description"`
	// When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
	DirectAccessGrantsEnabled *bool `pulumi:"directAccessGrantsEnabled"`
	// When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consentRequired` is `true`.
	DisplayOnConsentScreen *bool `pulumi:"displayOnConsentScreen"`
	// When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// When `true`, the parameter `sessionState` will not be included in OpenID Connect Authentication Response.
	ExcludeSessionStateFromAuthResponse *bool                  `pulumi:"excludeSessionStateFromAuthResponse"`
	ExtraConfig                         map[string]interface{} `pulumi:"extraConfig"`
	// When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannelLogoutUrl`. Defaults to `false`.
	FrontchannelLogoutEnabled *bool `pulumi:"frontchannelLogoutEnabled"`
	// The frontchannel logout url. This is applicable only when `frontchannelLogoutEnabled` is `true`.
	FrontchannelLogoutUrl *string `pulumi:"frontchannelLogoutUrl"`
	// Allow to include all roles mappings in the access token.
	FullScopeAllowed *bool `pulumi:"fullScopeAllowed"`
	// When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
	ImplicitFlowEnabled *bool `pulumi:"implicitFlowEnabled"`
	// When `true`, the client with the specified `clientId` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
	Import *bool `pulumi:"import"`
	// The client login theme. This will override the default theme for the realm.
	LoginTheme *string `pulumi:"loginTheme"`
	// The display name of this client in the GUI.
	Name *string `pulumi:"name"`
	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	Oauth2DeviceAuthorizationGrantEnabled *bool `pulumi:"oauth2DeviceAuthorizationGrantEnabled"`
	// The maximum amount of time a client has to finish the device code flow before it expires.
	Oauth2DeviceCodeLifespan *string `pulumi:"oauth2DeviceCodeLifespan"`
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval *string `pulumi:"oauth2DevicePollingInterval"`
	// The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
	PkceCodeChallengeMethod *string `pulumi:"pkceCodeChallengeMethod"`
	// The realm this client is attached to.
	RealmId *string `pulumi:"realmId"`
	// (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
	ResourceServerId *string `pulumi:"resourceServerId"`
	// When specified, this URL is prepended to any relative URLs found within `validRedirectUris`, `webOrigins`, and `adminUrl`. NOTE: Due to limitations in the Keycloak API, when the `rootUrl` attribute is used, the `validRedirectUris`, `webOrigins`, and `adminUrl` attributes will be required.
	RootUrl *string `pulumi:"rootUrl"`
	// (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
	ServiceAccountUserId *string `pulumi:"serviceAccountUserId"`
	// When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
	ServiceAccountsEnabled *bool `pulumi:"serviceAccountsEnabled"`
	// When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
	StandardFlowEnabled *bool `pulumi:"standardFlowEnabled"`
	// If this is `true`, a refreshToken will be created and added to the token response. If this is `false` then no refreshToken will be generated.  Defaults to `true`.
	UseRefreshTokens *bool `pulumi:"useRefreshTokens"`
	// If this is `true`, a refreshToken will be created and added to the token response if the clientCredentials grant is used and a user session will be created. If this is `false` then no refreshToken will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
	UseRefreshTokensClientCredentials *bool `pulumi:"useRefreshTokensClientCredentials"`
	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	ValidPostLogoutRedirectUris []string `pulumi:"validPostLogoutRedirectUris"`
	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
	// is set to `true`.
	ValidRedirectUris []string `pulumi:"validRedirectUris"`
	// A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
	WebOrigins []string `pulumi:"webOrigins"`
}

type ClientState struct {
	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	AccessTokenLifespan pulumi.StringPtrInput
	// Specifies the type of client, which can be one of the following:
	AccessType pulumi.StringPtrInput
	// URL to the admin interface of the client.
	AdminUrl pulumi.StringPtrInput
	// Override realm authentication flow bindings
	AuthenticationFlowBindingOverrides ClientAuthenticationFlowBindingOverridesPtrInput
	// When this block is present, fine-grained authorization will be enabled for this client. The client's `accessType` must be `CONFIDENTIAL`, and `serviceAccountsEnabled` must be `true`. This block has the following arguments:
	Authorization ClientAuthorizationPtrInput
	// Specifying whether a "revokeOfflineAccess" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	BackchannelLogoutRevokeOfflineSessions pulumi.BoolPtrInput
	// When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
	BackchannelLogoutSessionRequired pulumi.BoolPtrInput
	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	BackchannelLogoutUrl pulumi.StringPtrInput
	// Default URL to use when the auth server needs to redirect or link back to the client.
	BaseUrl pulumi.StringPtrInput
	// Defaults to `client-secret` The authenticator type for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
	// - `client-secret` (Default) Use client id and client secret to authenticate client.
	// - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	// - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extraConfig` with `attributes.x509.subjectdn = <subjectDn>`
	// - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	ClientAuthenticatorType pulumi.StringPtrInput
	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	ClientId pulumi.StringPtrInput
	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	ClientOfflineSessionIdleTimeout pulumi.StringPtrInput
	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	ClientOfflineSessionMaxLifespan pulumi.StringPtrInput
	// The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
	ClientSecret pulumi.StringPtrInput
	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	ClientSessionIdleTimeout pulumi.StringPtrInput
	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	ClientSessionMaxLifespan pulumi.StringPtrInput
	// When `true`, users have to consent to client access. Defaults to `false`.
	ConsentRequired pulumi.BoolPtrInput
	// The text to display on the consent screen about permissions specific to this client. This is applicable only when `displayOnConsentScreen` is `true`.
	ConsentScreenText pulumi.StringPtrInput
	// The description of this client in the GUI.
	Description pulumi.StringPtrInput
	// When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
	DirectAccessGrantsEnabled pulumi.BoolPtrInput
	// When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consentRequired` is `true`.
	DisplayOnConsentScreen pulumi.BoolPtrInput
	// When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// When `true`, the parameter `sessionState` will not be included in OpenID Connect Authentication Response.
	ExcludeSessionStateFromAuthResponse pulumi.BoolPtrInput
	ExtraConfig                         pulumi.MapInput
	// When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannelLogoutUrl`. Defaults to `false`.
	FrontchannelLogoutEnabled pulumi.BoolPtrInput
	// The frontchannel logout url. This is applicable only when `frontchannelLogoutEnabled` is `true`.
	FrontchannelLogoutUrl pulumi.StringPtrInput
	// Allow to include all roles mappings in the access token.
	FullScopeAllowed pulumi.BoolPtrInput
	// When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
	ImplicitFlowEnabled pulumi.BoolPtrInput
	// When `true`, the client with the specified `clientId` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
	Import pulumi.BoolPtrInput
	// The client login theme. This will override the default theme for the realm.
	LoginTheme pulumi.StringPtrInput
	// The display name of this client in the GUI.
	Name pulumi.StringPtrInput
	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	Oauth2DeviceAuthorizationGrantEnabled pulumi.BoolPtrInput
	// The maximum amount of time a client has to finish the device code flow before it expires.
	Oauth2DeviceCodeLifespan pulumi.StringPtrInput
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval pulumi.StringPtrInput
	// The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
	PkceCodeChallengeMethod pulumi.StringPtrInput
	// The realm this client is attached to.
	RealmId pulumi.StringPtrInput
	// (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
	ResourceServerId pulumi.StringPtrInput
	// When specified, this URL is prepended to any relative URLs found within `validRedirectUris`, `webOrigins`, and `adminUrl`. NOTE: Due to limitations in the Keycloak API, when the `rootUrl` attribute is used, the `validRedirectUris`, `webOrigins`, and `adminUrl` attributes will be required.
	RootUrl pulumi.StringPtrInput
	// (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
	ServiceAccountUserId pulumi.StringPtrInput
	// When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
	ServiceAccountsEnabled pulumi.BoolPtrInput
	// When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
	StandardFlowEnabled pulumi.BoolPtrInput
	// If this is `true`, a refreshToken will be created and added to the token response. If this is `false` then no refreshToken will be generated.  Defaults to `true`.
	UseRefreshTokens pulumi.BoolPtrInput
	// If this is `true`, a refreshToken will be created and added to the token response if the clientCredentials grant is used and a user session will be created. If this is `false` then no refreshToken will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
	UseRefreshTokensClientCredentials pulumi.BoolPtrInput
	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	ValidPostLogoutRedirectUris pulumi.StringArrayInput
	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
	// is set to `true`.
	ValidRedirectUris pulumi.StringArrayInput
	// A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
	WebOrigins pulumi.StringArrayInput
}

func (ClientState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientState)(nil)).Elem()
}

type clientArgs struct {
	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	AccessTokenLifespan *string `pulumi:"accessTokenLifespan"`
	// Specifies the type of client, which can be one of the following:
	AccessType string `pulumi:"accessType"`
	// URL to the admin interface of the client.
	AdminUrl *string `pulumi:"adminUrl"`
	// Override realm authentication flow bindings
	AuthenticationFlowBindingOverrides *ClientAuthenticationFlowBindingOverrides `pulumi:"authenticationFlowBindingOverrides"`
	// When this block is present, fine-grained authorization will be enabled for this client. The client's `accessType` must be `CONFIDENTIAL`, and `serviceAccountsEnabled` must be `true`. This block has the following arguments:
	Authorization *ClientAuthorization `pulumi:"authorization"`
	// Specifying whether a "revokeOfflineAccess" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	BackchannelLogoutRevokeOfflineSessions *bool `pulumi:"backchannelLogoutRevokeOfflineSessions"`
	// When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
	BackchannelLogoutSessionRequired *bool `pulumi:"backchannelLogoutSessionRequired"`
	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	BackchannelLogoutUrl *string `pulumi:"backchannelLogoutUrl"`
	// Default URL to use when the auth server needs to redirect or link back to the client.
	BaseUrl *string `pulumi:"baseUrl"`
	// Defaults to `client-secret` The authenticator type for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
	// - `client-secret` (Default) Use client id and client secret to authenticate client.
	// - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	// - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extraConfig` with `attributes.x509.subjectdn = <subjectDn>`
	// - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	ClientAuthenticatorType *string `pulumi:"clientAuthenticatorType"`
	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	ClientId string `pulumi:"clientId"`
	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	ClientOfflineSessionIdleTimeout *string `pulumi:"clientOfflineSessionIdleTimeout"`
	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	ClientOfflineSessionMaxLifespan *string `pulumi:"clientOfflineSessionMaxLifespan"`
	// The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
	ClientSecret *string `pulumi:"clientSecret"`
	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	ClientSessionIdleTimeout *string `pulumi:"clientSessionIdleTimeout"`
	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	ClientSessionMaxLifespan *string `pulumi:"clientSessionMaxLifespan"`
	// When `true`, users have to consent to client access. Defaults to `false`.
	ConsentRequired *bool `pulumi:"consentRequired"`
	// The text to display on the consent screen about permissions specific to this client. This is applicable only when `displayOnConsentScreen` is `true`.
	ConsentScreenText *string `pulumi:"consentScreenText"`
	// The description of this client in the GUI.
	Description *string `pulumi:"description"`
	// When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
	DirectAccessGrantsEnabled *bool `pulumi:"directAccessGrantsEnabled"`
	// When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consentRequired` is `true`.
	DisplayOnConsentScreen *bool `pulumi:"displayOnConsentScreen"`
	// When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// When `true`, the parameter `sessionState` will not be included in OpenID Connect Authentication Response.
	ExcludeSessionStateFromAuthResponse *bool                  `pulumi:"excludeSessionStateFromAuthResponse"`
	ExtraConfig                         map[string]interface{} `pulumi:"extraConfig"`
	// When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannelLogoutUrl`. Defaults to `false`.
	FrontchannelLogoutEnabled *bool `pulumi:"frontchannelLogoutEnabled"`
	// The frontchannel logout url. This is applicable only when `frontchannelLogoutEnabled` is `true`.
	FrontchannelLogoutUrl *string `pulumi:"frontchannelLogoutUrl"`
	// Allow to include all roles mappings in the access token.
	FullScopeAllowed *bool `pulumi:"fullScopeAllowed"`
	// When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
	ImplicitFlowEnabled *bool `pulumi:"implicitFlowEnabled"`
	// When `true`, the client with the specified `clientId` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
	Import *bool `pulumi:"import"`
	// The client login theme. This will override the default theme for the realm.
	LoginTheme *string `pulumi:"loginTheme"`
	// The display name of this client in the GUI.
	Name *string `pulumi:"name"`
	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	Oauth2DeviceAuthorizationGrantEnabled *bool `pulumi:"oauth2DeviceAuthorizationGrantEnabled"`
	// The maximum amount of time a client has to finish the device code flow before it expires.
	Oauth2DeviceCodeLifespan *string `pulumi:"oauth2DeviceCodeLifespan"`
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval *string `pulumi:"oauth2DevicePollingInterval"`
	// The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
	PkceCodeChallengeMethod *string `pulumi:"pkceCodeChallengeMethod"`
	// The realm this client is attached to.
	RealmId string `pulumi:"realmId"`
	// When specified, this URL is prepended to any relative URLs found within `validRedirectUris`, `webOrigins`, and `adminUrl`. NOTE: Due to limitations in the Keycloak API, when the `rootUrl` attribute is used, the `validRedirectUris`, `webOrigins`, and `adminUrl` attributes will be required.
	RootUrl *string `pulumi:"rootUrl"`
	// When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
	ServiceAccountsEnabled *bool `pulumi:"serviceAccountsEnabled"`
	// When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
	StandardFlowEnabled *bool `pulumi:"standardFlowEnabled"`
	// If this is `true`, a refreshToken will be created and added to the token response. If this is `false` then no refreshToken will be generated.  Defaults to `true`.
	UseRefreshTokens *bool `pulumi:"useRefreshTokens"`
	// If this is `true`, a refreshToken will be created and added to the token response if the clientCredentials grant is used and a user session will be created. If this is `false` then no refreshToken will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
	UseRefreshTokensClientCredentials *bool `pulumi:"useRefreshTokensClientCredentials"`
	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	ValidPostLogoutRedirectUris []string `pulumi:"validPostLogoutRedirectUris"`
	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
	// is set to `true`.
	ValidRedirectUris []string `pulumi:"validRedirectUris"`
	// A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
	WebOrigins []string `pulumi:"webOrigins"`
}

// The set of arguments for constructing a Client resource.
type ClientArgs struct {
	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	AccessTokenLifespan pulumi.StringPtrInput
	// Specifies the type of client, which can be one of the following:
	AccessType pulumi.StringInput
	// URL to the admin interface of the client.
	AdminUrl pulumi.StringPtrInput
	// Override realm authentication flow bindings
	AuthenticationFlowBindingOverrides ClientAuthenticationFlowBindingOverridesPtrInput
	// When this block is present, fine-grained authorization will be enabled for this client. The client's `accessType` must be `CONFIDENTIAL`, and `serviceAccountsEnabled` must be `true`. This block has the following arguments:
	Authorization ClientAuthorizationPtrInput
	// Specifying whether a "revokeOfflineAccess" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	BackchannelLogoutRevokeOfflineSessions pulumi.BoolPtrInput
	// When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
	BackchannelLogoutSessionRequired pulumi.BoolPtrInput
	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	BackchannelLogoutUrl pulumi.StringPtrInput
	// Default URL to use when the auth server needs to redirect or link back to the client.
	BaseUrl pulumi.StringPtrInput
	// Defaults to `client-secret` The authenticator type for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
	// - `client-secret` (Default) Use client id and client secret to authenticate client.
	// - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	// - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extraConfig` with `attributes.x509.subjectdn = <subjectDn>`
	// - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
	ClientAuthenticatorType pulumi.StringPtrInput
	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	ClientId pulumi.StringInput
	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	ClientOfflineSessionIdleTimeout pulumi.StringPtrInput
	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	ClientOfflineSessionMaxLifespan pulumi.StringPtrInput
	// The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
	ClientSecret pulumi.StringPtrInput
	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	ClientSessionIdleTimeout pulumi.StringPtrInput
	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	ClientSessionMaxLifespan pulumi.StringPtrInput
	// When `true`, users have to consent to client access. Defaults to `false`.
	ConsentRequired pulumi.BoolPtrInput
	// The text to display on the consent screen about permissions specific to this client. This is applicable only when `displayOnConsentScreen` is `true`.
	ConsentScreenText pulumi.StringPtrInput
	// The description of this client in the GUI.
	Description pulumi.StringPtrInput
	// When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
	DirectAccessGrantsEnabled pulumi.BoolPtrInput
	// When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consentRequired` is `true`.
	DisplayOnConsentScreen pulumi.BoolPtrInput
	// When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// When `true`, the parameter `sessionState` will not be included in OpenID Connect Authentication Response.
	ExcludeSessionStateFromAuthResponse pulumi.BoolPtrInput
	ExtraConfig                         pulumi.MapInput
	// When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannelLogoutUrl`. Defaults to `false`.
	FrontchannelLogoutEnabled pulumi.BoolPtrInput
	// The frontchannel logout url. This is applicable only when `frontchannelLogoutEnabled` is `true`.
	FrontchannelLogoutUrl pulumi.StringPtrInput
	// Allow to include all roles mappings in the access token.
	FullScopeAllowed pulumi.BoolPtrInput
	// When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
	ImplicitFlowEnabled pulumi.BoolPtrInput
	// When `true`, the client with the specified `clientId` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
	Import pulumi.BoolPtrInput
	// The client login theme. This will override the default theme for the realm.
	LoginTheme pulumi.StringPtrInput
	// The display name of this client in the GUI.
	Name pulumi.StringPtrInput
	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	Oauth2DeviceAuthorizationGrantEnabled pulumi.BoolPtrInput
	// The maximum amount of time a client has to finish the device code flow before it expires.
	Oauth2DeviceCodeLifespan pulumi.StringPtrInput
	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval pulumi.StringPtrInput
	// The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value ``.
	PkceCodeChallengeMethod pulumi.StringPtrInput
	// The realm this client is attached to.
	RealmId pulumi.StringInput
	// When specified, this URL is prepended to any relative URLs found within `validRedirectUris`, `webOrigins`, and `adminUrl`. NOTE: Due to limitations in the Keycloak API, when the `rootUrl` attribute is used, the `validRedirectUris`, `webOrigins`, and `adminUrl` attributes will be required.
	RootUrl pulumi.StringPtrInput
	// When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
	ServiceAccountsEnabled pulumi.BoolPtrInput
	// When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
	StandardFlowEnabled pulumi.BoolPtrInput
	// If this is `true`, a refreshToken will be created and added to the token response. If this is `false` then no refreshToken will be generated.  Defaults to `true`.
	UseRefreshTokens pulumi.BoolPtrInput
	// If this is `true`, a refreshToken will be created and added to the token response if the clientCredentials grant is used and a user session will be created. If this is `false` then no refreshToken will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
	UseRefreshTokensClientCredentials pulumi.BoolPtrInput
	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	ValidPostLogoutRedirectUris pulumi.StringArrayInput
	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
	// is set to `true`.
	ValidRedirectUris pulumi.StringArrayInput
	// A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
	WebOrigins pulumi.StringArrayInput
}

func (ClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientArgs)(nil)).Elem()
}

type ClientInput interface {
	pulumi.Input

	ToClientOutput() ClientOutput
	ToClientOutputWithContext(ctx context.Context) ClientOutput
}

func (*Client) ElementType() reflect.Type {
	return reflect.TypeOf((**Client)(nil)).Elem()
}

func (i *Client) ToClientOutput() ClientOutput {
	return i.ToClientOutputWithContext(context.Background())
}

func (i *Client) ToClientOutputWithContext(ctx context.Context) ClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientOutput)
}

func (i *Client) ToOutput(ctx context.Context) pulumix.Output[*Client] {
	return pulumix.Output[*Client]{
		OutputState: i.ToClientOutputWithContext(ctx).OutputState,
	}
}

// ClientArrayInput is an input type that accepts ClientArray and ClientArrayOutput values.
// You can construct a concrete instance of `ClientArrayInput` via:
//
//	ClientArray{ ClientArgs{...} }
type ClientArrayInput interface {
	pulumi.Input

	ToClientArrayOutput() ClientArrayOutput
	ToClientArrayOutputWithContext(context.Context) ClientArrayOutput
}

type ClientArray []ClientInput

func (ClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Client)(nil)).Elem()
}

func (i ClientArray) ToClientArrayOutput() ClientArrayOutput {
	return i.ToClientArrayOutputWithContext(context.Background())
}

func (i ClientArray) ToClientArrayOutputWithContext(ctx context.Context) ClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientArrayOutput)
}

func (i ClientArray) ToOutput(ctx context.Context) pulumix.Output[[]*Client] {
	return pulumix.Output[[]*Client]{
		OutputState: i.ToClientArrayOutputWithContext(ctx).OutputState,
	}
}

// ClientMapInput is an input type that accepts ClientMap and ClientMapOutput values.
// You can construct a concrete instance of `ClientMapInput` via:
//
//	ClientMap{ "key": ClientArgs{...} }
type ClientMapInput interface {
	pulumi.Input

	ToClientMapOutput() ClientMapOutput
	ToClientMapOutputWithContext(context.Context) ClientMapOutput
}

type ClientMap map[string]ClientInput

func (ClientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Client)(nil)).Elem()
}

func (i ClientMap) ToClientMapOutput() ClientMapOutput {
	return i.ToClientMapOutputWithContext(context.Background())
}

func (i ClientMap) ToClientMapOutputWithContext(ctx context.Context) ClientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientMapOutput)
}

func (i ClientMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Client] {
	return pulumix.Output[map[string]*Client]{
		OutputState: i.ToClientMapOutputWithContext(ctx).OutputState,
	}
}

type ClientOutput struct{ *pulumi.OutputState }

func (ClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Client)(nil)).Elem()
}

func (o ClientOutput) ToClientOutput() ClientOutput {
	return o
}

func (o ClientOutput) ToClientOutputWithContext(ctx context.Context) ClientOutput {
	return o
}

func (o ClientOutput) ToOutput(ctx context.Context) pulumix.Output[*Client] {
	return pulumix.Output[*Client]{
		OutputState: o.OutputState,
	}
}

// The amount of time in seconds before an access token expires. This will override the default for the realm.
func (o ClientOutput) AccessTokenLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.AccessTokenLifespan }).(pulumi.StringOutput)
}

// Specifies the type of client, which can be one of the following:
func (o ClientOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.AccessType }).(pulumi.StringOutput)
}

// URL to the admin interface of the client.
func (o ClientOutput) AdminUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.AdminUrl }).(pulumi.StringOutput)
}

// Override realm authentication flow bindings
func (o ClientOutput) AuthenticationFlowBindingOverrides() ClientAuthenticationFlowBindingOverridesPtrOutput {
	return o.ApplyT(func(v *Client) ClientAuthenticationFlowBindingOverridesPtrOutput {
		return v.AuthenticationFlowBindingOverrides
	}).(ClientAuthenticationFlowBindingOverridesPtrOutput)
}

// When this block is present, fine-grained authorization will be enabled for this client. The client's `accessType` must be `CONFIDENTIAL`, and `serviceAccountsEnabled` must be `true`. This block has the following arguments:
func (o ClientOutput) Authorization() ClientAuthorizationPtrOutput {
	return o.ApplyT(func(v *Client) ClientAuthorizationPtrOutput { return v.Authorization }).(ClientAuthorizationPtrOutput)
}

// Specifying whether a "revokeOfflineAccess" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
func (o ClientOutput) BackchannelLogoutRevokeOfflineSessions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.BackchannelLogoutRevokeOfflineSessions }).(pulumi.BoolPtrOutput)
}

// When `true`, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to `true`.
func (o ClientOutput) BackchannelLogoutSessionRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.BackchannelLogoutSessionRequired }).(pulumi.BoolPtrOutput)
}

// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
func (o ClientOutput) BackchannelLogoutUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.StringPtrOutput { return v.BackchannelLogoutUrl }).(pulumi.StringPtrOutput)
}

// Default URL to use when the auth server needs to redirect or link back to the client.
func (o ClientOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.BaseUrl }).(pulumi.StringOutput)
}

// Defaults to `client-secret` The authenticator type for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. Can be one of the following:
// - `client-secret` (Default) Use client id and client secret to authenticate client.
// - `client-jwt` Use signed JWT to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
// - `client-x509` Use x509 certificate to authenticate client. Set Subject DN in `extraConfig` with `attributes.x509.subjectdn = <subjectDn>`
// - `client-secret-jwt` Use signed JWT with client secret to authenticate client. Set signing algorithm in `extraConfig` with `attributes.token.endpoint.auth.signing.alg = <alg>`
func (o ClientOutput) ClientAuthenticatorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.StringPtrOutput { return v.ClientAuthenticatorType }).(pulumi.StringPtrOutput)
}

// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
func (o ClientOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
func (o ClientOutput) ClientOfflineSessionIdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ClientOfflineSessionIdleTimeout }).(pulumi.StringOutput)
}

// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
func (o ClientOutput) ClientOfflineSessionMaxLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ClientOfflineSessionMaxLifespan }).(pulumi.StringOutput)
}

// The secret for clients with an `accessType` of `CONFIDENTIAL` or `BEARER-ONLY`. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
func (o ClientOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
func (o ClientOutput) ClientSessionIdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ClientSessionIdleTimeout }).(pulumi.StringOutput)
}

// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
func (o ClientOutput) ClientSessionMaxLifespan() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ClientSessionMaxLifespan }).(pulumi.StringOutput)
}

// When `true`, users have to consent to client access. Defaults to `false`.
func (o ClientOutput) ConsentRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.ConsentRequired }).(pulumi.BoolOutput)
}

// The text to display on the consent screen about permissions specific to this client. This is applicable only when `displayOnConsentScreen` is `true`.
func (o ClientOutput) ConsentScreenText() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ConsentScreenText }).(pulumi.StringOutput)
}

// The description of this client in the GUI.
func (o ClientOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// When `true`, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to `false`.
func (o ClientOutput) DirectAccessGrantsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.DirectAccessGrantsEnabled }).(pulumi.BoolOutput)
}

// When `true`, the consent screen will display information about the client itself. Defaults to `false`. This is applicable only when `consentRequired` is `true`.
func (o ClientOutput) DisplayOnConsentScreen() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.DisplayOnConsentScreen }).(pulumi.BoolOutput)
}

// When `false`, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
func (o ClientOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// When `true`, the parameter `sessionState` will not be included in OpenID Connect Authentication Response.
func (o ClientOutput) ExcludeSessionStateFromAuthResponse() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.ExcludeSessionStateFromAuthResponse }).(pulumi.BoolOutput)
}

func (o ClientOutput) ExtraConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *Client) pulumi.MapOutput { return v.ExtraConfig }).(pulumi.MapOutput)
}

// When `true`, frontchannel logout will be enabled for this client. Specify the url with `frontchannelLogoutUrl`. Defaults to `false`.
func (o ClientOutput) FrontchannelLogoutEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.FrontchannelLogoutEnabled }).(pulumi.BoolOutput)
}

// The frontchannel logout url. This is applicable only when `frontchannelLogoutEnabled` is `true`.
func (o ClientOutput) FrontchannelLogoutUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.StringPtrOutput { return v.FrontchannelLogoutUrl }).(pulumi.StringPtrOutput)
}

// Allow to include all roles mappings in the access token.
func (o ClientOutput) FullScopeAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.FullScopeAllowed }).(pulumi.BoolPtrOutput)
}

// When `true`, the OAuth2 Implicit Grant will be enabled for this client. Defaults to `false`.
func (o ClientOutput) ImplicitFlowEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.ImplicitFlowEnabled }).(pulumi.BoolOutput)
}

// When `true`, the client with the specified `clientId` is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as `account` and `admin-cli`. Note, that the client will not be removed during destruction if `import` is `true`.
func (o ClientOutput) Import() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.Import }).(pulumi.BoolPtrOutput)
}

// The client login theme. This will override the default theme for the realm.
func (o ClientOutput) LoginTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.StringPtrOutput { return v.LoginTheme }).(pulumi.StringPtrOutput)
}

// The display name of this client in the GUI.
func (o ClientOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
func (o ClientOutput) Oauth2DeviceAuthorizationGrantEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.Oauth2DeviceAuthorizationGrantEnabled }).(pulumi.BoolPtrOutput)
}

// The maximum amount of time a client has to finish the device code flow before it expires.
func (o ClientOutput) Oauth2DeviceCodeLifespan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.StringPtrOutput { return v.Oauth2DeviceCodeLifespan }).(pulumi.StringPtrOutput)
}

// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
func (o ClientOutput) Oauth2DevicePollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.StringPtrOutput { return v.Oauth2DevicePollingInterval }).(pulumi.StringPtrOutput)
}

// The challenge method to use for Proof Key for Code Exchange. Can be either `plain` or `S256` or set to empty value “.
func (o ClientOutput) PkceCodeChallengeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.StringPtrOutput { return v.PkceCodeChallengeMethod }).(pulumi.StringPtrOutput)
}

// The realm this client is attached to.
func (o ClientOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

// (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the `.id` attribute).
func (o ClientOutput) ResourceServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ResourceServerId }).(pulumi.StringOutput)
}

// When specified, this URL is prepended to any relative URLs found within `validRedirectUris`, `webOrigins`, and `adminUrl`. NOTE: Due to limitations in the Keycloak API, when the `rootUrl` attribute is used, the `validRedirectUris`, `webOrigins`, and `adminUrl` attributes will be required.
func (o ClientOutput) RootUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.RootUrl }).(pulumi.StringOutput)
}

// (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
func (o ClientOutput) ServiceAccountUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Client) pulumi.StringOutput { return v.ServiceAccountUserId }).(pulumi.StringOutput)
}

// When `true`, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to `false`.
func (o ClientOutput) ServiceAccountsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.ServiceAccountsEnabled }).(pulumi.BoolOutput)
}

// When `true`, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to `false`.
func (o ClientOutput) StandardFlowEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolOutput { return v.StandardFlowEnabled }).(pulumi.BoolOutput)
}

// If this is `true`, a refreshToken will be created and added to the token response. If this is `false` then no refreshToken will be generated.  Defaults to `true`.
func (o ClientOutput) UseRefreshTokens() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.UseRefreshTokens }).(pulumi.BoolPtrOutput)
}

// If this is `true`, a refreshToken will be created and added to the token response if the clientCredentials grant is used and a user session will be created. If this is `false` then no refreshToken will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to `false`.
func (o ClientOutput) UseRefreshTokensClientCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Client) pulumi.BoolPtrOutput { return v.UseRefreshTokensClientCredentials }).(pulumi.BoolPtrOutput)
}

// A list of valid URIs a browser is permitted to redirect to after a successful logout.
func (o ClientOutput) ValidPostLogoutRedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Client) pulumi.StringArrayOutput { return v.ValidPostLogoutRedirectUris }).(pulumi.StringArrayOutput)
}

// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
// wildcards in the form of an asterisk can be used here. This attribute must be set if either `standardFlowEnabled` or `implicitFlowEnabled`
// is set to `true`.
func (o ClientOutput) ValidRedirectUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Client) pulumi.StringArrayOutput { return v.ValidRedirectUris }).(pulumi.StringArrayOutput)
}

// A list of allowed CORS origins. To permit all valid redirect URIs, add `+`. Note that this will not include the `*` wildcard. To permit all origins, explicitly add `*`."
func (o ClientOutput) WebOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Client) pulumi.StringArrayOutput { return v.WebOrigins }).(pulumi.StringArrayOutput)
}

type ClientArrayOutput struct{ *pulumi.OutputState }

func (ClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Client)(nil)).Elem()
}

func (o ClientArrayOutput) ToClientArrayOutput() ClientArrayOutput {
	return o
}

func (o ClientArrayOutput) ToClientArrayOutputWithContext(ctx context.Context) ClientArrayOutput {
	return o
}

func (o ClientArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Client] {
	return pulumix.Output[[]*Client]{
		OutputState: o.OutputState,
	}
}

func (o ClientArrayOutput) Index(i pulumi.IntInput) ClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Client {
		return vs[0].([]*Client)[vs[1].(int)]
	}).(ClientOutput)
}

type ClientMapOutput struct{ *pulumi.OutputState }

func (ClientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Client)(nil)).Elem()
}

func (o ClientMapOutput) ToClientMapOutput() ClientMapOutput {
	return o
}

func (o ClientMapOutput) ToClientMapOutputWithContext(ctx context.Context) ClientMapOutput {
	return o
}

func (o ClientMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Client] {
	return pulumix.Output[map[string]*Client]{
		OutputState: o.OutputState,
	}
}

func (o ClientMapOutput) MapIndex(k pulumi.StringInput) ClientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Client {
		return vs[0].(map[string]*Client)[vs[1].(string)]
	}).(ClientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientInput)(nil)).Elem(), &Client{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientArrayInput)(nil)).Elem(), ClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientMapInput)(nil)).Elem(), ClientMap{})
	pulumi.RegisterOutputType(ClientOutput{})
	pulumi.RegisterOutputType(ClientArrayOutput{})
	pulumi.RegisterOutputType(ClientMapOutput{})
}
