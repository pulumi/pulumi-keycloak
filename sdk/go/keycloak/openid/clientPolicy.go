// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can be used to create client policy.
//
// ## Example Usage
//
// In this example, we'll create a new OpenID client, then enabled permissions for the client. A client without permissions disabled cannot be assigned by a client policy. We'll use the `openid.ClientPolicy` resource to create a new client policy, which could be applied to many clients, for a realm and a resource_server_id.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			openidClient, err := openid.NewClient(ctx, "openid_client", &openid.ClientArgs{
//				ClientId:               pulumi.String("openid_client"),
//				Name:                   pulumi.String("openid_client"),
//				RealmId:                realm.ID(),
//				AccessType:             pulumi.String("CONFIDENTIAL"),
//				ServiceAccountsEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewClientPermissions(ctx, "my_permission", &openid.ClientPermissionsArgs{
//				RealmId:  realm.ID(),
//				ClientId: openidClient.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			realmManagement, err := openid.LookupClient(ctx, &openid.LookupClientArgs{
//				RealmId:  "my-realm",
//				ClientId: "realm-management",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewClientPolicy(ctx, "token_exchange", &openid.ClientPolicyArgs{
//				ResourceServerId: pulumi.String(realmManagement.Id),
//				RealmId:          realm.ID(),
//				Name:             pulumi.String("my-policy"),
//				Logic:            pulumi.String("POSITIVE"),
//				DecisionStrategy: pulumi.String("UNANIMOUS"),
//				Clients: pulumi.StringArray{
//					openidClient.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ClientPolicy struct {
	pulumi.CustomResourceState

	// The clients allowed by this client policy.
	Clients pulumi.StringArrayOutput `pulumi:"clients"`
	// (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
	DecisionStrategy pulumi.StringPtrOutput `pulumi:"decisionStrategy"`
	// The description of this client policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
	Logic pulumi.StringPtrOutput `pulumi:"logic"`
	// The name of this client policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm this client policy exists within.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// The ID of the resource server this client policy is attached to.
	ResourceServerId pulumi.StringOutput `pulumi:"resourceServerId"`
}

// NewClientPolicy registers a new resource with the given unique name, arguments, and options.
func NewClientPolicy(ctx *pulumi.Context,
	name string, args *ClientPolicyArgs, opts ...pulumi.ResourceOption) (*ClientPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Clients == nil {
		return nil, errors.New("invalid value for required argument 'Clients'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.ResourceServerId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientPolicy
	err := ctx.RegisterResource("keycloak:openid/clientPolicy:ClientPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientPolicy gets an existing ClientPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientPolicyState, opts ...pulumi.ResourceOption) (*ClientPolicy, error) {
	var resource ClientPolicy
	err := ctx.ReadResource("keycloak:openid/clientPolicy:ClientPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientPolicy resources.
type clientPolicyState struct {
	// The clients allowed by this client policy.
	Clients []string `pulumi:"clients"`
	// (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
	DecisionStrategy *string `pulumi:"decisionStrategy"`
	// The description of this client policy.
	Description *string `pulumi:"description"`
	// (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
	Logic *string `pulumi:"logic"`
	// The name of this client policy.
	Name *string `pulumi:"name"`
	// The realm this client policy exists within.
	RealmId *string `pulumi:"realmId"`
	// The ID of the resource server this client policy is attached to.
	ResourceServerId *string `pulumi:"resourceServerId"`
}

type ClientPolicyState struct {
	// The clients allowed by this client policy.
	Clients pulumi.StringArrayInput
	// (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
	DecisionStrategy pulumi.StringPtrInput
	// The description of this client policy.
	Description pulumi.StringPtrInput
	// (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
	Logic pulumi.StringPtrInput
	// The name of this client policy.
	Name pulumi.StringPtrInput
	// The realm this client policy exists within.
	RealmId pulumi.StringPtrInput
	// The ID of the resource server this client policy is attached to.
	ResourceServerId pulumi.StringPtrInput
}

func (ClientPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientPolicyState)(nil)).Elem()
}

type clientPolicyArgs struct {
	// The clients allowed by this client policy.
	Clients []string `pulumi:"clients"`
	// (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
	DecisionStrategy *string `pulumi:"decisionStrategy"`
	// The description of this client policy.
	Description *string `pulumi:"description"`
	// (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
	Logic *string `pulumi:"logic"`
	// The name of this client policy.
	Name *string `pulumi:"name"`
	// The realm this client policy exists within.
	RealmId string `pulumi:"realmId"`
	// The ID of the resource server this client policy is attached to.
	ResourceServerId string `pulumi:"resourceServerId"`
}

// The set of arguments for constructing a ClientPolicy resource.
type ClientPolicyArgs struct {
	// The clients allowed by this client policy.
	Clients pulumi.StringArrayInput
	// (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
	DecisionStrategy pulumi.StringPtrInput
	// The description of this client policy.
	Description pulumi.StringPtrInput
	// (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
	Logic pulumi.StringPtrInput
	// The name of this client policy.
	Name pulumi.StringPtrInput
	// The realm this client policy exists within.
	RealmId pulumi.StringInput
	// The ID of the resource server this client policy is attached to.
	ResourceServerId pulumi.StringInput
}

func (ClientPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientPolicyArgs)(nil)).Elem()
}

type ClientPolicyInput interface {
	pulumi.Input

	ToClientPolicyOutput() ClientPolicyOutput
	ToClientPolicyOutputWithContext(ctx context.Context) ClientPolicyOutput
}

func (*ClientPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientPolicy)(nil)).Elem()
}

func (i *ClientPolicy) ToClientPolicyOutput() ClientPolicyOutput {
	return i.ToClientPolicyOutputWithContext(context.Background())
}

func (i *ClientPolicy) ToClientPolicyOutputWithContext(ctx context.Context) ClientPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientPolicyOutput)
}

// ClientPolicyArrayInput is an input type that accepts ClientPolicyArray and ClientPolicyArrayOutput values.
// You can construct a concrete instance of `ClientPolicyArrayInput` via:
//
//	ClientPolicyArray{ ClientPolicyArgs{...} }
type ClientPolicyArrayInput interface {
	pulumi.Input

	ToClientPolicyArrayOutput() ClientPolicyArrayOutput
	ToClientPolicyArrayOutputWithContext(context.Context) ClientPolicyArrayOutput
}

type ClientPolicyArray []ClientPolicyInput

func (ClientPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientPolicy)(nil)).Elem()
}

func (i ClientPolicyArray) ToClientPolicyArrayOutput() ClientPolicyArrayOutput {
	return i.ToClientPolicyArrayOutputWithContext(context.Background())
}

func (i ClientPolicyArray) ToClientPolicyArrayOutputWithContext(ctx context.Context) ClientPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientPolicyArrayOutput)
}

// ClientPolicyMapInput is an input type that accepts ClientPolicyMap and ClientPolicyMapOutput values.
// You can construct a concrete instance of `ClientPolicyMapInput` via:
//
//	ClientPolicyMap{ "key": ClientPolicyArgs{...} }
type ClientPolicyMapInput interface {
	pulumi.Input

	ToClientPolicyMapOutput() ClientPolicyMapOutput
	ToClientPolicyMapOutputWithContext(context.Context) ClientPolicyMapOutput
}

type ClientPolicyMap map[string]ClientPolicyInput

func (ClientPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientPolicy)(nil)).Elem()
}

func (i ClientPolicyMap) ToClientPolicyMapOutput() ClientPolicyMapOutput {
	return i.ToClientPolicyMapOutputWithContext(context.Background())
}

func (i ClientPolicyMap) ToClientPolicyMapOutputWithContext(ctx context.Context) ClientPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientPolicyMapOutput)
}

type ClientPolicyOutput struct{ *pulumi.OutputState }

func (ClientPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientPolicy)(nil)).Elem()
}

func (o ClientPolicyOutput) ToClientPolicyOutput() ClientPolicyOutput {
	return o
}

func (o ClientPolicyOutput) ToClientPolicyOutputWithContext(ctx context.Context) ClientPolicyOutput {
	return o
}

// The clients allowed by this client policy.
func (o ClientPolicyOutput) Clients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClientPolicy) pulumi.StringArrayOutput { return v.Clients }).(pulumi.StringArrayOutput)
}

// (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of `AFFIRMATIVE`, `CONSENSUS`, or `UNANIMOUS`. Applies to permissions.
func (o ClientPolicyOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientPolicy) pulumi.StringPtrOutput { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

// The description of this client policy.
func (o ClientPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Computed) Dictates how the policy decision should be made. Can be either `POSITIVE` or `NEGATIVE`. Applies to policies.
func (o ClientPolicyOutput) Logic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientPolicy) pulumi.StringPtrOutput { return v.Logic }).(pulumi.StringPtrOutput)
}

// The name of this client policy.
func (o ClientPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm this client policy exists within.
func (o ClientPolicyOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientPolicy) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

// The ID of the resource server this client policy is attached to.
func (o ClientPolicyOutput) ResourceServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientPolicy) pulumi.StringOutput { return v.ResourceServerId }).(pulumi.StringOutput)
}

type ClientPolicyArrayOutput struct{ *pulumi.OutputState }

func (ClientPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientPolicy)(nil)).Elem()
}

func (o ClientPolicyArrayOutput) ToClientPolicyArrayOutput() ClientPolicyArrayOutput {
	return o
}

func (o ClientPolicyArrayOutput) ToClientPolicyArrayOutputWithContext(ctx context.Context) ClientPolicyArrayOutput {
	return o
}

func (o ClientPolicyArrayOutput) Index(i pulumi.IntInput) ClientPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientPolicy {
		return vs[0].([]*ClientPolicy)[vs[1].(int)]
	}).(ClientPolicyOutput)
}

type ClientPolicyMapOutput struct{ *pulumi.OutputState }

func (ClientPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientPolicy)(nil)).Elem()
}

func (o ClientPolicyMapOutput) ToClientPolicyMapOutput() ClientPolicyMapOutput {
	return o
}

func (o ClientPolicyMapOutput) ToClientPolicyMapOutputWithContext(ctx context.Context) ClientPolicyMapOutput {
	return o
}

func (o ClientPolicyMapOutput) MapIndex(k pulumi.StringInput) ClientPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientPolicy {
		return vs[0].(map[string]*ClientPolicy)[vs[1].(string)]
	}).(ClientPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientPolicyInput)(nil)).Elem(), &ClientPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientPolicyArrayInput)(nil)).Elem(), ClientPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientPolicyMapInput)(nil)).Elem(), ClientPolicyMap{})
	pulumi.RegisterOutputType(ClientPolicyOutput{})
	pulumi.RegisterOutputType(ClientPolicyArrayOutput{})
	pulumi.RegisterOutputType(ClientPolicyMapOutput{})
}
