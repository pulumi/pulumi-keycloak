// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # openid.HardcodedRoleProtocolMapper
//
// Allows for creating and managing hardcoded role protocol mappers within
// Keycloak.
//
// Hardcoded role protocol mappers allow you to specify a single role to
// always map to an access token for a client. Protocol mappers can be
// defined for a single client, or they can be defined for a client scope
// which can be shared between multiple different clients.
//
// ### Example Usage (Client)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			role, err := keycloak.NewRole(ctx, "role", &keycloak.RoleArgs{
//				RealmId: realm.ID(),
//				Name:    pulumi.String("my-role"),
//			})
//			if err != nil {
//				return err
//			}
//			openidClient, err := openid.NewClient(ctx, "openid_client", &openid.ClientArgs{
//				RealmId:    realm.ID(),
//				ClientId:   pulumi.String("test-client"),
//				Name:       pulumi.String("test client"),
//				Enabled:    pulumi.Bool(true),
//				AccessType: pulumi.String("CONFIDENTIAL"),
//				ValidRedirectUris: pulumi.StringArray{
//					pulumi.String("http://localhost:8080/openid-callback"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewHardcodedRoleProtocolMapper(ctx, "hardcoded_role_mapper", &openid.HardcodedRoleProtocolMapperArgs{
//				RealmId:  realm.ID(),
//				ClientId: openidClient.ID(),
//				Name:     pulumi.String("hardcoded-role-mapper"),
//				RoleId:   role.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Usage (Client Scope)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			role, err := keycloak.NewRole(ctx, "role", &keycloak.RoleArgs{
//				RealmId: realm.ID(),
//				Name:    pulumi.String("my-role"),
//			})
//			if err != nil {
//				return err
//			}
//			clientScope, err := openid.NewClientScope(ctx, "client_scope", &openid.ClientScopeArgs{
//				RealmId: realm.ID(),
//				Name:    pulumi.String("test-client-scope"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewHardcodedRoleProtocolMapper(ctx, "hardcoded_role_mapper", &openid.HardcodedRoleProtocolMapperArgs{
//				RealmId:       realm.ID(),
//				ClientScopeId: clientScope.ID(),
//				Name:          pulumi.String("hardcoded-role-mapper"),
//				RoleId:        role.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Argument Reference
//
// The following arguments are supported:
//
//   - `realmId` - (Required) The realm this protocol mapper exists within.
//   - `clientId` - (Required if `clientScopeId` is not specified) The client this protocol mapper is attached to.
//   - `clientScopeId` - (Required if `clientId` is not specified) The client scope this protocol mapper is attached to.
//   - `name` - (Required) The display name of this protocol mapper in the
//     GUI.
//   - `roleId` - (Required) The ID of the role to map to an access token.
//
// ### Import
//
// Protocol mappers can be imported using one of the following formats:
// - Client: `{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}`
// - Client Scope: `{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}`
//
// Example:
type HardcodedRoleProtocolMapper struct {
	pulumi.CustomResourceState

	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrOutput `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	RoleId  pulumi.StringOutput `pulumi:"roleId"`
}

// NewHardcodedRoleProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewHardcodedRoleProtocolMapper(ctx *pulumi.Context,
	name string, args *HardcodedRoleProtocolMapperArgs, opts ...pulumi.ResourceOption) (*HardcodedRoleProtocolMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HardcodedRoleProtocolMapper
	err := ctx.RegisterResource("keycloak:openid/hardcodedRoleProtocolMapper:HardcodedRoleProtocolMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHardcodedRoleProtocolMapper gets an existing HardcodedRoleProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHardcodedRoleProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HardcodedRoleProtocolMapperState, opts ...pulumi.ResourceOption) (*HardcodedRoleProtocolMapper, error) {
	var resource HardcodedRoleProtocolMapper
	err := ctx.ReadResource("keycloak:openid/hardcodedRoleProtocolMapper:HardcodedRoleProtocolMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HardcodedRoleProtocolMapper resources.
type hardcodedRoleProtocolMapperState struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId *string `pulumi:"realmId"`
	RoleId  *string `pulumi:"roleId"`
}

type HardcodedRoleProtocolMapperState struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringPtrInput
	RoleId  pulumi.StringPtrInput
}

func (HardcodedRoleProtocolMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedRoleProtocolMapperState)(nil)).Elem()
}

type hardcodedRoleProtocolMapperArgs struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId *string `pulumi:"clientId"`
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// A human-friendly name that will appear in the Keycloak console.
	Name *string `pulumi:"name"`
	// The realm id where the associated client or client scope exists.
	RealmId string `pulumi:"realmId"`
	RoleId  string `pulumi:"roleId"`
}

// The set of arguments for constructing a HardcodedRoleProtocolMapper resource.
type HardcodedRoleProtocolMapperArgs struct {
	// The mapper's associated client. Cannot be used at the same time as client_scope_id.
	ClientId pulumi.StringPtrInput
	// The mapper's associated client scope. Cannot be used at the same time as client_id.
	ClientScopeId pulumi.StringPtrInput
	// A human-friendly name that will appear in the Keycloak console.
	Name pulumi.StringPtrInput
	// The realm id where the associated client or client scope exists.
	RealmId pulumi.StringInput
	RoleId  pulumi.StringInput
}

func (HardcodedRoleProtocolMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedRoleProtocolMapperArgs)(nil)).Elem()
}

type HardcodedRoleProtocolMapperInput interface {
	pulumi.Input

	ToHardcodedRoleProtocolMapperOutput() HardcodedRoleProtocolMapperOutput
	ToHardcodedRoleProtocolMapperOutputWithContext(ctx context.Context) HardcodedRoleProtocolMapperOutput
}

func (*HardcodedRoleProtocolMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedRoleProtocolMapper)(nil)).Elem()
}

func (i *HardcodedRoleProtocolMapper) ToHardcodedRoleProtocolMapperOutput() HardcodedRoleProtocolMapperOutput {
	return i.ToHardcodedRoleProtocolMapperOutputWithContext(context.Background())
}

func (i *HardcodedRoleProtocolMapper) ToHardcodedRoleProtocolMapperOutputWithContext(ctx context.Context) HardcodedRoleProtocolMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedRoleProtocolMapperOutput)
}

// HardcodedRoleProtocolMapperArrayInput is an input type that accepts HardcodedRoleProtocolMapperArray and HardcodedRoleProtocolMapperArrayOutput values.
// You can construct a concrete instance of `HardcodedRoleProtocolMapperArrayInput` via:
//
//	HardcodedRoleProtocolMapperArray{ HardcodedRoleProtocolMapperArgs{...} }
type HardcodedRoleProtocolMapperArrayInput interface {
	pulumi.Input

	ToHardcodedRoleProtocolMapperArrayOutput() HardcodedRoleProtocolMapperArrayOutput
	ToHardcodedRoleProtocolMapperArrayOutputWithContext(context.Context) HardcodedRoleProtocolMapperArrayOutput
}

type HardcodedRoleProtocolMapperArray []HardcodedRoleProtocolMapperInput

func (HardcodedRoleProtocolMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedRoleProtocolMapper)(nil)).Elem()
}

func (i HardcodedRoleProtocolMapperArray) ToHardcodedRoleProtocolMapperArrayOutput() HardcodedRoleProtocolMapperArrayOutput {
	return i.ToHardcodedRoleProtocolMapperArrayOutputWithContext(context.Background())
}

func (i HardcodedRoleProtocolMapperArray) ToHardcodedRoleProtocolMapperArrayOutputWithContext(ctx context.Context) HardcodedRoleProtocolMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedRoleProtocolMapperArrayOutput)
}

// HardcodedRoleProtocolMapperMapInput is an input type that accepts HardcodedRoleProtocolMapperMap and HardcodedRoleProtocolMapperMapOutput values.
// You can construct a concrete instance of `HardcodedRoleProtocolMapperMapInput` via:
//
//	HardcodedRoleProtocolMapperMap{ "key": HardcodedRoleProtocolMapperArgs{...} }
type HardcodedRoleProtocolMapperMapInput interface {
	pulumi.Input

	ToHardcodedRoleProtocolMapperMapOutput() HardcodedRoleProtocolMapperMapOutput
	ToHardcodedRoleProtocolMapperMapOutputWithContext(context.Context) HardcodedRoleProtocolMapperMapOutput
}

type HardcodedRoleProtocolMapperMap map[string]HardcodedRoleProtocolMapperInput

func (HardcodedRoleProtocolMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedRoleProtocolMapper)(nil)).Elem()
}

func (i HardcodedRoleProtocolMapperMap) ToHardcodedRoleProtocolMapperMapOutput() HardcodedRoleProtocolMapperMapOutput {
	return i.ToHardcodedRoleProtocolMapperMapOutputWithContext(context.Background())
}

func (i HardcodedRoleProtocolMapperMap) ToHardcodedRoleProtocolMapperMapOutputWithContext(ctx context.Context) HardcodedRoleProtocolMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedRoleProtocolMapperMapOutput)
}

type HardcodedRoleProtocolMapperOutput struct{ *pulumi.OutputState }

func (HardcodedRoleProtocolMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedRoleProtocolMapper)(nil)).Elem()
}

func (o HardcodedRoleProtocolMapperOutput) ToHardcodedRoleProtocolMapperOutput() HardcodedRoleProtocolMapperOutput {
	return o
}

func (o HardcodedRoleProtocolMapperOutput) ToHardcodedRoleProtocolMapperOutputWithContext(ctx context.Context) HardcodedRoleProtocolMapperOutput {
	return o
}

// The mapper's associated client. Cannot be used at the same time as client_scope_id.
func (o HardcodedRoleProtocolMapperOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedRoleProtocolMapper) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The mapper's associated client scope. Cannot be used at the same time as client_id.
func (o HardcodedRoleProtocolMapperOutput) ClientScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedRoleProtocolMapper) pulumi.StringPtrOutput { return v.ClientScopeId }).(pulumi.StringPtrOutput)
}

// A human-friendly name that will appear in the Keycloak console.
func (o HardcodedRoleProtocolMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedRoleProtocolMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm id where the associated client or client scope exists.
func (o HardcodedRoleProtocolMapperOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedRoleProtocolMapper) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

func (o HardcodedRoleProtocolMapperOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedRoleProtocolMapper) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type HardcodedRoleProtocolMapperArrayOutput struct{ *pulumi.OutputState }

func (HardcodedRoleProtocolMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedRoleProtocolMapper)(nil)).Elem()
}

func (o HardcodedRoleProtocolMapperArrayOutput) ToHardcodedRoleProtocolMapperArrayOutput() HardcodedRoleProtocolMapperArrayOutput {
	return o
}

func (o HardcodedRoleProtocolMapperArrayOutput) ToHardcodedRoleProtocolMapperArrayOutputWithContext(ctx context.Context) HardcodedRoleProtocolMapperArrayOutput {
	return o
}

func (o HardcodedRoleProtocolMapperArrayOutput) Index(i pulumi.IntInput) HardcodedRoleProtocolMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HardcodedRoleProtocolMapper {
		return vs[0].([]*HardcodedRoleProtocolMapper)[vs[1].(int)]
	}).(HardcodedRoleProtocolMapperOutput)
}

type HardcodedRoleProtocolMapperMapOutput struct{ *pulumi.OutputState }

func (HardcodedRoleProtocolMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedRoleProtocolMapper)(nil)).Elem()
}

func (o HardcodedRoleProtocolMapperMapOutput) ToHardcodedRoleProtocolMapperMapOutput() HardcodedRoleProtocolMapperMapOutput {
	return o
}

func (o HardcodedRoleProtocolMapperMapOutput) ToHardcodedRoleProtocolMapperMapOutputWithContext(ctx context.Context) HardcodedRoleProtocolMapperMapOutput {
	return o
}

func (o HardcodedRoleProtocolMapperMapOutput) MapIndex(k pulumi.StringInput) HardcodedRoleProtocolMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HardcodedRoleProtocolMapper {
		return vs[0].(map[string]*HardcodedRoleProtocolMapper)[vs[1].(string)]
	}).(HardcodedRoleProtocolMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedRoleProtocolMapperInput)(nil)).Elem(), &HardcodedRoleProtocolMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedRoleProtocolMapperArrayInput)(nil)).Elem(), HardcodedRoleProtocolMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedRoleProtocolMapperMapInput)(nil)).Elem(), HardcodedRoleProtocolMapperMap{})
	pulumi.RegisterOutputType(HardcodedRoleProtocolMapperOutput{})
	pulumi.RegisterOutputType(HardcodedRoleProtocolMapperArrayOutput{})
	pulumi.RegisterOutputType(HardcodedRoleProtocolMapperMapOutput{})
}
