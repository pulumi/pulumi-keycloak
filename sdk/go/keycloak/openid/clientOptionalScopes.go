// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.
type ClientOptionalScopes struct {
	pulumi.CustomResourceState

	// The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// An array of client scope names to attach to this client as optional scopes.
	OptionalScopes pulumi.StringArrayOutput `pulumi:"optionalScopes"`
	// The realm this client and scopes exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewClientOptionalScopes registers a new resource with the given unique name, arguments, and options.
func NewClientOptionalScopes(ctx *pulumi.Context,
	name string, args *ClientOptionalScopesArgs, opts ...pulumi.ResourceOption) (*ClientOptionalScopes, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.OptionalScopes == nil {
		return nil, errors.New("missing required argument 'OptionalScopes'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &ClientOptionalScopesArgs{}
	}
	var resource ClientOptionalScopes
	err := ctx.RegisterResource("keycloak:openid/clientOptionalScopes:ClientOptionalScopes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientOptionalScopes gets an existing ClientOptionalScopes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientOptionalScopes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientOptionalScopesState, opts ...pulumi.ResourceOption) (*ClientOptionalScopes, error) {
	var resource ClientOptionalScopes
	err := ctx.ReadResource("keycloak:openid/clientOptionalScopes:ClientOptionalScopes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientOptionalScopes resources.
type clientOptionalScopesState struct {
	// The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId *string `pulumi:"clientId"`
	// An array of client scope names to attach to this client as optional scopes.
	OptionalScopes []string `pulumi:"optionalScopes"`
	// The realm this client and scopes exists in.
	RealmId *string `pulumi:"realmId"`
}

type ClientOptionalScopesState struct {
	// The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId pulumi.StringPtrInput
	// An array of client scope names to attach to this client as optional scopes.
	OptionalScopes pulumi.StringArrayInput
	// The realm this client and scopes exists in.
	RealmId pulumi.StringPtrInput
}

func (ClientOptionalScopesState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientOptionalScopesState)(nil)).Elem()
}

type clientOptionalScopesArgs struct {
	// The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId string `pulumi:"clientId"`
	// An array of client scope names to attach to this client as optional scopes.
	OptionalScopes []string `pulumi:"optionalScopes"`
	// The realm this client and scopes exists in.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a ClientOptionalScopes resource.
type ClientOptionalScopesArgs struct {
	// The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId pulumi.StringInput
	// An array of client scope names to attach to this client as optional scopes.
	OptionalScopes pulumi.StringArrayInput
	// The realm this client and scopes exists in.
	RealmId pulumi.StringInput
}

func (ClientOptionalScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientOptionalScopesArgs)(nil)).Elem()
}

type ClientOptionalScopesInput interface {
	pulumi.Input

	ToClientOptionalScopesOutput() ClientOptionalScopesOutput
	ToClientOptionalScopesOutputWithContext(ctx context.Context) ClientOptionalScopesOutput
}

func (ClientOptionalScopes) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientOptionalScopes)(nil)).Elem()
}

func (i ClientOptionalScopes) ToClientOptionalScopesOutput() ClientOptionalScopesOutput {
	return i.ToClientOptionalScopesOutputWithContext(context.Background())
}

func (i ClientOptionalScopes) ToClientOptionalScopesOutputWithContext(ctx context.Context) ClientOptionalScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientOptionalScopesOutput)
}

type ClientOptionalScopesOutput struct {
	*pulumi.OutputState
}

func (ClientOptionalScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientOptionalScopesOutput)(nil)).Elem()
}

func (o ClientOptionalScopesOutput) ToClientOptionalScopesOutput() ClientOptionalScopesOutput {
	return o
}

func (o ClientOptionalScopesOutput) ToClientOptionalScopesOutputWithContext(ctx context.Context) ClientOptionalScopesOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClientOptionalScopesOutput{})
}
