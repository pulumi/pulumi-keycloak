// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ClientUserPolicy struct {
	pulumi.CustomResourceState

	DecisionStrategy pulumi.StringOutput      `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrOutput   `pulumi:"description"`
	Logic            pulumi.StringPtrOutput   `pulumi:"logic"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	RealmId          pulumi.StringOutput      `pulumi:"realmId"`
	ResourceServerId pulumi.StringOutput      `pulumi:"resourceServerId"`
	Users            pulumi.StringArrayOutput `pulumi:"users"`
}

// NewClientUserPolicy registers a new resource with the given unique name, arguments, and options.
func NewClientUserPolicy(ctx *pulumi.Context,
	name string, args *ClientUserPolicyArgs, opts ...pulumi.ResourceOption) (*ClientUserPolicy, error) {
	if args == nil || args.DecisionStrategy == nil {
		return nil, errors.New("missing required argument 'DecisionStrategy'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.ResourceServerId == nil {
		return nil, errors.New("missing required argument 'ResourceServerId'")
	}
	if args == nil || args.Users == nil {
		return nil, errors.New("missing required argument 'Users'")
	}
	if args == nil {
		args = &ClientUserPolicyArgs{}
	}
	var resource ClientUserPolicy
	err := ctx.RegisterResource("keycloak:openid/clientUserPolicy:ClientUserPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientUserPolicy gets an existing ClientUserPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientUserPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientUserPolicyState, opts ...pulumi.ResourceOption) (*ClientUserPolicy, error) {
	var resource ClientUserPolicy
	err := ctx.ReadResource("keycloak:openid/clientUserPolicy:ClientUserPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientUserPolicy resources.
type clientUserPolicyState struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Logic            *string  `pulumi:"logic"`
	Name             *string  `pulumi:"name"`
	RealmId          *string  `pulumi:"realmId"`
	ResourceServerId *string  `pulumi:"resourceServerId"`
	Users            []string `pulumi:"users"`
}

type ClientUserPolicyState struct {
	DecisionStrategy pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Logic            pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	RealmId          pulumi.StringPtrInput
	ResourceServerId pulumi.StringPtrInput
	Users            pulumi.StringArrayInput
}

func (ClientUserPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientUserPolicyState)(nil)).Elem()
}

type clientUserPolicyArgs struct {
	DecisionStrategy string   `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Logic            *string  `pulumi:"logic"`
	Name             *string  `pulumi:"name"`
	RealmId          string   `pulumi:"realmId"`
	ResourceServerId string   `pulumi:"resourceServerId"`
	Users            []string `pulumi:"users"`
}

// The set of arguments for constructing a ClientUserPolicy resource.
type ClientUserPolicyArgs struct {
	DecisionStrategy pulumi.StringInput
	Description      pulumi.StringPtrInput
	Logic            pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	RealmId          pulumi.StringInput
	ResourceServerId pulumi.StringInput
	Users            pulumi.StringArrayInput
}

func (ClientUserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientUserPolicyArgs)(nil)).Elem()
}
