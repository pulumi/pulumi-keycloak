// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for creating and managing sub protocol mappers within Keycloak.
//
// Sub protocol mappers add the Subject (sub) claim to tokens. The sub claim contains the user ID and is a standard claim in OpenID Connect tokens.
//
// Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between
// multiple different clients.
//
// ## Example Usage
//
// ### Client)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			openidClient, err := openid.NewClient(ctx, "openid_client", &openid.ClientArgs{
//				RealmId:    realm.ID(),
//				ClientId:   pulumi.String("client"),
//				Name:       pulumi.String("client"),
//				Enabled:    pulumi.Bool(true),
//				AccessType: pulumi.String("CONFIDENTIAL"),
//				ValidRedirectUris: pulumi.StringArray{
//					pulumi.String("http://localhost:8080/openid-callback"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewSubProtocolMapper(ctx, "sub_mapper", &openid.SubProtocolMapperArgs{
//				RealmId:  realm.ID(),
//				ClientId: openidClient.ID(),
//				Name:     pulumi.String("sub-mapper"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Client Scope)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/openid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			clientScope, err := openid.NewClientScope(ctx, "client_scope", &openid.ClientScopeArgs{
//				RealmId: realm.ID(),
//				Name:    pulumi.String("client-scope"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = openid.NewSubProtocolMapper(ctx, "sub_mapper", &openid.SubProtocolMapperArgs{
//				RealmId:       realm.ID(),
//				ClientScopeId: clientScope.ID(),
//				Name:          pulumi.String("sub-mapper"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Protocol mappers can be imported using one of the following formats:
//
// - Client: `{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}`
//
// - Client Scope: `{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}`
//
// Example:
//
// bash
//
// ```sh
// $ pulumi import keycloak:openid/subProtocolMapper:SubProtocolMapper sub_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4
// ```
//
// ```sh
// $ pulumi import keycloak:openid/subProtocolMapper:SubProtocolMapper sub_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4
// ```
type SubProtocolMapper struct {
	pulumi.CustomResourceState

	// Indicates if the sub claim should be added to the access token. Defaults to `true`.
	AddToAccessToken pulumi.BoolPtrOutput `pulumi:"addToAccessToken"`
	// Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
	AddToTokenIntrospection pulumi.BoolPtrOutput `pulumi:"addToTokenIntrospection"`
	// The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
	ClientScopeId pulumi.StringPtrOutput `pulumi:"clientScopeId"`
	// The display name of this protocol mapper in the GUI.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm this protocol mapper exists within.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewSubProtocolMapper registers a new resource with the given unique name, arguments, and options.
func NewSubProtocolMapper(ctx *pulumi.Context,
	name string, args *SubProtocolMapperArgs, opts ...pulumi.ResourceOption) (*SubProtocolMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubProtocolMapper
	err := ctx.RegisterResource("keycloak:openid/subProtocolMapper:SubProtocolMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubProtocolMapper gets an existing SubProtocolMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubProtocolMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubProtocolMapperState, opts ...pulumi.ResourceOption) (*SubProtocolMapper, error) {
	var resource SubProtocolMapper
	err := ctx.ReadResource("keycloak:openid/subProtocolMapper:SubProtocolMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubProtocolMapper resources.
type subProtocolMapperState struct {
	// Indicates if the sub claim should be added to the access token. Defaults to `true`.
	AddToAccessToken *bool `pulumi:"addToAccessToken"`
	// Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
	AddToTokenIntrospection *bool `pulumi:"addToTokenIntrospection"`
	// The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
	ClientId *string `pulumi:"clientId"`
	// The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// The display name of this protocol mapper in the GUI.
	Name *string `pulumi:"name"`
	// The realm this protocol mapper exists within.
	RealmId *string `pulumi:"realmId"`
}

type SubProtocolMapperState struct {
	// Indicates if the sub claim should be added to the access token. Defaults to `true`.
	AddToAccessToken pulumi.BoolPtrInput
	// Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
	AddToTokenIntrospection pulumi.BoolPtrInput
	// The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
	ClientId pulumi.StringPtrInput
	// The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
	ClientScopeId pulumi.StringPtrInput
	// The display name of this protocol mapper in the GUI.
	Name pulumi.StringPtrInput
	// The realm this protocol mapper exists within.
	RealmId pulumi.StringPtrInput
}

func (SubProtocolMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*subProtocolMapperState)(nil)).Elem()
}

type subProtocolMapperArgs struct {
	// Indicates if the sub claim should be added to the access token. Defaults to `true`.
	AddToAccessToken *bool `pulumi:"addToAccessToken"`
	// Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
	AddToTokenIntrospection *bool `pulumi:"addToTokenIntrospection"`
	// The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
	ClientId *string `pulumi:"clientId"`
	// The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
	ClientScopeId *string `pulumi:"clientScopeId"`
	// The display name of this protocol mapper in the GUI.
	Name *string `pulumi:"name"`
	// The realm this protocol mapper exists within.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a SubProtocolMapper resource.
type SubProtocolMapperArgs struct {
	// Indicates if the sub claim should be added to the access token. Defaults to `true`.
	AddToAccessToken pulumi.BoolPtrInput
	// Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
	AddToTokenIntrospection pulumi.BoolPtrInput
	// The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
	ClientId pulumi.StringPtrInput
	// The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
	ClientScopeId pulumi.StringPtrInput
	// The display name of this protocol mapper in the GUI.
	Name pulumi.StringPtrInput
	// The realm this protocol mapper exists within.
	RealmId pulumi.StringInput
}

func (SubProtocolMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subProtocolMapperArgs)(nil)).Elem()
}

type SubProtocolMapperInput interface {
	pulumi.Input

	ToSubProtocolMapperOutput() SubProtocolMapperOutput
	ToSubProtocolMapperOutputWithContext(ctx context.Context) SubProtocolMapperOutput
}

func (*SubProtocolMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**SubProtocolMapper)(nil)).Elem()
}

func (i *SubProtocolMapper) ToSubProtocolMapperOutput() SubProtocolMapperOutput {
	return i.ToSubProtocolMapperOutputWithContext(context.Background())
}

func (i *SubProtocolMapper) ToSubProtocolMapperOutputWithContext(ctx context.Context) SubProtocolMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubProtocolMapperOutput)
}

// SubProtocolMapperArrayInput is an input type that accepts SubProtocolMapperArray and SubProtocolMapperArrayOutput values.
// You can construct a concrete instance of `SubProtocolMapperArrayInput` via:
//
//	SubProtocolMapperArray{ SubProtocolMapperArgs{...} }
type SubProtocolMapperArrayInput interface {
	pulumi.Input

	ToSubProtocolMapperArrayOutput() SubProtocolMapperArrayOutput
	ToSubProtocolMapperArrayOutputWithContext(context.Context) SubProtocolMapperArrayOutput
}

type SubProtocolMapperArray []SubProtocolMapperInput

func (SubProtocolMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubProtocolMapper)(nil)).Elem()
}

func (i SubProtocolMapperArray) ToSubProtocolMapperArrayOutput() SubProtocolMapperArrayOutput {
	return i.ToSubProtocolMapperArrayOutputWithContext(context.Background())
}

func (i SubProtocolMapperArray) ToSubProtocolMapperArrayOutputWithContext(ctx context.Context) SubProtocolMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubProtocolMapperArrayOutput)
}

// SubProtocolMapperMapInput is an input type that accepts SubProtocolMapperMap and SubProtocolMapperMapOutput values.
// You can construct a concrete instance of `SubProtocolMapperMapInput` via:
//
//	SubProtocolMapperMap{ "key": SubProtocolMapperArgs{...} }
type SubProtocolMapperMapInput interface {
	pulumi.Input

	ToSubProtocolMapperMapOutput() SubProtocolMapperMapOutput
	ToSubProtocolMapperMapOutputWithContext(context.Context) SubProtocolMapperMapOutput
}

type SubProtocolMapperMap map[string]SubProtocolMapperInput

func (SubProtocolMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubProtocolMapper)(nil)).Elem()
}

func (i SubProtocolMapperMap) ToSubProtocolMapperMapOutput() SubProtocolMapperMapOutput {
	return i.ToSubProtocolMapperMapOutputWithContext(context.Background())
}

func (i SubProtocolMapperMap) ToSubProtocolMapperMapOutputWithContext(ctx context.Context) SubProtocolMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubProtocolMapperMapOutput)
}

type SubProtocolMapperOutput struct{ *pulumi.OutputState }

func (SubProtocolMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubProtocolMapper)(nil)).Elem()
}

func (o SubProtocolMapperOutput) ToSubProtocolMapperOutput() SubProtocolMapperOutput {
	return o
}

func (o SubProtocolMapperOutput) ToSubProtocolMapperOutputWithContext(ctx context.Context) SubProtocolMapperOutput {
	return o
}

// Indicates if the sub claim should be added to the access token. Defaults to `true`.
func (o SubProtocolMapperOutput) AddToAccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubProtocolMapper) pulumi.BoolPtrOutput { return v.AddToAccessToken }).(pulumi.BoolPtrOutput)
}

// Indicates if the sub claim should be added to the token introspection response. Defaults to `true`.
func (o SubProtocolMapperOutput) AddToTokenIntrospection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubProtocolMapper) pulumi.BoolPtrOutput { return v.AddToTokenIntrospection }).(pulumi.BoolPtrOutput)
}

// The client this protocol mapper should be attached to. Conflicts with `clientScopeId`. One of `clientId` or `clientScopeId` must be specified.
func (o SubProtocolMapperOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubProtocolMapper) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client scope this protocol mapper should be attached to. Conflicts with `clientId`. One of `clientId` or `clientScopeId` must be specified.
func (o SubProtocolMapperOutput) ClientScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubProtocolMapper) pulumi.StringPtrOutput { return v.ClientScopeId }).(pulumi.StringPtrOutput)
}

// The display name of this protocol mapper in the GUI.
func (o SubProtocolMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubProtocolMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm this protocol mapper exists within.
func (o SubProtocolMapperOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubProtocolMapper) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type SubProtocolMapperArrayOutput struct{ *pulumi.OutputState }

func (SubProtocolMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubProtocolMapper)(nil)).Elem()
}

func (o SubProtocolMapperArrayOutput) ToSubProtocolMapperArrayOutput() SubProtocolMapperArrayOutput {
	return o
}

func (o SubProtocolMapperArrayOutput) ToSubProtocolMapperArrayOutputWithContext(ctx context.Context) SubProtocolMapperArrayOutput {
	return o
}

func (o SubProtocolMapperArrayOutput) Index(i pulumi.IntInput) SubProtocolMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubProtocolMapper {
		return vs[0].([]*SubProtocolMapper)[vs[1].(int)]
	}).(SubProtocolMapperOutput)
}

type SubProtocolMapperMapOutput struct{ *pulumi.OutputState }

func (SubProtocolMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubProtocolMapper)(nil)).Elem()
}

func (o SubProtocolMapperMapOutput) ToSubProtocolMapperMapOutput() SubProtocolMapperMapOutput {
	return o
}

func (o SubProtocolMapperMapOutput) ToSubProtocolMapperMapOutputWithContext(ctx context.Context) SubProtocolMapperMapOutput {
	return o
}

func (o SubProtocolMapperMapOutput) MapIndex(k pulumi.StringInput) SubProtocolMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubProtocolMapper {
		return vs[0].(map[string]*SubProtocolMapper)[vs[1].(string)]
	}).(SubProtocolMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubProtocolMapperInput)(nil)).Elem(), &SubProtocolMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubProtocolMapperArrayInput)(nil)).Elem(), SubProtocolMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubProtocolMapperMapInput)(nil)).Elem(), SubProtocolMapperMap{})
	pulumi.RegisterOutputType(SubProtocolMapperOutput{})
	pulumi.RegisterOutputType(SubProtocolMapperArrayOutput{})
	pulumi.RegisterOutputType(SubProtocolMapperMapOutput{})
}
