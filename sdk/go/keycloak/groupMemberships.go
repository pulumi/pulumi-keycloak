// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.
type GroupMemberships struct {
	pulumi.CustomResourceState

	// The ID of the group this resource should manage memberships for.
	GroupId pulumi.StringPtrOutput `pulumi:"groupId"`
	// A list of usernames that belong to this group.
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The realm this group exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewGroupMemberships registers a new resource with the given unique name, arguments, and options.
func NewGroupMemberships(ctx *pulumi.Context,
	name string, args *GroupMembershipsArgs, opts ...pulumi.ResourceOption) (*GroupMemberships, error) {
	if args == nil || args.Members == nil {
		return nil, errors.New("missing required argument 'Members'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &GroupMembershipsArgs{}
	}
	var resource GroupMemberships
	err := ctx.RegisterResource("keycloak:index/groupMemberships:GroupMemberships", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMemberships gets an existing GroupMemberships resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMemberships(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMembershipsState, opts ...pulumi.ResourceOption) (*GroupMemberships, error) {
	var resource GroupMemberships
	err := ctx.ReadResource("keycloak:index/groupMemberships:GroupMemberships", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMemberships resources.
type groupMembershipsState struct {
	// The ID of the group this resource should manage memberships for.
	GroupId *string `pulumi:"groupId"`
	// A list of usernames that belong to this group.
	Members []string `pulumi:"members"`
	// The realm this group exists in.
	RealmId *string `pulumi:"realmId"`
}

type GroupMembershipsState struct {
	// The ID of the group this resource should manage memberships for.
	GroupId pulumi.StringPtrInput
	// A list of usernames that belong to this group.
	Members pulumi.StringArrayInput
	// The realm this group exists in.
	RealmId pulumi.StringPtrInput
}

func (GroupMembershipsState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipsState)(nil)).Elem()
}

type groupMembershipsArgs struct {
	// The ID of the group this resource should manage memberships for.
	GroupId *string `pulumi:"groupId"`
	// A list of usernames that belong to this group.
	Members []string `pulumi:"members"`
	// The realm this group exists in.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a GroupMemberships resource.
type GroupMembershipsArgs struct {
	// The ID of the group this resource should manage memberships for.
	GroupId pulumi.StringPtrInput
	// A list of usernames that belong to this group.
	Members pulumi.StringArrayInput
	// The realm this group exists in.
	RealmId pulumi.StringInput
}

func (GroupMembershipsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipsArgs)(nil)).Elem()
}

type GroupMembershipsInput interface {
	pulumi.Input

	ToGroupMembershipsOutput() GroupMembershipsOutput
	ToGroupMembershipsOutputWithContext(ctx context.Context) GroupMembershipsOutput
}

func (GroupMemberships) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMemberships)(nil)).Elem()
}

func (i GroupMemberships) ToGroupMembershipsOutput() GroupMembershipsOutput {
	return i.ToGroupMembershipsOutputWithContext(context.Background())
}

func (i GroupMemberships) ToGroupMembershipsOutputWithContext(ctx context.Context) GroupMembershipsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipsOutput)
}

type GroupMembershipsOutput struct {
	*pulumi.OutputState
}

func (GroupMembershipsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembershipsOutput)(nil)).Elem()
}

func (o GroupMembershipsOutput) ToGroupMembershipsOutput() GroupMembershipsOutput {
	return o
}

func (o GroupMembershipsOutput) ToGroupMembershipsOutputWithContext(ctx context.Context) GroupMembershipsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GroupMembershipsOutput{})
}
