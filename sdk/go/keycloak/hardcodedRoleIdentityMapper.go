// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type HardcodedRoleIdentityMapper struct {
	pulumi.CustomResourceState

	ExtraConfig pulumi.MapOutput `pulumi:"extraConfig"`
	// IDP Alias
	IdentityProviderAlias pulumi.StringOutput `pulumi:"identityProviderAlias"`
	// IDP Mapper Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Realm Name
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Role Name
	Role pulumi.StringPtrOutput `pulumi:"role"`
}

// NewHardcodedRoleIdentityMapper registers a new resource with the given unique name, arguments, and options.
func NewHardcodedRoleIdentityMapper(ctx *pulumi.Context,
	name string, args *HardcodedRoleIdentityMapperArgs, opts ...pulumi.ResourceOption) (*HardcodedRoleIdentityMapper, error) {
	if args == nil || args.IdentityProviderAlias == nil {
		return nil, errors.New("missing required argument 'IdentityProviderAlias'")
	}
	if args == nil || args.Realm == nil {
		return nil, errors.New("missing required argument 'Realm'")
	}
	if args == nil {
		args = &HardcodedRoleIdentityMapperArgs{}
	}
	var resource HardcodedRoleIdentityMapper
	err := ctx.RegisterResource("keycloak:index/hardcodedRoleIdentityMapper:HardcodedRoleIdentityMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHardcodedRoleIdentityMapper gets an existing HardcodedRoleIdentityMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHardcodedRoleIdentityMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HardcodedRoleIdentityMapperState, opts ...pulumi.ResourceOption) (*HardcodedRoleIdentityMapper, error) {
	var resource HardcodedRoleIdentityMapper
	err := ctx.ReadResource("keycloak:index/hardcodedRoleIdentityMapper:HardcodedRoleIdentityMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HardcodedRoleIdentityMapper resources.
type hardcodedRoleIdentityMapperState struct {
	ExtraConfig map[string]interface{} `pulumi:"extraConfig"`
	// IDP Alias
	IdentityProviderAlias *string `pulumi:"identityProviderAlias"`
	// IDP Mapper Name
	Name *string `pulumi:"name"`
	// Realm Name
	Realm *string `pulumi:"realm"`
	// Role Name
	Role *string `pulumi:"role"`
}

type HardcodedRoleIdentityMapperState struct {
	ExtraConfig pulumi.MapInput
	// IDP Alias
	IdentityProviderAlias pulumi.StringPtrInput
	// IDP Mapper Name
	Name pulumi.StringPtrInput
	// Realm Name
	Realm pulumi.StringPtrInput
	// Role Name
	Role pulumi.StringPtrInput
}

func (HardcodedRoleIdentityMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedRoleIdentityMapperState)(nil)).Elem()
}

type hardcodedRoleIdentityMapperArgs struct {
	ExtraConfig map[string]interface{} `pulumi:"extraConfig"`
	// IDP Alias
	IdentityProviderAlias string `pulumi:"identityProviderAlias"`
	// IDP Mapper Name
	Name *string `pulumi:"name"`
	// Realm Name
	Realm string `pulumi:"realm"`
	// Role Name
	Role *string `pulumi:"role"`
}

// The set of arguments for constructing a HardcodedRoleIdentityMapper resource.
type HardcodedRoleIdentityMapperArgs struct {
	ExtraConfig pulumi.MapInput
	// IDP Alias
	IdentityProviderAlias pulumi.StringInput
	// IDP Mapper Name
	Name pulumi.StringPtrInput
	// Realm Name
	Realm pulumi.StringInput
	// Role Name
	Role pulumi.StringPtrInput
}

func (HardcodedRoleIdentityMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedRoleIdentityMapperArgs)(nil)).Elem()
}

type HardcodedRoleIdentityMapperInput interface {
	pulumi.Input

	ToHardcodedRoleIdentityMapperOutput() HardcodedRoleIdentityMapperOutput
	ToHardcodedRoleIdentityMapperOutputWithContext(ctx context.Context) HardcodedRoleIdentityMapperOutput
}

func (HardcodedRoleIdentityMapper) ElementType() reflect.Type {
	return reflect.TypeOf((*HardcodedRoleIdentityMapper)(nil)).Elem()
}

func (i HardcodedRoleIdentityMapper) ToHardcodedRoleIdentityMapperOutput() HardcodedRoleIdentityMapperOutput {
	return i.ToHardcodedRoleIdentityMapperOutputWithContext(context.Background())
}

func (i HardcodedRoleIdentityMapper) ToHardcodedRoleIdentityMapperOutputWithContext(ctx context.Context) HardcodedRoleIdentityMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedRoleIdentityMapperOutput)
}

type HardcodedRoleIdentityMapperOutput struct {
	*pulumi.OutputState
}

func (HardcodedRoleIdentityMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardcodedRoleIdentityMapperOutput)(nil)).Elem()
}

func (o HardcodedRoleIdentityMapperOutput) ToHardcodedRoleIdentityMapperOutput() HardcodedRoleIdentityMapperOutput {
	return o
}

func (o HardcodedRoleIdentityMapperOutput) ToHardcodedRoleIdentityMapperOutputWithContext(ctx context.Context) HardcodedRoleIdentityMapperOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(HardcodedRoleIdentityMapperOutput{})
}
