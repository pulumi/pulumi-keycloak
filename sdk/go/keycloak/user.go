// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Allows for creating and managing Users within Keycloak.
//
// This resource was created primarily to enable the acceptance tests for the `Group` resource. Creating users within
// Keycloak is not recommended. Instead, users should be federated from external sources by configuring user federation providers
// or identity providers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v3/go/keycloak"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Realm:   pulumi.String("my-realm"),
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keycloak.NewUser(ctx, "user", &keycloak.UserArgs{
// 			RealmId:   realm.ID(),
// 			Username:  pulumi.String("bob"),
// 			Enabled:   pulumi.Bool(true),
// 			Email:     pulumi.String("bob@domain.com"),
// 			FirstName: pulumi.String("Bob"),
// 			LastName:  pulumi.String("Bobson"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keycloak.NewUser(ctx, "userWithInitialPassword", &keycloak.UserArgs{
// 			RealmId:   realm.ID(),
// 			Username:  pulumi.String("alice"),
// 			Enabled:   pulumi.Bool(true),
// 			Email:     pulumi.String("alice@domain.com"),
// 			FirstName: pulumi.String("Alice"),
// 			LastName:  pulumi.String("Aliceberg"),
// 			Attributes: pulumi.StringMap{
// 				"foo": pulumi.String("bar"),
// 			},
// 			InitialPassword: &keycloak.UserInitialPasswordArgs{
// 				Value:     pulumi.String("some password"),
// 				Temporary: pulumi.Bool(true),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Users can be imported using the format `{{realm_id}}/{{user_id}}`, where `user_id` is the unique ID that Keycloak assigns to the user upon creation. This value can be found in the GUI when editing the user. Examplebash
//
// ```sh
//  $ pulumi import keycloak:index/user:User user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4
// ```
type User struct {
	pulumi.CustomResourceState

	// A map representing attributes for the user
	Attributes pulumi.MapOutput `pulumi:"attributes"`
	// The user's email.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Whether the email address was validated or not. Default to `false`.
	EmailVerified pulumi.BoolPtrOutput `pulumi:"emailVerified"`
	// When false, this user cannot log in. Defaults to `true`.
	Enabled             pulumi.BoolPtrOutput             `pulumi:"enabled"`
	FederatedIdentities UserFederatedIdentityArrayOutput `pulumi:"federatedIdentities"`
	// The user's first name.
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
	InitialPassword UserInitialPasswordPtrOutput `pulumi:"initialPassword"`
	// The user's last name.
	LastName pulumi.StringPtrOutput `pulumi:"lastName"`
	// The realm this user belongs to.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// The unique username of this user.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &UserArgs{}
	}
	var resource User
	err := ctx.RegisterResource("keycloak:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("keycloak:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// A map representing attributes for the user
	Attributes map[string]interface{} `pulumi:"attributes"`
	// The user's email.
	Email *string `pulumi:"email"`
	// Whether the email address was validated or not. Default to `false`.
	EmailVerified *bool `pulumi:"emailVerified"`
	// When false, this user cannot log in. Defaults to `true`.
	Enabled             *bool                   `pulumi:"enabled"`
	FederatedIdentities []UserFederatedIdentity `pulumi:"federatedIdentities"`
	// The user's first name.
	FirstName *string `pulumi:"firstName"`
	// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
	InitialPassword *UserInitialPassword `pulumi:"initialPassword"`
	// The user's last name.
	LastName *string `pulumi:"lastName"`
	// The realm this user belongs to.
	RealmId *string `pulumi:"realmId"`
	// The unique username of this user.
	Username *string `pulumi:"username"`
}

type UserState struct {
	// A map representing attributes for the user
	Attributes pulumi.MapInput
	// The user's email.
	Email pulumi.StringPtrInput
	// Whether the email address was validated or not. Default to `false`.
	EmailVerified pulumi.BoolPtrInput
	// When false, this user cannot log in. Defaults to `true`.
	Enabled             pulumi.BoolPtrInput
	FederatedIdentities UserFederatedIdentityArrayInput
	// The user's first name.
	FirstName pulumi.StringPtrInput
	// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
	InitialPassword UserInitialPasswordPtrInput
	// The user's last name.
	LastName pulumi.StringPtrInput
	// The realm this user belongs to.
	RealmId pulumi.StringPtrInput
	// The unique username of this user.
	Username pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// A map representing attributes for the user
	Attributes map[string]interface{} `pulumi:"attributes"`
	// The user's email.
	Email *string `pulumi:"email"`
	// Whether the email address was validated or not. Default to `false`.
	EmailVerified *bool `pulumi:"emailVerified"`
	// When false, this user cannot log in. Defaults to `true`.
	Enabled             *bool                   `pulumi:"enabled"`
	FederatedIdentities []UserFederatedIdentity `pulumi:"federatedIdentities"`
	// The user's first name.
	FirstName *string `pulumi:"firstName"`
	// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
	InitialPassword *UserInitialPassword `pulumi:"initialPassword"`
	// The user's last name.
	LastName *string `pulumi:"lastName"`
	// The realm this user belongs to.
	RealmId string `pulumi:"realmId"`
	// The unique username of this user.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// A map representing attributes for the user
	Attributes pulumi.MapInput
	// The user's email.
	Email pulumi.StringPtrInput
	// Whether the email address was validated or not. Default to `false`.
	EmailVerified pulumi.BoolPtrInput
	// When false, this user cannot log in. Defaults to `true`.
	Enabled             pulumi.BoolPtrInput
	FederatedIdentities UserFederatedIdentityArrayInput
	// The user's first name.
	FirstName pulumi.StringPtrInput
	// When given, the user's initial password will be set. This attribute is only respected during initial user creation.
	InitialPassword UserInitialPasswordPtrInput
	// The user's last name.
	LastName pulumi.StringPtrInput
	// The realm this user belongs to.
	RealmId pulumi.StringInput
	// The unique username of this user.
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (User) ElementType() reflect.Type {
	return reflect.TypeOf((*User)(nil)).Elem()
}

func (i User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct {
	*pulumi.OutputState
}

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserOutput)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserOutput{})
}
