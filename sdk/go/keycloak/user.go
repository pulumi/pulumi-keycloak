// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # User
//
// Allows for creating and managing Users within Keycloak.
//
// This resource was created primarily to enable the acceptance tests for the `Group` resource.
// Creating users within Keycloak is not recommended. Instead, users should be federated from external sources
// by configuring user federation providers or identity providers.
//
// ### Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Enabled: pulumi.Bool(true),
//				Realm:   pulumi.String("my-realm"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keycloak.NewUser(ctx, "user", &keycloak.UserArgs{
//				Email:     pulumi.String("bob@domain.com"),
//				Enabled:   pulumi.Bool(true),
//				FirstName: pulumi.String("Bob"),
//				LastName:  pulumi.String("Bobson"),
//				RealmId:   realm.ID(),
//				Username:  pulumi.String("bob"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keycloak.NewUser(ctx, "userWithInitialPassword", &keycloak.UserArgs{
//				Email:     pulumi.String("alice@domain.com"),
//				Enabled:   pulumi.Bool(true),
//				FirstName: pulumi.String("Alice"),
//				InitialPassword: &keycloak.UserInitialPasswordArgs{
//					Temporary: pulumi.Bool(true),
//					Value:     pulumi.String("some password"),
//				},
//				LastName: pulumi.String("Aliceberg"),
//				RealmId:  realm.ID(),
//				Username: pulumi.String("alice"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Argument Reference
//
// The following arguments are supported:
//
//   - `realmId` - (Required) The realm this user belongs to.
//   - `username` - (Required) The unique username of this user.
//   - `initialPassword` (Optional) When given, the user's initial password will be set.
//     This attribute is only respected during initial user creation.
//   - `value` (Required) The initial password.
//   - `temporary` (Optional) If set to `true`, the initial password is set up for renewal on first use. Default to `false`.
//   - `enabled` - (Optional) When false, this user cannot log in. Defaults to `true`.
//   - `email` - (Optional) The user's email.
//   - `firstName` - (Optional) The user's first name.
//   - `lastName` - (Optional) The user's last name.
//
// ### Import
//
// Users can be imported using the format `{{realm_id}}/{{user_id}}`, where `userId` is the unique ID that Keycloak
// assigns to the user upon creation. This value can be found in the GUI when editing the user.
//
// Example:
type User struct {
	pulumi.CustomResourceState

	Attributes          pulumi.MapOutput                 `pulumi:"attributes"`
	Email               pulumi.StringPtrOutput           `pulumi:"email"`
	EmailVerified       pulumi.BoolPtrOutput             `pulumi:"emailVerified"`
	Enabled             pulumi.BoolPtrOutput             `pulumi:"enabled"`
	FederatedIdentities UserFederatedIdentityArrayOutput `pulumi:"federatedIdentities"`
	FirstName           pulumi.StringPtrOutput           `pulumi:"firstName"`
	InitialPassword     UserInitialPasswordPtrOutput     `pulumi:"initialPassword"`
	LastName            pulumi.StringPtrOutput           `pulumi:"lastName"`
	RealmId             pulumi.StringOutput              `pulumi:"realmId"`
	RequiredActions     pulumi.StringArrayOutput         `pulumi:"requiredActions"`
	Username            pulumi.StringOutput              `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("keycloak:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("keycloak:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	Attributes          map[string]interface{}  `pulumi:"attributes"`
	Email               *string                 `pulumi:"email"`
	EmailVerified       *bool                   `pulumi:"emailVerified"`
	Enabled             *bool                   `pulumi:"enabled"`
	FederatedIdentities []UserFederatedIdentity `pulumi:"federatedIdentities"`
	FirstName           *string                 `pulumi:"firstName"`
	InitialPassword     *UserInitialPassword    `pulumi:"initialPassword"`
	LastName            *string                 `pulumi:"lastName"`
	RealmId             *string                 `pulumi:"realmId"`
	RequiredActions     []string                `pulumi:"requiredActions"`
	Username            *string                 `pulumi:"username"`
}

type UserState struct {
	Attributes          pulumi.MapInput
	Email               pulumi.StringPtrInput
	EmailVerified       pulumi.BoolPtrInput
	Enabled             pulumi.BoolPtrInput
	FederatedIdentities UserFederatedIdentityArrayInput
	FirstName           pulumi.StringPtrInput
	InitialPassword     UserInitialPasswordPtrInput
	LastName            pulumi.StringPtrInput
	RealmId             pulumi.StringPtrInput
	RequiredActions     pulumi.StringArrayInput
	Username            pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	Attributes          map[string]interface{}  `pulumi:"attributes"`
	Email               *string                 `pulumi:"email"`
	EmailVerified       *bool                   `pulumi:"emailVerified"`
	Enabled             *bool                   `pulumi:"enabled"`
	FederatedIdentities []UserFederatedIdentity `pulumi:"federatedIdentities"`
	FirstName           *string                 `pulumi:"firstName"`
	InitialPassword     *UserInitialPassword    `pulumi:"initialPassword"`
	LastName            *string                 `pulumi:"lastName"`
	RealmId             string                  `pulumi:"realmId"`
	RequiredActions     []string                `pulumi:"requiredActions"`
	Username            string                  `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	Attributes          pulumi.MapInput
	Email               pulumi.StringPtrInput
	EmailVerified       pulumi.BoolPtrInput
	Enabled             pulumi.BoolPtrInput
	FederatedIdentities UserFederatedIdentityArrayInput
	FirstName           pulumi.StringPtrInput
	InitialPassword     UserInitialPasswordPtrInput
	LastName            pulumi.StringPtrInput
	RealmId             pulumi.StringInput
	RequiredActions     pulumi.StringArrayInput
	Username            pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) Attributes() pulumi.MapOutput {
	return o.ApplyT(func(v *User) pulumi.MapOutput { return v.Attributes }).(pulumi.MapOutput)
}

func (o UserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

func (o UserOutput) EmailVerified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.EmailVerified }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) FederatedIdentities() UserFederatedIdentityArrayOutput {
	return o.ApplyT(func(v *User) UserFederatedIdentityArrayOutput { return v.FederatedIdentities }).(UserFederatedIdentityArrayOutput)
}

func (o UserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

func (o UserOutput) InitialPassword() UserInitialPasswordPtrOutput {
	return o.ApplyT(func(v *User) UserInitialPasswordPtrOutput { return v.InitialPassword }).(UserInitialPasswordPtrOutput)
}

func (o UserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

func (o UserOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

func (o UserOutput) RequiredActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.RequiredActions }).(pulumi.StringArrayOutput)
}

func (o UserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
