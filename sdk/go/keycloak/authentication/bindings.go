// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentication

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Allows for creating and managing realm authentication flow bindings within Keycloak.
//
// [Authentication flows](https://www.keycloak.org/docs/latest/server_admin/index.html#_authentication-flows) describe a sequence
// of actions that a user or service must perform in order to be authenticated to Keycloak. The authentication flow itself
// is a container for these actions, which are otherwise known as executions.
//
// Realms assign authentication flows to supported user flows such as `registration` and `browser`. This resource allows the
// updating of realm authentication flow bindings to custom authentication flows created by `authentication.Flow`.
//
// Note that you can also use the `Realm` resource to assign authentication flow bindings at the realm level. This
// resource is useful if you would like to create a realm and an authentication flow, and assign this flow to the realm within
// a single run of `pulumi up`. In any case, do not attempt to use both the arguments within the `Realm` resource
// and this resource to manage authentication flow bindings, you should choose one or the other.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/authentication"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			flow, err := authentication.NewFlow(ctx, "flow", &authentication.FlowArgs{
//				RealmId: realm.ID(),
//				Alias:   pulumi.String("my-flow-alias"),
//			})
//			if err != nil {
//				return err
//			}
//			executionOne, err := authentication.NewExecution(ctx, "executionOne", &authentication.ExecutionArgs{
//				RealmId:         realm.ID(),
//				ParentFlowAlias: flow.Alias,
//				Authenticator:   pulumi.String("auth-cookie"),
//				Requirement:     pulumi.String("ALTERNATIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentication.NewExecution(ctx, "executionTwo", &authentication.ExecutionArgs{
//				RealmId:         realm.ID(),
//				ParentFlowAlias: flow.Alias,
//				Authenticator:   pulumi.String("identity-provider-redirector"),
//				Requirement:     pulumi.String("ALTERNATIVE"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				executionOne,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = authentication.NewBindings(ctx, "browserAuthenticationBinding", &authentication.BindingsArgs{
//				RealmId:     realm.ID(),
//				BrowserFlow: flow.Alias,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Bindings struct {
	pulumi.CustomResourceState

	// The alias of the flow to assign to the realm BrowserFlow.
	BrowserFlow pulumi.StringOutput `pulumi:"browserFlow"`
	// The alias of the flow to assign to the realm ClientAuthenticationFlow.
	ClientAuthenticationFlow pulumi.StringOutput `pulumi:"clientAuthenticationFlow"`
	// The alias of the flow to assign to the realm DirectGrantFlow.
	DirectGrantFlow pulumi.StringOutput `pulumi:"directGrantFlow"`
	// The alias of the flow to assign to the realm DockerAuthenticationFlow.
	DockerAuthenticationFlow pulumi.StringOutput `pulumi:"dockerAuthenticationFlow"`
	// The realm the authentication flow binding exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// The alias of the flow to assign to the realm RegistrationFlow.
	RegistrationFlow pulumi.StringOutput `pulumi:"registrationFlow"`
	// The alias of the flow to assign to the realm ResetCredentialsFlow.
	ResetCredentialsFlow pulumi.StringOutput `pulumi:"resetCredentialsFlow"`
}

// NewBindings registers a new resource with the given unique name, arguments, and options.
func NewBindings(ctx *pulumi.Context,
	name string, args *BindingsArgs, opts ...pulumi.ResourceOption) (*Bindings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bindings
	err := ctx.RegisterResource("keycloak:authentication/bindings:Bindings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBindings gets an existing Bindings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBindings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BindingsState, opts ...pulumi.ResourceOption) (*Bindings, error) {
	var resource Bindings
	err := ctx.ReadResource("keycloak:authentication/bindings:Bindings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bindings resources.
type bindingsState struct {
	// The alias of the flow to assign to the realm BrowserFlow.
	BrowserFlow *string `pulumi:"browserFlow"`
	// The alias of the flow to assign to the realm ClientAuthenticationFlow.
	ClientAuthenticationFlow *string `pulumi:"clientAuthenticationFlow"`
	// The alias of the flow to assign to the realm DirectGrantFlow.
	DirectGrantFlow *string `pulumi:"directGrantFlow"`
	// The alias of the flow to assign to the realm DockerAuthenticationFlow.
	DockerAuthenticationFlow *string `pulumi:"dockerAuthenticationFlow"`
	// The realm the authentication flow binding exists in.
	RealmId *string `pulumi:"realmId"`
	// The alias of the flow to assign to the realm RegistrationFlow.
	RegistrationFlow *string `pulumi:"registrationFlow"`
	// The alias of the flow to assign to the realm ResetCredentialsFlow.
	ResetCredentialsFlow *string `pulumi:"resetCredentialsFlow"`
}

type BindingsState struct {
	// The alias of the flow to assign to the realm BrowserFlow.
	BrowserFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm ClientAuthenticationFlow.
	ClientAuthenticationFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm DirectGrantFlow.
	DirectGrantFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm DockerAuthenticationFlow.
	DockerAuthenticationFlow pulumi.StringPtrInput
	// The realm the authentication flow binding exists in.
	RealmId pulumi.StringPtrInput
	// The alias of the flow to assign to the realm RegistrationFlow.
	RegistrationFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm ResetCredentialsFlow.
	ResetCredentialsFlow pulumi.StringPtrInput
}

func (BindingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingsState)(nil)).Elem()
}

type bindingsArgs struct {
	// The alias of the flow to assign to the realm BrowserFlow.
	BrowserFlow *string `pulumi:"browserFlow"`
	// The alias of the flow to assign to the realm ClientAuthenticationFlow.
	ClientAuthenticationFlow *string `pulumi:"clientAuthenticationFlow"`
	// The alias of the flow to assign to the realm DirectGrantFlow.
	DirectGrantFlow *string `pulumi:"directGrantFlow"`
	// The alias of the flow to assign to the realm DockerAuthenticationFlow.
	DockerAuthenticationFlow *string `pulumi:"dockerAuthenticationFlow"`
	// The realm the authentication flow binding exists in.
	RealmId string `pulumi:"realmId"`
	// The alias of the flow to assign to the realm RegistrationFlow.
	RegistrationFlow *string `pulumi:"registrationFlow"`
	// The alias of the flow to assign to the realm ResetCredentialsFlow.
	ResetCredentialsFlow *string `pulumi:"resetCredentialsFlow"`
}

// The set of arguments for constructing a Bindings resource.
type BindingsArgs struct {
	// The alias of the flow to assign to the realm BrowserFlow.
	BrowserFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm ClientAuthenticationFlow.
	ClientAuthenticationFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm DirectGrantFlow.
	DirectGrantFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm DockerAuthenticationFlow.
	DockerAuthenticationFlow pulumi.StringPtrInput
	// The realm the authentication flow binding exists in.
	RealmId pulumi.StringInput
	// The alias of the flow to assign to the realm RegistrationFlow.
	RegistrationFlow pulumi.StringPtrInput
	// The alias of the flow to assign to the realm ResetCredentialsFlow.
	ResetCredentialsFlow pulumi.StringPtrInput
}

func (BindingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingsArgs)(nil)).Elem()
}

type BindingsInput interface {
	pulumi.Input

	ToBindingsOutput() BindingsOutput
	ToBindingsOutputWithContext(ctx context.Context) BindingsOutput
}

func (*Bindings) ElementType() reflect.Type {
	return reflect.TypeOf((**Bindings)(nil)).Elem()
}

func (i *Bindings) ToBindingsOutput() BindingsOutput {
	return i.ToBindingsOutputWithContext(context.Background())
}

func (i *Bindings) ToBindingsOutputWithContext(ctx context.Context) BindingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingsOutput)
}

func (i *Bindings) ToOutput(ctx context.Context) pulumix.Output[*Bindings] {
	return pulumix.Output[*Bindings]{
		OutputState: i.ToBindingsOutputWithContext(ctx).OutputState,
	}
}

// BindingsArrayInput is an input type that accepts BindingsArray and BindingsArrayOutput values.
// You can construct a concrete instance of `BindingsArrayInput` via:
//
//	BindingsArray{ BindingsArgs{...} }
type BindingsArrayInput interface {
	pulumi.Input

	ToBindingsArrayOutput() BindingsArrayOutput
	ToBindingsArrayOutputWithContext(context.Context) BindingsArrayOutput
}

type BindingsArray []BindingsInput

func (BindingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bindings)(nil)).Elem()
}

func (i BindingsArray) ToBindingsArrayOutput() BindingsArrayOutput {
	return i.ToBindingsArrayOutputWithContext(context.Background())
}

func (i BindingsArray) ToBindingsArrayOutputWithContext(ctx context.Context) BindingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingsArrayOutput)
}

func (i BindingsArray) ToOutput(ctx context.Context) pulumix.Output[[]*Bindings] {
	return pulumix.Output[[]*Bindings]{
		OutputState: i.ToBindingsArrayOutputWithContext(ctx).OutputState,
	}
}

// BindingsMapInput is an input type that accepts BindingsMap and BindingsMapOutput values.
// You can construct a concrete instance of `BindingsMapInput` via:
//
//	BindingsMap{ "key": BindingsArgs{...} }
type BindingsMapInput interface {
	pulumi.Input

	ToBindingsMapOutput() BindingsMapOutput
	ToBindingsMapOutputWithContext(context.Context) BindingsMapOutput
}

type BindingsMap map[string]BindingsInput

func (BindingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bindings)(nil)).Elem()
}

func (i BindingsMap) ToBindingsMapOutput() BindingsMapOutput {
	return i.ToBindingsMapOutputWithContext(context.Background())
}

func (i BindingsMap) ToBindingsMapOutputWithContext(ctx context.Context) BindingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingsMapOutput)
}

func (i BindingsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bindings] {
	return pulumix.Output[map[string]*Bindings]{
		OutputState: i.ToBindingsMapOutputWithContext(ctx).OutputState,
	}
}

type BindingsOutput struct{ *pulumi.OutputState }

func (BindingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bindings)(nil)).Elem()
}

func (o BindingsOutput) ToBindingsOutput() BindingsOutput {
	return o
}

func (o BindingsOutput) ToBindingsOutputWithContext(ctx context.Context) BindingsOutput {
	return o
}

func (o BindingsOutput) ToOutput(ctx context.Context) pulumix.Output[*Bindings] {
	return pulumix.Output[*Bindings]{
		OutputState: o.OutputState,
	}
}

// The alias of the flow to assign to the realm BrowserFlow.
func (o BindingsOutput) BrowserFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Bindings) pulumi.StringOutput { return v.BrowserFlow }).(pulumi.StringOutput)
}

// The alias of the flow to assign to the realm ClientAuthenticationFlow.
func (o BindingsOutput) ClientAuthenticationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Bindings) pulumi.StringOutput { return v.ClientAuthenticationFlow }).(pulumi.StringOutput)
}

// The alias of the flow to assign to the realm DirectGrantFlow.
func (o BindingsOutput) DirectGrantFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Bindings) pulumi.StringOutput { return v.DirectGrantFlow }).(pulumi.StringOutput)
}

// The alias of the flow to assign to the realm DockerAuthenticationFlow.
func (o BindingsOutput) DockerAuthenticationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Bindings) pulumi.StringOutput { return v.DockerAuthenticationFlow }).(pulumi.StringOutput)
}

// The realm the authentication flow binding exists in.
func (o BindingsOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Bindings) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

// The alias of the flow to assign to the realm RegistrationFlow.
func (o BindingsOutput) RegistrationFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Bindings) pulumi.StringOutput { return v.RegistrationFlow }).(pulumi.StringOutput)
}

// The alias of the flow to assign to the realm ResetCredentialsFlow.
func (o BindingsOutput) ResetCredentialsFlow() pulumi.StringOutput {
	return o.ApplyT(func(v *Bindings) pulumi.StringOutput { return v.ResetCredentialsFlow }).(pulumi.StringOutput)
}

type BindingsArrayOutput struct{ *pulumi.OutputState }

func (BindingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bindings)(nil)).Elem()
}

func (o BindingsArrayOutput) ToBindingsArrayOutput() BindingsArrayOutput {
	return o
}

func (o BindingsArrayOutput) ToBindingsArrayOutputWithContext(ctx context.Context) BindingsArrayOutput {
	return o
}

func (o BindingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Bindings] {
	return pulumix.Output[[]*Bindings]{
		OutputState: o.OutputState,
	}
}

func (o BindingsArrayOutput) Index(i pulumi.IntInput) BindingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bindings {
		return vs[0].([]*Bindings)[vs[1].(int)]
	}).(BindingsOutput)
}

type BindingsMapOutput struct{ *pulumi.OutputState }

func (BindingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bindings)(nil)).Elem()
}

func (o BindingsMapOutput) ToBindingsMapOutput() BindingsMapOutput {
	return o
}

func (o BindingsMapOutput) ToBindingsMapOutputWithContext(ctx context.Context) BindingsMapOutput {
	return o
}

func (o BindingsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bindings] {
	return pulumix.Output[map[string]*Bindings]{
		OutputState: o.OutputState,
	}
}

func (o BindingsMapOutput) MapIndex(k pulumi.StringInput) BindingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bindings {
		return vs[0].(map[string]*Bindings)[vs[1].(string)]
	}).(BindingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingsInput)(nil)).Elem(), &Bindings{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingsArrayInput)(nil)).Elem(), BindingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingsMapInput)(nil)).Elem(), BindingsMap{})
	pulumi.RegisterOutputType(BindingsOutput{})
	pulumi.RegisterOutputType(BindingsArrayOutput{})
	pulumi.RegisterOutputType(BindingsMapOutput{})
}
