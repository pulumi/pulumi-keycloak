// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authentication

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for creating and managing an authentication subflow within Keycloak.
//
// Like authentication flows, authentication subflows are containers for authentication executions.
// As its name implies, an authentication subflow is contained in an authentication flow.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v5/go/keycloak/authentication"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			flow, err := authentication.NewFlow(ctx, "flow", &authentication.FlowArgs{
//				RealmId: realm.ID(),
//				Alias:   pulumi.String("my-flow-alias"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authentication.NewSubflow(ctx, "subflow", &authentication.SubflowArgs{
//				RealmId:         realm.ID(),
//				Alias:           pulumi.String("my-subflow-alias"),
//				ParentFlowAlias: flow.Alias,
//				ProviderId:      pulumi.String("basic-flow"),
//				Requirement:     pulumi.String("ALTERNATIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Authentication flows can be imported using the format `{{realmId}}/{{parentFlowAlias}}/{{authenticationSubflowId}}`.
//
// The authentication subflow ID is typically a GUID which is autogenerated when the subflow is created via Keycloak.
//
// Unfortunately, it is not trivial to retrieve the authentication subflow ID from the UI. The best way to do this is to visit the
//
// "Authentication" page in Keycloak, and use the network tab of your browser to view the response of the API call to
//
// `/auth/admin/realms/${realm}/authentication/flows/{flow}/executions`, which will be a list of executions, where the subflow will be.
//
// __The subflow ID is contained in the `flowID` field__ (not, as one could guess, the `id` field).
//
// Example:
//
// bash
//
// ```sh
// $ pulumi import keycloak:authentication/subflow:Subflow subflow my-realm/"Parent Flow"/3bad1172-bb5c-4a77-9615-c2606eb03081
// ```
type Subflow struct {
	pulumi.CustomResourceState

	// The alias for this authentication subflow.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// The name of the authenticator. Might be needed to be set with certain custom subflows with specific
	// authenticators. In general this will remain empty.
	Authenticator pulumi.StringPtrOutput `pulumi:"authenticator"`
	// A description for the authentication subflow.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The alias for the parent authentication flow.
	ParentFlowAlias pulumi.StringOutput `pulumi:"parentFlowAlias"`
	// The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
	// and `client-flow`. Defaults to `basic-flow`.
	ProviderId pulumi.StringPtrOutput `pulumi:"providerId"`
	// The realm that the authentication subflow exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
	// The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
	// or `DISABLED`. Defaults to `DISABLED`.
	Requirement pulumi.StringPtrOutput `pulumi:"requirement"`
}

// NewSubflow registers a new resource with the given unique name, arguments, and options.
func NewSubflow(ctx *pulumi.Context,
	name string, args *SubflowArgs, opts ...pulumi.ResourceOption) (*Subflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.ParentFlowAlias == nil {
		return nil, errors.New("invalid value for required argument 'ParentFlowAlias'")
	}
	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subflow
	err := ctx.RegisterResource("keycloak:authentication/subflow:Subflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubflow gets an existing Subflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubflowState, opts ...pulumi.ResourceOption) (*Subflow, error) {
	var resource Subflow
	err := ctx.ReadResource("keycloak:authentication/subflow:Subflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subflow resources.
type subflowState struct {
	// The alias for this authentication subflow.
	Alias *string `pulumi:"alias"`
	// The name of the authenticator. Might be needed to be set with certain custom subflows with specific
	// authenticators. In general this will remain empty.
	Authenticator *string `pulumi:"authenticator"`
	// A description for the authentication subflow.
	Description *string `pulumi:"description"`
	// The alias for the parent authentication flow.
	ParentFlowAlias *string `pulumi:"parentFlowAlias"`
	// The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
	// and `client-flow`. Defaults to `basic-flow`.
	ProviderId *string `pulumi:"providerId"`
	// The realm that the authentication subflow exists in.
	RealmId *string `pulumi:"realmId"`
	// The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
	// or `DISABLED`. Defaults to `DISABLED`.
	Requirement *string `pulumi:"requirement"`
}

type SubflowState struct {
	// The alias for this authentication subflow.
	Alias pulumi.StringPtrInput
	// The name of the authenticator. Might be needed to be set with certain custom subflows with specific
	// authenticators. In general this will remain empty.
	Authenticator pulumi.StringPtrInput
	// A description for the authentication subflow.
	Description pulumi.StringPtrInput
	// The alias for the parent authentication flow.
	ParentFlowAlias pulumi.StringPtrInput
	// The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
	// and `client-flow`. Defaults to `basic-flow`.
	ProviderId pulumi.StringPtrInput
	// The realm that the authentication subflow exists in.
	RealmId pulumi.StringPtrInput
	// The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
	// or `DISABLED`. Defaults to `DISABLED`.
	Requirement pulumi.StringPtrInput
}

func (SubflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*subflowState)(nil)).Elem()
}

type subflowArgs struct {
	// The alias for this authentication subflow.
	Alias string `pulumi:"alias"`
	// The name of the authenticator. Might be needed to be set with certain custom subflows with specific
	// authenticators. In general this will remain empty.
	Authenticator *string `pulumi:"authenticator"`
	// A description for the authentication subflow.
	Description *string `pulumi:"description"`
	// The alias for the parent authentication flow.
	ParentFlowAlias string `pulumi:"parentFlowAlias"`
	// The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
	// and `client-flow`. Defaults to `basic-flow`.
	ProviderId *string `pulumi:"providerId"`
	// The realm that the authentication subflow exists in.
	RealmId string `pulumi:"realmId"`
	// The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
	// or `DISABLED`. Defaults to `DISABLED`.
	Requirement *string `pulumi:"requirement"`
}

// The set of arguments for constructing a Subflow resource.
type SubflowArgs struct {
	// The alias for this authentication subflow.
	Alias pulumi.StringInput
	// The name of the authenticator. Might be needed to be set with certain custom subflows with specific
	// authenticators. In general this will remain empty.
	Authenticator pulumi.StringPtrInput
	// A description for the authentication subflow.
	Description pulumi.StringPtrInput
	// The alias for the parent authentication flow.
	ParentFlowAlias pulumi.StringInput
	// The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
	// and `client-flow`. Defaults to `basic-flow`.
	ProviderId pulumi.StringPtrInput
	// The realm that the authentication subflow exists in.
	RealmId pulumi.StringInput
	// The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
	// or `DISABLED`. Defaults to `DISABLED`.
	Requirement pulumi.StringPtrInput
}

func (SubflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subflowArgs)(nil)).Elem()
}

type SubflowInput interface {
	pulumi.Input

	ToSubflowOutput() SubflowOutput
	ToSubflowOutputWithContext(ctx context.Context) SubflowOutput
}

func (*Subflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Subflow)(nil)).Elem()
}

func (i *Subflow) ToSubflowOutput() SubflowOutput {
	return i.ToSubflowOutputWithContext(context.Background())
}

func (i *Subflow) ToSubflowOutputWithContext(ctx context.Context) SubflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubflowOutput)
}

// SubflowArrayInput is an input type that accepts SubflowArray and SubflowArrayOutput values.
// You can construct a concrete instance of `SubflowArrayInput` via:
//
//	SubflowArray{ SubflowArgs{...} }
type SubflowArrayInput interface {
	pulumi.Input

	ToSubflowArrayOutput() SubflowArrayOutput
	ToSubflowArrayOutputWithContext(context.Context) SubflowArrayOutput
}

type SubflowArray []SubflowInput

func (SubflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subflow)(nil)).Elem()
}

func (i SubflowArray) ToSubflowArrayOutput() SubflowArrayOutput {
	return i.ToSubflowArrayOutputWithContext(context.Background())
}

func (i SubflowArray) ToSubflowArrayOutputWithContext(ctx context.Context) SubflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubflowArrayOutput)
}

// SubflowMapInput is an input type that accepts SubflowMap and SubflowMapOutput values.
// You can construct a concrete instance of `SubflowMapInput` via:
//
//	SubflowMap{ "key": SubflowArgs{...} }
type SubflowMapInput interface {
	pulumi.Input

	ToSubflowMapOutput() SubflowMapOutput
	ToSubflowMapOutputWithContext(context.Context) SubflowMapOutput
}

type SubflowMap map[string]SubflowInput

func (SubflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subflow)(nil)).Elem()
}

func (i SubflowMap) ToSubflowMapOutput() SubflowMapOutput {
	return i.ToSubflowMapOutputWithContext(context.Background())
}

func (i SubflowMap) ToSubflowMapOutputWithContext(ctx context.Context) SubflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubflowMapOutput)
}

type SubflowOutput struct{ *pulumi.OutputState }

func (SubflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subflow)(nil)).Elem()
}

func (o SubflowOutput) ToSubflowOutput() SubflowOutput {
	return o
}

func (o SubflowOutput) ToSubflowOutputWithContext(ctx context.Context) SubflowOutput {
	return o
}

// The alias for this authentication subflow.
func (o SubflowOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Subflow) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// The name of the authenticator. Might be needed to be set with certain custom subflows with specific
// authenticators. In general this will remain empty.
func (o SubflowOutput) Authenticator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subflow) pulumi.StringPtrOutput { return v.Authenticator }).(pulumi.StringPtrOutput)
}

// A description for the authentication subflow.
func (o SubflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The alias for the parent authentication flow.
func (o SubflowOutput) ParentFlowAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Subflow) pulumi.StringOutput { return v.ParentFlowAlias }).(pulumi.StringOutput)
}

// The type of authentication subflow to create. Valid choices include `basic-flow`, `form-flow`
// and `client-flow`. Defaults to `basic-flow`.
func (o SubflowOutput) ProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subflow) pulumi.StringPtrOutput { return v.ProviderId }).(pulumi.StringPtrOutput)
}

// The realm that the authentication subflow exists in.
func (o SubflowOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subflow) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

// The requirement setting, which can be one of `REQUIRED`, `ALTERNATIVE`, `OPTIONAL`, `CONDITIONAL`,
// or `DISABLED`. Defaults to `DISABLED`.
func (o SubflowOutput) Requirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subflow) pulumi.StringPtrOutput { return v.Requirement }).(pulumi.StringPtrOutput)
}

type SubflowArrayOutput struct{ *pulumi.OutputState }

func (SubflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subflow)(nil)).Elem()
}

func (o SubflowArrayOutput) ToSubflowArrayOutput() SubflowArrayOutput {
	return o
}

func (o SubflowArrayOutput) ToSubflowArrayOutputWithContext(ctx context.Context) SubflowArrayOutput {
	return o
}

func (o SubflowArrayOutput) Index(i pulumi.IntInput) SubflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subflow {
		return vs[0].([]*Subflow)[vs[1].(int)]
	}).(SubflowOutput)
}

type SubflowMapOutput struct{ *pulumi.OutputState }

func (SubflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subflow)(nil)).Elem()
}

func (o SubflowMapOutput) ToSubflowMapOutput() SubflowMapOutput {
	return o
}

func (o SubflowMapOutput) ToSubflowMapOutputWithContext(ctx context.Context) SubflowMapOutput {
	return o
}

func (o SubflowMapOutput) MapIndex(k pulumi.StringInput) SubflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subflow {
		return vs[0].(map[string]*Subflow)[vs[1].(string)]
	}).(SubflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubflowInput)(nil)).Elem(), &Subflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubflowArrayInput)(nil)).Elem(), SubflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubflowMapInput)(nil)).Elem(), SubflowMap{})
	pulumi.RegisterOutputType(SubflowOutput{})
	pulumi.RegisterOutputType(SubflowArrayOutput{})
	pulumi.RegisterOutputType(SubflowMapOutput{})
}
