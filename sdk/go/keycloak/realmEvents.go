// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for managing Realm Events settings within Keycloak.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-keycloak/sdk/v4/go/keycloak"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
// 			Realm:   pulumi.String("my-realm"),
// 			Enabled: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keycloak.NewRealmEvents(ctx, "realmEvents", &keycloak.RealmEventsArgs{
// 			RealmId:                   realm.ID(),
// 			EventsEnabled:             pulumi.Bool(true),
// 			EventsExpiration:          pulumi.Int(3600),
// 			AdminEventsEnabled:        pulumi.Bool(true),
// 			AdminEventsDetailsEnabled: pulumi.Bool(true),
// 			EnabledEventTypes: pulumi.StringArray{
// 				pulumi.String("LOGIN"),
// 				pulumi.String("LOGOUT"),
// 			},
// 			EventsListeners: pulumi.StringArray{
// 				pulumi.String("jboss-logging"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource currently does not support importing.
type RealmEvents struct {
	pulumi.CustomResourceState

	// When `true`, saved admin events will included detailed information for create/update requests. Defaults to `false`.
	AdminEventsDetailsEnabled pulumi.BoolPtrOutput `pulumi:"adminEventsDetailsEnabled"`
	// When `true`, admin events are saved to the database, making them available through the admin console. Defaults to `false`.
	AdminEventsEnabled pulumi.BoolPtrOutput `pulumi:"adminEventsEnabled"`
	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to `[]` or all event types.
	EnabledEventTypes pulumi.StringArrayOutput `pulumi:"enabledEventTypes"`
	// When `true`, events from `enabledEventTypes` are saved to the database, making them available through the admin console. Defaults to `false`.
	EventsEnabled pulumi.BoolPtrOutput `pulumi:"eventsEnabled"`
	// The amount of time in seconds events will be saved in the database. Defaults to `0` or never.
	EventsExpiration pulumi.IntPtrOutput `pulumi:"eventsExpiration"`
	// The event listeners that events should be sent to. Defaults to `[]` or none. Note that new realms enable the `jboss-logging` listener by default, and this resource will remove that unless it is specified.
	EventsListeners pulumi.StringArrayOutput `pulumi:"eventsListeners"`
	// The name of the realm the event settings apply to.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewRealmEvents registers a new resource with the given unique name, arguments, and options.
func NewRealmEvents(ctx *pulumi.Context,
	name string, args *RealmEventsArgs, opts ...pulumi.ResourceOption) (*RealmEvents, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	var resource RealmEvents
	err := ctx.RegisterResource("keycloak:index/realmEvents:RealmEvents", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealmEvents gets an existing RealmEvents resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealmEvents(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmEventsState, opts ...pulumi.ResourceOption) (*RealmEvents, error) {
	var resource RealmEvents
	err := ctx.ReadResource("keycloak:index/realmEvents:RealmEvents", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RealmEvents resources.
type realmEventsState struct {
	// When `true`, saved admin events will included detailed information for create/update requests. Defaults to `false`.
	AdminEventsDetailsEnabled *bool `pulumi:"adminEventsDetailsEnabled"`
	// When `true`, admin events are saved to the database, making them available through the admin console. Defaults to `false`.
	AdminEventsEnabled *bool `pulumi:"adminEventsEnabled"`
	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to `[]` or all event types.
	EnabledEventTypes []string `pulumi:"enabledEventTypes"`
	// When `true`, events from `enabledEventTypes` are saved to the database, making them available through the admin console. Defaults to `false`.
	EventsEnabled *bool `pulumi:"eventsEnabled"`
	// The amount of time in seconds events will be saved in the database. Defaults to `0` or never.
	EventsExpiration *int `pulumi:"eventsExpiration"`
	// The event listeners that events should be sent to. Defaults to `[]` or none. Note that new realms enable the `jboss-logging` listener by default, and this resource will remove that unless it is specified.
	EventsListeners []string `pulumi:"eventsListeners"`
	// The name of the realm the event settings apply to.
	RealmId *string `pulumi:"realmId"`
}

type RealmEventsState struct {
	// When `true`, saved admin events will included detailed information for create/update requests. Defaults to `false`.
	AdminEventsDetailsEnabled pulumi.BoolPtrInput
	// When `true`, admin events are saved to the database, making them available through the admin console. Defaults to `false`.
	AdminEventsEnabled pulumi.BoolPtrInput
	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to `[]` or all event types.
	EnabledEventTypes pulumi.StringArrayInput
	// When `true`, events from `enabledEventTypes` are saved to the database, making them available through the admin console. Defaults to `false`.
	EventsEnabled pulumi.BoolPtrInput
	// The amount of time in seconds events will be saved in the database. Defaults to `0` or never.
	EventsExpiration pulumi.IntPtrInput
	// The event listeners that events should be sent to. Defaults to `[]` or none. Note that new realms enable the `jboss-logging` listener by default, and this resource will remove that unless it is specified.
	EventsListeners pulumi.StringArrayInput
	// The name of the realm the event settings apply to.
	RealmId pulumi.StringPtrInput
}

func (RealmEventsState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmEventsState)(nil)).Elem()
}

type realmEventsArgs struct {
	// When `true`, saved admin events will included detailed information for create/update requests. Defaults to `false`.
	AdminEventsDetailsEnabled *bool `pulumi:"adminEventsDetailsEnabled"`
	// When `true`, admin events are saved to the database, making them available through the admin console. Defaults to `false`.
	AdminEventsEnabled *bool `pulumi:"adminEventsEnabled"`
	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to `[]` or all event types.
	EnabledEventTypes []string `pulumi:"enabledEventTypes"`
	// When `true`, events from `enabledEventTypes` are saved to the database, making them available through the admin console. Defaults to `false`.
	EventsEnabled *bool `pulumi:"eventsEnabled"`
	// The amount of time in seconds events will be saved in the database. Defaults to `0` or never.
	EventsExpiration *int `pulumi:"eventsExpiration"`
	// The event listeners that events should be sent to. Defaults to `[]` or none. Note that new realms enable the `jboss-logging` listener by default, and this resource will remove that unless it is specified.
	EventsListeners []string `pulumi:"eventsListeners"`
	// The name of the realm the event settings apply to.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a RealmEvents resource.
type RealmEventsArgs struct {
	// When `true`, saved admin events will included detailed information for create/update requests. Defaults to `false`.
	AdminEventsDetailsEnabled pulumi.BoolPtrInput
	// When `true`, admin events are saved to the database, making them available through the admin console. Defaults to `false`.
	AdminEventsEnabled pulumi.BoolPtrInput
	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to `[]` or all event types.
	EnabledEventTypes pulumi.StringArrayInput
	// When `true`, events from `enabledEventTypes` are saved to the database, making them available through the admin console. Defaults to `false`.
	EventsEnabled pulumi.BoolPtrInput
	// The amount of time in seconds events will be saved in the database. Defaults to `0` or never.
	EventsExpiration pulumi.IntPtrInput
	// The event listeners that events should be sent to. Defaults to `[]` or none. Note that new realms enable the `jboss-logging` listener by default, and this resource will remove that unless it is specified.
	EventsListeners pulumi.StringArrayInput
	// The name of the realm the event settings apply to.
	RealmId pulumi.StringInput
}

func (RealmEventsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmEventsArgs)(nil)).Elem()
}

type RealmEventsInput interface {
	pulumi.Input

	ToRealmEventsOutput() RealmEventsOutput
	ToRealmEventsOutputWithContext(ctx context.Context) RealmEventsOutput
}

func (*RealmEvents) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmEvents)(nil)).Elem()
}

func (i *RealmEvents) ToRealmEventsOutput() RealmEventsOutput {
	return i.ToRealmEventsOutputWithContext(context.Background())
}

func (i *RealmEvents) ToRealmEventsOutputWithContext(ctx context.Context) RealmEventsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmEventsOutput)
}

// RealmEventsArrayInput is an input type that accepts RealmEventsArray and RealmEventsArrayOutput values.
// You can construct a concrete instance of `RealmEventsArrayInput` via:
//
//          RealmEventsArray{ RealmEventsArgs{...} }
type RealmEventsArrayInput interface {
	pulumi.Input

	ToRealmEventsArrayOutput() RealmEventsArrayOutput
	ToRealmEventsArrayOutputWithContext(context.Context) RealmEventsArrayOutput
}

type RealmEventsArray []RealmEventsInput

func (RealmEventsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmEvents)(nil)).Elem()
}

func (i RealmEventsArray) ToRealmEventsArrayOutput() RealmEventsArrayOutput {
	return i.ToRealmEventsArrayOutputWithContext(context.Background())
}

func (i RealmEventsArray) ToRealmEventsArrayOutputWithContext(ctx context.Context) RealmEventsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmEventsArrayOutput)
}

// RealmEventsMapInput is an input type that accepts RealmEventsMap and RealmEventsMapOutput values.
// You can construct a concrete instance of `RealmEventsMapInput` via:
//
//          RealmEventsMap{ "key": RealmEventsArgs{...} }
type RealmEventsMapInput interface {
	pulumi.Input

	ToRealmEventsMapOutput() RealmEventsMapOutput
	ToRealmEventsMapOutputWithContext(context.Context) RealmEventsMapOutput
}

type RealmEventsMap map[string]RealmEventsInput

func (RealmEventsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmEvents)(nil)).Elem()
}

func (i RealmEventsMap) ToRealmEventsMapOutput() RealmEventsMapOutput {
	return i.ToRealmEventsMapOutputWithContext(context.Background())
}

func (i RealmEventsMap) ToRealmEventsMapOutputWithContext(ctx context.Context) RealmEventsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmEventsMapOutput)
}

type RealmEventsOutput struct{ *pulumi.OutputState }

func (RealmEventsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmEvents)(nil)).Elem()
}

func (o RealmEventsOutput) ToRealmEventsOutput() RealmEventsOutput {
	return o
}

func (o RealmEventsOutput) ToRealmEventsOutputWithContext(ctx context.Context) RealmEventsOutput {
	return o
}

type RealmEventsArrayOutput struct{ *pulumi.OutputState }

func (RealmEventsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmEvents)(nil)).Elem()
}

func (o RealmEventsArrayOutput) ToRealmEventsArrayOutput() RealmEventsArrayOutput {
	return o
}

func (o RealmEventsArrayOutput) ToRealmEventsArrayOutputWithContext(ctx context.Context) RealmEventsArrayOutput {
	return o
}

func (o RealmEventsArrayOutput) Index(i pulumi.IntInput) RealmEventsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RealmEvents {
		return vs[0].([]*RealmEvents)[vs[1].(int)]
	}).(RealmEventsOutput)
}

type RealmEventsMapOutput struct{ *pulumi.OutputState }

func (RealmEventsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmEvents)(nil)).Elem()
}

func (o RealmEventsMapOutput) ToRealmEventsMapOutput() RealmEventsMapOutput {
	return o
}

func (o RealmEventsMapOutput) ToRealmEventsMapOutputWithContext(ctx context.Context) RealmEventsMapOutput {
	return o
}

func (o RealmEventsMapOutput) MapIndex(k pulumi.StringInput) RealmEventsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RealmEvents {
		return vs[0].(map[string]*RealmEvents)[vs[1].(string)]
	}).(RealmEventsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmEventsInput)(nil)).Elem(), &RealmEvents{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmEventsArrayInput)(nil)).Elem(), RealmEventsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmEventsMapInput)(nil)).Elem(), RealmEventsMap{})
	pulumi.RegisterOutputType(RealmEventsOutput{})
	pulumi.RegisterOutputType(RealmEventsArrayOutput{})
	pulumi.RegisterOutputType(RealmEventsMapOutput{})
}
