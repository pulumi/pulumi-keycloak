// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for creating and managing hardcoded attribute mappers for Keycloak identity provider.
//
// The identity provider hardcoded attribute mapper will set the specified value to the IDP attribute.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak"
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/oidc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm:   pulumi.String("my-realm"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			oidc, err := oidc.NewIdentityProvider(ctx, "oidc", &oidc.IdentityProviderArgs{
//				Realm:            realm.ID(),
//				Alias:            pulumi.String("my-idp"),
//				AuthorizationUrl: pulumi.String("https://authorizationurl.com"),
//				ClientId:         pulumi.String("clientID"),
//				ClientSecret:     pulumi.String("clientSecret"),
//				TokenUrl:         pulumi.String("https://tokenurl.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keycloak.NewHardcodedAttributeIdentityProviderMapper(ctx, "oidc", &keycloak.HardcodedAttributeIdentityProviderMapperArgs{
//				Realm:                 realm.ID(),
//				Name:                  pulumi.String("hardcodedUserSessionAttribute"),
//				IdentityProviderAlias: oidc.Alias,
//				AttributeName:         pulumi.String("attribute"),
//				AttributeValue:        pulumi.String("value"),
//				UserSession:           pulumi.Bool(true),
//				ExtraConfig: pulumi.StringMap{
//					"syncMode": pulumi.String("INHERIT"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HardcodedAttributeIdentityProviderMapper struct {
	pulumi.CustomResourceState

	// The name of the IDP attribute to set.
	AttributeName pulumi.StringPtrOutput `pulumi:"attributeName"`
	// The value to set to the attribute. You can hardcode any value like 'foo'.
	AttributeValue pulumi.StringPtrOutput `pulumi:"attributeValue"`
	ExtraConfig    pulumi.StringMapOutput `pulumi:"extraConfig"`
	// The IDP alias of the attribute to set.
	IdentityProviderAlias pulumi.StringOutput `pulumi:"identityProviderAlias"`
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringOutput `pulumi:"name"`
	// The realm ID that this mapper will exist in.
	Realm pulumi.StringOutput `pulumi:"realm"`
	// Is Attribute related to a User Session.
	UserSession pulumi.BoolOutput `pulumi:"userSession"`
}

// NewHardcodedAttributeIdentityProviderMapper registers a new resource with the given unique name, arguments, and options.
func NewHardcodedAttributeIdentityProviderMapper(ctx *pulumi.Context,
	name string, args *HardcodedAttributeIdentityProviderMapperArgs, opts ...pulumi.ResourceOption) (*HardcodedAttributeIdentityProviderMapper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityProviderAlias == nil {
		return nil, errors.New("invalid value for required argument 'IdentityProviderAlias'")
	}
	if args.Realm == nil {
		return nil, errors.New("invalid value for required argument 'Realm'")
	}
	if args.UserSession == nil {
		return nil, errors.New("invalid value for required argument 'UserSession'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HardcodedAttributeIdentityProviderMapper
	err := ctx.RegisterResource("keycloak:index/hardcodedAttributeIdentityProviderMapper:HardcodedAttributeIdentityProviderMapper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHardcodedAttributeIdentityProviderMapper gets an existing HardcodedAttributeIdentityProviderMapper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHardcodedAttributeIdentityProviderMapper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HardcodedAttributeIdentityProviderMapperState, opts ...pulumi.ResourceOption) (*HardcodedAttributeIdentityProviderMapper, error) {
	var resource HardcodedAttributeIdentityProviderMapper
	err := ctx.ReadResource("keycloak:index/hardcodedAttributeIdentityProviderMapper:HardcodedAttributeIdentityProviderMapper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HardcodedAttributeIdentityProviderMapper resources.
type hardcodedAttributeIdentityProviderMapperState struct {
	// The name of the IDP attribute to set.
	AttributeName *string `pulumi:"attributeName"`
	// The value to set to the attribute. You can hardcode any value like 'foo'.
	AttributeValue *string           `pulumi:"attributeValue"`
	ExtraConfig    map[string]string `pulumi:"extraConfig"`
	// The IDP alias of the attribute to set.
	IdentityProviderAlias *string `pulumi:"identityProviderAlias"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm ID that this mapper will exist in.
	Realm *string `pulumi:"realm"`
	// Is Attribute related to a User Session.
	UserSession *bool `pulumi:"userSession"`
}

type HardcodedAttributeIdentityProviderMapperState struct {
	// The name of the IDP attribute to set.
	AttributeName pulumi.StringPtrInput
	// The value to set to the attribute. You can hardcode any value like 'foo'.
	AttributeValue pulumi.StringPtrInput
	ExtraConfig    pulumi.StringMapInput
	// The IDP alias of the attribute to set.
	IdentityProviderAlias pulumi.StringPtrInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm ID that this mapper will exist in.
	Realm pulumi.StringPtrInput
	// Is Attribute related to a User Session.
	UserSession pulumi.BoolPtrInput
}

func (HardcodedAttributeIdentityProviderMapperState) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedAttributeIdentityProviderMapperState)(nil)).Elem()
}

type hardcodedAttributeIdentityProviderMapperArgs struct {
	// The name of the IDP attribute to set.
	AttributeName *string `pulumi:"attributeName"`
	// The value to set to the attribute. You can hardcode any value like 'foo'.
	AttributeValue *string           `pulumi:"attributeValue"`
	ExtraConfig    map[string]string `pulumi:"extraConfig"`
	// The IDP alias of the attribute to set.
	IdentityProviderAlias string `pulumi:"identityProviderAlias"`
	// Display name of this mapper when displayed in the console.
	Name *string `pulumi:"name"`
	// The realm ID that this mapper will exist in.
	Realm string `pulumi:"realm"`
	// Is Attribute related to a User Session.
	UserSession bool `pulumi:"userSession"`
}

// The set of arguments for constructing a HardcodedAttributeIdentityProviderMapper resource.
type HardcodedAttributeIdentityProviderMapperArgs struct {
	// The name of the IDP attribute to set.
	AttributeName pulumi.StringPtrInput
	// The value to set to the attribute. You can hardcode any value like 'foo'.
	AttributeValue pulumi.StringPtrInput
	ExtraConfig    pulumi.StringMapInput
	// The IDP alias of the attribute to set.
	IdentityProviderAlias pulumi.StringInput
	// Display name of this mapper when displayed in the console.
	Name pulumi.StringPtrInput
	// The realm ID that this mapper will exist in.
	Realm pulumi.StringInput
	// Is Attribute related to a User Session.
	UserSession pulumi.BoolInput
}

func (HardcodedAttributeIdentityProviderMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hardcodedAttributeIdentityProviderMapperArgs)(nil)).Elem()
}

type HardcodedAttributeIdentityProviderMapperInput interface {
	pulumi.Input

	ToHardcodedAttributeIdentityProviderMapperOutput() HardcodedAttributeIdentityProviderMapperOutput
	ToHardcodedAttributeIdentityProviderMapperOutputWithContext(ctx context.Context) HardcodedAttributeIdentityProviderMapperOutput
}

func (*HardcodedAttributeIdentityProviderMapper) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedAttributeIdentityProviderMapper)(nil)).Elem()
}

func (i *HardcodedAttributeIdentityProviderMapper) ToHardcodedAttributeIdentityProviderMapperOutput() HardcodedAttributeIdentityProviderMapperOutput {
	return i.ToHardcodedAttributeIdentityProviderMapperOutputWithContext(context.Background())
}

func (i *HardcodedAttributeIdentityProviderMapper) ToHardcodedAttributeIdentityProviderMapperOutputWithContext(ctx context.Context) HardcodedAttributeIdentityProviderMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedAttributeIdentityProviderMapperOutput)
}

// HardcodedAttributeIdentityProviderMapperArrayInput is an input type that accepts HardcodedAttributeIdentityProviderMapperArray and HardcodedAttributeIdentityProviderMapperArrayOutput values.
// You can construct a concrete instance of `HardcodedAttributeIdentityProviderMapperArrayInput` via:
//
//	HardcodedAttributeIdentityProviderMapperArray{ HardcodedAttributeIdentityProviderMapperArgs{...} }
type HardcodedAttributeIdentityProviderMapperArrayInput interface {
	pulumi.Input

	ToHardcodedAttributeIdentityProviderMapperArrayOutput() HardcodedAttributeIdentityProviderMapperArrayOutput
	ToHardcodedAttributeIdentityProviderMapperArrayOutputWithContext(context.Context) HardcodedAttributeIdentityProviderMapperArrayOutput
}

type HardcodedAttributeIdentityProviderMapperArray []HardcodedAttributeIdentityProviderMapperInput

func (HardcodedAttributeIdentityProviderMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedAttributeIdentityProviderMapper)(nil)).Elem()
}

func (i HardcodedAttributeIdentityProviderMapperArray) ToHardcodedAttributeIdentityProviderMapperArrayOutput() HardcodedAttributeIdentityProviderMapperArrayOutput {
	return i.ToHardcodedAttributeIdentityProviderMapperArrayOutputWithContext(context.Background())
}

func (i HardcodedAttributeIdentityProviderMapperArray) ToHardcodedAttributeIdentityProviderMapperArrayOutputWithContext(ctx context.Context) HardcodedAttributeIdentityProviderMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedAttributeIdentityProviderMapperArrayOutput)
}

// HardcodedAttributeIdentityProviderMapperMapInput is an input type that accepts HardcodedAttributeIdentityProviderMapperMap and HardcodedAttributeIdentityProviderMapperMapOutput values.
// You can construct a concrete instance of `HardcodedAttributeIdentityProviderMapperMapInput` via:
//
//	HardcodedAttributeIdentityProviderMapperMap{ "key": HardcodedAttributeIdentityProviderMapperArgs{...} }
type HardcodedAttributeIdentityProviderMapperMapInput interface {
	pulumi.Input

	ToHardcodedAttributeIdentityProviderMapperMapOutput() HardcodedAttributeIdentityProviderMapperMapOutput
	ToHardcodedAttributeIdentityProviderMapperMapOutputWithContext(context.Context) HardcodedAttributeIdentityProviderMapperMapOutput
}

type HardcodedAttributeIdentityProviderMapperMap map[string]HardcodedAttributeIdentityProviderMapperInput

func (HardcodedAttributeIdentityProviderMapperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedAttributeIdentityProviderMapper)(nil)).Elem()
}

func (i HardcodedAttributeIdentityProviderMapperMap) ToHardcodedAttributeIdentityProviderMapperMapOutput() HardcodedAttributeIdentityProviderMapperMapOutput {
	return i.ToHardcodedAttributeIdentityProviderMapperMapOutputWithContext(context.Background())
}

func (i HardcodedAttributeIdentityProviderMapperMap) ToHardcodedAttributeIdentityProviderMapperMapOutputWithContext(ctx context.Context) HardcodedAttributeIdentityProviderMapperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardcodedAttributeIdentityProviderMapperMapOutput)
}

type HardcodedAttributeIdentityProviderMapperOutput struct{ *pulumi.OutputState }

func (HardcodedAttributeIdentityProviderMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardcodedAttributeIdentityProviderMapper)(nil)).Elem()
}

func (o HardcodedAttributeIdentityProviderMapperOutput) ToHardcodedAttributeIdentityProviderMapperOutput() HardcodedAttributeIdentityProviderMapperOutput {
	return o
}

func (o HardcodedAttributeIdentityProviderMapperOutput) ToHardcodedAttributeIdentityProviderMapperOutputWithContext(ctx context.Context) HardcodedAttributeIdentityProviderMapperOutput {
	return o
}

// The name of the IDP attribute to set.
func (o HardcodedAttributeIdentityProviderMapperOutput) AttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedAttributeIdentityProviderMapper) pulumi.StringPtrOutput { return v.AttributeName }).(pulumi.StringPtrOutput)
}

// The value to set to the attribute. You can hardcode any value like 'foo'.
func (o HardcodedAttributeIdentityProviderMapperOutput) AttributeValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardcodedAttributeIdentityProviderMapper) pulumi.StringPtrOutput { return v.AttributeValue }).(pulumi.StringPtrOutput)
}

func (o HardcodedAttributeIdentityProviderMapperOutput) ExtraConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HardcodedAttributeIdentityProviderMapper) pulumi.StringMapOutput { return v.ExtraConfig }).(pulumi.StringMapOutput)
}

// The IDP alias of the attribute to set.
func (o HardcodedAttributeIdentityProviderMapperOutput) IdentityProviderAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedAttributeIdentityProviderMapper) pulumi.StringOutput { return v.IdentityProviderAlias }).(pulumi.StringOutput)
}

// Display name of this mapper when displayed in the console.
func (o HardcodedAttributeIdentityProviderMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedAttributeIdentityProviderMapper) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The realm ID that this mapper will exist in.
func (o HardcodedAttributeIdentityProviderMapperOutput) Realm() pulumi.StringOutput {
	return o.ApplyT(func(v *HardcodedAttributeIdentityProviderMapper) pulumi.StringOutput { return v.Realm }).(pulumi.StringOutput)
}

// Is Attribute related to a User Session.
func (o HardcodedAttributeIdentityProviderMapperOutput) UserSession() pulumi.BoolOutput {
	return o.ApplyT(func(v *HardcodedAttributeIdentityProviderMapper) pulumi.BoolOutput { return v.UserSession }).(pulumi.BoolOutput)
}

type HardcodedAttributeIdentityProviderMapperArrayOutput struct{ *pulumi.OutputState }

func (HardcodedAttributeIdentityProviderMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HardcodedAttributeIdentityProviderMapper)(nil)).Elem()
}

func (o HardcodedAttributeIdentityProviderMapperArrayOutput) ToHardcodedAttributeIdentityProviderMapperArrayOutput() HardcodedAttributeIdentityProviderMapperArrayOutput {
	return o
}

func (o HardcodedAttributeIdentityProviderMapperArrayOutput) ToHardcodedAttributeIdentityProviderMapperArrayOutputWithContext(ctx context.Context) HardcodedAttributeIdentityProviderMapperArrayOutput {
	return o
}

func (o HardcodedAttributeIdentityProviderMapperArrayOutput) Index(i pulumi.IntInput) HardcodedAttributeIdentityProviderMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HardcodedAttributeIdentityProviderMapper {
		return vs[0].([]*HardcodedAttributeIdentityProviderMapper)[vs[1].(int)]
	}).(HardcodedAttributeIdentityProviderMapperOutput)
}

type HardcodedAttributeIdentityProviderMapperMapOutput struct{ *pulumi.OutputState }

func (HardcodedAttributeIdentityProviderMapperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HardcodedAttributeIdentityProviderMapper)(nil)).Elem()
}

func (o HardcodedAttributeIdentityProviderMapperMapOutput) ToHardcodedAttributeIdentityProviderMapperMapOutput() HardcodedAttributeIdentityProviderMapperMapOutput {
	return o
}

func (o HardcodedAttributeIdentityProviderMapperMapOutput) ToHardcodedAttributeIdentityProviderMapperMapOutputWithContext(ctx context.Context) HardcodedAttributeIdentityProviderMapperMapOutput {
	return o
}

func (o HardcodedAttributeIdentityProviderMapperMapOutput) MapIndex(k pulumi.StringInput) HardcodedAttributeIdentityProviderMapperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HardcodedAttributeIdentityProviderMapper {
		return vs[0].(map[string]*HardcodedAttributeIdentityProviderMapper)[vs[1].(string)]
	}).(HardcodedAttributeIdentityProviderMapperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedAttributeIdentityProviderMapperInput)(nil)).Elem(), &HardcodedAttributeIdentityProviderMapper{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedAttributeIdentityProviderMapperArrayInput)(nil)).Elem(), HardcodedAttributeIdentityProviderMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HardcodedAttributeIdentityProviderMapperMapInput)(nil)).Elem(), HardcodedAttributeIdentityProviderMapperMap{})
	pulumi.RegisterOutputType(HardcodedAttributeIdentityProviderMapperOutput{})
	pulumi.RegisterOutputType(HardcodedAttributeIdentityProviderMapperArrayOutput{})
	pulumi.RegisterOutputType(HardcodedAttributeIdentityProviderMapperMapOutput{})
}
