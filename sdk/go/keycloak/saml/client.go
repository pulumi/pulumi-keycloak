// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package saml

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # saml.Client
//
// Allows for creating and managing Keycloak clients that use the SAML protocol.
//
// Clients are entities that can use Keycloak for user authentication. Typically,
// clients are applications that redirect users to Keycloak for authentication
// in order to take advantage of Keycloak's user sessions for SSO.
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm this client is attached to.
// - `clientId` - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.
// - `name` - (Optional) The display name of this client in the GUI.
// - `enabled` - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to `true`.
// - `description` - (Optional) The description of this client in the GUI.
// - `includeAuthnStatement` - (Optional) When `true`, an `AuthnStatement` will be included in the SAML response.
// - `signDocuments` - (Optional) When `true`, the SAML document will be signed by Keycloak using the realm's private key.
// - `signAssertions` - (Optional) When `true`, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.
// - `clientSignatureRequired` - (Optional) When `true`, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via `signingCertificate` and `signingPrivateKey`.
// - `forcePostBinding` - (Optional) When `true`, Keycloak will always respond to an authentication request via the SAML POST Binding.
// - `frontChannelLogout` - (Optional) When `true`, this client will require a browser redirect in order to perform a logout.
// - `nameIdFormat` - (Optional) Sets the Name ID format for the subject.
// - `rootUrl` - (Optional) When specified, this value is prepended to all relative URLs.
// - `validRedirectUris` - (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.
// - `baseUrl` - (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client.
// - `masterSamlProcessingUrl` - (Optional) When specified, this URL will be used for all SAML requests.
// - `signingCertificate` - (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature.
// - `signingPrivateKey` - (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature.
// - `idpInitiatedSsoUrlName` - (Optional) URL fragment name to reference client when you want to do IDP Initiated SSO.
// - `idpInitiatedSsoRelayState` - (Optional) Relay state you want to send with SAML request when you want to do IDP Initiated SSO.
// - `assertionConsumerPostUrl` - (Optional) SAML POST Binding URL for the client's assertion consumer service (login responses).
// - `assertionConsumerRedirectUrl` - (Optional) SAML Redirect Binding URL for the client's assertion consumer service (login responses).
// - `logoutServicePostBindingUrl` - (Optional) SAML POST Binding URL for the client's single logout service.
// - `logoutServiceRedirectBindingUrl` - (Optional) SAML Redirect Binding URL for the client's single logout service.
// - `fullScopeAllowed` - (Optional) - Allow to include all roles mappings in the access token
type Client struct {
	pulumi.CustomResourceState

	AssertionConsumerPostUrl        pulumi.StringPtrOutput   `pulumi:"assertionConsumerPostUrl"`
	AssertionConsumerRedirectUrl    pulumi.StringPtrOutput   `pulumi:"assertionConsumerRedirectUrl"`
	BaseUrl                         pulumi.StringPtrOutput   `pulumi:"baseUrl"`
	ClientId                        pulumi.StringOutput      `pulumi:"clientId"`
	ClientSignatureRequired         pulumi.BoolOutput        `pulumi:"clientSignatureRequired"`
	Description                     pulumi.StringPtrOutput   `pulumi:"description"`
	Enabled                         pulumi.BoolPtrOutput     `pulumi:"enabled"`
	ForcePostBinding                pulumi.BoolOutput        `pulumi:"forcePostBinding"`
	FrontChannelLogout              pulumi.BoolOutput        `pulumi:"frontChannelLogout"`
	FullScopeAllowed                pulumi.BoolPtrOutput     `pulumi:"fullScopeAllowed"`
	IdpInitiatedSsoRelayState       pulumi.StringPtrOutput   `pulumi:"idpInitiatedSsoRelayState"`
	IdpInitiatedSsoUrlName          pulumi.StringPtrOutput   `pulumi:"idpInitiatedSsoUrlName"`
	IncludeAuthnStatement           pulumi.BoolOutput        `pulumi:"includeAuthnStatement"`
	LogoutServicePostBindingUrl     pulumi.StringPtrOutput   `pulumi:"logoutServicePostBindingUrl"`
	LogoutServiceRedirectBindingUrl pulumi.StringPtrOutput   `pulumi:"logoutServiceRedirectBindingUrl"`
	MasterSamlProcessingUrl         pulumi.StringPtrOutput   `pulumi:"masterSamlProcessingUrl"`
	Name                            pulumi.StringOutput      `pulumi:"name"`
	NameIdFormat                    pulumi.StringOutput      `pulumi:"nameIdFormat"`
	RealmId                         pulumi.StringOutput      `pulumi:"realmId"`
	RootUrl                         pulumi.StringPtrOutput   `pulumi:"rootUrl"`
	SignAssertions                  pulumi.BoolOutput        `pulumi:"signAssertions"`
	SignDocuments                   pulumi.BoolOutput        `pulumi:"signDocuments"`
	SigningCertificate              pulumi.StringPtrOutput   `pulumi:"signingCertificate"`
	SigningPrivateKey               pulumi.StringPtrOutput   `pulumi:"signingPrivateKey"`
	ValidRedirectUris               pulumi.StringArrayOutput `pulumi:"validRedirectUris"`
}

// NewClient registers a new resource with the given unique name, arguments, and options.
func NewClient(ctx *pulumi.Context,
	name string, args *ClientArgs, opts ...pulumi.ResourceOption) (*Client, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &ClientArgs{}
	}
	var resource Client
	err := ctx.RegisterResource("keycloak:saml/client:Client", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClient gets an existing Client resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientState, opts ...pulumi.ResourceOption) (*Client, error) {
	var resource Client
	err := ctx.ReadResource("keycloak:saml/client:Client", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Client resources.
type clientState struct {
	AssertionConsumerPostUrl        *string  `pulumi:"assertionConsumerPostUrl"`
	AssertionConsumerRedirectUrl    *string  `pulumi:"assertionConsumerRedirectUrl"`
	BaseUrl                         *string  `pulumi:"baseUrl"`
	ClientId                        *string  `pulumi:"clientId"`
	ClientSignatureRequired         *bool    `pulumi:"clientSignatureRequired"`
	Description                     *string  `pulumi:"description"`
	Enabled                         *bool    `pulumi:"enabled"`
	ForcePostBinding                *bool    `pulumi:"forcePostBinding"`
	FrontChannelLogout              *bool    `pulumi:"frontChannelLogout"`
	FullScopeAllowed                *bool    `pulumi:"fullScopeAllowed"`
	IdpInitiatedSsoRelayState       *string  `pulumi:"idpInitiatedSsoRelayState"`
	IdpInitiatedSsoUrlName          *string  `pulumi:"idpInitiatedSsoUrlName"`
	IncludeAuthnStatement           *bool    `pulumi:"includeAuthnStatement"`
	LogoutServicePostBindingUrl     *string  `pulumi:"logoutServicePostBindingUrl"`
	LogoutServiceRedirectBindingUrl *string  `pulumi:"logoutServiceRedirectBindingUrl"`
	MasterSamlProcessingUrl         *string  `pulumi:"masterSamlProcessingUrl"`
	Name                            *string  `pulumi:"name"`
	NameIdFormat                    *string  `pulumi:"nameIdFormat"`
	RealmId                         *string  `pulumi:"realmId"`
	RootUrl                         *string  `pulumi:"rootUrl"`
	SignAssertions                  *bool    `pulumi:"signAssertions"`
	SignDocuments                   *bool    `pulumi:"signDocuments"`
	SigningCertificate              *string  `pulumi:"signingCertificate"`
	SigningPrivateKey               *string  `pulumi:"signingPrivateKey"`
	ValidRedirectUris               []string `pulumi:"validRedirectUris"`
}

type ClientState struct {
	AssertionConsumerPostUrl        pulumi.StringPtrInput
	AssertionConsumerRedirectUrl    pulumi.StringPtrInput
	BaseUrl                         pulumi.StringPtrInput
	ClientId                        pulumi.StringPtrInput
	ClientSignatureRequired         pulumi.BoolPtrInput
	Description                     pulumi.StringPtrInput
	Enabled                         pulumi.BoolPtrInput
	ForcePostBinding                pulumi.BoolPtrInput
	FrontChannelLogout              pulumi.BoolPtrInput
	FullScopeAllowed                pulumi.BoolPtrInput
	IdpInitiatedSsoRelayState       pulumi.StringPtrInput
	IdpInitiatedSsoUrlName          pulumi.StringPtrInput
	IncludeAuthnStatement           pulumi.BoolPtrInput
	LogoutServicePostBindingUrl     pulumi.StringPtrInput
	LogoutServiceRedirectBindingUrl pulumi.StringPtrInput
	MasterSamlProcessingUrl         pulumi.StringPtrInput
	Name                            pulumi.StringPtrInput
	NameIdFormat                    pulumi.StringPtrInput
	RealmId                         pulumi.StringPtrInput
	RootUrl                         pulumi.StringPtrInput
	SignAssertions                  pulumi.BoolPtrInput
	SignDocuments                   pulumi.BoolPtrInput
	SigningCertificate              pulumi.StringPtrInput
	SigningPrivateKey               pulumi.StringPtrInput
	ValidRedirectUris               pulumi.StringArrayInput
}

func (ClientState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientState)(nil)).Elem()
}

type clientArgs struct {
	AssertionConsumerPostUrl        *string  `pulumi:"assertionConsumerPostUrl"`
	AssertionConsumerRedirectUrl    *string  `pulumi:"assertionConsumerRedirectUrl"`
	BaseUrl                         *string  `pulumi:"baseUrl"`
	ClientId                        string   `pulumi:"clientId"`
	ClientSignatureRequired         *bool    `pulumi:"clientSignatureRequired"`
	Description                     *string  `pulumi:"description"`
	Enabled                         *bool    `pulumi:"enabled"`
	ForcePostBinding                *bool    `pulumi:"forcePostBinding"`
	FrontChannelLogout              *bool    `pulumi:"frontChannelLogout"`
	FullScopeAllowed                *bool    `pulumi:"fullScopeAllowed"`
	IdpInitiatedSsoRelayState       *string  `pulumi:"idpInitiatedSsoRelayState"`
	IdpInitiatedSsoUrlName          *string  `pulumi:"idpInitiatedSsoUrlName"`
	IncludeAuthnStatement           *bool    `pulumi:"includeAuthnStatement"`
	LogoutServicePostBindingUrl     *string  `pulumi:"logoutServicePostBindingUrl"`
	LogoutServiceRedirectBindingUrl *string  `pulumi:"logoutServiceRedirectBindingUrl"`
	MasterSamlProcessingUrl         *string  `pulumi:"masterSamlProcessingUrl"`
	Name                            *string  `pulumi:"name"`
	NameIdFormat                    *string  `pulumi:"nameIdFormat"`
	RealmId                         string   `pulumi:"realmId"`
	RootUrl                         *string  `pulumi:"rootUrl"`
	SignAssertions                  *bool    `pulumi:"signAssertions"`
	SignDocuments                   *bool    `pulumi:"signDocuments"`
	SigningCertificate              *string  `pulumi:"signingCertificate"`
	SigningPrivateKey               *string  `pulumi:"signingPrivateKey"`
	ValidRedirectUris               []string `pulumi:"validRedirectUris"`
}

// The set of arguments for constructing a Client resource.
type ClientArgs struct {
	AssertionConsumerPostUrl        pulumi.StringPtrInput
	AssertionConsumerRedirectUrl    pulumi.StringPtrInput
	BaseUrl                         pulumi.StringPtrInput
	ClientId                        pulumi.StringInput
	ClientSignatureRequired         pulumi.BoolPtrInput
	Description                     pulumi.StringPtrInput
	Enabled                         pulumi.BoolPtrInput
	ForcePostBinding                pulumi.BoolPtrInput
	FrontChannelLogout              pulumi.BoolPtrInput
	FullScopeAllowed                pulumi.BoolPtrInput
	IdpInitiatedSsoRelayState       pulumi.StringPtrInput
	IdpInitiatedSsoUrlName          pulumi.StringPtrInput
	IncludeAuthnStatement           pulumi.BoolPtrInput
	LogoutServicePostBindingUrl     pulumi.StringPtrInput
	LogoutServiceRedirectBindingUrl pulumi.StringPtrInput
	MasterSamlProcessingUrl         pulumi.StringPtrInput
	Name                            pulumi.StringPtrInput
	NameIdFormat                    pulumi.StringPtrInput
	RealmId                         pulumi.StringInput
	RootUrl                         pulumi.StringPtrInput
	SignAssertions                  pulumi.BoolPtrInput
	SignDocuments                   pulumi.BoolPtrInput
	SigningCertificate              pulumi.StringPtrInput
	SigningPrivateKey               pulumi.StringPtrInput
	ValidRedirectUris               pulumi.StringArrayInput
}

func (ClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientArgs)(nil)).Elem()
}
