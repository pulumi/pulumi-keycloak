// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package saml

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.
type ClientDefaultScope struct {
	pulumi.CustomResourceState

	// The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// An array of client scope names to attach to this client.
	DefaultScopes pulumi.StringArrayOutput `pulumi:"defaultScopes"`
	// The realm this client and scopes exists in.
	RealmId pulumi.StringOutput `pulumi:"realmId"`
}

// NewClientDefaultScope registers a new resource with the given unique name, arguments, and options.
func NewClientDefaultScope(ctx *pulumi.Context,
	name string, args *ClientDefaultScopeArgs, opts ...pulumi.ResourceOption) (*ClientDefaultScope, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.DefaultScopes == nil {
		return nil, errors.New("missing required argument 'DefaultScopes'")
	}
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &ClientDefaultScopeArgs{}
	}
	var resource ClientDefaultScope
	err := ctx.RegisterResource("keycloak:saml/clientDefaultScope:ClientDefaultScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientDefaultScope gets an existing ClientDefaultScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientDefaultScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientDefaultScopeState, opts ...pulumi.ResourceOption) (*ClientDefaultScope, error) {
	var resource ClientDefaultScope
	err := ctx.ReadResource("keycloak:saml/clientDefaultScope:ClientDefaultScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientDefaultScope resources.
type clientDefaultScopeState struct {
	// The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId *string `pulumi:"clientId"`
	// An array of client scope names to attach to this client.
	DefaultScopes []string `pulumi:"defaultScopes"`
	// The realm this client and scopes exists in.
	RealmId *string `pulumi:"realmId"`
}

type ClientDefaultScopeState struct {
	// The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId pulumi.StringPtrInput
	// An array of client scope names to attach to this client.
	DefaultScopes pulumi.StringArrayInput
	// The realm this client and scopes exists in.
	RealmId pulumi.StringPtrInput
}

func (ClientDefaultScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientDefaultScopeState)(nil)).Elem()
}

type clientDefaultScopeArgs struct {
	// The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId string `pulumi:"clientId"`
	// An array of client scope names to attach to this client.
	DefaultScopes []string `pulumi:"defaultScopes"`
	// The realm this client and scopes exists in.
	RealmId string `pulumi:"realmId"`
}

// The set of arguments for constructing a ClientDefaultScope resource.
type ClientDefaultScopeArgs struct {
	// The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.
	ClientId pulumi.StringInput
	// An array of client scope names to attach to this client.
	DefaultScopes pulumi.StringArrayInput
	// The realm this client and scopes exists in.
	RealmId pulumi.StringInput
}

func (ClientDefaultScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientDefaultScopeArgs)(nil)).Elem()
}

type ClientDefaultScopeInput interface {
	pulumi.Input

	ToClientDefaultScopeOutput() ClientDefaultScopeOutput
	ToClientDefaultScopeOutputWithContext(ctx context.Context) ClientDefaultScopeOutput
}

func (ClientDefaultScope) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientDefaultScope)(nil)).Elem()
}

func (i ClientDefaultScope) ToClientDefaultScopeOutput() ClientDefaultScopeOutput {
	return i.ToClientDefaultScopeOutputWithContext(context.Background())
}

func (i ClientDefaultScope) ToClientDefaultScopeOutputWithContext(ctx context.Context) ClientDefaultScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientDefaultScopeOutput)
}

type ClientDefaultScopeOutput struct {
	*pulumi.OutputState
}

func (ClientDefaultScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientDefaultScopeOutput)(nil)).Elem()
}

func (o ClientDefaultScopeOutput) ToClientDefaultScopeOutput() ClientDefaultScopeOutput {
	return o
}

func (o ClientDefaultScopeOutput) ToClientDefaultScopeOutputWithContext(ctx context.Context) ClientDefaultScopeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClientDefaultScopeOutput{})
}
