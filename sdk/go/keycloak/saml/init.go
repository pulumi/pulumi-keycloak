// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package saml

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-keycloak/sdk/v4/go/keycloak"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "keycloak:saml/client:Client":
		r = &Client{}
	case "keycloak:saml/clientDefaultScope:ClientDefaultScope":
		r = &ClientDefaultScope{}
	case "keycloak:saml/clientScope:ClientScope":
		r = &ClientScope{}
	case "keycloak:saml/identityProvider:IdentityProvider":
		r = &IdentityProvider{}
	case "keycloak:saml/scriptProtocolMapper:ScriptProtocolMapper":
		r = &ScriptProtocolMapper{}
	case "keycloak:saml/userAttributeProtocolMapper:UserAttributeProtocolMapper":
		r = &UserAttributeProtocolMapper{}
	case "keycloak:saml/userPropertyProtocolMapper:UserPropertyProtocolMapper":
		r = &UserPropertyProtocolMapper{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := keycloak.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"keycloak",
		"saml/client",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"keycloak",
		"saml/clientDefaultScope",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"keycloak",
		"saml/clientScope",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"keycloak",
		"saml/identityProvider",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"keycloak",
		"saml/scriptProtocolMapper",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"keycloak",
		"saml/userAttributeProtocolMapper",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"keycloak",
		"saml/userPropertyProtocolMapper",
		&module{version},
	)
}
