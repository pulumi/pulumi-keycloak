// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupPermissionsManageMembersScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// GroupPermissionsManageMembersScopeInput is an input type that accepts GroupPermissionsManageMembersScopeArgs and GroupPermissionsManageMembersScopeOutput values.
// You can construct a concrete instance of `GroupPermissionsManageMembersScopeInput` via:
//
//          GroupPermissionsManageMembersScopeArgs{...}
type GroupPermissionsManageMembersScopeInput interface {
	pulumi.Input

	ToGroupPermissionsManageMembersScopeOutput() GroupPermissionsManageMembersScopeOutput
	ToGroupPermissionsManageMembersScopeOutputWithContext(context.Context) GroupPermissionsManageMembersScopeOutput
}

type GroupPermissionsManageMembersScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (GroupPermissionsManageMembersScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsManageMembersScope)(nil)).Elem()
}

func (i GroupPermissionsManageMembersScopeArgs) ToGroupPermissionsManageMembersScopeOutput() GroupPermissionsManageMembersScopeOutput {
	return i.ToGroupPermissionsManageMembersScopeOutputWithContext(context.Background())
}

func (i GroupPermissionsManageMembersScopeArgs) ToGroupPermissionsManageMembersScopeOutputWithContext(ctx context.Context) GroupPermissionsManageMembersScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageMembersScopeOutput)
}

func (i GroupPermissionsManageMembersScopeArgs) ToGroupPermissionsManageMembersScopePtrOutput() GroupPermissionsManageMembersScopePtrOutput {
	return i.ToGroupPermissionsManageMembersScopePtrOutputWithContext(context.Background())
}

func (i GroupPermissionsManageMembersScopeArgs) ToGroupPermissionsManageMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembersScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageMembersScopeOutput).ToGroupPermissionsManageMembersScopePtrOutputWithContext(ctx)
}

// GroupPermissionsManageMembersScopePtrInput is an input type that accepts GroupPermissionsManageMembersScopeArgs, GroupPermissionsManageMembersScopePtr and GroupPermissionsManageMembersScopePtrOutput values.
// You can construct a concrete instance of `GroupPermissionsManageMembersScopePtrInput` via:
//
//          GroupPermissionsManageMembersScopeArgs{...}
//
//  or:
//
//          nil
type GroupPermissionsManageMembersScopePtrInput interface {
	pulumi.Input

	ToGroupPermissionsManageMembersScopePtrOutput() GroupPermissionsManageMembersScopePtrOutput
	ToGroupPermissionsManageMembersScopePtrOutputWithContext(context.Context) GroupPermissionsManageMembersScopePtrOutput
}

type groupPermissionsManageMembersScopePtrType GroupPermissionsManageMembersScopeArgs

func GroupPermissionsManageMembersScopePtr(v *GroupPermissionsManageMembersScopeArgs) GroupPermissionsManageMembersScopePtrInput {
	return (*groupPermissionsManageMembersScopePtrType)(v)
}

func (*groupPermissionsManageMembersScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsManageMembersScope)(nil)).Elem()
}

func (i *groupPermissionsManageMembersScopePtrType) ToGroupPermissionsManageMembersScopePtrOutput() GroupPermissionsManageMembersScopePtrOutput {
	return i.ToGroupPermissionsManageMembersScopePtrOutputWithContext(context.Background())
}

func (i *groupPermissionsManageMembersScopePtrType) ToGroupPermissionsManageMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembersScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageMembersScopePtrOutput)
}

type GroupPermissionsManageMembersScopeOutput struct{ *pulumi.OutputState }

func (GroupPermissionsManageMembersScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsManageMembersScope)(nil)).Elem()
}

func (o GroupPermissionsManageMembersScopeOutput) ToGroupPermissionsManageMembersScopeOutput() GroupPermissionsManageMembersScopeOutput {
	return o
}

func (o GroupPermissionsManageMembersScopeOutput) ToGroupPermissionsManageMembersScopeOutputWithContext(ctx context.Context) GroupPermissionsManageMembersScopeOutput {
	return o
}

func (o GroupPermissionsManageMembersScopeOutput) ToGroupPermissionsManageMembersScopePtrOutput() GroupPermissionsManageMembersScopePtrOutput {
	return o.ToGroupPermissionsManageMembersScopePtrOutputWithContext(context.Background())
}

func (o GroupPermissionsManageMembersScopeOutput) ToGroupPermissionsManageMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembersScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPermissionsManageMembersScope) *GroupPermissionsManageMembersScope {
		return &v
	}).(GroupPermissionsManageMembersScopePtrOutput)
}

func (o GroupPermissionsManageMembersScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsManageMembersScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembersScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsManageMembersScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembersScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPermissionsManageMembersScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type GroupPermissionsManageMembersScopePtrOutput struct{ *pulumi.OutputState }

func (GroupPermissionsManageMembersScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsManageMembersScope)(nil)).Elem()
}

func (o GroupPermissionsManageMembersScopePtrOutput) ToGroupPermissionsManageMembersScopePtrOutput() GroupPermissionsManageMembersScopePtrOutput {
	return o
}

func (o GroupPermissionsManageMembersScopePtrOutput) ToGroupPermissionsManageMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembersScopePtrOutput {
	return o
}

func (o GroupPermissionsManageMembersScopePtrOutput) Elem() GroupPermissionsManageMembersScopeOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembersScope) GroupPermissionsManageMembersScope {
		if v != nil {
			return *v
		}
		var ret GroupPermissionsManageMembersScope
		return ret
	}).(GroupPermissionsManageMembersScopeOutput)
}

func (o GroupPermissionsManageMembersScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembersScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembersScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembersScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembersScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembersScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type GroupPermissionsManageMembershipScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// GroupPermissionsManageMembershipScopeInput is an input type that accepts GroupPermissionsManageMembershipScopeArgs and GroupPermissionsManageMembershipScopeOutput values.
// You can construct a concrete instance of `GroupPermissionsManageMembershipScopeInput` via:
//
//          GroupPermissionsManageMembershipScopeArgs{...}
type GroupPermissionsManageMembershipScopeInput interface {
	pulumi.Input

	ToGroupPermissionsManageMembershipScopeOutput() GroupPermissionsManageMembershipScopeOutput
	ToGroupPermissionsManageMembershipScopeOutputWithContext(context.Context) GroupPermissionsManageMembershipScopeOutput
}

type GroupPermissionsManageMembershipScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (GroupPermissionsManageMembershipScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsManageMembershipScope)(nil)).Elem()
}

func (i GroupPermissionsManageMembershipScopeArgs) ToGroupPermissionsManageMembershipScopeOutput() GroupPermissionsManageMembershipScopeOutput {
	return i.ToGroupPermissionsManageMembershipScopeOutputWithContext(context.Background())
}

func (i GroupPermissionsManageMembershipScopeArgs) ToGroupPermissionsManageMembershipScopeOutputWithContext(ctx context.Context) GroupPermissionsManageMembershipScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageMembershipScopeOutput)
}

func (i GroupPermissionsManageMembershipScopeArgs) ToGroupPermissionsManageMembershipScopePtrOutput() GroupPermissionsManageMembershipScopePtrOutput {
	return i.ToGroupPermissionsManageMembershipScopePtrOutputWithContext(context.Background())
}

func (i GroupPermissionsManageMembershipScopeArgs) ToGroupPermissionsManageMembershipScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembershipScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageMembershipScopeOutput).ToGroupPermissionsManageMembershipScopePtrOutputWithContext(ctx)
}

// GroupPermissionsManageMembershipScopePtrInput is an input type that accepts GroupPermissionsManageMembershipScopeArgs, GroupPermissionsManageMembershipScopePtr and GroupPermissionsManageMembershipScopePtrOutput values.
// You can construct a concrete instance of `GroupPermissionsManageMembershipScopePtrInput` via:
//
//          GroupPermissionsManageMembershipScopeArgs{...}
//
//  or:
//
//          nil
type GroupPermissionsManageMembershipScopePtrInput interface {
	pulumi.Input

	ToGroupPermissionsManageMembershipScopePtrOutput() GroupPermissionsManageMembershipScopePtrOutput
	ToGroupPermissionsManageMembershipScopePtrOutputWithContext(context.Context) GroupPermissionsManageMembershipScopePtrOutput
}

type groupPermissionsManageMembershipScopePtrType GroupPermissionsManageMembershipScopeArgs

func GroupPermissionsManageMembershipScopePtr(v *GroupPermissionsManageMembershipScopeArgs) GroupPermissionsManageMembershipScopePtrInput {
	return (*groupPermissionsManageMembershipScopePtrType)(v)
}

func (*groupPermissionsManageMembershipScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsManageMembershipScope)(nil)).Elem()
}

func (i *groupPermissionsManageMembershipScopePtrType) ToGroupPermissionsManageMembershipScopePtrOutput() GroupPermissionsManageMembershipScopePtrOutput {
	return i.ToGroupPermissionsManageMembershipScopePtrOutputWithContext(context.Background())
}

func (i *groupPermissionsManageMembershipScopePtrType) ToGroupPermissionsManageMembershipScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembershipScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageMembershipScopePtrOutput)
}

type GroupPermissionsManageMembershipScopeOutput struct{ *pulumi.OutputState }

func (GroupPermissionsManageMembershipScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsManageMembershipScope)(nil)).Elem()
}

func (o GroupPermissionsManageMembershipScopeOutput) ToGroupPermissionsManageMembershipScopeOutput() GroupPermissionsManageMembershipScopeOutput {
	return o
}

func (o GroupPermissionsManageMembershipScopeOutput) ToGroupPermissionsManageMembershipScopeOutputWithContext(ctx context.Context) GroupPermissionsManageMembershipScopeOutput {
	return o
}

func (o GroupPermissionsManageMembershipScopeOutput) ToGroupPermissionsManageMembershipScopePtrOutput() GroupPermissionsManageMembershipScopePtrOutput {
	return o.ToGroupPermissionsManageMembershipScopePtrOutputWithContext(context.Background())
}

func (o GroupPermissionsManageMembershipScopeOutput) ToGroupPermissionsManageMembershipScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembershipScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPermissionsManageMembershipScope) *GroupPermissionsManageMembershipScope {
		return &v
	}).(GroupPermissionsManageMembershipScopePtrOutput)
}

func (o GroupPermissionsManageMembershipScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsManageMembershipScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembershipScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsManageMembershipScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembershipScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPermissionsManageMembershipScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type GroupPermissionsManageMembershipScopePtrOutput struct{ *pulumi.OutputState }

func (GroupPermissionsManageMembershipScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsManageMembershipScope)(nil)).Elem()
}

func (o GroupPermissionsManageMembershipScopePtrOutput) ToGroupPermissionsManageMembershipScopePtrOutput() GroupPermissionsManageMembershipScopePtrOutput {
	return o
}

func (o GroupPermissionsManageMembershipScopePtrOutput) ToGroupPermissionsManageMembershipScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageMembershipScopePtrOutput {
	return o
}

func (o GroupPermissionsManageMembershipScopePtrOutput) Elem() GroupPermissionsManageMembershipScopeOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembershipScope) GroupPermissionsManageMembershipScope {
		if v != nil {
			return *v
		}
		var ret GroupPermissionsManageMembershipScope
		return ret
	}).(GroupPermissionsManageMembershipScopeOutput)
}

func (o GroupPermissionsManageMembershipScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembershipScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembershipScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembershipScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageMembershipScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPermissionsManageMembershipScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type GroupPermissionsManageScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// GroupPermissionsManageScopeInput is an input type that accepts GroupPermissionsManageScopeArgs and GroupPermissionsManageScopeOutput values.
// You can construct a concrete instance of `GroupPermissionsManageScopeInput` via:
//
//          GroupPermissionsManageScopeArgs{...}
type GroupPermissionsManageScopeInput interface {
	pulumi.Input

	ToGroupPermissionsManageScopeOutput() GroupPermissionsManageScopeOutput
	ToGroupPermissionsManageScopeOutputWithContext(context.Context) GroupPermissionsManageScopeOutput
}

type GroupPermissionsManageScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (GroupPermissionsManageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsManageScope)(nil)).Elem()
}

func (i GroupPermissionsManageScopeArgs) ToGroupPermissionsManageScopeOutput() GroupPermissionsManageScopeOutput {
	return i.ToGroupPermissionsManageScopeOutputWithContext(context.Background())
}

func (i GroupPermissionsManageScopeArgs) ToGroupPermissionsManageScopeOutputWithContext(ctx context.Context) GroupPermissionsManageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageScopeOutput)
}

func (i GroupPermissionsManageScopeArgs) ToGroupPermissionsManageScopePtrOutput() GroupPermissionsManageScopePtrOutput {
	return i.ToGroupPermissionsManageScopePtrOutputWithContext(context.Background())
}

func (i GroupPermissionsManageScopeArgs) ToGroupPermissionsManageScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageScopeOutput).ToGroupPermissionsManageScopePtrOutputWithContext(ctx)
}

// GroupPermissionsManageScopePtrInput is an input type that accepts GroupPermissionsManageScopeArgs, GroupPermissionsManageScopePtr and GroupPermissionsManageScopePtrOutput values.
// You can construct a concrete instance of `GroupPermissionsManageScopePtrInput` via:
//
//          GroupPermissionsManageScopeArgs{...}
//
//  or:
//
//          nil
type GroupPermissionsManageScopePtrInput interface {
	pulumi.Input

	ToGroupPermissionsManageScopePtrOutput() GroupPermissionsManageScopePtrOutput
	ToGroupPermissionsManageScopePtrOutputWithContext(context.Context) GroupPermissionsManageScopePtrOutput
}

type groupPermissionsManageScopePtrType GroupPermissionsManageScopeArgs

func GroupPermissionsManageScopePtr(v *GroupPermissionsManageScopeArgs) GroupPermissionsManageScopePtrInput {
	return (*groupPermissionsManageScopePtrType)(v)
}

func (*groupPermissionsManageScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsManageScope)(nil)).Elem()
}

func (i *groupPermissionsManageScopePtrType) ToGroupPermissionsManageScopePtrOutput() GroupPermissionsManageScopePtrOutput {
	return i.ToGroupPermissionsManageScopePtrOutputWithContext(context.Background())
}

func (i *groupPermissionsManageScopePtrType) ToGroupPermissionsManageScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsManageScopePtrOutput)
}

type GroupPermissionsManageScopeOutput struct{ *pulumi.OutputState }

func (GroupPermissionsManageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsManageScope)(nil)).Elem()
}

func (o GroupPermissionsManageScopeOutput) ToGroupPermissionsManageScopeOutput() GroupPermissionsManageScopeOutput {
	return o
}

func (o GroupPermissionsManageScopeOutput) ToGroupPermissionsManageScopeOutputWithContext(ctx context.Context) GroupPermissionsManageScopeOutput {
	return o
}

func (o GroupPermissionsManageScopeOutput) ToGroupPermissionsManageScopePtrOutput() GroupPermissionsManageScopePtrOutput {
	return o.ToGroupPermissionsManageScopePtrOutputWithContext(context.Background())
}

func (o GroupPermissionsManageScopeOutput) ToGroupPermissionsManageScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPermissionsManageScope) *GroupPermissionsManageScope {
		return &v
	}).(GroupPermissionsManageScopePtrOutput)
}

func (o GroupPermissionsManageScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsManageScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsManageScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPermissionsManageScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type GroupPermissionsManageScopePtrOutput struct{ *pulumi.OutputState }

func (GroupPermissionsManageScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsManageScope)(nil)).Elem()
}

func (o GroupPermissionsManageScopePtrOutput) ToGroupPermissionsManageScopePtrOutput() GroupPermissionsManageScopePtrOutput {
	return o
}

func (o GroupPermissionsManageScopePtrOutput) ToGroupPermissionsManageScopePtrOutputWithContext(ctx context.Context) GroupPermissionsManageScopePtrOutput {
	return o
}

func (o GroupPermissionsManageScopePtrOutput) Elem() GroupPermissionsManageScopeOutput {
	return o.ApplyT(func(v *GroupPermissionsManageScope) GroupPermissionsManageScope {
		if v != nil {
			return *v
		}
		var ret GroupPermissionsManageScope
		return ret
	}).(GroupPermissionsManageScopeOutput)
}

func (o GroupPermissionsManageScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsManageScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsManageScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsManageScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPermissionsManageScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type GroupPermissionsViewMembersScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// GroupPermissionsViewMembersScopeInput is an input type that accepts GroupPermissionsViewMembersScopeArgs and GroupPermissionsViewMembersScopeOutput values.
// You can construct a concrete instance of `GroupPermissionsViewMembersScopeInput` via:
//
//          GroupPermissionsViewMembersScopeArgs{...}
type GroupPermissionsViewMembersScopeInput interface {
	pulumi.Input

	ToGroupPermissionsViewMembersScopeOutput() GroupPermissionsViewMembersScopeOutput
	ToGroupPermissionsViewMembersScopeOutputWithContext(context.Context) GroupPermissionsViewMembersScopeOutput
}

type GroupPermissionsViewMembersScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (GroupPermissionsViewMembersScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsViewMembersScope)(nil)).Elem()
}

func (i GroupPermissionsViewMembersScopeArgs) ToGroupPermissionsViewMembersScopeOutput() GroupPermissionsViewMembersScopeOutput {
	return i.ToGroupPermissionsViewMembersScopeOutputWithContext(context.Background())
}

func (i GroupPermissionsViewMembersScopeArgs) ToGroupPermissionsViewMembersScopeOutputWithContext(ctx context.Context) GroupPermissionsViewMembersScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsViewMembersScopeOutput)
}

func (i GroupPermissionsViewMembersScopeArgs) ToGroupPermissionsViewMembersScopePtrOutput() GroupPermissionsViewMembersScopePtrOutput {
	return i.ToGroupPermissionsViewMembersScopePtrOutputWithContext(context.Background())
}

func (i GroupPermissionsViewMembersScopeArgs) ToGroupPermissionsViewMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewMembersScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsViewMembersScopeOutput).ToGroupPermissionsViewMembersScopePtrOutputWithContext(ctx)
}

// GroupPermissionsViewMembersScopePtrInput is an input type that accepts GroupPermissionsViewMembersScopeArgs, GroupPermissionsViewMembersScopePtr and GroupPermissionsViewMembersScopePtrOutput values.
// You can construct a concrete instance of `GroupPermissionsViewMembersScopePtrInput` via:
//
//          GroupPermissionsViewMembersScopeArgs{...}
//
//  or:
//
//          nil
type GroupPermissionsViewMembersScopePtrInput interface {
	pulumi.Input

	ToGroupPermissionsViewMembersScopePtrOutput() GroupPermissionsViewMembersScopePtrOutput
	ToGroupPermissionsViewMembersScopePtrOutputWithContext(context.Context) GroupPermissionsViewMembersScopePtrOutput
}

type groupPermissionsViewMembersScopePtrType GroupPermissionsViewMembersScopeArgs

func GroupPermissionsViewMembersScopePtr(v *GroupPermissionsViewMembersScopeArgs) GroupPermissionsViewMembersScopePtrInput {
	return (*groupPermissionsViewMembersScopePtrType)(v)
}

func (*groupPermissionsViewMembersScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsViewMembersScope)(nil)).Elem()
}

func (i *groupPermissionsViewMembersScopePtrType) ToGroupPermissionsViewMembersScopePtrOutput() GroupPermissionsViewMembersScopePtrOutput {
	return i.ToGroupPermissionsViewMembersScopePtrOutputWithContext(context.Background())
}

func (i *groupPermissionsViewMembersScopePtrType) ToGroupPermissionsViewMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewMembersScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsViewMembersScopePtrOutput)
}

type GroupPermissionsViewMembersScopeOutput struct{ *pulumi.OutputState }

func (GroupPermissionsViewMembersScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsViewMembersScope)(nil)).Elem()
}

func (o GroupPermissionsViewMembersScopeOutput) ToGroupPermissionsViewMembersScopeOutput() GroupPermissionsViewMembersScopeOutput {
	return o
}

func (o GroupPermissionsViewMembersScopeOutput) ToGroupPermissionsViewMembersScopeOutputWithContext(ctx context.Context) GroupPermissionsViewMembersScopeOutput {
	return o
}

func (o GroupPermissionsViewMembersScopeOutput) ToGroupPermissionsViewMembersScopePtrOutput() GroupPermissionsViewMembersScopePtrOutput {
	return o.ToGroupPermissionsViewMembersScopePtrOutputWithContext(context.Background())
}

func (o GroupPermissionsViewMembersScopeOutput) ToGroupPermissionsViewMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewMembersScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPermissionsViewMembersScope) *GroupPermissionsViewMembersScope {
		return &v
	}).(GroupPermissionsViewMembersScopePtrOutput)
}

func (o GroupPermissionsViewMembersScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsViewMembersScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewMembersScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsViewMembersScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewMembersScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPermissionsViewMembersScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type GroupPermissionsViewMembersScopePtrOutput struct{ *pulumi.OutputState }

func (GroupPermissionsViewMembersScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsViewMembersScope)(nil)).Elem()
}

func (o GroupPermissionsViewMembersScopePtrOutput) ToGroupPermissionsViewMembersScopePtrOutput() GroupPermissionsViewMembersScopePtrOutput {
	return o
}

func (o GroupPermissionsViewMembersScopePtrOutput) ToGroupPermissionsViewMembersScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewMembersScopePtrOutput {
	return o
}

func (o GroupPermissionsViewMembersScopePtrOutput) Elem() GroupPermissionsViewMembersScopeOutput {
	return o.ApplyT(func(v *GroupPermissionsViewMembersScope) GroupPermissionsViewMembersScope {
		if v != nil {
			return *v
		}
		var ret GroupPermissionsViewMembersScope
		return ret
	}).(GroupPermissionsViewMembersScopeOutput)
}

func (o GroupPermissionsViewMembersScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsViewMembersScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewMembersScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsViewMembersScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewMembersScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPermissionsViewMembersScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type GroupPermissionsViewScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// GroupPermissionsViewScopeInput is an input type that accepts GroupPermissionsViewScopeArgs and GroupPermissionsViewScopeOutput values.
// You can construct a concrete instance of `GroupPermissionsViewScopeInput` via:
//
//          GroupPermissionsViewScopeArgs{...}
type GroupPermissionsViewScopeInput interface {
	pulumi.Input

	ToGroupPermissionsViewScopeOutput() GroupPermissionsViewScopeOutput
	ToGroupPermissionsViewScopeOutputWithContext(context.Context) GroupPermissionsViewScopeOutput
}

type GroupPermissionsViewScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (GroupPermissionsViewScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsViewScope)(nil)).Elem()
}

func (i GroupPermissionsViewScopeArgs) ToGroupPermissionsViewScopeOutput() GroupPermissionsViewScopeOutput {
	return i.ToGroupPermissionsViewScopeOutputWithContext(context.Background())
}

func (i GroupPermissionsViewScopeArgs) ToGroupPermissionsViewScopeOutputWithContext(ctx context.Context) GroupPermissionsViewScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsViewScopeOutput)
}

func (i GroupPermissionsViewScopeArgs) ToGroupPermissionsViewScopePtrOutput() GroupPermissionsViewScopePtrOutput {
	return i.ToGroupPermissionsViewScopePtrOutputWithContext(context.Background())
}

func (i GroupPermissionsViewScopeArgs) ToGroupPermissionsViewScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsViewScopeOutput).ToGroupPermissionsViewScopePtrOutputWithContext(ctx)
}

// GroupPermissionsViewScopePtrInput is an input type that accepts GroupPermissionsViewScopeArgs, GroupPermissionsViewScopePtr and GroupPermissionsViewScopePtrOutput values.
// You can construct a concrete instance of `GroupPermissionsViewScopePtrInput` via:
//
//          GroupPermissionsViewScopeArgs{...}
//
//  or:
//
//          nil
type GroupPermissionsViewScopePtrInput interface {
	pulumi.Input

	ToGroupPermissionsViewScopePtrOutput() GroupPermissionsViewScopePtrOutput
	ToGroupPermissionsViewScopePtrOutputWithContext(context.Context) GroupPermissionsViewScopePtrOutput
}

type groupPermissionsViewScopePtrType GroupPermissionsViewScopeArgs

func GroupPermissionsViewScopePtr(v *GroupPermissionsViewScopeArgs) GroupPermissionsViewScopePtrInput {
	return (*groupPermissionsViewScopePtrType)(v)
}

func (*groupPermissionsViewScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsViewScope)(nil)).Elem()
}

func (i *groupPermissionsViewScopePtrType) ToGroupPermissionsViewScopePtrOutput() GroupPermissionsViewScopePtrOutput {
	return i.ToGroupPermissionsViewScopePtrOutputWithContext(context.Background())
}

func (i *groupPermissionsViewScopePtrType) ToGroupPermissionsViewScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPermissionsViewScopePtrOutput)
}

type GroupPermissionsViewScopeOutput struct{ *pulumi.OutputState }

func (GroupPermissionsViewScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPermissionsViewScope)(nil)).Elem()
}

func (o GroupPermissionsViewScopeOutput) ToGroupPermissionsViewScopeOutput() GroupPermissionsViewScopeOutput {
	return o
}

func (o GroupPermissionsViewScopeOutput) ToGroupPermissionsViewScopeOutputWithContext(ctx context.Context) GroupPermissionsViewScopeOutput {
	return o
}

func (o GroupPermissionsViewScopeOutput) ToGroupPermissionsViewScopePtrOutput() GroupPermissionsViewScopePtrOutput {
	return o.ToGroupPermissionsViewScopePtrOutputWithContext(context.Background())
}

func (o GroupPermissionsViewScopeOutput) ToGroupPermissionsViewScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPermissionsViewScope) *GroupPermissionsViewScope {
		return &v
	}).(GroupPermissionsViewScopePtrOutput)
}

func (o GroupPermissionsViewScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsViewScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPermissionsViewScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPermissionsViewScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type GroupPermissionsViewScopePtrOutput struct{ *pulumi.OutputState }

func (GroupPermissionsViewScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPermissionsViewScope)(nil)).Elem()
}

func (o GroupPermissionsViewScopePtrOutput) ToGroupPermissionsViewScopePtrOutput() GroupPermissionsViewScopePtrOutput {
	return o
}

func (o GroupPermissionsViewScopePtrOutput) ToGroupPermissionsViewScopePtrOutputWithContext(ctx context.Context) GroupPermissionsViewScopePtrOutput {
	return o
}

func (o GroupPermissionsViewScopePtrOutput) Elem() GroupPermissionsViewScopeOutput {
	return o.ApplyT(func(v *GroupPermissionsViewScope) GroupPermissionsViewScope {
		if v != nil {
			return *v
		}
		var ret GroupPermissionsViewScope
		return ret
	}).(GroupPermissionsViewScopeOutput)
}

func (o GroupPermissionsViewScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsViewScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPermissionsViewScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o GroupPermissionsViewScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPermissionsViewScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type RealmInternationalization struct {
	// The locale to use by default. This locale code must be present within the `supportedLocales` list.
	DefaultLocale string `pulumi:"defaultLocale"`
	// A list of [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) locale codes that the realm should support.
	SupportedLocales []string `pulumi:"supportedLocales"`
}

// RealmInternationalizationInput is an input type that accepts RealmInternationalizationArgs and RealmInternationalizationOutput values.
// You can construct a concrete instance of `RealmInternationalizationInput` via:
//
//          RealmInternationalizationArgs{...}
type RealmInternationalizationInput interface {
	pulumi.Input

	ToRealmInternationalizationOutput() RealmInternationalizationOutput
	ToRealmInternationalizationOutputWithContext(context.Context) RealmInternationalizationOutput
}

type RealmInternationalizationArgs struct {
	// The locale to use by default. This locale code must be present within the `supportedLocales` list.
	DefaultLocale pulumi.StringInput `pulumi:"defaultLocale"`
	// A list of [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) locale codes that the realm should support.
	SupportedLocales pulumi.StringArrayInput `pulumi:"supportedLocales"`
}

func (RealmInternationalizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmInternationalization)(nil)).Elem()
}

func (i RealmInternationalizationArgs) ToRealmInternationalizationOutput() RealmInternationalizationOutput {
	return i.ToRealmInternationalizationOutputWithContext(context.Background())
}

func (i RealmInternationalizationArgs) ToRealmInternationalizationOutputWithContext(ctx context.Context) RealmInternationalizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmInternationalizationOutput)
}

func (i RealmInternationalizationArgs) ToRealmInternationalizationPtrOutput() RealmInternationalizationPtrOutput {
	return i.ToRealmInternationalizationPtrOutputWithContext(context.Background())
}

func (i RealmInternationalizationArgs) ToRealmInternationalizationPtrOutputWithContext(ctx context.Context) RealmInternationalizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmInternationalizationOutput).ToRealmInternationalizationPtrOutputWithContext(ctx)
}

// RealmInternationalizationPtrInput is an input type that accepts RealmInternationalizationArgs, RealmInternationalizationPtr and RealmInternationalizationPtrOutput values.
// You can construct a concrete instance of `RealmInternationalizationPtrInput` via:
//
//          RealmInternationalizationArgs{...}
//
//  or:
//
//          nil
type RealmInternationalizationPtrInput interface {
	pulumi.Input

	ToRealmInternationalizationPtrOutput() RealmInternationalizationPtrOutput
	ToRealmInternationalizationPtrOutputWithContext(context.Context) RealmInternationalizationPtrOutput
}

type realmInternationalizationPtrType RealmInternationalizationArgs

func RealmInternationalizationPtr(v *RealmInternationalizationArgs) RealmInternationalizationPtrInput {
	return (*realmInternationalizationPtrType)(v)
}

func (*realmInternationalizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmInternationalization)(nil)).Elem()
}

func (i *realmInternationalizationPtrType) ToRealmInternationalizationPtrOutput() RealmInternationalizationPtrOutput {
	return i.ToRealmInternationalizationPtrOutputWithContext(context.Background())
}

func (i *realmInternationalizationPtrType) ToRealmInternationalizationPtrOutputWithContext(ctx context.Context) RealmInternationalizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmInternationalizationPtrOutput)
}

type RealmInternationalizationOutput struct{ *pulumi.OutputState }

func (RealmInternationalizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmInternationalization)(nil)).Elem()
}

func (o RealmInternationalizationOutput) ToRealmInternationalizationOutput() RealmInternationalizationOutput {
	return o
}

func (o RealmInternationalizationOutput) ToRealmInternationalizationOutputWithContext(ctx context.Context) RealmInternationalizationOutput {
	return o
}

func (o RealmInternationalizationOutput) ToRealmInternationalizationPtrOutput() RealmInternationalizationPtrOutput {
	return o.ToRealmInternationalizationPtrOutputWithContext(context.Background())
}

func (o RealmInternationalizationOutput) ToRealmInternationalizationPtrOutputWithContext(ctx context.Context) RealmInternationalizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmInternationalization) *RealmInternationalization {
		return &v
	}).(RealmInternationalizationPtrOutput)
}

// The locale to use by default. This locale code must be present within the `supportedLocales` list.
func (o RealmInternationalizationOutput) DefaultLocale() pulumi.StringOutput {
	return o.ApplyT(func(v RealmInternationalization) string { return v.DefaultLocale }).(pulumi.StringOutput)
}

// A list of [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) locale codes that the realm should support.
func (o RealmInternationalizationOutput) SupportedLocales() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RealmInternationalization) []string { return v.SupportedLocales }).(pulumi.StringArrayOutput)
}

type RealmInternationalizationPtrOutput struct{ *pulumi.OutputState }

func (RealmInternationalizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmInternationalization)(nil)).Elem()
}

func (o RealmInternationalizationPtrOutput) ToRealmInternationalizationPtrOutput() RealmInternationalizationPtrOutput {
	return o
}

func (o RealmInternationalizationPtrOutput) ToRealmInternationalizationPtrOutputWithContext(ctx context.Context) RealmInternationalizationPtrOutput {
	return o
}

func (o RealmInternationalizationPtrOutput) Elem() RealmInternationalizationOutput {
	return o.ApplyT(func(v *RealmInternationalization) RealmInternationalization {
		if v != nil {
			return *v
		}
		var ret RealmInternationalization
		return ret
	}).(RealmInternationalizationOutput)
}

// The locale to use by default. This locale code must be present within the `supportedLocales` list.
func (o RealmInternationalizationPtrOutput) DefaultLocale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmInternationalization) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultLocale
	}).(pulumi.StringPtrOutput)
}

// A list of [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) locale codes that the realm should support.
func (o RealmInternationalizationPtrOutput) SupportedLocales() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RealmInternationalization) []string {
		if v == nil {
			return nil
		}
		return v.SupportedLocales
	}).(pulumi.StringArrayOutput)
}

type RealmOtpPolicy struct {
	// What hashing algorithm should be used to generate the OTP, Valid options are `HmacSHA1`,`HmacSHA256` and `HmacSHA512`. Defaults to `HmacSHA1`.
	Algorithm *string `pulumi:"algorithm"`
	// How many digits the OTP have. Defaults to `6`.
	Digits *int `pulumi:"digits"`
	// What should the initial counter value be. Defaults to `2`.
	InitialCounter *int `pulumi:"initialCounter"`
	// How far ahead should the server look just in case the token generator and server are out of time sync or counter sync. Defaults to `1`.
	LookAheadWindow *int `pulumi:"lookAheadWindow"`
	// How many seconds should an OTP token be valid. Defaults to `30`.
	Period *int `pulumi:"period"`
	// One Time Password Type, supported Values are `totp` for Time-Based One Time Password and `hotp` for Counter Based. Defaults to `totp`.
	Type *string `pulumi:"type"`
}

// RealmOtpPolicyInput is an input type that accepts RealmOtpPolicyArgs and RealmOtpPolicyOutput values.
// You can construct a concrete instance of `RealmOtpPolicyInput` via:
//
//          RealmOtpPolicyArgs{...}
type RealmOtpPolicyInput interface {
	pulumi.Input

	ToRealmOtpPolicyOutput() RealmOtpPolicyOutput
	ToRealmOtpPolicyOutputWithContext(context.Context) RealmOtpPolicyOutput
}

type RealmOtpPolicyArgs struct {
	// What hashing algorithm should be used to generate the OTP, Valid options are `HmacSHA1`,`HmacSHA256` and `HmacSHA512`. Defaults to `HmacSHA1`.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// How many digits the OTP have. Defaults to `6`.
	Digits pulumi.IntPtrInput `pulumi:"digits"`
	// What should the initial counter value be. Defaults to `2`.
	InitialCounter pulumi.IntPtrInput `pulumi:"initialCounter"`
	// How far ahead should the server look just in case the token generator and server are out of time sync or counter sync. Defaults to `1`.
	LookAheadWindow pulumi.IntPtrInput `pulumi:"lookAheadWindow"`
	// How many seconds should an OTP token be valid. Defaults to `30`.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// One Time Password Type, supported Values are `totp` for Time-Based One Time Password and `hotp` for Counter Based. Defaults to `totp`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RealmOtpPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmOtpPolicy)(nil)).Elem()
}

func (i RealmOtpPolicyArgs) ToRealmOtpPolicyOutput() RealmOtpPolicyOutput {
	return i.ToRealmOtpPolicyOutputWithContext(context.Background())
}

func (i RealmOtpPolicyArgs) ToRealmOtpPolicyOutputWithContext(ctx context.Context) RealmOtpPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmOtpPolicyOutput)
}

func (i RealmOtpPolicyArgs) ToRealmOtpPolicyPtrOutput() RealmOtpPolicyPtrOutput {
	return i.ToRealmOtpPolicyPtrOutputWithContext(context.Background())
}

func (i RealmOtpPolicyArgs) ToRealmOtpPolicyPtrOutputWithContext(ctx context.Context) RealmOtpPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmOtpPolicyOutput).ToRealmOtpPolicyPtrOutputWithContext(ctx)
}

// RealmOtpPolicyPtrInput is an input type that accepts RealmOtpPolicyArgs, RealmOtpPolicyPtr and RealmOtpPolicyPtrOutput values.
// You can construct a concrete instance of `RealmOtpPolicyPtrInput` via:
//
//          RealmOtpPolicyArgs{...}
//
//  or:
//
//          nil
type RealmOtpPolicyPtrInput interface {
	pulumi.Input

	ToRealmOtpPolicyPtrOutput() RealmOtpPolicyPtrOutput
	ToRealmOtpPolicyPtrOutputWithContext(context.Context) RealmOtpPolicyPtrOutput
}

type realmOtpPolicyPtrType RealmOtpPolicyArgs

func RealmOtpPolicyPtr(v *RealmOtpPolicyArgs) RealmOtpPolicyPtrInput {
	return (*realmOtpPolicyPtrType)(v)
}

func (*realmOtpPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmOtpPolicy)(nil)).Elem()
}

func (i *realmOtpPolicyPtrType) ToRealmOtpPolicyPtrOutput() RealmOtpPolicyPtrOutput {
	return i.ToRealmOtpPolicyPtrOutputWithContext(context.Background())
}

func (i *realmOtpPolicyPtrType) ToRealmOtpPolicyPtrOutputWithContext(ctx context.Context) RealmOtpPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmOtpPolicyPtrOutput)
}

type RealmOtpPolicyOutput struct{ *pulumi.OutputState }

func (RealmOtpPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmOtpPolicy)(nil)).Elem()
}

func (o RealmOtpPolicyOutput) ToRealmOtpPolicyOutput() RealmOtpPolicyOutput {
	return o
}

func (o RealmOtpPolicyOutput) ToRealmOtpPolicyOutputWithContext(ctx context.Context) RealmOtpPolicyOutput {
	return o
}

func (o RealmOtpPolicyOutput) ToRealmOtpPolicyPtrOutput() RealmOtpPolicyPtrOutput {
	return o.ToRealmOtpPolicyPtrOutputWithContext(context.Background())
}

func (o RealmOtpPolicyOutput) ToRealmOtpPolicyPtrOutputWithContext(ctx context.Context) RealmOtpPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmOtpPolicy) *RealmOtpPolicy {
		return &v
	}).(RealmOtpPolicyPtrOutput)
}

// What hashing algorithm should be used to generate the OTP, Valid options are `HmacSHA1`,`HmacSHA256` and `HmacSHA512`. Defaults to `HmacSHA1`.
func (o RealmOtpPolicyOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmOtpPolicy) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// How many digits the OTP have. Defaults to `6`.
func (o RealmOtpPolicyOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmOtpPolicy) *int { return v.Digits }).(pulumi.IntPtrOutput)
}

// What should the initial counter value be. Defaults to `2`.
func (o RealmOtpPolicyOutput) InitialCounter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmOtpPolicy) *int { return v.InitialCounter }).(pulumi.IntPtrOutput)
}

// How far ahead should the server look just in case the token generator and server are out of time sync or counter sync. Defaults to `1`.
func (o RealmOtpPolicyOutput) LookAheadWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmOtpPolicy) *int { return v.LookAheadWindow }).(pulumi.IntPtrOutput)
}

// How many seconds should an OTP token be valid. Defaults to `30`.
func (o RealmOtpPolicyOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmOtpPolicy) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// One Time Password Type, supported Values are `totp` for Time-Based One Time Password and `hotp` for Counter Based. Defaults to `totp`.
func (o RealmOtpPolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmOtpPolicy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RealmOtpPolicyPtrOutput struct{ *pulumi.OutputState }

func (RealmOtpPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmOtpPolicy)(nil)).Elem()
}

func (o RealmOtpPolicyPtrOutput) ToRealmOtpPolicyPtrOutput() RealmOtpPolicyPtrOutput {
	return o
}

func (o RealmOtpPolicyPtrOutput) ToRealmOtpPolicyPtrOutputWithContext(ctx context.Context) RealmOtpPolicyPtrOutput {
	return o
}

func (o RealmOtpPolicyPtrOutput) Elem() RealmOtpPolicyOutput {
	return o.ApplyT(func(v *RealmOtpPolicy) RealmOtpPolicy {
		if v != nil {
			return *v
		}
		var ret RealmOtpPolicy
		return ret
	}).(RealmOtpPolicyOutput)
}

// What hashing algorithm should be used to generate the OTP, Valid options are `HmacSHA1`,`HmacSHA256` and `HmacSHA512`. Defaults to `HmacSHA1`.
func (o RealmOtpPolicyPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmOtpPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// How many digits the OTP have. Defaults to `6`.
func (o RealmOtpPolicyPtrOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Digits
	}).(pulumi.IntPtrOutput)
}

// What should the initial counter value be. Defaults to `2`.
func (o RealmOtpPolicyPtrOutput) InitialCounter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return v.InitialCounter
	}).(pulumi.IntPtrOutput)
}

// How far ahead should the server look just in case the token generator and server are out of time sync or counter sync. Defaults to `1`.
func (o RealmOtpPolicyPtrOutput) LookAheadWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return v.LookAheadWindow
	}).(pulumi.IntPtrOutput)
}

// How many seconds should an OTP token be valid. Defaults to `30`.
func (o RealmOtpPolicyPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

// One Time Password Type, supported Values are `totp` for Time-Based One Time Password and `hotp` for Counter Based. Defaults to `totp`.
func (o RealmOtpPolicyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmOtpPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type RealmSecurityDefenses struct {
	BruteForceDetection *RealmSecurityDefensesBruteForceDetection `pulumi:"bruteForceDetection"`
	Headers             *RealmSecurityDefensesHeaders             `pulumi:"headers"`
}

// RealmSecurityDefensesInput is an input type that accepts RealmSecurityDefensesArgs and RealmSecurityDefensesOutput values.
// You can construct a concrete instance of `RealmSecurityDefensesInput` via:
//
//          RealmSecurityDefensesArgs{...}
type RealmSecurityDefensesInput interface {
	pulumi.Input

	ToRealmSecurityDefensesOutput() RealmSecurityDefensesOutput
	ToRealmSecurityDefensesOutputWithContext(context.Context) RealmSecurityDefensesOutput
}

type RealmSecurityDefensesArgs struct {
	BruteForceDetection RealmSecurityDefensesBruteForceDetectionPtrInput `pulumi:"bruteForceDetection"`
	Headers             RealmSecurityDefensesHeadersPtrInput             `pulumi:"headers"`
}

func (RealmSecurityDefensesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSecurityDefenses)(nil)).Elem()
}

func (i RealmSecurityDefensesArgs) ToRealmSecurityDefensesOutput() RealmSecurityDefensesOutput {
	return i.ToRealmSecurityDefensesOutputWithContext(context.Background())
}

func (i RealmSecurityDefensesArgs) ToRealmSecurityDefensesOutputWithContext(ctx context.Context) RealmSecurityDefensesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesOutput)
}

func (i RealmSecurityDefensesArgs) ToRealmSecurityDefensesPtrOutput() RealmSecurityDefensesPtrOutput {
	return i.ToRealmSecurityDefensesPtrOutputWithContext(context.Background())
}

func (i RealmSecurityDefensesArgs) ToRealmSecurityDefensesPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesOutput).ToRealmSecurityDefensesPtrOutputWithContext(ctx)
}

// RealmSecurityDefensesPtrInput is an input type that accepts RealmSecurityDefensesArgs, RealmSecurityDefensesPtr and RealmSecurityDefensesPtrOutput values.
// You can construct a concrete instance of `RealmSecurityDefensesPtrInput` via:
//
//          RealmSecurityDefensesArgs{...}
//
//  or:
//
//          nil
type RealmSecurityDefensesPtrInput interface {
	pulumi.Input

	ToRealmSecurityDefensesPtrOutput() RealmSecurityDefensesPtrOutput
	ToRealmSecurityDefensesPtrOutputWithContext(context.Context) RealmSecurityDefensesPtrOutput
}

type realmSecurityDefensesPtrType RealmSecurityDefensesArgs

func RealmSecurityDefensesPtr(v *RealmSecurityDefensesArgs) RealmSecurityDefensesPtrInput {
	return (*realmSecurityDefensesPtrType)(v)
}

func (*realmSecurityDefensesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSecurityDefenses)(nil)).Elem()
}

func (i *realmSecurityDefensesPtrType) ToRealmSecurityDefensesPtrOutput() RealmSecurityDefensesPtrOutput {
	return i.ToRealmSecurityDefensesPtrOutputWithContext(context.Background())
}

func (i *realmSecurityDefensesPtrType) ToRealmSecurityDefensesPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesPtrOutput)
}

type RealmSecurityDefensesOutput struct{ *pulumi.OutputState }

func (RealmSecurityDefensesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSecurityDefenses)(nil)).Elem()
}

func (o RealmSecurityDefensesOutput) ToRealmSecurityDefensesOutput() RealmSecurityDefensesOutput {
	return o
}

func (o RealmSecurityDefensesOutput) ToRealmSecurityDefensesOutputWithContext(ctx context.Context) RealmSecurityDefensesOutput {
	return o
}

func (o RealmSecurityDefensesOutput) ToRealmSecurityDefensesPtrOutput() RealmSecurityDefensesPtrOutput {
	return o.ToRealmSecurityDefensesPtrOutputWithContext(context.Background())
}

func (o RealmSecurityDefensesOutput) ToRealmSecurityDefensesPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmSecurityDefenses) *RealmSecurityDefenses {
		return &v
	}).(RealmSecurityDefensesPtrOutput)
}

func (o RealmSecurityDefensesOutput) BruteForceDetection() RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefenses) *RealmSecurityDefensesBruteForceDetection { return v.BruteForceDetection }).(RealmSecurityDefensesBruteForceDetectionPtrOutput)
}

func (o RealmSecurityDefensesOutput) Headers() RealmSecurityDefensesHeadersPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefenses) *RealmSecurityDefensesHeaders { return v.Headers }).(RealmSecurityDefensesHeadersPtrOutput)
}

type RealmSecurityDefensesPtrOutput struct{ *pulumi.OutputState }

func (RealmSecurityDefensesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSecurityDefenses)(nil)).Elem()
}

func (o RealmSecurityDefensesPtrOutput) ToRealmSecurityDefensesPtrOutput() RealmSecurityDefensesPtrOutput {
	return o
}

func (o RealmSecurityDefensesPtrOutput) ToRealmSecurityDefensesPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesPtrOutput {
	return o
}

func (o RealmSecurityDefensesPtrOutput) Elem() RealmSecurityDefensesOutput {
	return o.ApplyT(func(v *RealmSecurityDefenses) RealmSecurityDefenses {
		if v != nil {
			return *v
		}
		var ret RealmSecurityDefenses
		return ret
	}).(RealmSecurityDefensesOutput)
}

func (o RealmSecurityDefensesPtrOutput) BruteForceDetection() RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefenses) *RealmSecurityDefensesBruteForceDetection {
		if v == nil {
			return nil
		}
		return v.BruteForceDetection
	}).(RealmSecurityDefensesBruteForceDetectionPtrOutput)
}

func (o RealmSecurityDefensesPtrOutput) Headers() RealmSecurityDefensesHeadersPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefenses) *RealmSecurityDefensesHeaders {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(RealmSecurityDefensesHeadersPtrOutput)
}

type RealmSecurityDefensesBruteForceDetection struct {
	// When will failure count be reset?
	FailureResetTimeSeconds *int `pulumi:"failureResetTimeSeconds"`
	MaxFailureWaitSeconds   *int `pulumi:"maxFailureWaitSeconds"`
	// How many failures before wait is triggered.
	MaxLoginFailures *int `pulumi:"maxLoginFailures"`
	// How long to wait after a quick login failure.
	// - ` maxFailureWaitSeconds  ` - (Optional) Max. time a user will be locked out.
	MinimumQuickLoginWaitSeconds *int `pulumi:"minimumQuickLoginWaitSeconds"`
	// When `true`, this will lock the user permanently when the user exceeds the maximum login failures.
	PermanentLockout *bool `pulumi:"permanentLockout"`
	// Configures the amount of time, in milliseconds, for consecutive failures to lock a user out.
	QuickLoginCheckMilliSeconds *int `pulumi:"quickLoginCheckMilliSeconds"`
	// This represents the amount of time a user should be locked out when the login failure threshold has been met.
	WaitIncrementSeconds *int `pulumi:"waitIncrementSeconds"`
}

// RealmSecurityDefensesBruteForceDetectionInput is an input type that accepts RealmSecurityDefensesBruteForceDetectionArgs and RealmSecurityDefensesBruteForceDetectionOutput values.
// You can construct a concrete instance of `RealmSecurityDefensesBruteForceDetectionInput` via:
//
//          RealmSecurityDefensesBruteForceDetectionArgs{...}
type RealmSecurityDefensesBruteForceDetectionInput interface {
	pulumi.Input

	ToRealmSecurityDefensesBruteForceDetectionOutput() RealmSecurityDefensesBruteForceDetectionOutput
	ToRealmSecurityDefensesBruteForceDetectionOutputWithContext(context.Context) RealmSecurityDefensesBruteForceDetectionOutput
}

type RealmSecurityDefensesBruteForceDetectionArgs struct {
	// When will failure count be reset?
	FailureResetTimeSeconds pulumi.IntPtrInput `pulumi:"failureResetTimeSeconds"`
	MaxFailureWaitSeconds   pulumi.IntPtrInput `pulumi:"maxFailureWaitSeconds"`
	// How many failures before wait is triggered.
	MaxLoginFailures pulumi.IntPtrInput `pulumi:"maxLoginFailures"`
	// How long to wait after a quick login failure.
	// - ` maxFailureWaitSeconds  ` - (Optional) Max. time a user will be locked out.
	MinimumQuickLoginWaitSeconds pulumi.IntPtrInput `pulumi:"minimumQuickLoginWaitSeconds"`
	// When `true`, this will lock the user permanently when the user exceeds the maximum login failures.
	PermanentLockout pulumi.BoolPtrInput `pulumi:"permanentLockout"`
	// Configures the amount of time, in milliseconds, for consecutive failures to lock a user out.
	QuickLoginCheckMilliSeconds pulumi.IntPtrInput `pulumi:"quickLoginCheckMilliSeconds"`
	// This represents the amount of time a user should be locked out when the login failure threshold has been met.
	WaitIncrementSeconds pulumi.IntPtrInput `pulumi:"waitIncrementSeconds"`
}

func (RealmSecurityDefensesBruteForceDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSecurityDefensesBruteForceDetection)(nil)).Elem()
}

func (i RealmSecurityDefensesBruteForceDetectionArgs) ToRealmSecurityDefensesBruteForceDetectionOutput() RealmSecurityDefensesBruteForceDetectionOutput {
	return i.ToRealmSecurityDefensesBruteForceDetectionOutputWithContext(context.Background())
}

func (i RealmSecurityDefensesBruteForceDetectionArgs) ToRealmSecurityDefensesBruteForceDetectionOutputWithContext(ctx context.Context) RealmSecurityDefensesBruteForceDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesBruteForceDetectionOutput)
}

func (i RealmSecurityDefensesBruteForceDetectionArgs) ToRealmSecurityDefensesBruteForceDetectionPtrOutput() RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return i.ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(context.Background())
}

func (i RealmSecurityDefensesBruteForceDetectionArgs) ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesBruteForceDetectionOutput).ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(ctx)
}

// RealmSecurityDefensesBruteForceDetectionPtrInput is an input type that accepts RealmSecurityDefensesBruteForceDetectionArgs, RealmSecurityDefensesBruteForceDetectionPtr and RealmSecurityDefensesBruteForceDetectionPtrOutput values.
// You can construct a concrete instance of `RealmSecurityDefensesBruteForceDetectionPtrInput` via:
//
//          RealmSecurityDefensesBruteForceDetectionArgs{...}
//
//  or:
//
//          nil
type RealmSecurityDefensesBruteForceDetectionPtrInput interface {
	pulumi.Input

	ToRealmSecurityDefensesBruteForceDetectionPtrOutput() RealmSecurityDefensesBruteForceDetectionPtrOutput
	ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(context.Context) RealmSecurityDefensesBruteForceDetectionPtrOutput
}

type realmSecurityDefensesBruteForceDetectionPtrType RealmSecurityDefensesBruteForceDetectionArgs

func RealmSecurityDefensesBruteForceDetectionPtr(v *RealmSecurityDefensesBruteForceDetectionArgs) RealmSecurityDefensesBruteForceDetectionPtrInput {
	return (*realmSecurityDefensesBruteForceDetectionPtrType)(v)
}

func (*realmSecurityDefensesBruteForceDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSecurityDefensesBruteForceDetection)(nil)).Elem()
}

func (i *realmSecurityDefensesBruteForceDetectionPtrType) ToRealmSecurityDefensesBruteForceDetectionPtrOutput() RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return i.ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(context.Background())
}

func (i *realmSecurityDefensesBruteForceDetectionPtrType) ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesBruteForceDetectionPtrOutput)
}

type RealmSecurityDefensesBruteForceDetectionOutput struct{ *pulumi.OutputState }

func (RealmSecurityDefensesBruteForceDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSecurityDefensesBruteForceDetection)(nil)).Elem()
}

func (o RealmSecurityDefensesBruteForceDetectionOutput) ToRealmSecurityDefensesBruteForceDetectionOutput() RealmSecurityDefensesBruteForceDetectionOutput {
	return o
}

func (o RealmSecurityDefensesBruteForceDetectionOutput) ToRealmSecurityDefensesBruteForceDetectionOutputWithContext(ctx context.Context) RealmSecurityDefensesBruteForceDetectionOutput {
	return o
}

func (o RealmSecurityDefensesBruteForceDetectionOutput) ToRealmSecurityDefensesBruteForceDetectionPtrOutput() RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return o.ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(context.Background())
}

func (o RealmSecurityDefensesBruteForceDetectionOutput) ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmSecurityDefensesBruteForceDetection) *RealmSecurityDefensesBruteForceDetection {
		return &v
	}).(RealmSecurityDefensesBruteForceDetectionPtrOutput)
}

// When will failure count be reset?
func (o RealmSecurityDefensesBruteForceDetectionOutput) FailureResetTimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesBruteForceDetection) *int { return v.FailureResetTimeSeconds }).(pulumi.IntPtrOutput)
}

func (o RealmSecurityDefensesBruteForceDetectionOutput) MaxFailureWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesBruteForceDetection) *int { return v.MaxFailureWaitSeconds }).(pulumi.IntPtrOutput)
}

// How many failures before wait is triggered.
func (o RealmSecurityDefensesBruteForceDetectionOutput) MaxLoginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesBruteForceDetection) *int { return v.MaxLoginFailures }).(pulumi.IntPtrOutput)
}

// How long to wait after a quick login failure.
// - ` maxFailureWaitSeconds  ` - (Optional) Max. time a user will be locked out.
func (o RealmSecurityDefensesBruteForceDetectionOutput) MinimumQuickLoginWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesBruteForceDetection) *int { return v.MinimumQuickLoginWaitSeconds }).(pulumi.IntPtrOutput)
}

// When `true`, this will lock the user permanently when the user exceeds the maximum login failures.
func (o RealmSecurityDefensesBruteForceDetectionOutput) PermanentLockout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesBruteForceDetection) *bool { return v.PermanentLockout }).(pulumi.BoolPtrOutput)
}

// Configures the amount of time, in milliseconds, for consecutive failures to lock a user out.
func (o RealmSecurityDefensesBruteForceDetectionOutput) QuickLoginCheckMilliSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesBruteForceDetection) *int { return v.QuickLoginCheckMilliSeconds }).(pulumi.IntPtrOutput)
}

// This represents the amount of time a user should be locked out when the login failure threshold has been met.
func (o RealmSecurityDefensesBruteForceDetectionOutput) WaitIncrementSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesBruteForceDetection) *int { return v.WaitIncrementSeconds }).(pulumi.IntPtrOutput)
}

type RealmSecurityDefensesBruteForceDetectionPtrOutput struct{ *pulumi.OutputState }

func (RealmSecurityDefensesBruteForceDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSecurityDefensesBruteForceDetection)(nil)).Elem()
}

func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) ToRealmSecurityDefensesBruteForceDetectionPtrOutput() RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return o
}

func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) ToRealmSecurityDefensesBruteForceDetectionPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesBruteForceDetectionPtrOutput {
	return o
}

func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) Elem() RealmSecurityDefensesBruteForceDetectionOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) RealmSecurityDefensesBruteForceDetection {
		if v != nil {
			return *v
		}
		var ret RealmSecurityDefensesBruteForceDetection
		return ret
	}).(RealmSecurityDefensesBruteForceDetectionOutput)
}

// When will failure count be reset?
func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) FailureResetTimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) *int {
		if v == nil {
			return nil
		}
		return v.FailureResetTimeSeconds
	}).(pulumi.IntPtrOutput)
}

func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) MaxFailureWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxFailureWaitSeconds
	}).(pulumi.IntPtrOutput)
}

// How many failures before wait is triggered.
func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) MaxLoginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxLoginFailures
	}).(pulumi.IntPtrOutput)
}

// How long to wait after a quick login failure.
// - ` maxFailureWaitSeconds  ` - (Optional) Max. time a user will be locked out.
func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) MinimumQuickLoginWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinimumQuickLoginWaitSeconds
	}).(pulumi.IntPtrOutput)
}

// When `true`, this will lock the user permanently when the user exceeds the maximum login failures.
func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) PermanentLockout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) *bool {
		if v == nil {
			return nil
		}
		return v.PermanentLockout
	}).(pulumi.BoolPtrOutput)
}

// Configures the amount of time, in milliseconds, for consecutive failures to lock a user out.
func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) QuickLoginCheckMilliSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) *int {
		if v == nil {
			return nil
		}
		return v.QuickLoginCheckMilliSeconds
	}).(pulumi.IntPtrOutput)
}

// This represents the amount of time a user should be locked out when the login failure threshold has been met.
func (o RealmSecurityDefensesBruteForceDetectionPtrOutput) WaitIncrementSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesBruteForceDetection) *int {
		if v == nil {
			return nil
		}
		return v.WaitIncrementSeconds
	}).(pulumi.IntPtrOutput)
}

type RealmSecurityDefensesHeaders struct {
	// Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the [W3C-CSP](https://www.w3.org/TR/CSP/) Abstract.
	ContentSecurityPolicy *string `pulumi:"contentSecurityPolicy"`
	// Used for testing Content Security Policies.
	ContentSecurityPolicyReportOnly *string `pulumi:"contentSecurityPolicyReportOnly"`
	// The Script-Transport-Security HTTP header tells browsers to always use HTTPS.
	StrictTransportSecurity *string `pulumi:"strictTransportSecurity"`
	// Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type
	XContentTypeOptions *string `pulumi:"xContentTypeOptions"`
	// Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the [RFC7034](https://tools.ietf.org/html/rfc7034)
	XFrameOptions *string `pulumi:"xFrameOptions"`
	// Prevent pages from appearing in search engines.
	XRobotsTag *string `pulumi:"xRobotsTag"`
	// This header configures the Cross-site scripting (XSS) filter in your browser.
	XXssProtection *string `pulumi:"xXssProtection"`
}

// RealmSecurityDefensesHeadersInput is an input type that accepts RealmSecurityDefensesHeadersArgs and RealmSecurityDefensesHeadersOutput values.
// You can construct a concrete instance of `RealmSecurityDefensesHeadersInput` via:
//
//          RealmSecurityDefensesHeadersArgs{...}
type RealmSecurityDefensesHeadersInput interface {
	pulumi.Input

	ToRealmSecurityDefensesHeadersOutput() RealmSecurityDefensesHeadersOutput
	ToRealmSecurityDefensesHeadersOutputWithContext(context.Context) RealmSecurityDefensesHeadersOutput
}

type RealmSecurityDefensesHeadersArgs struct {
	// Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the [W3C-CSP](https://www.w3.org/TR/CSP/) Abstract.
	ContentSecurityPolicy pulumi.StringPtrInput `pulumi:"contentSecurityPolicy"`
	// Used for testing Content Security Policies.
	ContentSecurityPolicyReportOnly pulumi.StringPtrInput `pulumi:"contentSecurityPolicyReportOnly"`
	// The Script-Transport-Security HTTP header tells browsers to always use HTTPS.
	StrictTransportSecurity pulumi.StringPtrInput `pulumi:"strictTransportSecurity"`
	// Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type
	XContentTypeOptions pulumi.StringPtrInput `pulumi:"xContentTypeOptions"`
	// Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the [RFC7034](https://tools.ietf.org/html/rfc7034)
	XFrameOptions pulumi.StringPtrInput `pulumi:"xFrameOptions"`
	// Prevent pages from appearing in search engines.
	XRobotsTag pulumi.StringPtrInput `pulumi:"xRobotsTag"`
	// This header configures the Cross-site scripting (XSS) filter in your browser.
	XXssProtection pulumi.StringPtrInput `pulumi:"xXssProtection"`
}

func (RealmSecurityDefensesHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSecurityDefensesHeaders)(nil)).Elem()
}

func (i RealmSecurityDefensesHeadersArgs) ToRealmSecurityDefensesHeadersOutput() RealmSecurityDefensesHeadersOutput {
	return i.ToRealmSecurityDefensesHeadersOutputWithContext(context.Background())
}

func (i RealmSecurityDefensesHeadersArgs) ToRealmSecurityDefensesHeadersOutputWithContext(ctx context.Context) RealmSecurityDefensesHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesHeadersOutput)
}

func (i RealmSecurityDefensesHeadersArgs) ToRealmSecurityDefensesHeadersPtrOutput() RealmSecurityDefensesHeadersPtrOutput {
	return i.ToRealmSecurityDefensesHeadersPtrOutputWithContext(context.Background())
}

func (i RealmSecurityDefensesHeadersArgs) ToRealmSecurityDefensesHeadersPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesHeadersOutput).ToRealmSecurityDefensesHeadersPtrOutputWithContext(ctx)
}

// RealmSecurityDefensesHeadersPtrInput is an input type that accepts RealmSecurityDefensesHeadersArgs, RealmSecurityDefensesHeadersPtr and RealmSecurityDefensesHeadersPtrOutput values.
// You can construct a concrete instance of `RealmSecurityDefensesHeadersPtrInput` via:
//
//          RealmSecurityDefensesHeadersArgs{...}
//
//  or:
//
//          nil
type RealmSecurityDefensesHeadersPtrInput interface {
	pulumi.Input

	ToRealmSecurityDefensesHeadersPtrOutput() RealmSecurityDefensesHeadersPtrOutput
	ToRealmSecurityDefensesHeadersPtrOutputWithContext(context.Context) RealmSecurityDefensesHeadersPtrOutput
}

type realmSecurityDefensesHeadersPtrType RealmSecurityDefensesHeadersArgs

func RealmSecurityDefensesHeadersPtr(v *RealmSecurityDefensesHeadersArgs) RealmSecurityDefensesHeadersPtrInput {
	return (*realmSecurityDefensesHeadersPtrType)(v)
}

func (*realmSecurityDefensesHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSecurityDefensesHeaders)(nil)).Elem()
}

func (i *realmSecurityDefensesHeadersPtrType) ToRealmSecurityDefensesHeadersPtrOutput() RealmSecurityDefensesHeadersPtrOutput {
	return i.ToRealmSecurityDefensesHeadersPtrOutputWithContext(context.Background())
}

func (i *realmSecurityDefensesHeadersPtrType) ToRealmSecurityDefensesHeadersPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSecurityDefensesHeadersPtrOutput)
}

type RealmSecurityDefensesHeadersOutput struct{ *pulumi.OutputState }

func (RealmSecurityDefensesHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSecurityDefensesHeaders)(nil)).Elem()
}

func (o RealmSecurityDefensesHeadersOutput) ToRealmSecurityDefensesHeadersOutput() RealmSecurityDefensesHeadersOutput {
	return o
}

func (o RealmSecurityDefensesHeadersOutput) ToRealmSecurityDefensesHeadersOutputWithContext(ctx context.Context) RealmSecurityDefensesHeadersOutput {
	return o
}

func (o RealmSecurityDefensesHeadersOutput) ToRealmSecurityDefensesHeadersPtrOutput() RealmSecurityDefensesHeadersPtrOutput {
	return o.ToRealmSecurityDefensesHeadersPtrOutputWithContext(context.Background())
}

func (o RealmSecurityDefensesHeadersOutput) ToRealmSecurityDefensesHeadersPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmSecurityDefensesHeaders) *RealmSecurityDefensesHeaders {
		return &v
	}).(RealmSecurityDefensesHeadersPtrOutput)
}

// Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the [W3C-CSP](https://www.w3.org/TR/CSP/) Abstract.
func (o RealmSecurityDefensesHeadersOutput) ContentSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesHeaders) *string { return v.ContentSecurityPolicy }).(pulumi.StringPtrOutput)
}

// Used for testing Content Security Policies.
func (o RealmSecurityDefensesHeadersOutput) ContentSecurityPolicyReportOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesHeaders) *string { return v.ContentSecurityPolicyReportOnly }).(pulumi.StringPtrOutput)
}

// The Script-Transport-Security HTTP header tells browsers to always use HTTPS.
func (o RealmSecurityDefensesHeadersOutput) StrictTransportSecurity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesHeaders) *string { return v.StrictTransportSecurity }).(pulumi.StringPtrOutput)
}

// Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type
func (o RealmSecurityDefensesHeadersOutput) XContentTypeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesHeaders) *string { return v.XContentTypeOptions }).(pulumi.StringPtrOutput)
}

// Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the [RFC7034](https://tools.ietf.org/html/rfc7034)
func (o RealmSecurityDefensesHeadersOutput) XFrameOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesHeaders) *string { return v.XFrameOptions }).(pulumi.StringPtrOutput)
}

// Prevent pages from appearing in search engines.
func (o RealmSecurityDefensesHeadersOutput) XRobotsTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesHeaders) *string { return v.XRobotsTag }).(pulumi.StringPtrOutput)
}

// This header configures the Cross-site scripting (XSS) filter in your browser.
func (o RealmSecurityDefensesHeadersOutput) XXssProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSecurityDefensesHeaders) *string { return v.XXssProtection }).(pulumi.StringPtrOutput)
}

type RealmSecurityDefensesHeadersPtrOutput struct{ *pulumi.OutputState }

func (RealmSecurityDefensesHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSecurityDefensesHeaders)(nil)).Elem()
}

func (o RealmSecurityDefensesHeadersPtrOutput) ToRealmSecurityDefensesHeadersPtrOutput() RealmSecurityDefensesHeadersPtrOutput {
	return o
}

func (o RealmSecurityDefensesHeadersPtrOutput) ToRealmSecurityDefensesHeadersPtrOutputWithContext(ctx context.Context) RealmSecurityDefensesHeadersPtrOutput {
	return o
}

func (o RealmSecurityDefensesHeadersPtrOutput) Elem() RealmSecurityDefensesHeadersOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) RealmSecurityDefensesHeaders {
		if v != nil {
			return *v
		}
		var ret RealmSecurityDefensesHeaders
		return ret
	}).(RealmSecurityDefensesHeadersOutput)
}

// Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the [W3C-CSP](https://www.w3.org/TR/CSP/) Abstract.
func (o RealmSecurityDefensesHeadersPtrOutput) ContentSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ContentSecurityPolicy
	}).(pulumi.StringPtrOutput)
}

// Used for testing Content Security Policies.
func (o RealmSecurityDefensesHeadersPtrOutput) ContentSecurityPolicyReportOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ContentSecurityPolicyReportOnly
	}).(pulumi.StringPtrOutput)
}

// The Script-Transport-Security HTTP header tells browsers to always use HTTPS.
func (o RealmSecurityDefensesHeadersPtrOutput) StrictTransportSecurity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) *string {
		if v == nil {
			return nil
		}
		return v.StrictTransportSecurity
	}).(pulumi.StringPtrOutput)
}

// Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type
func (o RealmSecurityDefensesHeadersPtrOutput) XContentTypeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) *string {
		if v == nil {
			return nil
		}
		return v.XContentTypeOptions
	}).(pulumi.StringPtrOutput)
}

// Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the [RFC7034](https://tools.ietf.org/html/rfc7034)
func (o RealmSecurityDefensesHeadersPtrOutput) XFrameOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) *string {
		if v == nil {
			return nil
		}
		return v.XFrameOptions
	}).(pulumi.StringPtrOutput)
}

// Prevent pages from appearing in search engines.
func (o RealmSecurityDefensesHeadersPtrOutput) XRobotsTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) *string {
		if v == nil {
			return nil
		}
		return v.XRobotsTag
	}).(pulumi.StringPtrOutput)
}

// This header configures the Cross-site scripting (XSS) filter in your browser.
func (o RealmSecurityDefensesHeadersPtrOutput) XXssProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSecurityDefensesHeaders) *string {
		if v == nil {
			return nil
		}
		return v.XXssProtection
	}).(pulumi.StringPtrOutput)
}

type RealmSmtpServer struct {
	// Enables authentication to the SMTP server.  This block supports the following arguments:
	Auth *RealmSmtpServerAuth `pulumi:"auth"`
	// The email address uses for bounces.
	EnvelopeFrom *string `pulumi:"envelopeFrom"`
	// The email address for the sender.
	From string `pulumi:"from"`
	// The display name of the sender email address.
	FromDisplayName *string `pulumi:"fromDisplayName"`
	// The host of the SMTP server.
	Host string `pulumi:"host"`
	// The port of the SMTP server (defaults to 25).
	Port *string `pulumi:"port"`
	// The "reply to" email address.
	ReplyTo *string `pulumi:"replyTo"`
	// The display name of the "reply to" email address.
	ReplyToDisplayName *string `pulumi:"replyToDisplayName"`
	// When `true`, enables SSL. Defaults to `false`.
	Ssl *bool `pulumi:"ssl"`
	// When `true`, enables StartTLS. Defaults to `false`.
	Starttls *bool `pulumi:"starttls"`
}

// RealmSmtpServerInput is an input type that accepts RealmSmtpServerArgs and RealmSmtpServerOutput values.
// You can construct a concrete instance of `RealmSmtpServerInput` via:
//
//          RealmSmtpServerArgs{...}
type RealmSmtpServerInput interface {
	pulumi.Input

	ToRealmSmtpServerOutput() RealmSmtpServerOutput
	ToRealmSmtpServerOutputWithContext(context.Context) RealmSmtpServerOutput
}

type RealmSmtpServerArgs struct {
	// Enables authentication to the SMTP server.  This block supports the following arguments:
	Auth RealmSmtpServerAuthPtrInput `pulumi:"auth"`
	// The email address uses for bounces.
	EnvelopeFrom pulumi.StringPtrInput `pulumi:"envelopeFrom"`
	// The email address for the sender.
	From pulumi.StringInput `pulumi:"from"`
	// The display name of the sender email address.
	FromDisplayName pulumi.StringPtrInput `pulumi:"fromDisplayName"`
	// The host of the SMTP server.
	Host pulumi.StringInput `pulumi:"host"`
	// The port of the SMTP server (defaults to 25).
	Port pulumi.StringPtrInput `pulumi:"port"`
	// The "reply to" email address.
	ReplyTo pulumi.StringPtrInput `pulumi:"replyTo"`
	// The display name of the "reply to" email address.
	ReplyToDisplayName pulumi.StringPtrInput `pulumi:"replyToDisplayName"`
	// When `true`, enables SSL. Defaults to `false`.
	Ssl pulumi.BoolPtrInput `pulumi:"ssl"`
	// When `true`, enables StartTLS. Defaults to `false`.
	Starttls pulumi.BoolPtrInput `pulumi:"starttls"`
}

func (RealmSmtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSmtpServer)(nil)).Elem()
}

func (i RealmSmtpServerArgs) ToRealmSmtpServerOutput() RealmSmtpServerOutput {
	return i.ToRealmSmtpServerOutputWithContext(context.Background())
}

func (i RealmSmtpServerArgs) ToRealmSmtpServerOutputWithContext(ctx context.Context) RealmSmtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSmtpServerOutput)
}

func (i RealmSmtpServerArgs) ToRealmSmtpServerPtrOutput() RealmSmtpServerPtrOutput {
	return i.ToRealmSmtpServerPtrOutputWithContext(context.Background())
}

func (i RealmSmtpServerArgs) ToRealmSmtpServerPtrOutputWithContext(ctx context.Context) RealmSmtpServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSmtpServerOutput).ToRealmSmtpServerPtrOutputWithContext(ctx)
}

// RealmSmtpServerPtrInput is an input type that accepts RealmSmtpServerArgs, RealmSmtpServerPtr and RealmSmtpServerPtrOutput values.
// You can construct a concrete instance of `RealmSmtpServerPtrInput` via:
//
//          RealmSmtpServerArgs{...}
//
//  or:
//
//          nil
type RealmSmtpServerPtrInput interface {
	pulumi.Input

	ToRealmSmtpServerPtrOutput() RealmSmtpServerPtrOutput
	ToRealmSmtpServerPtrOutputWithContext(context.Context) RealmSmtpServerPtrOutput
}

type realmSmtpServerPtrType RealmSmtpServerArgs

func RealmSmtpServerPtr(v *RealmSmtpServerArgs) RealmSmtpServerPtrInput {
	return (*realmSmtpServerPtrType)(v)
}

func (*realmSmtpServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSmtpServer)(nil)).Elem()
}

func (i *realmSmtpServerPtrType) ToRealmSmtpServerPtrOutput() RealmSmtpServerPtrOutput {
	return i.ToRealmSmtpServerPtrOutputWithContext(context.Background())
}

func (i *realmSmtpServerPtrType) ToRealmSmtpServerPtrOutputWithContext(ctx context.Context) RealmSmtpServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSmtpServerPtrOutput)
}

type RealmSmtpServerOutput struct{ *pulumi.OutputState }

func (RealmSmtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSmtpServer)(nil)).Elem()
}

func (o RealmSmtpServerOutput) ToRealmSmtpServerOutput() RealmSmtpServerOutput {
	return o
}

func (o RealmSmtpServerOutput) ToRealmSmtpServerOutputWithContext(ctx context.Context) RealmSmtpServerOutput {
	return o
}

func (o RealmSmtpServerOutput) ToRealmSmtpServerPtrOutput() RealmSmtpServerPtrOutput {
	return o.ToRealmSmtpServerPtrOutputWithContext(context.Background())
}

func (o RealmSmtpServerOutput) ToRealmSmtpServerPtrOutputWithContext(ctx context.Context) RealmSmtpServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmSmtpServer) *RealmSmtpServer {
		return &v
	}).(RealmSmtpServerPtrOutput)
}

// Enables authentication to the SMTP server.  This block supports the following arguments:
func (o RealmSmtpServerOutput) Auth() RealmSmtpServerAuthPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *RealmSmtpServerAuth { return v.Auth }).(RealmSmtpServerAuthPtrOutput)
}

// The email address uses for bounces.
func (o RealmSmtpServerOutput) EnvelopeFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *string { return v.EnvelopeFrom }).(pulumi.StringPtrOutput)
}

// The email address for the sender.
func (o RealmSmtpServerOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v RealmSmtpServer) string { return v.From }).(pulumi.StringOutput)
}

// The display name of the sender email address.
func (o RealmSmtpServerOutput) FromDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *string { return v.FromDisplayName }).(pulumi.StringPtrOutput)
}

// The host of the SMTP server.
func (o RealmSmtpServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RealmSmtpServer) string { return v.Host }).(pulumi.StringOutput)
}

// The port of the SMTP server (defaults to 25).
func (o RealmSmtpServerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The "reply to" email address.
func (o RealmSmtpServerOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *string { return v.ReplyTo }).(pulumi.StringPtrOutput)
}

// The display name of the "reply to" email address.
func (o RealmSmtpServerOutput) ReplyToDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *string { return v.ReplyToDisplayName }).(pulumi.StringPtrOutput)
}

// When `true`, enables SSL. Defaults to `false`.
func (o RealmSmtpServerOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *bool { return v.Ssl }).(pulumi.BoolPtrOutput)
}

// When `true`, enables StartTLS. Defaults to `false`.
func (o RealmSmtpServerOutput) Starttls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RealmSmtpServer) *bool { return v.Starttls }).(pulumi.BoolPtrOutput)
}

type RealmSmtpServerPtrOutput struct{ *pulumi.OutputState }

func (RealmSmtpServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSmtpServer)(nil)).Elem()
}

func (o RealmSmtpServerPtrOutput) ToRealmSmtpServerPtrOutput() RealmSmtpServerPtrOutput {
	return o
}

func (o RealmSmtpServerPtrOutput) ToRealmSmtpServerPtrOutputWithContext(ctx context.Context) RealmSmtpServerPtrOutput {
	return o
}

func (o RealmSmtpServerPtrOutput) Elem() RealmSmtpServerOutput {
	return o.ApplyT(func(v *RealmSmtpServer) RealmSmtpServer {
		if v != nil {
			return *v
		}
		var ret RealmSmtpServer
		return ret
	}).(RealmSmtpServerOutput)
}

// Enables authentication to the SMTP server.  This block supports the following arguments:
func (o RealmSmtpServerPtrOutput) Auth() RealmSmtpServerAuthPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *RealmSmtpServerAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(RealmSmtpServerAuthPtrOutput)
}

// The email address uses for bounces.
func (o RealmSmtpServerPtrOutput) EnvelopeFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *string {
		if v == nil {
			return nil
		}
		return v.EnvelopeFrom
	}).(pulumi.StringPtrOutput)
}

// The email address for the sender.
func (o RealmSmtpServerPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The display name of the sender email address.
func (o RealmSmtpServerPtrOutput) FromDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *string {
		if v == nil {
			return nil
		}
		return v.FromDisplayName
	}).(pulumi.StringPtrOutput)
}

// The host of the SMTP server.
func (o RealmSmtpServerPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The port of the SMTP server (defaults to 25).
func (o RealmSmtpServerPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// The "reply to" email address.
func (o RealmSmtpServerPtrOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *string {
		if v == nil {
			return nil
		}
		return v.ReplyTo
	}).(pulumi.StringPtrOutput)
}

// The display name of the "reply to" email address.
func (o RealmSmtpServerPtrOutput) ReplyToDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *string {
		if v == nil {
			return nil
		}
		return v.ReplyToDisplayName
	}).(pulumi.StringPtrOutput)
}

// When `true`, enables SSL. Defaults to `false`.
func (o RealmSmtpServerPtrOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *bool {
		if v == nil {
			return nil
		}
		return v.Ssl
	}).(pulumi.BoolPtrOutput)
}

// When `true`, enables StartTLS. Defaults to `false`.
func (o RealmSmtpServerPtrOutput) Starttls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServer) *bool {
		if v == nil {
			return nil
		}
		return v.Starttls
	}).(pulumi.BoolPtrOutput)
}

type RealmSmtpServerAuth struct {
	// The SMTP server password.
	Password string `pulumi:"password"`
	// The SMTP server username.
	Username string `pulumi:"username"`
}

// RealmSmtpServerAuthInput is an input type that accepts RealmSmtpServerAuthArgs and RealmSmtpServerAuthOutput values.
// You can construct a concrete instance of `RealmSmtpServerAuthInput` via:
//
//          RealmSmtpServerAuthArgs{...}
type RealmSmtpServerAuthInput interface {
	pulumi.Input

	ToRealmSmtpServerAuthOutput() RealmSmtpServerAuthOutput
	ToRealmSmtpServerAuthOutputWithContext(context.Context) RealmSmtpServerAuthOutput
}

type RealmSmtpServerAuthArgs struct {
	// The SMTP server password.
	Password pulumi.StringInput `pulumi:"password"`
	// The SMTP server username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (RealmSmtpServerAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSmtpServerAuth)(nil)).Elem()
}

func (i RealmSmtpServerAuthArgs) ToRealmSmtpServerAuthOutput() RealmSmtpServerAuthOutput {
	return i.ToRealmSmtpServerAuthOutputWithContext(context.Background())
}

func (i RealmSmtpServerAuthArgs) ToRealmSmtpServerAuthOutputWithContext(ctx context.Context) RealmSmtpServerAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSmtpServerAuthOutput)
}

func (i RealmSmtpServerAuthArgs) ToRealmSmtpServerAuthPtrOutput() RealmSmtpServerAuthPtrOutput {
	return i.ToRealmSmtpServerAuthPtrOutputWithContext(context.Background())
}

func (i RealmSmtpServerAuthArgs) ToRealmSmtpServerAuthPtrOutputWithContext(ctx context.Context) RealmSmtpServerAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSmtpServerAuthOutput).ToRealmSmtpServerAuthPtrOutputWithContext(ctx)
}

// RealmSmtpServerAuthPtrInput is an input type that accepts RealmSmtpServerAuthArgs, RealmSmtpServerAuthPtr and RealmSmtpServerAuthPtrOutput values.
// You can construct a concrete instance of `RealmSmtpServerAuthPtrInput` via:
//
//          RealmSmtpServerAuthArgs{...}
//
//  or:
//
//          nil
type RealmSmtpServerAuthPtrInput interface {
	pulumi.Input

	ToRealmSmtpServerAuthPtrOutput() RealmSmtpServerAuthPtrOutput
	ToRealmSmtpServerAuthPtrOutputWithContext(context.Context) RealmSmtpServerAuthPtrOutput
}

type realmSmtpServerAuthPtrType RealmSmtpServerAuthArgs

func RealmSmtpServerAuthPtr(v *RealmSmtpServerAuthArgs) RealmSmtpServerAuthPtrInput {
	return (*realmSmtpServerAuthPtrType)(v)
}

func (*realmSmtpServerAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSmtpServerAuth)(nil)).Elem()
}

func (i *realmSmtpServerAuthPtrType) ToRealmSmtpServerAuthPtrOutput() RealmSmtpServerAuthPtrOutput {
	return i.ToRealmSmtpServerAuthPtrOutputWithContext(context.Background())
}

func (i *realmSmtpServerAuthPtrType) ToRealmSmtpServerAuthPtrOutputWithContext(ctx context.Context) RealmSmtpServerAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmSmtpServerAuthPtrOutput)
}

type RealmSmtpServerAuthOutput struct{ *pulumi.OutputState }

func (RealmSmtpServerAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmSmtpServerAuth)(nil)).Elem()
}

func (o RealmSmtpServerAuthOutput) ToRealmSmtpServerAuthOutput() RealmSmtpServerAuthOutput {
	return o
}

func (o RealmSmtpServerAuthOutput) ToRealmSmtpServerAuthOutputWithContext(ctx context.Context) RealmSmtpServerAuthOutput {
	return o
}

func (o RealmSmtpServerAuthOutput) ToRealmSmtpServerAuthPtrOutput() RealmSmtpServerAuthPtrOutput {
	return o.ToRealmSmtpServerAuthPtrOutputWithContext(context.Background())
}

func (o RealmSmtpServerAuthOutput) ToRealmSmtpServerAuthPtrOutputWithContext(ctx context.Context) RealmSmtpServerAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmSmtpServerAuth) *RealmSmtpServerAuth {
		return &v
	}).(RealmSmtpServerAuthPtrOutput)
}

// The SMTP server password.
func (o RealmSmtpServerAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v RealmSmtpServerAuth) string { return v.Password }).(pulumi.StringOutput)
}

// The SMTP server username.
func (o RealmSmtpServerAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RealmSmtpServerAuth) string { return v.Username }).(pulumi.StringOutput)
}

type RealmSmtpServerAuthPtrOutput struct{ *pulumi.OutputState }

func (RealmSmtpServerAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmSmtpServerAuth)(nil)).Elem()
}

func (o RealmSmtpServerAuthPtrOutput) ToRealmSmtpServerAuthPtrOutput() RealmSmtpServerAuthPtrOutput {
	return o
}

func (o RealmSmtpServerAuthPtrOutput) ToRealmSmtpServerAuthPtrOutputWithContext(ctx context.Context) RealmSmtpServerAuthPtrOutput {
	return o
}

func (o RealmSmtpServerAuthPtrOutput) Elem() RealmSmtpServerAuthOutput {
	return o.ApplyT(func(v *RealmSmtpServerAuth) RealmSmtpServerAuth {
		if v != nil {
			return *v
		}
		var ret RealmSmtpServerAuth
		return ret
	}).(RealmSmtpServerAuthOutput)
}

// The SMTP server password.
func (o RealmSmtpServerAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServerAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The SMTP server username.
func (o RealmSmtpServerAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmSmtpServerAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type RealmWebAuthnPasswordlessPolicy struct {
	// A set of AAGUIDs for which an authenticator can be registered.
	AcceptableAaguids []string `pulumi:"acceptableAaguids"`
	// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
	AttestationConveyancePreference *string `pulumi:"attestationConveyancePreference"`
	// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
	AuthenticatorAttachment *string `pulumi:"authenticatorAttachment"`
	// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
	AvoidSameAuthenticatorRegister *bool `pulumi:"avoidSameAuthenticatorRegister"`
	// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
	CreateTimeout *int `pulumi:"createTimeout"`
	// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
	RelyingPartyEntityName *string `pulumi:"relyingPartyEntityName"`
	// The WebAuthn relying party ID.
	RelyingPartyId *string `pulumi:"relyingPartyId"`
	// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
	RequireResidentKey *string `pulumi:"requireResidentKey"`
	// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
	SignatureAlgorithms []string `pulumi:"signatureAlgorithms"`
	// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
	UserVerificationRequirement *string `pulumi:"userVerificationRequirement"`
}

// RealmWebAuthnPasswordlessPolicyInput is an input type that accepts RealmWebAuthnPasswordlessPolicyArgs and RealmWebAuthnPasswordlessPolicyOutput values.
// You can construct a concrete instance of `RealmWebAuthnPasswordlessPolicyInput` via:
//
//          RealmWebAuthnPasswordlessPolicyArgs{...}
type RealmWebAuthnPasswordlessPolicyInput interface {
	pulumi.Input

	ToRealmWebAuthnPasswordlessPolicyOutput() RealmWebAuthnPasswordlessPolicyOutput
	ToRealmWebAuthnPasswordlessPolicyOutputWithContext(context.Context) RealmWebAuthnPasswordlessPolicyOutput
}

type RealmWebAuthnPasswordlessPolicyArgs struct {
	// A set of AAGUIDs for which an authenticator can be registered.
	AcceptableAaguids pulumi.StringArrayInput `pulumi:"acceptableAaguids"`
	// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
	AttestationConveyancePreference pulumi.StringPtrInput `pulumi:"attestationConveyancePreference"`
	// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
	AuthenticatorAttachment pulumi.StringPtrInput `pulumi:"authenticatorAttachment"`
	// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
	AvoidSameAuthenticatorRegister pulumi.BoolPtrInput `pulumi:"avoidSameAuthenticatorRegister"`
	// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
	CreateTimeout pulumi.IntPtrInput `pulumi:"createTimeout"`
	// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
	RelyingPartyEntityName pulumi.StringPtrInput `pulumi:"relyingPartyEntityName"`
	// The WebAuthn relying party ID.
	RelyingPartyId pulumi.StringPtrInput `pulumi:"relyingPartyId"`
	// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
	RequireResidentKey pulumi.StringPtrInput `pulumi:"requireResidentKey"`
	// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
	SignatureAlgorithms pulumi.StringArrayInput `pulumi:"signatureAlgorithms"`
	// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
	UserVerificationRequirement pulumi.StringPtrInput `pulumi:"userVerificationRequirement"`
}

func (RealmWebAuthnPasswordlessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (i RealmWebAuthnPasswordlessPolicyArgs) ToRealmWebAuthnPasswordlessPolicyOutput() RealmWebAuthnPasswordlessPolicyOutput {
	return i.ToRealmWebAuthnPasswordlessPolicyOutputWithContext(context.Background())
}

func (i RealmWebAuthnPasswordlessPolicyArgs) ToRealmWebAuthnPasswordlessPolicyOutputWithContext(ctx context.Context) RealmWebAuthnPasswordlessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmWebAuthnPasswordlessPolicyOutput)
}

func (i RealmWebAuthnPasswordlessPolicyArgs) ToRealmWebAuthnPasswordlessPolicyPtrOutput() RealmWebAuthnPasswordlessPolicyPtrOutput {
	return i.ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Background())
}

func (i RealmWebAuthnPasswordlessPolicyArgs) ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPasswordlessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmWebAuthnPasswordlessPolicyOutput).ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx)
}

// RealmWebAuthnPasswordlessPolicyPtrInput is an input type that accepts RealmWebAuthnPasswordlessPolicyArgs, RealmWebAuthnPasswordlessPolicyPtr and RealmWebAuthnPasswordlessPolicyPtrOutput values.
// You can construct a concrete instance of `RealmWebAuthnPasswordlessPolicyPtrInput` via:
//
//          RealmWebAuthnPasswordlessPolicyArgs{...}
//
//  or:
//
//          nil
type RealmWebAuthnPasswordlessPolicyPtrInput interface {
	pulumi.Input

	ToRealmWebAuthnPasswordlessPolicyPtrOutput() RealmWebAuthnPasswordlessPolicyPtrOutput
	ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Context) RealmWebAuthnPasswordlessPolicyPtrOutput
}

type realmWebAuthnPasswordlessPolicyPtrType RealmWebAuthnPasswordlessPolicyArgs

func RealmWebAuthnPasswordlessPolicyPtr(v *RealmWebAuthnPasswordlessPolicyArgs) RealmWebAuthnPasswordlessPolicyPtrInput {
	return (*realmWebAuthnPasswordlessPolicyPtrType)(v)
}

func (*realmWebAuthnPasswordlessPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (i *realmWebAuthnPasswordlessPolicyPtrType) ToRealmWebAuthnPasswordlessPolicyPtrOutput() RealmWebAuthnPasswordlessPolicyPtrOutput {
	return i.ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Background())
}

func (i *realmWebAuthnPasswordlessPolicyPtrType) ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPasswordlessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmWebAuthnPasswordlessPolicyPtrOutput)
}

type RealmWebAuthnPasswordlessPolicyOutput struct{ *pulumi.OutputState }

func (RealmWebAuthnPasswordlessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (o RealmWebAuthnPasswordlessPolicyOutput) ToRealmWebAuthnPasswordlessPolicyOutput() RealmWebAuthnPasswordlessPolicyOutput {
	return o
}

func (o RealmWebAuthnPasswordlessPolicyOutput) ToRealmWebAuthnPasswordlessPolicyOutputWithContext(ctx context.Context) RealmWebAuthnPasswordlessPolicyOutput {
	return o
}

func (o RealmWebAuthnPasswordlessPolicyOutput) ToRealmWebAuthnPasswordlessPolicyPtrOutput() RealmWebAuthnPasswordlessPolicyPtrOutput {
	return o.ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Background())
}

func (o RealmWebAuthnPasswordlessPolicyOutput) ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPasswordlessPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmWebAuthnPasswordlessPolicy) *RealmWebAuthnPasswordlessPolicy {
		return &v
	}).(RealmWebAuthnPasswordlessPolicyPtrOutput)
}

// A set of AAGUIDs for which an authenticator can be registered.
func (o RealmWebAuthnPasswordlessPolicyOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) []string { return v.AcceptableAaguids }).(pulumi.StringArrayOutput)
}

// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyOutput) AttestationConveyancePreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *string { return v.AttestationConveyancePreference }).(pulumi.StringPtrOutput)
}

// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyOutput) AuthenticatorAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *string { return v.AuthenticatorAttachment }).(pulumi.StringPtrOutput)
}

// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
func (o RealmWebAuthnPasswordlessPolicyOutput) AvoidSameAuthenticatorRegister() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *bool { return v.AvoidSameAuthenticatorRegister }).(pulumi.BoolPtrOutput)
}

// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
func (o RealmWebAuthnPasswordlessPolicyOutput) CreateTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *int { return v.CreateTimeout }).(pulumi.IntPtrOutput)
}

// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
func (o RealmWebAuthnPasswordlessPolicyOutput) RelyingPartyEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *string { return v.RelyingPartyEntityName }).(pulumi.StringPtrOutput)
}

// The WebAuthn relying party ID.
func (o RealmWebAuthnPasswordlessPolicyOutput) RelyingPartyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *string { return v.RelyingPartyId }).(pulumi.StringPtrOutput)
}

// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyOutput) RequireResidentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *string { return v.RequireResidentKey }).(pulumi.StringPtrOutput)
}

// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
func (o RealmWebAuthnPasswordlessPolicyOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) []string { return v.SignatureAlgorithms }).(pulumi.StringArrayOutput)
}

// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyOutput) UserVerificationRequirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPasswordlessPolicy) *string { return v.UserVerificationRequirement }).(pulumi.StringPtrOutput)
}

type RealmWebAuthnPasswordlessPolicyPtrOutput struct{ *pulumi.OutputState }

func (RealmWebAuthnPasswordlessPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (o RealmWebAuthnPasswordlessPolicyPtrOutput) ToRealmWebAuthnPasswordlessPolicyPtrOutput() RealmWebAuthnPasswordlessPolicyPtrOutput {
	return o
}

func (o RealmWebAuthnPasswordlessPolicyPtrOutput) ToRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPasswordlessPolicyPtrOutput {
	return o
}

func (o RealmWebAuthnPasswordlessPolicyPtrOutput) Elem() RealmWebAuthnPasswordlessPolicyOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) RealmWebAuthnPasswordlessPolicy {
		if v != nil {
			return *v
		}
		var ret RealmWebAuthnPasswordlessPolicy
		return ret
	}).(RealmWebAuthnPasswordlessPolicyOutput)
}

// A set of AAGUIDs for which an authenticator can be registered.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AcceptableAaguids
	}).(pulumi.StringArrayOutput)
}

// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) AttestationConveyancePreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.AttestationConveyancePreference
	}).(pulumi.StringPtrOutput)
}

// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) AuthenticatorAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticatorAttachment
	}).(pulumi.StringPtrOutput)
}

// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) AvoidSameAuthenticatorRegister() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AvoidSameAuthenticatorRegister
	}).(pulumi.BoolPtrOutput)
}

// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) CreateTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CreateTimeout
	}).(pulumi.IntPtrOutput)
}

// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) RelyingPartyEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RelyingPartyEntityName
	}).(pulumi.StringPtrOutput)
}

// The WebAuthn relying party ID.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) RelyingPartyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RelyingPartyId
	}).(pulumi.StringPtrOutput)
}

// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) RequireResidentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RequireResidentKey
	}).(pulumi.StringPtrOutput)
}

// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
func (o RealmWebAuthnPasswordlessPolicyPtrOutput) UserVerificationRequirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UserVerificationRequirement
	}).(pulumi.StringPtrOutput)
}

type RealmWebAuthnPolicy struct {
	// A set of AAGUIDs for which an authenticator can be registered.
	AcceptableAaguids []string `pulumi:"acceptableAaguids"`
	// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
	AttestationConveyancePreference *string `pulumi:"attestationConveyancePreference"`
	// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
	AuthenticatorAttachment *string `pulumi:"authenticatorAttachment"`
	// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
	AvoidSameAuthenticatorRegister *bool `pulumi:"avoidSameAuthenticatorRegister"`
	// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
	CreateTimeout *int `pulumi:"createTimeout"`
	// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
	RelyingPartyEntityName *string `pulumi:"relyingPartyEntityName"`
	// The WebAuthn relying party ID.
	RelyingPartyId *string `pulumi:"relyingPartyId"`
	// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
	RequireResidentKey *string `pulumi:"requireResidentKey"`
	// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
	SignatureAlgorithms []string `pulumi:"signatureAlgorithms"`
	// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
	UserVerificationRequirement *string `pulumi:"userVerificationRequirement"`
}

// RealmWebAuthnPolicyInput is an input type that accepts RealmWebAuthnPolicyArgs and RealmWebAuthnPolicyOutput values.
// You can construct a concrete instance of `RealmWebAuthnPolicyInput` via:
//
//          RealmWebAuthnPolicyArgs{...}
type RealmWebAuthnPolicyInput interface {
	pulumi.Input

	ToRealmWebAuthnPolicyOutput() RealmWebAuthnPolicyOutput
	ToRealmWebAuthnPolicyOutputWithContext(context.Context) RealmWebAuthnPolicyOutput
}

type RealmWebAuthnPolicyArgs struct {
	// A set of AAGUIDs for which an authenticator can be registered.
	AcceptableAaguids pulumi.StringArrayInput `pulumi:"acceptableAaguids"`
	// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
	AttestationConveyancePreference pulumi.StringPtrInput `pulumi:"attestationConveyancePreference"`
	// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
	AuthenticatorAttachment pulumi.StringPtrInput `pulumi:"authenticatorAttachment"`
	// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
	AvoidSameAuthenticatorRegister pulumi.BoolPtrInput `pulumi:"avoidSameAuthenticatorRegister"`
	// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
	CreateTimeout pulumi.IntPtrInput `pulumi:"createTimeout"`
	// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
	RelyingPartyEntityName pulumi.StringPtrInput `pulumi:"relyingPartyEntityName"`
	// The WebAuthn relying party ID.
	RelyingPartyId pulumi.StringPtrInput `pulumi:"relyingPartyId"`
	// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
	RequireResidentKey pulumi.StringPtrInput `pulumi:"requireResidentKey"`
	// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
	SignatureAlgorithms pulumi.StringArrayInput `pulumi:"signatureAlgorithms"`
	// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
	UserVerificationRequirement pulumi.StringPtrInput `pulumi:"userVerificationRequirement"`
}

func (RealmWebAuthnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmWebAuthnPolicy)(nil)).Elem()
}

func (i RealmWebAuthnPolicyArgs) ToRealmWebAuthnPolicyOutput() RealmWebAuthnPolicyOutput {
	return i.ToRealmWebAuthnPolicyOutputWithContext(context.Background())
}

func (i RealmWebAuthnPolicyArgs) ToRealmWebAuthnPolicyOutputWithContext(ctx context.Context) RealmWebAuthnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmWebAuthnPolicyOutput)
}

func (i RealmWebAuthnPolicyArgs) ToRealmWebAuthnPolicyPtrOutput() RealmWebAuthnPolicyPtrOutput {
	return i.ToRealmWebAuthnPolicyPtrOutputWithContext(context.Background())
}

func (i RealmWebAuthnPolicyArgs) ToRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmWebAuthnPolicyOutput).ToRealmWebAuthnPolicyPtrOutputWithContext(ctx)
}

// RealmWebAuthnPolicyPtrInput is an input type that accepts RealmWebAuthnPolicyArgs, RealmWebAuthnPolicyPtr and RealmWebAuthnPolicyPtrOutput values.
// You can construct a concrete instance of `RealmWebAuthnPolicyPtrInput` via:
//
//          RealmWebAuthnPolicyArgs{...}
//
//  or:
//
//          nil
type RealmWebAuthnPolicyPtrInput interface {
	pulumi.Input

	ToRealmWebAuthnPolicyPtrOutput() RealmWebAuthnPolicyPtrOutput
	ToRealmWebAuthnPolicyPtrOutputWithContext(context.Context) RealmWebAuthnPolicyPtrOutput
}

type realmWebAuthnPolicyPtrType RealmWebAuthnPolicyArgs

func RealmWebAuthnPolicyPtr(v *RealmWebAuthnPolicyArgs) RealmWebAuthnPolicyPtrInput {
	return (*realmWebAuthnPolicyPtrType)(v)
}

func (*realmWebAuthnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmWebAuthnPolicy)(nil)).Elem()
}

func (i *realmWebAuthnPolicyPtrType) ToRealmWebAuthnPolicyPtrOutput() RealmWebAuthnPolicyPtrOutput {
	return i.ToRealmWebAuthnPolicyPtrOutputWithContext(context.Background())
}

func (i *realmWebAuthnPolicyPtrType) ToRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmWebAuthnPolicyPtrOutput)
}

type RealmWebAuthnPolicyOutput struct{ *pulumi.OutputState }

func (RealmWebAuthnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RealmWebAuthnPolicy)(nil)).Elem()
}

func (o RealmWebAuthnPolicyOutput) ToRealmWebAuthnPolicyOutput() RealmWebAuthnPolicyOutput {
	return o
}

func (o RealmWebAuthnPolicyOutput) ToRealmWebAuthnPolicyOutputWithContext(ctx context.Context) RealmWebAuthnPolicyOutput {
	return o
}

func (o RealmWebAuthnPolicyOutput) ToRealmWebAuthnPolicyPtrOutput() RealmWebAuthnPolicyPtrOutput {
	return o.ToRealmWebAuthnPolicyPtrOutputWithContext(context.Background())
}

func (o RealmWebAuthnPolicyOutput) ToRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RealmWebAuthnPolicy) *RealmWebAuthnPolicy {
		return &v
	}).(RealmWebAuthnPolicyPtrOutput)
}

// A set of AAGUIDs for which an authenticator can be registered.
func (o RealmWebAuthnPolicyOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) []string { return v.AcceptableAaguids }).(pulumi.StringArrayOutput)
}

// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyOutput) AttestationConveyancePreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *string { return v.AttestationConveyancePreference }).(pulumi.StringPtrOutput)
}

// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyOutput) AuthenticatorAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *string { return v.AuthenticatorAttachment }).(pulumi.StringPtrOutput)
}

// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
func (o RealmWebAuthnPolicyOutput) AvoidSameAuthenticatorRegister() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *bool { return v.AvoidSameAuthenticatorRegister }).(pulumi.BoolPtrOutput)
}

// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
func (o RealmWebAuthnPolicyOutput) CreateTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *int { return v.CreateTimeout }).(pulumi.IntPtrOutput)
}

// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
func (o RealmWebAuthnPolicyOutput) RelyingPartyEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *string { return v.RelyingPartyEntityName }).(pulumi.StringPtrOutput)
}

// The WebAuthn relying party ID.
func (o RealmWebAuthnPolicyOutput) RelyingPartyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *string { return v.RelyingPartyId }).(pulumi.StringPtrOutput)
}

// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyOutput) RequireResidentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *string { return v.RequireResidentKey }).(pulumi.StringPtrOutput)
}

// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
func (o RealmWebAuthnPolicyOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) []string { return v.SignatureAlgorithms }).(pulumi.StringArrayOutput)
}

// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyOutput) UserVerificationRequirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RealmWebAuthnPolicy) *string { return v.UserVerificationRequirement }).(pulumi.StringPtrOutput)
}

type RealmWebAuthnPolicyPtrOutput struct{ *pulumi.OutputState }

func (RealmWebAuthnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmWebAuthnPolicy)(nil)).Elem()
}

func (o RealmWebAuthnPolicyPtrOutput) ToRealmWebAuthnPolicyPtrOutput() RealmWebAuthnPolicyPtrOutput {
	return o
}

func (o RealmWebAuthnPolicyPtrOutput) ToRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) RealmWebAuthnPolicyPtrOutput {
	return o
}

func (o RealmWebAuthnPolicyPtrOutput) Elem() RealmWebAuthnPolicyOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) RealmWebAuthnPolicy {
		if v != nil {
			return *v
		}
		var ret RealmWebAuthnPolicy
		return ret
	}).(RealmWebAuthnPolicyOutput)
}

// A set of AAGUIDs for which an authenticator can be registered.
func (o RealmWebAuthnPolicyPtrOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AcceptableAaguids
	}).(pulumi.StringArrayOutput)
}

// The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyPtrOutput) AttestationConveyancePreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.AttestationConveyancePreference
	}).(pulumi.StringPtrOutput)
}

// The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyPtrOutput) AuthenticatorAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticatorAttachment
	}).(pulumi.StringPtrOutput)
}

// When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
func (o RealmWebAuthnPolicyPtrOutput) AvoidSameAuthenticatorRegister() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AvoidSameAuthenticatorRegister
	}).(pulumi.BoolPtrOutput)
}

// The timeout value for creating a user's public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
func (o RealmWebAuthnPolicyPtrOutput) CreateTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CreateTimeout
	}).(pulumi.IntPtrOutput)
}

// A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
func (o RealmWebAuthnPolicyPtrOutput) RelyingPartyEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RelyingPartyEntityName
	}).(pulumi.StringPtrOutput)
}

// The WebAuthn relying party ID.
func (o RealmWebAuthnPolicyPtrOutput) RelyingPartyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RelyingPartyId
	}).(pulumi.StringPtrOutput)
}

// Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyPtrOutput) RequireResidentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RequireResidentKey
	}).(pulumi.StringPtrOutput)
}

// A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
func (o RealmWebAuthnPolicyPtrOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
func (o RealmWebAuthnPolicyPtrOutput) UserVerificationRequirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.UserVerificationRequirement
	}).(pulumi.StringPtrOutput)
}

type UserFederatedIdentity struct {
	// The name of the identity provider
	IdentityProvider string `pulumi:"identityProvider"`
	// The ID of the user defined in the identity provider
	UserId string `pulumi:"userId"`
	// The user name of the user defined in the identity provider
	UserName string `pulumi:"userName"`
}

// UserFederatedIdentityInput is an input type that accepts UserFederatedIdentityArgs and UserFederatedIdentityOutput values.
// You can construct a concrete instance of `UserFederatedIdentityInput` via:
//
//          UserFederatedIdentityArgs{...}
type UserFederatedIdentityInput interface {
	pulumi.Input

	ToUserFederatedIdentityOutput() UserFederatedIdentityOutput
	ToUserFederatedIdentityOutputWithContext(context.Context) UserFederatedIdentityOutput
}

type UserFederatedIdentityArgs struct {
	// The name of the identity provider
	IdentityProvider pulumi.StringInput `pulumi:"identityProvider"`
	// The ID of the user defined in the identity provider
	UserId pulumi.StringInput `pulumi:"userId"`
	// The user name of the user defined in the identity provider
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (UserFederatedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserFederatedIdentity)(nil)).Elem()
}

func (i UserFederatedIdentityArgs) ToUserFederatedIdentityOutput() UserFederatedIdentityOutput {
	return i.ToUserFederatedIdentityOutputWithContext(context.Background())
}

func (i UserFederatedIdentityArgs) ToUserFederatedIdentityOutputWithContext(ctx context.Context) UserFederatedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFederatedIdentityOutput)
}

// UserFederatedIdentityArrayInput is an input type that accepts UserFederatedIdentityArray and UserFederatedIdentityArrayOutput values.
// You can construct a concrete instance of `UserFederatedIdentityArrayInput` via:
//
//          UserFederatedIdentityArray{ UserFederatedIdentityArgs{...} }
type UserFederatedIdentityArrayInput interface {
	pulumi.Input

	ToUserFederatedIdentityArrayOutput() UserFederatedIdentityArrayOutput
	ToUserFederatedIdentityArrayOutputWithContext(context.Context) UserFederatedIdentityArrayOutput
}

type UserFederatedIdentityArray []UserFederatedIdentityInput

func (UserFederatedIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserFederatedIdentity)(nil)).Elem()
}

func (i UserFederatedIdentityArray) ToUserFederatedIdentityArrayOutput() UserFederatedIdentityArrayOutput {
	return i.ToUserFederatedIdentityArrayOutputWithContext(context.Background())
}

func (i UserFederatedIdentityArray) ToUserFederatedIdentityArrayOutputWithContext(ctx context.Context) UserFederatedIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserFederatedIdentityArrayOutput)
}

type UserFederatedIdentityOutput struct{ *pulumi.OutputState }

func (UserFederatedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserFederatedIdentity)(nil)).Elem()
}

func (o UserFederatedIdentityOutput) ToUserFederatedIdentityOutput() UserFederatedIdentityOutput {
	return o
}

func (o UserFederatedIdentityOutput) ToUserFederatedIdentityOutputWithContext(ctx context.Context) UserFederatedIdentityOutput {
	return o
}

// The name of the identity provider
func (o UserFederatedIdentityOutput) IdentityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v UserFederatedIdentity) string { return v.IdentityProvider }).(pulumi.StringOutput)
}

// The ID of the user defined in the identity provider
func (o UserFederatedIdentityOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v UserFederatedIdentity) string { return v.UserId }).(pulumi.StringOutput)
}

// The user name of the user defined in the identity provider
func (o UserFederatedIdentityOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserFederatedIdentity) string { return v.UserName }).(pulumi.StringOutput)
}

type UserFederatedIdentityArrayOutput struct{ *pulumi.OutputState }

func (UserFederatedIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserFederatedIdentity)(nil)).Elem()
}

func (o UserFederatedIdentityArrayOutput) ToUserFederatedIdentityArrayOutput() UserFederatedIdentityArrayOutput {
	return o
}

func (o UserFederatedIdentityArrayOutput) ToUserFederatedIdentityArrayOutputWithContext(ctx context.Context) UserFederatedIdentityArrayOutput {
	return o
}

func (o UserFederatedIdentityArrayOutput) Index(i pulumi.IntInput) UserFederatedIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserFederatedIdentity {
		return vs[0].([]UserFederatedIdentity)[vs[1].(int)]
	}).(UserFederatedIdentityOutput)
}

type UserInitialPassword struct {
	// If set to `true`, the initial password is set up for renewal on first use. Default to `false`.
	Temporary *bool `pulumi:"temporary"`
	// The initial password.
	Value string `pulumi:"value"`
}

// UserInitialPasswordInput is an input type that accepts UserInitialPasswordArgs and UserInitialPasswordOutput values.
// You can construct a concrete instance of `UserInitialPasswordInput` via:
//
//          UserInitialPasswordArgs{...}
type UserInitialPasswordInput interface {
	pulumi.Input

	ToUserInitialPasswordOutput() UserInitialPasswordOutput
	ToUserInitialPasswordOutputWithContext(context.Context) UserInitialPasswordOutput
}

type UserInitialPasswordArgs struct {
	// If set to `true`, the initial password is set up for renewal on first use. Default to `false`.
	Temporary pulumi.BoolPtrInput `pulumi:"temporary"`
	// The initial password.
	Value pulumi.StringInput `pulumi:"value"`
}

func (UserInitialPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitialPassword)(nil)).Elem()
}

func (i UserInitialPasswordArgs) ToUserInitialPasswordOutput() UserInitialPasswordOutput {
	return i.ToUserInitialPasswordOutputWithContext(context.Background())
}

func (i UserInitialPasswordArgs) ToUserInitialPasswordOutputWithContext(ctx context.Context) UserInitialPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitialPasswordOutput)
}

func (i UserInitialPasswordArgs) ToUserInitialPasswordPtrOutput() UserInitialPasswordPtrOutput {
	return i.ToUserInitialPasswordPtrOutputWithContext(context.Background())
}

func (i UserInitialPasswordArgs) ToUserInitialPasswordPtrOutputWithContext(ctx context.Context) UserInitialPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitialPasswordOutput).ToUserInitialPasswordPtrOutputWithContext(ctx)
}

// UserInitialPasswordPtrInput is an input type that accepts UserInitialPasswordArgs, UserInitialPasswordPtr and UserInitialPasswordPtrOutput values.
// You can construct a concrete instance of `UserInitialPasswordPtrInput` via:
//
//          UserInitialPasswordArgs{...}
//
//  or:
//
//          nil
type UserInitialPasswordPtrInput interface {
	pulumi.Input

	ToUserInitialPasswordPtrOutput() UserInitialPasswordPtrOutput
	ToUserInitialPasswordPtrOutputWithContext(context.Context) UserInitialPasswordPtrOutput
}

type userInitialPasswordPtrType UserInitialPasswordArgs

func UserInitialPasswordPtr(v *UserInitialPasswordArgs) UserInitialPasswordPtrInput {
	return (*userInitialPasswordPtrType)(v)
}

func (*userInitialPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitialPassword)(nil)).Elem()
}

func (i *userInitialPasswordPtrType) ToUserInitialPasswordPtrOutput() UserInitialPasswordPtrOutput {
	return i.ToUserInitialPasswordPtrOutputWithContext(context.Background())
}

func (i *userInitialPasswordPtrType) ToUserInitialPasswordPtrOutputWithContext(ctx context.Context) UserInitialPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitialPasswordPtrOutput)
}

type UserInitialPasswordOutput struct{ *pulumi.OutputState }

func (UserInitialPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitialPassword)(nil)).Elem()
}

func (o UserInitialPasswordOutput) ToUserInitialPasswordOutput() UserInitialPasswordOutput {
	return o
}

func (o UserInitialPasswordOutput) ToUserInitialPasswordOutputWithContext(ctx context.Context) UserInitialPasswordOutput {
	return o
}

func (o UserInitialPasswordOutput) ToUserInitialPasswordPtrOutput() UserInitialPasswordPtrOutput {
	return o.ToUserInitialPasswordPtrOutputWithContext(context.Background())
}

func (o UserInitialPasswordOutput) ToUserInitialPasswordPtrOutputWithContext(ctx context.Context) UserInitialPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInitialPassword) *UserInitialPassword {
		return &v
	}).(UserInitialPasswordPtrOutput)
}

// If set to `true`, the initial password is set up for renewal on first use. Default to `false`.
func (o UserInitialPasswordOutput) Temporary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserInitialPassword) *bool { return v.Temporary }).(pulumi.BoolPtrOutput)
}

// The initial password.
func (o UserInitialPasswordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserInitialPassword) string { return v.Value }).(pulumi.StringOutput)
}

type UserInitialPasswordPtrOutput struct{ *pulumi.OutputState }

func (UserInitialPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitialPassword)(nil)).Elem()
}

func (o UserInitialPasswordPtrOutput) ToUserInitialPasswordPtrOutput() UserInitialPasswordPtrOutput {
	return o
}

func (o UserInitialPasswordPtrOutput) ToUserInitialPasswordPtrOutputWithContext(ctx context.Context) UserInitialPasswordPtrOutput {
	return o
}

func (o UserInitialPasswordPtrOutput) Elem() UserInitialPasswordOutput {
	return o.ApplyT(func(v *UserInitialPassword) UserInitialPassword {
		if v != nil {
			return *v
		}
		var ret UserInitialPassword
		return ret
	}).(UserInitialPasswordOutput)
}

// If set to `true`, the initial password is set up for renewal on first use. Default to `false`.
func (o UserInitialPasswordPtrOutput) Temporary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserInitialPassword) *bool {
		if v == nil {
			return nil
		}
		return v.Temporary
	}).(pulumi.BoolPtrOutput)
}

// The initial password.
func (o UserInitialPasswordPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInitialPassword) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type UsersPermissionsImpersonateScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// UsersPermissionsImpersonateScopeInput is an input type that accepts UsersPermissionsImpersonateScopeArgs and UsersPermissionsImpersonateScopeOutput values.
// You can construct a concrete instance of `UsersPermissionsImpersonateScopeInput` via:
//
//          UsersPermissionsImpersonateScopeArgs{...}
type UsersPermissionsImpersonateScopeInput interface {
	pulumi.Input

	ToUsersPermissionsImpersonateScopeOutput() UsersPermissionsImpersonateScopeOutput
	ToUsersPermissionsImpersonateScopeOutputWithContext(context.Context) UsersPermissionsImpersonateScopeOutput
}

type UsersPermissionsImpersonateScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (UsersPermissionsImpersonateScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsImpersonateScope)(nil)).Elem()
}

func (i UsersPermissionsImpersonateScopeArgs) ToUsersPermissionsImpersonateScopeOutput() UsersPermissionsImpersonateScopeOutput {
	return i.ToUsersPermissionsImpersonateScopeOutputWithContext(context.Background())
}

func (i UsersPermissionsImpersonateScopeArgs) ToUsersPermissionsImpersonateScopeOutputWithContext(ctx context.Context) UsersPermissionsImpersonateScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsImpersonateScopeOutput)
}

func (i UsersPermissionsImpersonateScopeArgs) ToUsersPermissionsImpersonateScopePtrOutput() UsersPermissionsImpersonateScopePtrOutput {
	return i.ToUsersPermissionsImpersonateScopePtrOutputWithContext(context.Background())
}

func (i UsersPermissionsImpersonateScopeArgs) ToUsersPermissionsImpersonateScopePtrOutputWithContext(ctx context.Context) UsersPermissionsImpersonateScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsImpersonateScopeOutput).ToUsersPermissionsImpersonateScopePtrOutputWithContext(ctx)
}

// UsersPermissionsImpersonateScopePtrInput is an input type that accepts UsersPermissionsImpersonateScopeArgs, UsersPermissionsImpersonateScopePtr and UsersPermissionsImpersonateScopePtrOutput values.
// You can construct a concrete instance of `UsersPermissionsImpersonateScopePtrInput` via:
//
//          UsersPermissionsImpersonateScopeArgs{...}
//
//  or:
//
//          nil
type UsersPermissionsImpersonateScopePtrInput interface {
	pulumi.Input

	ToUsersPermissionsImpersonateScopePtrOutput() UsersPermissionsImpersonateScopePtrOutput
	ToUsersPermissionsImpersonateScopePtrOutputWithContext(context.Context) UsersPermissionsImpersonateScopePtrOutput
}

type usersPermissionsImpersonateScopePtrType UsersPermissionsImpersonateScopeArgs

func UsersPermissionsImpersonateScopePtr(v *UsersPermissionsImpersonateScopeArgs) UsersPermissionsImpersonateScopePtrInput {
	return (*usersPermissionsImpersonateScopePtrType)(v)
}

func (*usersPermissionsImpersonateScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsImpersonateScope)(nil)).Elem()
}

func (i *usersPermissionsImpersonateScopePtrType) ToUsersPermissionsImpersonateScopePtrOutput() UsersPermissionsImpersonateScopePtrOutput {
	return i.ToUsersPermissionsImpersonateScopePtrOutputWithContext(context.Background())
}

func (i *usersPermissionsImpersonateScopePtrType) ToUsersPermissionsImpersonateScopePtrOutputWithContext(ctx context.Context) UsersPermissionsImpersonateScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsImpersonateScopePtrOutput)
}

type UsersPermissionsImpersonateScopeOutput struct{ *pulumi.OutputState }

func (UsersPermissionsImpersonateScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsImpersonateScope)(nil)).Elem()
}

func (o UsersPermissionsImpersonateScopeOutput) ToUsersPermissionsImpersonateScopeOutput() UsersPermissionsImpersonateScopeOutput {
	return o
}

func (o UsersPermissionsImpersonateScopeOutput) ToUsersPermissionsImpersonateScopeOutputWithContext(ctx context.Context) UsersPermissionsImpersonateScopeOutput {
	return o
}

func (o UsersPermissionsImpersonateScopeOutput) ToUsersPermissionsImpersonateScopePtrOutput() UsersPermissionsImpersonateScopePtrOutput {
	return o.ToUsersPermissionsImpersonateScopePtrOutputWithContext(context.Background())
}

func (o UsersPermissionsImpersonateScopeOutput) ToUsersPermissionsImpersonateScopePtrOutputWithContext(ctx context.Context) UsersPermissionsImpersonateScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsersPermissionsImpersonateScope) *UsersPermissionsImpersonateScope {
		return &v
	}).(UsersPermissionsImpersonateScopePtrOutput)
}

func (o UsersPermissionsImpersonateScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsImpersonateScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsImpersonateScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsImpersonateScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsImpersonateScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsersPermissionsImpersonateScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type UsersPermissionsImpersonateScopePtrOutput struct{ *pulumi.OutputState }

func (UsersPermissionsImpersonateScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsImpersonateScope)(nil)).Elem()
}

func (o UsersPermissionsImpersonateScopePtrOutput) ToUsersPermissionsImpersonateScopePtrOutput() UsersPermissionsImpersonateScopePtrOutput {
	return o
}

func (o UsersPermissionsImpersonateScopePtrOutput) ToUsersPermissionsImpersonateScopePtrOutputWithContext(ctx context.Context) UsersPermissionsImpersonateScopePtrOutput {
	return o
}

func (o UsersPermissionsImpersonateScopePtrOutput) Elem() UsersPermissionsImpersonateScopeOutput {
	return o.ApplyT(func(v *UsersPermissionsImpersonateScope) UsersPermissionsImpersonateScope {
		if v != nil {
			return *v
		}
		var ret UsersPermissionsImpersonateScope
		return ret
	}).(UsersPermissionsImpersonateScopeOutput)
}

func (o UsersPermissionsImpersonateScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsImpersonateScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsImpersonateScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsImpersonateScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsImpersonateScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UsersPermissionsImpersonateScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type UsersPermissionsManageGroupMembershipScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// UsersPermissionsManageGroupMembershipScopeInput is an input type that accepts UsersPermissionsManageGroupMembershipScopeArgs and UsersPermissionsManageGroupMembershipScopeOutput values.
// You can construct a concrete instance of `UsersPermissionsManageGroupMembershipScopeInput` via:
//
//          UsersPermissionsManageGroupMembershipScopeArgs{...}
type UsersPermissionsManageGroupMembershipScopeInput interface {
	pulumi.Input

	ToUsersPermissionsManageGroupMembershipScopeOutput() UsersPermissionsManageGroupMembershipScopeOutput
	ToUsersPermissionsManageGroupMembershipScopeOutputWithContext(context.Context) UsersPermissionsManageGroupMembershipScopeOutput
}

type UsersPermissionsManageGroupMembershipScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (UsersPermissionsManageGroupMembershipScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsManageGroupMembershipScope)(nil)).Elem()
}

func (i UsersPermissionsManageGroupMembershipScopeArgs) ToUsersPermissionsManageGroupMembershipScopeOutput() UsersPermissionsManageGroupMembershipScopeOutput {
	return i.ToUsersPermissionsManageGroupMembershipScopeOutputWithContext(context.Background())
}

func (i UsersPermissionsManageGroupMembershipScopeArgs) ToUsersPermissionsManageGroupMembershipScopeOutputWithContext(ctx context.Context) UsersPermissionsManageGroupMembershipScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsManageGroupMembershipScopeOutput)
}

func (i UsersPermissionsManageGroupMembershipScopeArgs) ToUsersPermissionsManageGroupMembershipScopePtrOutput() UsersPermissionsManageGroupMembershipScopePtrOutput {
	return i.ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(context.Background())
}

func (i UsersPermissionsManageGroupMembershipScopeArgs) ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageGroupMembershipScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsManageGroupMembershipScopeOutput).ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(ctx)
}

// UsersPermissionsManageGroupMembershipScopePtrInput is an input type that accepts UsersPermissionsManageGroupMembershipScopeArgs, UsersPermissionsManageGroupMembershipScopePtr and UsersPermissionsManageGroupMembershipScopePtrOutput values.
// You can construct a concrete instance of `UsersPermissionsManageGroupMembershipScopePtrInput` via:
//
//          UsersPermissionsManageGroupMembershipScopeArgs{...}
//
//  or:
//
//          nil
type UsersPermissionsManageGroupMembershipScopePtrInput interface {
	pulumi.Input

	ToUsersPermissionsManageGroupMembershipScopePtrOutput() UsersPermissionsManageGroupMembershipScopePtrOutput
	ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(context.Context) UsersPermissionsManageGroupMembershipScopePtrOutput
}

type usersPermissionsManageGroupMembershipScopePtrType UsersPermissionsManageGroupMembershipScopeArgs

func UsersPermissionsManageGroupMembershipScopePtr(v *UsersPermissionsManageGroupMembershipScopeArgs) UsersPermissionsManageGroupMembershipScopePtrInput {
	return (*usersPermissionsManageGroupMembershipScopePtrType)(v)
}

func (*usersPermissionsManageGroupMembershipScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsManageGroupMembershipScope)(nil)).Elem()
}

func (i *usersPermissionsManageGroupMembershipScopePtrType) ToUsersPermissionsManageGroupMembershipScopePtrOutput() UsersPermissionsManageGroupMembershipScopePtrOutput {
	return i.ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(context.Background())
}

func (i *usersPermissionsManageGroupMembershipScopePtrType) ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageGroupMembershipScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsManageGroupMembershipScopePtrOutput)
}

type UsersPermissionsManageGroupMembershipScopeOutput struct{ *pulumi.OutputState }

func (UsersPermissionsManageGroupMembershipScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsManageGroupMembershipScope)(nil)).Elem()
}

func (o UsersPermissionsManageGroupMembershipScopeOutput) ToUsersPermissionsManageGroupMembershipScopeOutput() UsersPermissionsManageGroupMembershipScopeOutput {
	return o
}

func (o UsersPermissionsManageGroupMembershipScopeOutput) ToUsersPermissionsManageGroupMembershipScopeOutputWithContext(ctx context.Context) UsersPermissionsManageGroupMembershipScopeOutput {
	return o
}

func (o UsersPermissionsManageGroupMembershipScopeOutput) ToUsersPermissionsManageGroupMembershipScopePtrOutput() UsersPermissionsManageGroupMembershipScopePtrOutput {
	return o.ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(context.Background())
}

func (o UsersPermissionsManageGroupMembershipScopeOutput) ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageGroupMembershipScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsersPermissionsManageGroupMembershipScope) *UsersPermissionsManageGroupMembershipScope {
		return &v
	}).(UsersPermissionsManageGroupMembershipScopePtrOutput)
}

func (o UsersPermissionsManageGroupMembershipScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsManageGroupMembershipScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageGroupMembershipScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsManageGroupMembershipScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageGroupMembershipScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsersPermissionsManageGroupMembershipScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type UsersPermissionsManageGroupMembershipScopePtrOutput struct{ *pulumi.OutputState }

func (UsersPermissionsManageGroupMembershipScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsManageGroupMembershipScope)(nil)).Elem()
}

func (o UsersPermissionsManageGroupMembershipScopePtrOutput) ToUsersPermissionsManageGroupMembershipScopePtrOutput() UsersPermissionsManageGroupMembershipScopePtrOutput {
	return o
}

func (o UsersPermissionsManageGroupMembershipScopePtrOutput) ToUsersPermissionsManageGroupMembershipScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageGroupMembershipScopePtrOutput {
	return o
}

func (o UsersPermissionsManageGroupMembershipScopePtrOutput) Elem() UsersPermissionsManageGroupMembershipScopeOutput {
	return o.ApplyT(func(v *UsersPermissionsManageGroupMembershipScope) UsersPermissionsManageGroupMembershipScope {
		if v != nil {
			return *v
		}
		var ret UsersPermissionsManageGroupMembershipScope
		return ret
	}).(UsersPermissionsManageGroupMembershipScopeOutput)
}

func (o UsersPermissionsManageGroupMembershipScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsManageGroupMembershipScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageGroupMembershipScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsManageGroupMembershipScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageGroupMembershipScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UsersPermissionsManageGroupMembershipScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type UsersPermissionsManageScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// UsersPermissionsManageScopeInput is an input type that accepts UsersPermissionsManageScopeArgs and UsersPermissionsManageScopeOutput values.
// You can construct a concrete instance of `UsersPermissionsManageScopeInput` via:
//
//          UsersPermissionsManageScopeArgs{...}
type UsersPermissionsManageScopeInput interface {
	pulumi.Input

	ToUsersPermissionsManageScopeOutput() UsersPermissionsManageScopeOutput
	ToUsersPermissionsManageScopeOutputWithContext(context.Context) UsersPermissionsManageScopeOutput
}

type UsersPermissionsManageScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (UsersPermissionsManageScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsManageScope)(nil)).Elem()
}

func (i UsersPermissionsManageScopeArgs) ToUsersPermissionsManageScopeOutput() UsersPermissionsManageScopeOutput {
	return i.ToUsersPermissionsManageScopeOutputWithContext(context.Background())
}

func (i UsersPermissionsManageScopeArgs) ToUsersPermissionsManageScopeOutputWithContext(ctx context.Context) UsersPermissionsManageScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsManageScopeOutput)
}

func (i UsersPermissionsManageScopeArgs) ToUsersPermissionsManageScopePtrOutput() UsersPermissionsManageScopePtrOutput {
	return i.ToUsersPermissionsManageScopePtrOutputWithContext(context.Background())
}

func (i UsersPermissionsManageScopeArgs) ToUsersPermissionsManageScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsManageScopeOutput).ToUsersPermissionsManageScopePtrOutputWithContext(ctx)
}

// UsersPermissionsManageScopePtrInput is an input type that accepts UsersPermissionsManageScopeArgs, UsersPermissionsManageScopePtr and UsersPermissionsManageScopePtrOutput values.
// You can construct a concrete instance of `UsersPermissionsManageScopePtrInput` via:
//
//          UsersPermissionsManageScopeArgs{...}
//
//  or:
//
//          nil
type UsersPermissionsManageScopePtrInput interface {
	pulumi.Input

	ToUsersPermissionsManageScopePtrOutput() UsersPermissionsManageScopePtrOutput
	ToUsersPermissionsManageScopePtrOutputWithContext(context.Context) UsersPermissionsManageScopePtrOutput
}

type usersPermissionsManageScopePtrType UsersPermissionsManageScopeArgs

func UsersPermissionsManageScopePtr(v *UsersPermissionsManageScopeArgs) UsersPermissionsManageScopePtrInput {
	return (*usersPermissionsManageScopePtrType)(v)
}

func (*usersPermissionsManageScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsManageScope)(nil)).Elem()
}

func (i *usersPermissionsManageScopePtrType) ToUsersPermissionsManageScopePtrOutput() UsersPermissionsManageScopePtrOutput {
	return i.ToUsersPermissionsManageScopePtrOutputWithContext(context.Background())
}

func (i *usersPermissionsManageScopePtrType) ToUsersPermissionsManageScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsManageScopePtrOutput)
}

type UsersPermissionsManageScopeOutput struct{ *pulumi.OutputState }

func (UsersPermissionsManageScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsManageScope)(nil)).Elem()
}

func (o UsersPermissionsManageScopeOutput) ToUsersPermissionsManageScopeOutput() UsersPermissionsManageScopeOutput {
	return o
}

func (o UsersPermissionsManageScopeOutput) ToUsersPermissionsManageScopeOutputWithContext(ctx context.Context) UsersPermissionsManageScopeOutput {
	return o
}

func (o UsersPermissionsManageScopeOutput) ToUsersPermissionsManageScopePtrOutput() UsersPermissionsManageScopePtrOutput {
	return o.ToUsersPermissionsManageScopePtrOutputWithContext(context.Background())
}

func (o UsersPermissionsManageScopeOutput) ToUsersPermissionsManageScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsersPermissionsManageScope) *UsersPermissionsManageScope {
		return &v
	}).(UsersPermissionsManageScopePtrOutput)
}

func (o UsersPermissionsManageScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsManageScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsManageScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsersPermissionsManageScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type UsersPermissionsManageScopePtrOutput struct{ *pulumi.OutputState }

func (UsersPermissionsManageScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsManageScope)(nil)).Elem()
}

func (o UsersPermissionsManageScopePtrOutput) ToUsersPermissionsManageScopePtrOutput() UsersPermissionsManageScopePtrOutput {
	return o
}

func (o UsersPermissionsManageScopePtrOutput) ToUsersPermissionsManageScopePtrOutputWithContext(ctx context.Context) UsersPermissionsManageScopePtrOutput {
	return o
}

func (o UsersPermissionsManageScopePtrOutput) Elem() UsersPermissionsManageScopeOutput {
	return o.ApplyT(func(v *UsersPermissionsManageScope) UsersPermissionsManageScope {
		if v != nil {
			return *v
		}
		var ret UsersPermissionsManageScope
		return ret
	}).(UsersPermissionsManageScopeOutput)
}

func (o UsersPermissionsManageScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsManageScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsManageScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsManageScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UsersPermissionsManageScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type UsersPermissionsMapRolesScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// UsersPermissionsMapRolesScopeInput is an input type that accepts UsersPermissionsMapRolesScopeArgs and UsersPermissionsMapRolesScopeOutput values.
// You can construct a concrete instance of `UsersPermissionsMapRolesScopeInput` via:
//
//          UsersPermissionsMapRolesScopeArgs{...}
type UsersPermissionsMapRolesScopeInput interface {
	pulumi.Input

	ToUsersPermissionsMapRolesScopeOutput() UsersPermissionsMapRolesScopeOutput
	ToUsersPermissionsMapRolesScopeOutputWithContext(context.Context) UsersPermissionsMapRolesScopeOutput
}

type UsersPermissionsMapRolesScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (UsersPermissionsMapRolesScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsMapRolesScope)(nil)).Elem()
}

func (i UsersPermissionsMapRolesScopeArgs) ToUsersPermissionsMapRolesScopeOutput() UsersPermissionsMapRolesScopeOutput {
	return i.ToUsersPermissionsMapRolesScopeOutputWithContext(context.Background())
}

func (i UsersPermissionsMapRolesScopeArgs) ToUsersPermissionsMapRolesScopeOutputWithContext(ctx context.Context) UsersPermissionsMapRolesScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsMapRolesScopeOutput)
}

func (i UsersPermissionsMapRolesScopeArgs) ToUsersPermissionsMapRolesScopePtrOutput() UsersPermissionsMapRolesScopePtrOutput {
	return i.ToUsersPermissionsMapRolesScopePtrOutputWithContext(context.Background())
}

func (i UsersPermissionsMapRolesScopeArgs) ToUsersPermissionsMapRolesScopePtrOutputWithContext(ctx context.Context) UsersPermissionsMapRolesScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsMapRolesScopeOutput).ToUsersPermissionsMapRolesScopePtrOutputWithContext(ctx)
}

// UsersPermissionsMapRolesScopePtrInput is an input type that accepts UsersPermissionsMapRolesScopeArgs, UsersPermissionsMapRolesScopePtr and UsersPermissionsMapRolesScopePtrOutput values.
// You can construct a concrete instance of `UsersPermissionsMapRolesScopePtrInput` via:
//
//          UsersPermissionsMapRolesScopeArgs{...}
//
//  or:
//
//          nil
type UsersPermissionsMapRolesScopePtrInput interface {
	pulumi.Input

	ToUsersPermissionsMapRolesScopePtrOutput() UsersPermissionsMapRolesScopePtrOutput
	ToUsersPermissionsMapRolesScopePtrOutputWithContext(context.Context) UsersPermissionsMapRolesScopePtrOutput
}

type usersPermissionsMapRolesScopePtrType UsersPermissionsMapRolesScopeArgs

func UsersPermissionsMapRolesScopePtr(v *UsersPermissionsMapRolesScopeArgs) UsersPermissionsMapRolesScopePtrInput {
	return (*usersPermissionsMapRolesScopePtrType)(v)
}

func (*usersPermissionsMapRolesScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsMapRolesScope)(nil)).Elem()
}

func (i *usersPermissionsMapRolesScopePtrType) ToUsersPermissionsMapRolesScopePtrOutput() UsersPermissionsMapRolesScopePtrOutput {
	return i.ToUsersPermissionsMapRolesScopePtrOutputWithContext(context.Background())
}

func (i *usersPermissionsMapRolesScopePtrType) ToUsersPermissionsMapRolesScopePtrOutputWithContext(ctx context.Context) UsersPermissionsMapRolesScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsMapRolesScopePtrOutput)
}

type UsersPermissionsMapRolesScopeOutput struct{ *pulumi.OutputState }

func (UsersPermissionsMapRolesScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsMapRolesScope)(nil)).Elem()
}

func (o UsersPermissionsMapRolesScopeOutput) ToUsersPermissionsMapRolesScopeOutput() UsersPermissionsMapRolesScopeOutput {
	return o
}

func (o UsersPermissionsMapRolesScopeOutput) ToUsersPermissionsMapRolesScopeOutputWithContext(ctx context.Context) UsersPermissionsMapRolesScopeOutput {
	return o
}

func (o UsersPermissionsMapRolesScopeOutput) ToUsersPermissionsMapRolesScopePtrOutput() UsersPermissionsMapRolesScopePtrOutput {
	return o.ToUsersPermissionsMapRolesScopePtrOutputWithContext(context.Background())
}

func (o UsersPermissionsMapRolesScopeOutput) ToUsersPermissionsMapRolesScopePtrOutputWithContext(ctx context.Context) UsersPermissionsMapRolesScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsersPermissionsMapRolesScope) *UsersPermissionsMapRolesScope {
		return &v
	}).(UsersPermissionsMapRolesScopePtrOutput)
}

func (o UsersPermissionsMapRolesScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsMapRolesScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsMapRolesScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsMapRolesScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsMapRolesScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsersPermissionsMapRolesScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type UsersPermissionsMapRolesScopePtrOutput struct{ *pulumi.OutputState }

func (UsersPermissionsMapRolesScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsMapRolesScope)(nil)).Elem()
}

func (o UsersPermissionsMapRolesScopePtrOutput) ToUsersPermissionsMapRolesScopePtrOutput() UsersPermissionsMapRolesScopePtrOutput {
	return o
}

func (o UsersPermissionsMapRolesScopePtrOutput) ToUsersPermissionsMapRolesScopePtrOutputWithContext(ctx context.Context) UsersPermissionsMapRolesScopePtrOutput {
	return o
}

func (o UsersPermissionsMapRolesScopePtrOutput) Elem() UsersPermissionsMapRolesScopeOutput {
	return o.ApplyT(func(v *UsersPermissionsMapRolesScope) UsersPermissionsMapRolesScope {
		if v != nil {
			return *v
		}
		var ret UsersPermissionsMapRolesScope
		return ret
	}).(UsersPermissionsMapRolesScopeOutput)
}

func (o UsersPermissionsMapRolesScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsMapRolesScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsMapRolesScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsMapRolesScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsMapRolesScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UsersPermissionsMapRolesScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type UsersPermissionsUserImpersonatedScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// UsersPermissionsUserImpersonatedScopeInput is an input type that accepts UsersPermissionsUserImpersonatedScopeArgs and UsersPermissionsUserImpersonatedScopeOutput values.
// You can construct a concrete instance of `UsersPermissionsUserImpersonatedScopeInput` via:
//
//          UsersPermissionsUserImpersonatedScopeArgs{...}
type UsersPermissionsUserImpersonatedScopeInput interface {
	pulumi.Input

	ToUsersPermissionsUserImpersonatedScopeOutput() UsersPermissionsUserImpersonatedScopeOutput
	ToUsersPermissionsUserImpersonatedScopeOutputWithContext(context.Context) UsersPermissionsUserImpersonatedScopeOutput
}

type UsersPermissionsUserImpersonatedScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (UsersPermissionsUserImpersonatedScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsUserImpersonatedScope)(nil)).Elem()
}

func (i UsersPermissionsUserImpersonatedScopeArgs) ToUsersPermissionsUserImpersonatedScopeOutput() UsersPermissionsUserImpersonatedScopeOutput {
	return i.ToUsersPermissionsUserImpersonatedScopeOutputWithContext(context.Background())
}

func (i UsersPermissionsUserImpersonatedScopeArgs) ToUsersPermissionsUserImpersonatedScopeOutputWithContext(ctx context.Context) UsersPermissionsUserImpersonatedScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsUserImpersonatedScopeOutput)
}

func (i UsersPermissionsUserImpersonatedScopeArgs) ToUsersPermissionsUserImpersonatedScopePtrOutput() UsersPermissionsUserImpersonatedScopePtrOutput {
	return i.ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(context.Background())
}

func (i UsersPermissionsUserImpersonatedScopeArgs) ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(ctx context.Context) UsersPermissionsUserImpersonatedScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsUserImpersonatedScopeOutput).ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(ctx)
}

// UsersPermissionsUserImpersonatedScopePtrInput is an input type that accepts UsersPermissionsUserImpersonatedScopeArgs, UsersPermissionsUserImpersonatedScopePtr and UsersPermissionsUserImpersonatedScopePtrOutput values.
// You can construct a concrete instance of `UsersPermissionsUserImpersonatedScopePtrInput` via:
//
//          UsersPermissionsUserImpersonatedScopeArgs{...}
//
//  or:
//
//          nil
type UsersPermissionsUserImpersonatedScopePtrInput interface {
	pulumi.Input

	ToUsersPermissionsUserImpersonatedScopePtrOutput() UsersPermissionsUserImpersonatedScopePtrOutput
	ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(context.Context) UsersPermissionsUserImpersonatedScopePtrOutput
}

type usersPermissionsUserImpersonatedScopePtrType UsersPermissionsUserImpersonatedScopeArgs

func UsersPermissionsUserImpersonatedScopePtr(v *UsersPermissionsUserImpersonatedScopeArgs) UsersPermissionsUserImpersonatedScopePtrInput {
	return (*usersPermissionsUserImpersonatedScopePtrType)(v)
}

func (*usersPermissionsUserImpersonatedScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsUserImpersonatedScope)(nil)).Elem()
}

func (i *usersPermissionsUserImpersonatedScopePtrType) ToUsersPermissionsUserImpersonatedScopePtrOutput() UsersPermissionsUserImpersonatedScopePtrOutput {
	return i.ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(context.Background())
}

func (i *usersPermissionsUserImpersonatedScopePtrType) ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(ctx context.Context) UsersPermissionsUserImpersonatedScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsUserImpersonatedScopePtrOutput)
}

type UsersPermissionsUserImpersonatedScopeOutput struct{ *pulumi.OutputState }

func (UsersPermissionsUserImpersonatedScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsUserImpersonatedScope)(nil)).Elem()
}

func (o UsersPermissionsUserImpersonatedScopeOutput) ToUsersPermissionsUserImpersonatedScopeOutput() UsersPermissionsUserImpersonatedScopeOutput {
	return o
}

func (o UsersPermissionsUserImpersonatedScopeOutput) ToUsersPermissionsUserImpersonatedScopeOutputWithContext(ctx context.Context) UsersPermissionsUserImpersonatedScopeOutput {
	return o
}

func (o UsersPermissionsUserImpersonatedScopeOutput) ToUsersPermissionsUserImpersonatedScopePtrOutput() UsersPermissionsUserImpersonatedScopePtrOutput {
	return o.ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(context.Background())
}

func (o UsersPermissionsUserImpersonatedScopeOutput) ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(ctx context.Context) UsersPermissionsUserImpersonatedScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsersPermissionsUserImpersonatedScope) *UsersPermissionsUserImpersonatedScope {
		return &v
	}).(UsersPermissionsUserImpersonatedScopePtrOutput)
}

func (o UsersPermissionsUserImpersonatedScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsUserImpersonatedScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsUserImpersonatedScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsUserImpersonatedScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsUserImpersonatedScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsersPermissionsUserImpersonatedScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type UsersPermissionsUserImpersonatedScopePtrOutput struct{ *pulumi.OutputState }

func (UsersPermissionsUserImpersonatedScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsUserImpersonatedScope)(nil)).Elem()
}

func (o UsersPermissionsUserImpersonatedScopePtrOutput) ToUsersPermissionsUserImpersonatedScopePtrOutput() UsersPermissionsUserImpersonatedScopePtrOutput {
	return o
}

func (o UsersPermissionsUserImpersonatedScopePtrOutput) ToUsersPermissionsUserImpersonatedScopePtrOutputWithContext(ctx context.Context) UsersPermissionsUserImpersonatedScopePtrOutput {
	return o
}

func (o UsersPermissionsUserImpersonatedScopePtrOutput) Elem() UsersPermissionsUserImpersonatedScopeOutput {
	return o.ApplyT(func(v *UsersPermissionsUserImpersonatedScope) UsersPermissionsUserImpersonatedScope {
		if v != nil {
			return *v
		}
		var ret UsersPermissionsUserImpersonatedScope
		return ret
	}).(UsersPermissionsUserImpersonatedScopeOutput)
}

func (o UsersPermissionsUserImpersonatedScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsUserImpersonatedScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsUserImpersonatedScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsUserImpersonatedScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsUserImpersonatedScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UsersPermissionsUserImpersonatedScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type UsersPermissionsViewScope struct {
	DecisionStrategy *string  `pulumi:"decisionStrategy"`
	Description      *string  `pulumi:"description"`
	Policies         []string `pulumi:"policies"`
}

// UsersPermissionsViewScopeInput is an input type that accepts UsersPermissionsViewScopeArgs and UsersPermissionsViewScopeOutput values.
// You can construct a concrete instance of `UsersPermissionsViewScopeInput` via:
//
//          UsersPermissionsViewScopeArgs{...}
type UsersPermissionsViewScopeInput interface {
	pulumi.Input

	ToUsersPermissionsViewScopeOutput() UsersPermissionsViewScopeOutput
	ToUsersPermissionsViewScopeOutputWithContext(context.Context) UsersPermissionsViewScopeOutput
}

type UsersPermissionsViewScopeArgs struct {
	DecisionStrategy pulumi.StringPtrInput   `pulumi:"decisionStrategy"`
	Description      pulumi.StringPtrInput   `pulumi:"description"`
	Policies         pulumi.StringArrayInput `pulumi:"policies"`
}

func (UsersPermissionsViewScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsViewScope)(nil)).Elem()
}

func (i UsersPermissionsViewScopeArgs) ToUsersPermissionsViewScopeOutput() UsersPermissionsViewScopeOutput {
	return i.ToUsersPermissionsViewScopeOutputWithContext(context.Background())
}

func (i UsersPermissionsViewScopeArgs) ToUsersPermissionsViewScopeOutputWithContext(ctx context.Context) UsersPermissionsViewScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsViewScopeOutput)
}

func (i UsersPermissionsViewScopeArgs) ToUsersPermissionsViewScopePtrOutput() UsersPermissionsViewScopePtrOutput {
	return i.ToUsersPermissionsViewScopePtrOutputWithContext(context.Background())
}

func (i UsersPermissionsViewScopeArgs) ToUsersPermissionsViewScopePtrOutputWithContext(ctx context.Context) UsersPermissionsViewScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsViewScopeOutput).ToUsersPermissionsViewScopePtrOutputWithContext(ctx)
}

// UsersPermissionsViewScopePtrInput is an input type that accepts UsersPermissionsViewScopeArgs, UsersPermissionsViewScopePtr and UsersPermissionsViewScopePtrOutput values.
// You can construct a concrete instance of `UsersPermissionsViewScopePtrInput` via:
//
//          UsersPermissionsViewScopeArgs{...}
//
//  or:
//
//          nil
type UsersPermissionsViewScopePtrInput interface {
	pulumi.Input

	ToUsersPermissionsViewScopePtrOutput() UsersPermissionsViewScopePtrOutput
	ToUsersPermissionsViewScopePtrOutputWithContext(context.Context) UsersPermissionsViewScopePtrOutput
}

type usersPermissionsViewScopePtrType UsersPermissionsViewScopeArgs

func UsersPermissionsViewScopePtr(v *UsersPermissionsViewScopeArgs) UsersPermissionsViewScopePtrInput {
	return (*usersPermissionsViewScopePtrType)(v)
}

func (*usersPermissionsViewScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsViewScope)(nil)).Elem()
}

func (i *usersPermissionsViewScopePtrType) ToUsersPermissionsViewScopePtrOutput() UsersPermissionsViewScopePtrOutput {
	return i.ToUsersPermissionsViewScopePtrOutputWithContext(context.Background())
}

func (i *usersPermissionsViewScopePtrType) ToUsersPermissionsViewScopePtrOutputWithContext(ctx context.Context) UsersPermissionsViewScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPermissionsViewScopePtrOutput)
}

type UsersPermissionsViewScopeOutput struct{ *pulumi.OutputState }

func (UsersPermissionsViewScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersPermissionsViewScope)(nil)).Elem()
}

func (o UsersPermissionsViewScopeOutput) ToUsersPermissionsViewScopeOutput() UsersPermissionsViewScopeOutput {
	return o
}

func (o UsersPermissionsViewScopeOutput) ToUsersPermissionsViewScopeOutputWithContext(ctx context.Context) UsersPermissionsViewScopeOutput {
	return o
}

func (o UsersPermissionsViewScopeOutput) ToUsersPermissionsViewScopePtrOutput() UsersPermissionsViewScopePtrOutput {
	return o.ToUsersPermissionsViewScopePtrOutputWithContext(context.Background())
}

func (o UsersPermissionsViewScopeOutput) ToUsersPermissionsViewScopePtrOutputWithContext(ctx context.Context) UsersPermissionsViewScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsersPermissionsViewScope) *UsersPermissionsViewScope {
		return &v
	}).(UsersPermissionsViewScopePtrOutput)
}

func (o UsersPermissionsViewScopeOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsViewScope) *string { return v.DecisionStrategy }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsViewScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersPermissionsViewScope) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsViewScopeOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsersPermissionsViewScope) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type UsersPermissionsViewScopePtrOutput struct{ *pulumi.OutputState }

func (UsersPermissionsViewScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsersPermissionsViewScope)(nil)).Elem()
}

func (o UsersPermissionsViewScopePtrOutput) ToUsersPermissionsViewScopePtrOutput() UsersPermissionsViewScopePtrOutput {
	return o
}

func (o UsersPermissionsViewScopePtrOutput) ToUsersPermissionsViewScopePtrOutputWithContext(ctx context.Context) UsersPermissionsViewScopePtrOutput {
	return o
}

func (o UsersPermissionsViewScopePtrOutput) Elem() UsersPermissionsViewScopeOutput {
	return o.ApplyT(func(v *UsersPermissionsViewScope) UsersPermissionsViewScope {
		if v != nil {
			return *v
		}
		var ret UsersPermissionsViewScope
		return ret
	}).(UsersPermissionsViewScopeOutput)
}

func (o UsersPermissionsViewScopePtrOutput) DecisionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsViewScope) *string {
		if v == nil {
			return nil
		}
		return v.DecisionStrategy
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsViewScopePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsersPermissionsViewScope) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o UsersPermissionsViewScopePtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UsersPermissionsViewScope) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

type GetClientDescriptionConverterProtocolMapper struct {
	Config         map[string]interface{} `pulumi:"config"`
	Id             string                 `pulumi:"id"`
	Name           string                 `pulumi:"name"`
	Protocol       string                 `pulumi:"protocol"`
	ProtocolMapper string                 `pulumi:"protocolMapper"`
}

// GetClientDescriptionConverterProtocolMapperInput is an input type that accepts GetClientDescriptionConverterProtocolMapperArgs and GetClientDescriptionConverterProtocolMapperOutput values.
// You can construct a concrete instance of `GetClientDescriptionConverterProtocolMapperInput` via:
//
//          GetClientDescriptionConverterProtocolMapperArgs{...}
type GetClientDescriptionConverterProtocolMapperInput interface {
	pulumi.Input

	ToGetClientDescriptionConverterProtocolMapperOutput() GetClientDescriptionConverterProtocolMapperOutput
	ToGetClientDescriptionConverterProtocolMapperOutputWithContext(context.Context) GetClientDescriptionConverterProtocolMapperOutput
}

type GetClientDescriptionConverterProtocolMapperArgs struct {
	Config         pulumi.MapInput    `pulumi:"config"`
	Id             pulumi.StringInput `pulumi:"id"`
	Name           pulumi.StringInput `pulumi:"name"`
	Protocol       pulumi.StringInput `pulumi:"protocol"`
	ProtocolMapper pulumi.StringInput `pulumi:"protocolMapper"`
}

func (GetClientDescriptionConverterProtocolMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClientDescriptionConverterProtocolMapper)(nil)).Elem()
}

func (i GetClientDescriptionConverterProtocolMapperArgs) ToGetClientDescriptionConverterProtocolMapperOutput() GetClientDescriptionConverterProtocolMapperOutput {
	return i.ToGetClientDescriptionConverterProtocolMapperOutputWithContext(context.Background())
}

func (i GetClientDescriptionConverterProtocolMapperArgs) ToGetClientDescriptionConverterProtocolMapperOutputWithContext(ctx context.Context) GetClientDescriptionConverterProtocolMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClientDescriptionConverterProtocolMapperOutput)
}

// GetClientDescriptionConverterProtocolMapperArrayInput is an input type that accepts GetClientDescriptionConverterProtocolMapperArray and GetClientDescriptionConverterProtocolMapperArrayOutput values.
// You can construct a concrete instance of `GetClientDescriptionConverterProtocolMapperArrayInput` via:
//
//          GetClientDescriptionConverterProtocolMapperArray{ GetClientDescriptionConverterProtocolMapperArgs{...} }
type GetClientDescriptionConverterProtocolMapperArrayInput interface {
	pulumi.Input

	ToGetClientDescriptionConverterProtocolMapperArrayOutput() GetClientDescriptionConverterProtocolMapperArrayOutput
	ToGetClientDescriptionConverterProtocolMapperArrayOutputWithContext(context.Context) GetClientDescriptionConverterProtocolMapperArrayOutput
}

type GetClientDescriptionConverterProtocolMapperArray []GetClientDescriptionConverterProtocolMapperInput

func (GetClientDescriptionConverterProtocolMapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClientDescriptionConverterProtocolMapper)(nil)).Elem()
}

func (i GetClientDescriptionConverterProtocolMapperArray) ToGetClientDescriptionConverterProtocolMapperArrayOutput() GetClientDescriptionConverterProtocolMapperArrayOutput {
	return i.ToGetClientDescriptionConverterProtocolMapperArrayOutputWithContext(context.Background())
}

func (i GetClientDescriptionConverterProtocolMapperArray) ToGetClientDescriptionConverterProtocolMapperArrayOutputWithContext(ctx context.Context) GetClientDescriptionConverterProtocolMapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClientDescriptionConverterProtocolMapperArrayOutput)
}

type GetClientDescriptionConverterProtocolMapperOutput struct{ *pulumi.OutputState }

func (GetClientDescriptionConverterProtocolMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClientDescriptionConverterProtocolMapper)(nil)).Elem()
}

func (o GetClientDescriptionConverterProtocolMapperOutput) ToGetClientDescriptionConverterProtocolMapperOutput() GetClientDescriptionConverterProtocolMapperOutput {
	return o
}

func (o GetClientDescriptionConverterProtocolMapperOutput) ToGetClientDescriptionConverterProtocolMapperOutputWithContext(ctx context.Context) GetClientDescriptionConverterProtocolMapperOutput {
	return o
}

func (o GetClientDescriptionConverterProtocolMapperOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v GetClientDescriptionConverterProtocolMapper) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

func (o GetClientDescriptionConverterProtocolMapperOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClientDescriptionConverterProtocolMapper) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClientDescriptionConverterProtocolMapperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClientDescriptionConverterProtocolMapper) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClientDescriptionConverterProtocolMapperOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetClientDescriptionConverterProtocolMapper) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetClientDescriptionConverterProtocolMapperOutput) ProtocolMapper() pulumi.StringOutput {
	return o.ApplyT(func(v GetClientDescriptionConverterProtocolMapper) string { return v.ProtocolMapper }).(pulumi.StringOutput)
}

type GetClientDescriptionConverterProtocolMapperArrayOutput struct{ *pulumi.OutputState }

func (GetClientDescriptionConverterProtocolMapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClientDescriptionConverterProtocolMapper)(nil)).Elem()
}

func (o GetClientDescriptionConverterProtocolMapperArrayOutput) ToGetClientDescriptionConverterProtocolMapperArrayOutput() GetClientDescriptionConverterProtocolMapperArrayOutput {
	return o
}

func (o GetClientDescriptionConverterProtocolMapperArrayOutput) ToGetClientDescriptionConverterProtocolMapperArrayOutputWithContext(ctx context.Context) GetClientDescriptionConverterProtocolMapperArrayOutput {
	return o
}

func (o GetClientDescriptionConverterProtocolMapperArrayOutput) Index(i pulumi.IntInput) GetClientDescriptionConverterProtocolMapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClientDescriptionConverterProtocolMapper {
		return vs[0].([]GetClientDescriptionConverterProtocolMapper)[vs[1].(int)]
	}).(GetClientDescriptionConverterProtocolMapperOutput)
}

type GetRealmInternationalization struct {
	DefaultLocale    string   `pulumi:"defaultLocale"`
	SupportedLocales []string `pulumi:"supportedLocales"`
}

// GetRealmInternationalizationInput is an input type that accepts GetRealmInternationalizationArgs and GetRealmInternationalizationOutput values.
// You can construct a concrete instance of `GetRealmInternationalizationInput` via:
//
//          GetRealmInternationalizationArgs{...}
type GetRealmInternationalizationInput interface {
	pulumi.Input

	ToGetRealmInternationalizationOutput() GetRealmInternationalizationOutput
	ToGetRealmInternationalizationOutputWithContext(context.Context) GetRealmInternationalizationOutput
}

type GetRealmInternationalizationArgs struct {
	DefaultLocale    pulumi.StringInput      `pulumi:"defaultLocale"`
	SupportedLocales pulumi.StringArrayInput `pulumi:"supportedLocales"`
}

func (GetRealmInternationalizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmInternationalization)(nil)).Elem()
}

func (i GetRealmInternationalizationArgs) ToGetRealmInternationalizationOutput() GetRealmInternationalizationOutput {
	return i.ToGetRealmInternationalizationOutputWithContext(context.Background())
}

func (i GetRealmInternationalizationArgs) ToGetRealmInternationalizationOutputWithContext(ctx context.Context) GetRealmInternationalizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmInternationalizationOutput)
}

// GetRealmInternationalizationArrayInput is an input type that accepts GetRealmInternationalizationArray and GetRealmInternationalizationArrayOutput values.
// You can construct a concrete instance of `GetRealmInternationalizationArrayInput` via:
//
//          GetRealmInternationalizationArray{ GetRealmInternationalizationArgs{...} }
type GetRealmInternationalizationArrayInput interface {
	pulumi.Input

	ToGetRealmInternationalizationArrayOutput() GetRealmInternationalizationArrayOutput
	ToGetRealmInternationalizationArrayOutputWithContext(context.Context) GetRealmInternationalizationArrayOutput
}

type GetRealmInternationalizationArray []GetRealmInternationalizationInput

func (GetRealmInternationalizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmInternationalization)(nil)).Elem()
}

func (i GetRealmInternationalizationArray) ToGetRealmInternationalizationArrayOutput() GetRealmInternationalizationArrayOutput {
	return i.ToGetRealmInternationalizationArrayOutputWithContext(context.Background())
}

func (i GetRealmInternationalizationArray) ToGetRealmInternationalizationArrayOutputWithContext(ctx context.Context) GetRealmInternationalizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmInternationalizationArrayOutput)
}

type GetRealmInternationalizationOutput struct{ *pulumi.OutputState }

func (GetRealmInternationalizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmInternationalization)(nil)).Elem()
}

func (o GetRealmInternationalizationOutput) ToGetRealmInternationalizationOutput() GetRealmInternationalizationOutput {
	return o
}

func (o GetRealmInternationalizationOutput) ToGetRealmInternationalizationOutputWithContext(ctx context.Context) GetRealmInternationalizationOutput {
	return o
}

func (o GetRealmInternationalizationOutput) DefaultLocale() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmInternationalization) string { return v.DefaultLocale }).(pulumi.StringOutput)
}

func (o GetRealmInternationalizationOutput) SupportedLocales() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRealmInternationalization) []string { return v.SupportedLocales }).(pulumi.StringArrayOutput)
}

type GetRealmInternationalizationArrayOutput struct{ *pulumi.OutputState }

func (GetRealmInternationalizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmInternationalization)(nil)).Elem()
}

func (o GetRealmInternationalizationArrayOutput) ToGetRealmInternationalizationArrayOutput() GetRealmInternationalizationArrayOutput {
	return o
}

func (o GetRealmInternationalizationArrayOutput) ToGetRealmInternationalizationArrayOutputWithContext(ctx context.Context) GetRealmInternationalizationArrayOutput {
	return o
}

func (o GetRealmInternationalizationArrayOutput) Index(i pulumi.IntInput) GetRealmInternationalizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealmInternationalization {
		return vs[0].([]GetRealmInternationalization)[vs[1].(int)]
	}).(GetRealmInternationalizationOutput)
}

type GetRealmKeysKey struct {
	// Key algorithm (string)
	Algorithm string `pulumi:"algorithm"`
	// Key certificate (string)
	Certificate string `pulumi:"certificate"`
	// Key ID (string)
	Kid string `pulumi:"kid"`
	// Key provider ID (string)
	ProviderId string `pulumi:"providerId"`
	// Key provider priority (int64)
	ProviderPriority int `pulumi:"providerPriority"`
	// Key public key (string)
	PublicKey string `pulumi:"publicKey"`
	// When specified, keys will be filtered by status. The statuses can be any of `ACTIVE`, `DISABLED` and `PASSIVE`.
	Status string `pulumi:"status"`
	// Key type (string)
	Type string `pulumi:"type"`
}

// GetRealmKeysKeyInput is an input type that accepts GetRealmKeysKeyArgs and GetRealmKeysKeyOutput values.
// You can construct a concrete instance of `GetRealmKeysKeyInput` via:
//
//          GetRealmKeysKeyArgs{...}
type GetRealmKeysKeyInput interface {
	pulumi.Input

	ToGetRealmKeysKeyOutput() GetRealmKeysKeyOutput
	ToGetRealmKeysKeyOutputWithContext(context.Context) GetRealmKeysKeyOutput
}

type GetRealmKeysKeyArgs struct {
	// Key algorithm (string)
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// Key certificate (string)
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// Key ID (string)
	Kid pulumi.StringInput `pulumi:"kid"`
	// Key provider ID (string)
	ProviderId pulumi.StringInput `pulumi:"providerId"`
	// Key provider priority (int64)
	ProviderPriority pulumi.IntInput `pulumi:"providerPriority"`
	// Key public key (string)
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// When specified, keys will be filtered by status. The statuses can be any of `ACTIVE`, `DISABLED` and `PASSIVE`.
	Status pulumi.StringInput `pulumi:"status"`
	// Key type (string)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRealmKeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmKeysKey)(nil)).Elem()
}

func (i GetRealmKeysKeyArgs) ToGetRealmKeysKeyOutput() GetRealmKeysKeyOutput {
	return i.ToGetRealmKeysKeyOutputWithContext(context.Background())
}

func (i GetRealmKeysKeyArgs) ToGetRealmKeysKeyOutputWithContext(ctx context.Context) GetRealmKeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmKeysKeyOutput)
}

// GetRealmKeysKeyArrayInput is an input type that accepts GetRealmKeysKeyArray and GetRealmKeysKeyArrayOutput values.
// You can construct a concrete instance of `GetRealmKeysKeyArrayInput` via:
//
//          GetRealmKeysKeyArray{ GetRealmKeysKeyArgs{...} }
type GetRealmKeysKeyArrayInput interface {
	pulumi.Input

	ToGetRealmKeysKeyArrayOutput() GetRealmKeysKeyArrayOutput
	ToGetRealmKeysKeyArrayOutputWithContext(context.Context) GetRealmKeysKeyArrayOutput
}

type GetRealmKeysKeyArray []GetRealmKeysKeyInput

func (GetRealmKeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmKeysKey)(nil)).Elem()
}

func (i GetRealmKeysKeyArray) ToGetRealmKeysKeyArrayOutput() GetRealmKeysKeyArrayOutput {
	return i.ToGetRealmKeysKeyArrayOutputWithContext(context.Background())
}

func (i GetRealmKeysKeyArray) ToGetRealmKeysKeyArrayOutputWithContext(ctx context.Context) GetRealmKeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmKeysKeyArrayOutput)
}

type GetRealmKeysKeyOutput struct{ *pulumi.OutputState }

func (GetRealmKeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmKeysKey)(nil)).Elem()
}

func (o GetRealmKeysKeyOutput) ToGetRealmKeysKeyOutput() GetRealmKeysKeyOutput {
	return o
}

func (o GetRealmKeysKeyOutput) ToGetRealmKeysKeyOutputWithContext(ctx context.Context) GetRealmKeysKeyOutput {
	return o
}

// Key algorithm (string)
func (o GetRealmKeysKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysKey) string { return v.Algorithm }).(pulumi.StringOutput)
}

// Key certificate (string)
func (o GetRealmKeysKeyOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysKey) string { return v.Certificate }).(pulumi.StringOutput)
}

// Key ID (string)
func (o GetRealmKeysKeyOutput) Kid() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysKey) string { return v.Kid }).(pulumi.StringOutput)
}

// Key provider ID (string)
func (o GetRealmKeysKeyOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysKey) string { return v.ProviderId }).(pulumi.StringOutput)
}

// Key provider priority (int64)
func (o GetRealmKeysKeyOutput) ProviderPriority() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmKeysKey) int { return v.ProviderPriority }).(pulumi.IntOutput)
}

// Key public key (string)
func (o GetRealmKeysKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysKey) string { return v.PublicKey }).(pulumi.StringOutput)
}

// When specified, keys will be filtered by status. The statuses can be any of `ACTIVE`, `DISABLED` and `PASSIVE`.
func (o GetRealmKeysKeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysKey) string { return v.Status }).(pulumi.StringOutput)
}

// Key type (string)
func (o GetRealmKeysKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmKeysKey) string { return v.Type }).(pulumi.StringOutput)
}

type GetRealmKeysKeyArrayOutput struct{ *pulumi.OutputState }

func (GetRealmKeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmKeysKey)(nil)).Elem()
}

func (o GetRealmKeysKeyArrayOutput) ToGetRealmKeysKeyArrayOutput() GetRealmKeysKeyArrayOutput {
	return o
}

func (o GetRealmKeysKeyArrayOutput) ToGetRealmKeysKeyArrayOutputWithContext(ctx context.Context) GetRealmKeysKeyArrayOutput {
	return o
}

func (o GetRealmKeysKeyArrayOutput) Index(i pulumi.IntInput) GetRealmKeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealmKeysKey {
		return vs[0].([]GetRealmKeysKey)[vs[1].(int)]
	}).(GetRealmKeysKeyOutput)
}

type GetRealmOtpPolicy struct {
	Algorithm       string `pulumi:"algorithm"`
	Digits          int    `pulumi:"digits"`
	InitialCounter  int    `pulumi:"initialCounter"`
	LookAheadWindow int    `pulumi:"lookAheadWindow"`
	Period          int    `pulumi:"period"`
	Type            string `pulumi:"type"`
}

// GetRealmOtpPolicyInput is an input type that accepts GetRealmOtpPolicyArgs and GetRealmOtpPolicyOutput values.
// You can construct a concrete instance of `GetRealmOtpPolicyInput` via:
//
//          GetRealmOtpPolicyArgs{...}
type GetRealmOtpPolicyInput interface {
	pulumi.Input

	ToGetRealmOtpPolicyOutput() GetRealmOtpPolicyOutput
	ToGetRealmOtpPolicyOutputWithContext(context.Context) GetRealmOtpPolicyOutput
}

type GetRealmOtpPolicyArgs struct {
	Algorithm       pulumi.StringInput `pulumi:"algorithm"`
	Digits          pulumi.IntInput    `pulumi:"digits"`
	InitialCounter  pulumi.IntInput    `pulumi:"initialCounter"`
	LookAheadWindow pulumi.IntInput    `pulumi:"lookAheadWindow"`
	Period          pulumi.IntInput    `pulumi:"period"`
	Type            pulumi.StringInput `pulumi:"type"`
}

func (GetRealmOtpPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmOtpPolicy)(nil)).Elem()
}

func (i GetRealmOtpPolicyArgs) ToGetRealmOtpPolicyOutput() GetRealmOtpPolicyOutput {
	return i.ToGetRealmOtpPolicyOutputWithContext(context.Background())
}

func (i GetRealmOtpPolicyArgs) ToGetRealmOtpPolicyOutputWithContext(ctx context.Context) GetRealmOtpPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmOtpPolicyOutput)
}

func (i GetRealmOtpPolicyArgs) ToGetRealmOtpPolicyPtrOutput() GetRealmOtpPolicyPtrOutput {
	return i.ToGetRealmOtpPolicyPtrOutputWithContext(context.Background())
}

func (i GetRealmOtpPolicyArgs) ToGetRealmOtpPolicyPtrOutputWithContext(ctx context.Context) GetRealmOtpPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmOtpPolicyOutput).ToGetRealmOtpPolicyPtrOutputWithContext(ctx)
}

// GetRealmOtpPolicyPtrInput is an input type that accepts GetRealmOtpPolicyArgs, GetRealmOtpPolicyPtr and GetRealmOtpPolicyPtrOutput values.
// You can construct a concrete instance of `GetRealmOtpPolicyPtrInput` via:
//
//          GetRealmOtpPolicyArgs{...}
//
//  or:
//
//          nil
type GetRealmOtpPolicyPtrInput interface {
	pulumi.Input

	ToGetRealmOtpPolicyPtrOutput() GetRealmOtpPolicyPtrOutput
	ToGetRealmOtpPolicyPtrOutputWithContext(context.Context) GetRealmOtpPolicyPtrOutput
}

type getRealmOtpPolicyPtrType GetRealmOtpPolicyArgs

func GetRealmOtpPolicyPtr(v *GetRealmOtpPolicyArgs) GetRealmOtpPolicyPtrInput {
	return (*getRealmOtpPolicyPtrType)(v)
}

func (*getRealmOtpPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRealmOtpPolicy)(nil)).Elem()
}

func (i *getRealmOtpPolicyPtrType) ToGetRealmOtpPolicyPtrOutput() GetRealmOtpPolicyPtrOutput {
	return i.ToGetRealmOtpPolicyPtrOutputWithContext(context.Background())
}

func (i *getRealmOtpPolicyPtrType) ToGetRealmOtpPolicyPtrOutputWithContext(ctx context.Context) GetRealmOtpPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmOtpPolicyPtrOutput)
}

type GetRealmOtpPolicyOutput struct{ *pulumi.OutputState }

func (GetRealmOtpPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmOtpPolicy)(nil)).Elem()
}

func (o GetRealmOtpPolicyOutput) ToGetRealmOtpPolicyOutput() GetRealmOtpPolicyOutput {
	return o
}

func (o GetRealmOtpPolicyOutput) ToGetRealmOtpPolicyOutputWithContext(ctx context.Context) GetRealmOtpPolicyOutput {
	return o
}

func (o GetRealmOtpPolicyOutput) ToGetRealmOtpPolicyPtrOutput() GetRealmOtpPolicyPtrOutput {
	return o.ToGetRealmOtpPolicyPtrOutputWithContext(context.Background())
}

func (o GetRealmOtpPolicyOutput) ToGetRealmOtpPolicyPtrOutputWithContext(ctx context.Context) GetRealmOtpPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRealmOtpPolicy) *GetRealmOtpPolicy {
		return &v
	}).(GetRealmOtpPolicyPtrOutput)
}

func (o GetRealmOtpPolicyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmOtpPolicy) string { return v.Algorithm }).(pulumi.StringOutput)
}

func (o GetRealmOtpPolicyOutput) Digits() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmOtpPolicy) int { return v.Digits }).(pulumi.IntOutput)
}

func (o GetRealmOtpPolicyOutput) InitialCounter() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmOtpPolicy) int { return v.InitialCounter }).(pulumi.IntOutput)
}

func (o GetRealmOtpPolicyOutput) LookAheadWindow() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmOtpPolicy) int { return v.LookAheadWindow }).(pulumi.IntOutput)
}

func (o GetRealmOtpPolicyOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmOtpPolicy) int { return v.Period }).(pulumi.IntOutput)
}

func (o GetRealmOtpPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmOtpPolicy) string { return v.Type }).(pulumi.StringOutput)
}

type GetRealmOtpPolicyPtrOutput struct{ *pulumi.OutputState }

func (GetRealmOtpPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRealmOtpPolicy)(nil)).Elem()
}

func (o GetRealmOtpPolicyPtrOutput) ToGetRealmOtpPolicyPtrOutput() GetRealmOtpPolicyPtrOutput {
	return o
}

func (o GetRealmOtpPolicyPtrOutput) ToGetRealmOtpPolicyPtrOutputWithContext(ctx context.Context) GetRealmOtpPolicyPtrOutput {
	return o
}

func (o GetRealmOtpPolicyPtrOutput) Elem() GetRealmOtpPolicyOutput {
	return o.ApplyT(func(v *GetRealmOtpPolicy) GetRealmOtpPolicy {
		if v != nil {
			return *v
		}
		var ret GetRealmOtpPolicy
		return ret
	}).(GetRealmOtpPolicyOutput)
}

func (o GetRealmOtpPolicyPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmOtpPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmOtpPolicyPtrOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetRealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Digits
	}).(pulumi.IntPtrOutput)
}

func (o GetRealmOtpPolicyPtrOutput) InitialCounter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetRealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.InitialCounter
	}).(pulumi.IntPtrOutput)
}

func (o GetRealmOtpPolicyPtrOutput) LookAheadWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetRealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.LookAheadWindow
	}).(pulumi.IntPtrOutput)
}

func (o GetRealmOtpPolicyPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetRealmOtpPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

func (o GetRealmOtpPolicyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmOtpPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetRealmSecurityDefense struct {
	BruteForceDetections []GetRealmSecurityDefenseBruteForceDetection `pulumi:"bruteForceDetections"`
	Headers              []GetRealmSecurityDefenseHeader              `pulumi:"headers"`
}

// GetRealmSecurityDefenseInput is an input type that accepts GetRealmSecurityDefenseArgs and GetRealmSecurityDefenseOutput values.
// You can construct a concrete instance of `GetRealmSecurityDefenseInput` via:
//
//          GetRealmSecurityDefenseArgs{...}
type GetRealmSecurityDefenseInput interface {
	pulumi.Input

	ToGetRealmSecurityDefenseOutput() GetRealmSecurityDefenseOutput
	ToGetRealmSecurityDefenseOutputWithContext(context.Context) GetRealmSecurityDefenseOutput
}

type GetRealmSecurityDefenseArgs struct {
	BruteForceDetections GetRealmSecurityDefenseBruteForceDetectionArrayInput `pulumi:"bruteForceDetections"`
	Headers              GetRealmSecurityDefenseHeaderArrayInput              `pulumi:"headers"`
}

func (GetRealmSecurityDefenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSecurityDefense)(nil)).Elem()
}

func (i GetRealmSecurityDefenseArgs) ToGetRealmSecurityDefenseOutput() GetRealmSecurityDefenseOutput {
	return i.ToGetRealmSecurityDefenseOutputWithContext(context.Background())
}

func (i GetRealmSecurityDefenseArgs) ToGetRealmSecurityDefenseOutputWithContext(ctx context.Context) GetRealmSecurityDefenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSecurityDefenseOutput)
}

// GetRealmSecurityDefenseArrayInput is an input type that accepts GetRealmSecurityDefenseArray and GetRealmSecurityDefenseArrayOutput values.
// You can construct a concrete instance of `GetRealmSecurityDefenseArrayInput` via:
//
//          GetRealmSecurityDefenseArray{ GetRealmSecurityDefenseArgs{...} }
type GetRealmSecurityDefenseArrayInput interface {
	pulumi.Input

	ToGetRealmSecurityDefenseArrayOutput() GetRealmSecurityDefenseArrayOutput
	ToGetRealmSecurityDefenseArrayOutputWithContext(context.Context) GetRealmSecurityDefenseArrayOutput
}

type GetRealmSecurityDefenseArray []GetRealmSecurityDefenseInput

func (GetRealmSecurityDefenseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSecurityDefense)(nil)).Elem()
}

func (i GetRealmSecurityDefenseArray) ToGetRealmSecurityDefenseArrayOutput() GetRealmSecurityDefenseArrayOutput {
	return i.ToGetRealmSecurityDefenseArrayOutputWithContext(context.Background())
}

func (i GetRealmSecurityDefenseArray) ToGetRealmSecurityDefenseArrayOutputWithContext(ctx context.Context) GetRealmSecurityDefenseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSecurityDefenseArrayOutput)
}

type GetRealmSecurityDefenseOutput struct{ *pulumi.OutputState }

func (GetRealmSecurityDefenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSecurityDefense)(nil)).Elem()
}

func (o GetRealmSecurityDefenseOutput) ToGetRealmSecurityDefenseOutput() GetRealmSecurityDefenseOutput {
	return o
}

func (o GetRealmSecurityDefenseOutput) ToGetRealmSecurityDefenseOutputWithContext(ctx context.Context) GetRealmSecurityDefenseOutput {
	return o
}

func (o GetRealmSecurityDefenseOutput) BruteForceDetections() GetRealmSecurityDefenseBruteForceDetectionArrayOutput {
	return o.ApplyT(func(v GetRealmSecurityDefense) []GetRealmSecurityDefenseBruteForceDetection {
		return v.BruteForceDetections
	}).(GetRealmSecurityDefenseBruteForceDetectionArrayOutput)
}

func (o GetRealmSecurityDefenseOutput) Headers() GetRealmSecurityDefenseHeaderArrayOutput {
	return o.ApplyT(func(v GetRealmSecurityDefense) []GetRealmSecurityDefenseHeader { return v.Headers }).(GetRealmSecurityDefenseHeaderArrayOutput)
}

type GetRealmSecurityDefenseArrayOutput struct{ *pulumi.OutputState }

func (GetRealmSecurityDefenseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSecurityDefense)(nil)).Elem()
}

func (o GetRealmSecurityDefenseArrayOutput) ToGetRealmSecurityDefenseArrayOutput() GetRealmSecurityDefenseArrayOutput {
	return o
}

func (o GetRealmSecurityDefenseArrayOutput) ToGetRealmSecurityDefenseArrayOutputWithContext(ctx context.Context) GetRealmSecurityDefenseArrayOutput {
	return o
}

func (o GetRealmSecurityDefenseArrayOutput) Index(i pulumi.IntInput) GetRealmSecurityDefenseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealmSecurityDefense {
		return vs[0].([]GetRealmSecurityDefense)[vs[1].(int)]
	}).(GetRealmSecurityDefenseOutput)
}

type GetRealmSecurityDefenseBruteForceDetection struct {
	FailureResetTimeSeconds      int  `pulumi:"failureResetTimeSeconds"`
	MaxFailureWaitSeconds        int  `pulumi:"maxFailureWaitSeconds"`
	MaxLoginFailures             int  `pulumi:"maxLoginFailures"`
	MinimumQuickLoginWaitSeconds int  `pulumi:"minimumQuickLoginWaitSeconds"`
	PermanentLockout             bool `pulumi:"permanentLockout"`
	QuickLoginCheckMilliSeconds  int  `pulumi:"quickLoginCheckMilliSeconds"`
	WaitIncrementSeconds         int  `pulumi:"waitIncrementSeconds"`
}

// GetRealmSecurityDefenseBruteForceDetectionInput is an input type that accepts GetRealmSecurityDefenseBruteForceDetectionArgs and GetRealmSecurityDefenseBruteForceDetectionOutput values.
// You can construct a concrete instance of `GetRealmSecurityDefenseBruteForceDetectionInput` via:
//
//          GetRealmSecurityDefenseBruteForceDetectionArgs{...}
type GetRealmSecurityDefenseBruteForceDetectionInput interface {
	pulumi.Input

	ToGetRealmSecurityDefenseBruteForceDetectionOutput() GetRealmSecurityDefenseBruteForceDetectionOutput
	ToGetRealmSecurityDefenseBruteForceDetectionOutputWithContext(context.Context) GetRealmSecurityDefenseBruteForceDetectionOutput
}

type GetRealmSecurityDefenseBruteForceDetectionArgs struct {
	FailureResetTimeSeconds      pulumi.IntInput  `pulumi:"failureResetTimeSeconds"`
	MaxFailureWaitSeconds        pulumi.IntInput  `pulumi:"maxFailureWaitSeconds"`
	MaxLoginFailures             pulumi.IntInput  `pulumi:"maxLoginFailures"`
	MinimumQuickLoginWaitSeconds pulumi.IntInput  `pulumi:"minimumQuickLoginWaitSeconds"`
	PermanentLockout             pulumi.BoolInput `pulumi:"permanentLockout"`
	QuickLoginCheckMilliSeconds  pulumi.IntInput  `pulumi:"quickLoginCheckMilliSeconds"`
	WaitIncrementSeconds         pulumi.IntInput  `pulumi:"waitIncrementSeconds"`
}

func (GetRealmSecurityDefenseBruteForceDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSecurityDefenseBruteForceDetection)(nil)).Elem()
}

func (i GetRealmSecurityDefenseBruteForceDetectionArgs) ToGetRealmSecurityDefenseBruteForceDetectionOutput() GetRealmSecurityDefenseBruteForceDetectionOutput {
	return i.ToGetRealmSecurityDefenseBruteForceDetectionOutputWithContext(context.Background())
}

func (i GetRealmSecurityDefenseBruteForceDetectionArgs) ToGetRealmSecurityDefenseBruteForceDetectionOutputWithContext(ctx context.Context) GetRealmSecurityDefenseBruteForceDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSecurityDefenseBruteForceDetectionOutput)
}

// GetRealmSecurityDefenseBruteForceDetectionArrayInput is an input type that accepts GetRealmSecurityDefenseBruteForceDetectionArray and GetRealmSecurityDefenseBruteForceDetectionArrayOutput values.
// You can construct a concrete instance of `GetRealmSecurityDefenseBruteForceDetectionArrayInput` via:
//
//          GetRealmSecurityDefenseBruteForceDetectionArray{ GetRealmSecurityDefenseBruteForceDetectionArgs{...} }
type GetRealmSecurityDefenseBruteForceDetectionArrayInput interface {
	pulumi.Input

	ToGetRealmSecurityDefenseBruteForceDetectionArrayOutput() GetRealmSecurityDefenseBruteForceDetectionArrayOutput
	ToGetRealmSecurityDefenseBruteForceDetectionArrayOutputWithContext(context.Context) GetRealmSecurityDefenseBruteForceDetectionArrayOutput
}

type GetRealmSecurityDefenseBruteForceDetectionArray []GetRealmSecurityDefenseBruteForceDetectionInput

func (GetRealmSecurityDefenseBruteForceDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSecurityDefenseBruteForceDetection)(nil)).Elem()
}

func (i GetRealmSecurityDefenseBruteForceDetectionArray) ToGetRealmSecurityDefenseBruteForceDetectionArrayOutput() GetRealmSecurityDefenseBruteForceDetectionArrayOutput {
	return i.ToGetRealmSecurityDefenseBruteForceDetectionArrayOutputWithContext(context.Background())
}

func (i GetRealmSecurityDefenseBruteForceDetectionArray) ToGetRealmSecurityDefenseBruteForceDetectionArrayOutputWithContext(ctx context.Context) GetRealmSecurityDefenseBruteForceDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSecurityDefenseBruteForceDetectionArrayOutput)
}

type GetRealmSecurityDefenseBruteForceDetectionOutput struct{ *pulumi.OutputState }

func (GetRealmSecurityDefenseBruteForceDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSecurityDefenseBruteForceDetection)(nil)).Elem()
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) ToGetRealmSecurityDefenseBruteForceDetectionOutput() GetRealmSecurityDefenseBruteForceDetectionOutput {
	return o
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) ToGetRealmSecurityDefenseBruteForceDetectionOutputWithContext(ctx context.Context) GetRealmSecurityDefenseBruteForceDetectionOutput {
	return o
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) FailureResetTimeSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseBruteForceDetection) int { return v.FailureResetTimeSeconds }).(pulumi.IntOutput)
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) MaxFailureWaitSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseBruteForceDetection) int { return v.MaxFailureWaitSeconds }).(pulumi.IntOutput)
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) MaxLoginFailures() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseBruteForceDetection) int { return v.MaxLoginFailures }).(pulumi.IntOutput)
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) MinimumQuickLoginWaitSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseBruteForceDetection) int { return v.MinimumQuickLoginWaitSeconds }).(pulumi.IntOutput)
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) PermanentLockout() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseBruteForceDetection) bool { return v.PermanentLockout }).(pulumi.BoolOutput)
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) QuickLoginCheckMilliSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseBruteForceDetection) int { return v.QuickLoginCheckMilliSeconds }).(pulumi.IntOutput)
}

func (o GetRealmSecurityDefenseBruteForceDetectionOutput) WaitIncrementSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseBruteForceDetection) int { return v.WaitIncrementSeconds }).(pulumi.IntOutput)
}

type GetRealmSecurityDefenseBruteForceDetectionArrayOutput struct{ *pulumi.OutputState }

func (GetRealmSecurityDefenseBruteForceDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSecurityDefenseBruteForceDetection)(nil)).Elem()
}

func (o GetRealmSecurityDefenseBruteForceDetectionArrayOutput) ToGetRealmSecurityDefenseBruteForceDetectionArrayOutput() GetRealmSecurityDefenseBruteForceDetectionArrayOutput {
	return o
}

func (o GetRealmSecurityDefenseBruteForceDetectionArrayOutput) ToGetRealmSecurityDefenseBruteForceDetectionArrayOutputWithContext(ctx context.Context) GetRealmSecurityDefenseBruteForceDetectionArrayOutput {
	return o
}

func (o GetRealmSecurityDefenseBruteForceDetectionArrayOutput) Index(i pulumi.IntInput) GetRealmSecurityDefenseBruteForceDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealmSecurityDefenseBruteForceDetection {
		return vs[0].([]GetRealmSecurityDefenseBruteForceDetection)[vs[1].(int)]
	}).(GetRealmSecurityDefenseBruteForceDetectionOutput)
}

type GetRealmSecurityDefenseHeader struct {
	ContentSecurityPolicy           string `pulumi:"contentSecurityPolicy"`
	ContentSecurityPolicyReportOnly string `pulumi:"contentSecurityPolicyReportOnly"`
	StrictTransportSecurity         string `pulumi:"strictTransportSecurity"`
	XContentTypeOptions             string `pulumi:"xContentTypeOptions"`
	XFrameOptions                   string `pulumi:"xFrameOptions"`
	XRobotsTag                      string `pulumi:"xRobotsTag"`
	XXssProtection                  string `pulumi:"xXssProtection"`
}

// GetRealmSecurityDefenseHeaderInput is an input type that accepts GetRealmSecurityDefenseHeaderArgs and GetRealmSecurityDefenseHeaderOutput values.
// You can construct a concrete instance of `GetRealmSecurityDefenseHeaderInput` via:
//
//          GetRealmSecurityDefenseHeaderArgs{...}
type GetRealmSecurityDefenseHeaderInput interface {
	pulumi.Input

	ToGetRealmSecurityDefenseHeaderOutput() GetRealmSecurityDefenseHeaderOutput
	ToGetRealmSecurityDefenseHeaderOutputWithContext(context.Context) GetRealmSecurityDefenseHeaderOutput
}

type GetRealmSecurityDefenseHeaderArgs struct {
	ContentSecurityPolicy           pulumi.StringInput `pulumi:"contentSecurityPolicy"`
	ContentSecurityPolicyReportOnly pulumi.StringInput `pulumi:"contentSecurityPolicyReportOnly"`
	StrictTransportSecurity         pulumi.StringInput `pulumi:"strictTransportSecurity"`
	XContentTypeOptions             pulumi.StringInput `pulumi:"xContentTypeOptions"`
	XFrameOptions                   pulumi.StringInput `pulumi:"xFrameOptions"`
	XRobotsTag                      pulumi.StringInput `pulumi:"xRobotsTag"`
	XXssProtection                  pulumi.StringInput `pulumi:"xXssProtection"`
}

func (GetRealmSecurityDefenseHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSecurityDefenseHeader)(nil)).Elem()
}

func (i GetRealmSecurityDefenseHeaderArgs) ToGetRealmSecurityDefenseHeaderOutput() GetRealmSecurityDefenseHeaderOutput {
	return i.ToGetRealmSecurityDefenseHeaderOutputWithContext(context.Background())
}

func (i GetRealmSecurityDefenseHeaderArgs) ToGetRealmSecurityDefenseHeaderOutputWithContext(ctx context.Context) GetRealmSecurityDefenseHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSecurityDefenseHeaderOutput)
}

// GetRealmSecurityDefenseHeaderArrayInput is an input type that accepts GetRealmSecurityDefenseHeaderArray and GetRealmSecurityDefenseHeaderArrayOutput values.
// You can construct a concrete instance of `GetRealmSecurityDefenseHeaderArrayInput` via:
//
//          GetRealmSecurityDefenseHeaderArray{ GetRealmSecurityDefenseHeaderArgs{...} }
type GetRealmSecurityDefenseHeaderArrayInput interface {
	pulumi.Input

	ToGetRealmSecurityDefenseHeaderArrayOutput() GetRealmSecurityDefenseHeaderArrayOutput
	ToGetRealmSecurityDefenseHeaderArrayOutputWithContext(context.Context) GetRealmSecurityDefenseHeaderArrayOutput
}

type GetRealmSecurityDefenseHeaderArray []GetRealmSecurityDefenseHeaderInput

func (GetRealmSecurityDefenseHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSecurityDefenseHeader)(nil)).Elem()
}

func (i GetRealmSecurityDefenseHeaderArray) ToGetRealmSecurityDefenseHeaderArrayOutput() GetRealmSecurityDefenseHeaderArrayOutput {
	return i.ToGetRealmSecurityDefenseHeaderArrayOutputWithContext(context.Background())
}

func (i GetRealmSecurityDefenseHeaderArray) ToGetRealmSecurityDefenseHeaderArrayOutputWithContext(ctx context.Context) GetRealmSecurityDefenseHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSecurityDefenseHeaderArrayOutput)
}

type GetRealmSecurityDefenseHeaderOutput struct{ *pulumi.OutputState }

func (GetRealmSecurityDefenseHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSecurityDefenseHeader)(nil)).Elem()
}

func (o GetRealmSecurityDefenseHeaderOutput) ToGetRealmSecurityDefenseHeaderOutput() GetRealmSecurityDefenseHeaderOutput {
	return o
}

func (o GetRealmSecurityDefenseHeaderOutput) ToGetRealmSecurityDefenseHeaderOutputWithContext(ctx context.Context) GetRealmSecurityDefenseHeaderOutput {
	return o
}

func (o GetRealmSecurityDefenseHeaderOutput) ContentSecurityPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseHeader) string { return v.ContentSecurityPolicy }).(pulumi.StringOutput)
}

func (o GetRealmSecurityDefenseHeaderOutput) ContentSecurityPolicyReportOnly() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseHeader) string { return v.ContentSecurityPolicyReportOnly }).(pulumi.StringOutput)
}

func (o GetRealmSecurityDefenseHeaderOutput) StrictTransportSecurity() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseHeader) string { return v.StrictTransportSecurity }).(pulumi.StringOutput)
}

func (o GetRealmSecurityDefenseHeaderOutput) XContentTypeOptions() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseHeader) string { return v.XContentTypeOptions }).(pulumi.StringOutput)
}

func (o GetRealmSecurityDefenseHeaderOutput) XFrameOptions() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseHeader) string { return v.XFrameOptions }).(pulumi.StringOutput)
}

func (o GetRealmSecurityDefenseHeaderOutput) XRobotsTag() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseHeader) string { return v.XRobotsTag }).(pulumi.StringOutput)
}

func (o GetRealmSecurityDefenseHeaderOutput) XXssProtection() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSecurityDefenseHeader) string { return v.XXssProtection }).(pulumi.StringOutput)
}

type GetRealmSecurityDefenseHeaderArrayOutput struct{ *pulumi.OutputState }

func (GetRealmSecurityDefenseHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSecurityDefenseHeader)(nil)).Elem()
}

func (o GetRealmSecurityDefenseHeaderArrayOutput) ToGetRealmSecurityDefenseHeaderArrayOutput() GetRealmSecurityDefenseHeaderArrayOutput {
	return o
}

func (o GetRealmSecurityDefenseHeaderArrayOutput) ToGetRealmSecurityDefenseHeaderArrayOutputWithContext(ctx context.Context) GetRealmSecurityDefenseHeaderArrayOutput {
	return o
}

func (o GetRealmSecurityDefenseHeaderArrayOutput) Index(i pulumi.IntInput) GetRealmSecurityDefenseHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealmSecurityDefenseHeader {
		return vs[0].([]GetRealmSecurityDefenseHeader)[vs[1].(int)]
	}).(GetRealmSecurityDefenseHeaderOutput)
}

type GetRealmSmtpServer struct {
	Auths              []GetRealmSmtpServerAuth `pulumi:"auths"`
	EnvelopeFrom       string                   `pulumi:"envelopeFrom"`
	From               string                   `pulumi:"from"`
	FromDisplayName    string                   `pulumi:"fromDisplayName"`
	Host               string                   `pulumi:"host"`
	Port               string                   `pulumi:"port"`
	ReplyTo            string                   `pulumi:"replyTo"`
	ReplyToDisplayName string                   `pulumi:"replyToDisplayName"`
	Ssl                bool                     `pulumi:"ssl"`
	Starttls           bool                     `pulumi:"starttls"`
}

// GetRealmSmtpServerInput is an input type that accepts GetRealmSmtpServerArgs and GetRealmSmtpServerOutput values.
// You can construct a concrete instance of `GetRealmSmtpServerInput` via:
//
//          GetRealmSmtpServerArgs{...}
type GetRealmSmtpServerInput interface {
	pulumi.Input

	ToGetRealmSmtpServerOutput() GetRealmSmtpServerOutput
	ToGetRealmSmtpServerOutputWithContext(context.Context) GetRealmSmtpServerOutput
}

type GetRealmSmtpServerArgs struct {
	Auths              GetRealmSmtpServerAuthArrayInput `pulumi:"auths"`
	EnvelopeFrom       pulumi.StringInput               `pulumi:"envelopeFrom"`
	From               pulumi.StringInput               `pulumi:"from"`
	FromDisplayName    pulumi.StringInput               `pulumi:"fromDisplayName"`
	Host               pulumi.StringInput               `pulumi:"host"`
	Port               pulumi.StringInput               `pulumi:"port"`
	ReplyTo            pulumi.StringInput               `pulumi:"replyTo"`
	ReplyToDisplayName pulumi.StringInput               `pulumi:"replyToDisplayName"`
	Ssl                pulumi.BoolInput                 `pulumi:"ssl"`
	Starttls           pulumi.BoolInput                 `pulumi:"starttls"`
}

func (GetRealmSmtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSmtpServer)(nil)).Elem()
}

func (i GetRealmSmtpServerArgs) ToGetRealmSmtpServerOutput() GetRealmSmtpServerOutput {
	return i.ToGetRealmSmtpServerOutputWithContext(context.Background())
}

func (i GetRealmSmtpServerArgs) ToGetRealmSmtpServerOutputWithContext(ctx context.Context) GetRealmSmtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSmtpServerOutput)
}

// GetRealmSmtpServerArrayInput is an input type that accepts GetRealmSmtpServerArray and GetRealmSmtpServerArrayOutput values.
// You can construct a concrete instance of `GetRealmSmtpServerArrayInput` via:
//
//          GetRealmSmtpServerArray{ GetRealmSmtpServerArgs{...} }
type GetRealmSmtpServerArrayInput interface {
	pulumi.Input

	ToGetRealmSmtpServerArrayOutput() GetRealmSmtpServerArrayOutput
	ToGetRealmSmtpServerArrayOutputWithContext(context.Context) GetRealmSmtpServerArrayOutput
}

type GetRealmSmtpServerArray []GetRealmSmtpServerInput

func (GetRealmSmtpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSmtpServer)(nil)).Elem()
}

func (i GetRealmSmtpServerArray) ToGetRealmSmtpServerArrayOutput() GetRealmSmtpServerArrayOutput {
	return i.ToGetRealmSmtpServerArrayOutputWithContext(context.Background())
}

func (i GetRealmSmtpServerArray) ToGetRealmSmtpServerArrayOutputWithContext(ctx context.Context) GetRealmSmtpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSmtpServerArrayOutput)
}

type GetRealmSmtpServerOutput struct{ *pulumi.OutputState }

func (GetRealmSmtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSmtpServer)(nil)).Elem()
}

func (o GetRealmSmtpServerOutput) ToGetRealmSmtpServerOutput() GetRealmSmtpServerOutput {
	return o
}

func (o GetRealmSmtpServerOutput) ToGetRealmSmtpServerOutputWithContext(ctx context.Context) GetRealmSmtpServerOutput {
	return o
}

func (o GetRealmSmtpServerOutput) Auths() GetRealmSmtpServerAuthArrayOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) []GetRealmSmtpServerAuth { return v.Auths }).(GetRealmSmtpServerAuthArrayOutput)
}

func (o GetRealmSmtpServerOutput) EnvelopeFrom() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) string { return v.EnvelopeFrom }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) string { return v.From }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerOutput) FromDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) string { return v.FromDisplayName }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) string { return v.Port }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerOutput) ReplyTo() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) string { return v.ReplyTo }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerOutput) ReplyToDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) string { return v.ReplyToDisplayName }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerOutput) Ssl() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) bool { return v.Ssl }).(pulumi.BoolOutput)
}

func (o GetRealmSmtpServerOutput) Starttls() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRealmSmtpServer) bool { return v.Starttls }).(pulumi.BoolOutput)
}

type GetRealmSmtpServerArrayOutput struct{ *pulumi.OutputState }

func (GetRealmSmtpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSmtpServer)(nil)).Elem()
}

func (o GetRealmSmtpServerArrayOutput) ToGetRealmSmtpServerArrayOutput() GetRealmSmtpServerArrayOutput {
	return o
}

func (o GetRealmSmtpServerArrayOutput) ToGetRealmSmtpServerArrayOutputWithContext(ctx context.Context) GetRealmSmtpServerArrayOutput {
	return o
}

func (o GetRealmSmtpServerArrayOutput) Index(i pulumi.IntInput) GetRealmSmtpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealmSmtpServer {
		return vs[0].([]GetRealmSmtpServer)[vs[1].(int)]
	}).(GetRealmSmtpServerOutput)
}

type GetRealmSmtpServerAuth struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// GetRealmSmtpServerAuthInput is an input type that accepts GetRealmSmtpServerAuthArgs and GetRealmSmtpServerAuthOutput values.
// You can construct a concrete instance of `GetRealmSmtpServerAuthInput` via:
//
//          GetRealmSmtpServerAuthArgs{...}
type GetRealmSmtpServerAuthInput interface {
	pulumi.Input

	ToGetRealmSmtpServerAuthOutput() GetRealmSmtpServerAuthOutput
	ToGetRealmSmtpServerAuthOutputWithContext(context.Context) GetRealmSmtpServerAuthOutput
}

type GetRealmSmtpServerAuthArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetRealmSmtpServerAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSmtpServerAuth)(nil)).Elem()
}

func (i GetRealmSmtpServerAuthArgs) ToGetRealmSmtpServerAuthOutput() GetRealmSmtpServerAuthOutput {
	return i.ToGetRealmSmtpServerAuthOutputWithContext(context.Background())
}

func (i GetRealmSmtpServerAuthArgs) ToGetRealmSmtpServerAuthOutputWithContext(ctx context.Context) GetRealmSmtpServerAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSmtpServerAuthOutput)
}

// GetRealmSmtpServerAuthArrayInput is an input type that accepts GetRealmSmtpServerAuthArray and GetRealmSmtpServerAuthArrayOutput values.
// You can construct a concrete instance of `GetRealmSmtpServerAuthArrayInput` via:
//
//          GetRealmSmtpServerAuthArray{ GetRealmSmtpServerAuthArgs{...} }
type GetRealmSmtpServerAuthArrayInput interface {
	pulumi.Input

	ToGetRealmSmtpServerAuthArrayOutput() GetRealmSmtpServerAuthArrayOutput
	ToGetRealmSmtpServerAuthArrayOutputWithContext(context.Context) GetRealmSmtpServerAuthArrayOutput
}

type GetRealmSmtpServerAuthArray []GetRealmSmtpServerAuthInput

func (GetRealmSmtpServerAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSmtpServerAuth)(nil)).Elem()
}

func (i GetRealmSmtpServerAuthArray) ToGetRealmSmtpServerAuthArrayOutput() GetRealmSmtpServerAuthArrayOutput {
	return i.ToGetRealmSmtpServerAuthArrayOutputWithContext(context.Background())
}

func (i GetRealmSmtpServerAuthArray) ToGetRealmSmtpServerAuthArrayOutputWithContext(ctx context.Context) GetRealmSmtpServerAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmSmtpServerAuthArrayOutput)
}

type GetRealmSmtpServerAuthOutput struct{ *pulumi.OutputState }

func (GetRealmSmtpServerAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmSmtpServerAuth)(nil)).Elem()
}

func (o GetRealmSmtpServerAuthOutput) ToGetRealmSmtpServerAuthOutput() GetRealmSmtpServerAuthOutput {
	return o
}

func (o GetRealmSmtpServerAuthOutput) ToGetRealmSmtpServerAuthOutputWithContext(ctx context.Context) GetRealmSmtpServerAuthOutput {
	return o
}

func (o GetRealmSmtpServerAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServerAuth) string { return v.Password }).(pulumi.StringOutput)
}

func (o GetRealmSmtpServerAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmSmtpServerAuth) string { return v.Username }).(pulumi.StringOutput)
}

type GetRealmSmtpServerAuthArrayOutput struct{ *pulumi.OutputState }

func (GetRealmSmtpServerAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRealmSmtpServerAuth)(nil)).Elem()
}

func (o GetRealmSmtpServerAuthArrayOutput) ToGetRealmSmtpServerAuthArrayOutput() GetRealmSmtpServerAuthArrayOutput {
	return o
}

func (o GetRealmSmtpServerAuthArrayOutput) ToGetRealmSmtpServerAuthArrayOutputWithContext(ctx context.Context) GetRealmSmtpServerAuthArrayOutput {
	return o
}

func (o GetRealmSmtpServerAuthArrayOutput) Index(i pulumi.IntInput) GetRealmSmtpServerAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRealmSmtpServerAuth {
		return vs[0].([]GetRealmSmtpServerAuth)[vs[1].(int)]
	}).(GetRealmSmtpServerAuthOutput)
}

type GetRealmWebAuthnPasswordlessPolicy struct {
	AcceptableAaguids               []string `pulumi:"acceptableAaguids"`
	AttestationConveyancePreference string   `pulumi:"attestationConveyancePreference"`
	AuthenticatorAttachment         string   `pulumi:"authenticatorAttachment"`
	AvoidSameAuthenticatorRegister  bool     `pulumi:"avoidSameAuthenticatorRegister"`
	CreateTimeout                   int      `pulumi:"createTimeout"`
	RelyingPartyEntityName          string   `pulumi:"relyingPartyEntityName"`
	RelyingPartyId                  string   `pulumi:"relyingPartyId"`
	RequireResidentKey              string   `pulumi:"requireResidentKey"`
	SignatureAlgorithms             []string `pulumi:"signatureAlgorithms"`
	UserVerificationRequirement     string   `pulumi:"userVerificationRequirement"`
}

// GetRealmWebAuthnPasswordlessPolicyInput is an input type that accepts GetRealmWebAuthnPasswordlessPolicyArgs and GetRealmWebAuthnPasswordlessPolicyOutput values.
// You can construct a concrete instance of `GetRealmWebAuthnPasswordlessPolicyInput` via:
//
//          GetRealmWebAuthnPasswordlessPolicyArgs{...}
type GetRealmWebAuthnPasswordlessPolicyInput interface {
	pulumi.Input

	ToGetRealmWebAuthnPasswordlessPolicyOutput() GetRealmWebAuthnPasswordlessPolicyOutput
	ToGetRealmWebAuthnPasswordlessPolicyOutputWithContext(context.Context) GetRealmWebAuthnPasswordlessPolicyOutput
}

type GetRealmWebAuthnPasswordlessPolicyArgs struct {
	AcceptableAaguids               pulumi.StringArrayInput `pulumi:"acceptableAaguids"`
	AttestationConveyancePreference pulumi.StringInput      `pulumi:"attestationConveyancePreference"`
	AuthenticatorAttachment         pulumi.StringInput      `pulumi:"authenticatorAttachment"`
	AvoidSameAuthenticatorRegister  pulumi.BoolInput        `pulumi:"avoidSameAuthenticatorRegister"`
	CreateTimeout                   pulumi.IntInput         `pulumi:"createTimeout"`
	RelyingPartyEntityName          pulumi.StringInput      `pulumi:"relyingPartyEntityName"`
	RelyingPartyId                  pulumi.StringInput      `pulumi:"relyingPartyId"`
	RequireResidentKey              pulumi.StringInput      `pulumi:"requireResidentKey"`
	SignatureAlgorithms             pulumi.StringArrayInput `pulumi:"signatureAlgorithms"`
	UserVerificationRequirement     pulumi.StringInput      `pulumi:"userVerificationRequirement"`
}

func (GetRealmWebAuthnPasswordlessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (i GetRealmWebAuthnPasswordlessPolicyArgs) ToGetRealmWebAuthnPasswordlessPolicyOutput() GetRealmWebAuthnPasswordlessPolicyOutput {
	return i.ToGetRealmWebAuthnPasswordlessPolicyOutputWithContext(context.Background())
}

func (i GetRealmWebAuthnPasswordlessPolicyArgs) ToGetRealmWebAuthnPasswordlessPolicyOutputWithContext(ctx context.Context) GetRealmWebAuthnPasswordlessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmWebAuthnPasswordlessPolicyOutput)
}

func (i GetRealmWebAuthnPasswordlessPolicyArgs) ToGetRealmWebAuthnPasswordlessPolicyPtrOutput() GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return i.ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Background())
}

func (i GetRealmWebAuthnPasswordlessPolicyArgs) ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmWebAuthnPasswordlessPolicyOutput).ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx)
}

// GetRealmWebAuthnPasswordlessPolicyPtrInput is an input type that accepts GetRealmWebAuthnPasswordlessPolicyArgs, GetRealmWebAuthnPasswordlessPolicyPtr and GetRealmWebAuthnPasswordlessPolicyPtrOutput values.
// You can construct a concrete instance of `GetRealmWebAuthnPasswordlessPolicyPtrInput` via:
//
//          GetRealmWebAuthnPasswordlessPolicyArgs{...}
//
//  or:
//
//          nil
type GetRealmWebAuthnPasswordlessPolicyPtrInput interface {
	pulumi.Input

	ToGetRealmWebAuthnPasswordlessPolicyPtrOutput() GetRealmWebAuthnPasswordlessPolicyPtrOutput
	ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Context) GetRealmWebAuthnPasswordlessPolicyPtrOutput
}

type getRealmWebAuthnPasswordlessPolicyPtrType GetRealmWebAuthnPasswordlessPolicyArgs

func GetRealmWebAuthnPasswordlessPolicyPtr(v *GetRealmWebAuthnPasswordlessPolicyArgs) GetRealmWebAuthnPasswordlessPolicyPtrInput {
	return (*getRealmWebAuthnPasswordlessPolicyPtrType)(v)
}

func (*getRealmWebAuthnPasswordlessPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (i *getRealmWebAuthnPasswordlessPolicyPtrType) ToGetRealmWebAuthnPasswordlessPolicyPtrOutput() GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return i.ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Background())
}

func (i *getRealmWebAuthnPasswordlessPolicyPtrType) ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmWebAuthnPasswordlessPolicyPtrOutput)
}

type GetRealmWebAuthnPasswordlessPolicyOutput struct{ *pulumi.OutputState }

func (GetRealmWebAuthnPasswordlessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) ToGetRealmWebAuthnPasswordlessPolicyOutput() GetRealmWebAuthnPasswordlessPolicyOutput {
	return o
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) ToGetRealmWebAuthnPasswordlessPolicyOutputWithContext(ctx context.Context) GetRealmWebAuthnPasswordlessPolicyOutput {
	return o
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) ToGetRealmWebAuthnPasswordlessPolicyPtrOutput() GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return o.ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(context.Background())
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRealmWebAuthnPasswordlessPolicy) *GetRealmWebAuthnPasswordlessPolicy {
		return &v
	}).(GetRealmWebAuthnPasswordlessPolicyPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) []string { return v.AcceptableAaguids }).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) AttestationConveyancePreference() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) string { return v.AttestationConveyancePreference }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) AuthenticatorAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) string { return v.AuthenticatorAttachment }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) AvoidSameAuthenticatorRegister() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) bool { return v.AvoidSameAuthenticatorRegister }).(pulumi.BoolOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) CreateTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) int { return v.CreateTimeout }).(pulumi.IntOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) RelyingPartyEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) string { return v.RelyingPartyEntityName }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) RelyingPartyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) string { return v.RelyingPartyId }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) RequireResidentKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) string { return v.RequireResidentKey }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) []string { return v.SignatureAlgorithms }).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyOutput) UserVerificationRequirement() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPasswordlessPolicy) string { return v.UserVerificationRequirement }).(pulumi.StringOutput)
}

type GetRealmWebAuthnPasswordlessPolicyPtrOutput struct{ *pulumi.OutputState }

func (GetRealmWebAuthnPasswordlessPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRealmWebAuthnPasswordlessPolicy)(nil)).Elem()
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) ToGetRealmWebAuthnPasswordlessPolicyPtrOutput() GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return o
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) ToGetRealmWebAuthnPasswordlessPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPasswordlessPolicyPtrOutput {
	return o
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) Elem() GetRealmWebAuthnPasswordlessPolicyOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) GetRealmWebAuthnPasswordlessPolicy {
		if v != nil {
			return *v
		}
		var ret GetRealmWebAuthnPasswordlessPolicy
		return ret
	}).(GetRealmWebAuthnPasswordlessPolicyOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AcceptableAaguids
	}).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) AttestationConveyancePreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.AttestationConveyancePreference
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) AuthenticatorAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticatorAttachment
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) AvoidSameAuthenticatorRegister() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.AvoidSameAuthenticatorRegister
	}).(pulumi.BoolPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) CreateTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.CreateTimeout
	}).(pulumi.IntPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) RelyingPartyEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RelyingPartyEntityName
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) RelyingPartyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RelyingPartyId
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) RequireResidentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RequireResidentKey
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithms
	}).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPasswordlessPolicyPtrOutput) UserVerificationRequirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPasswordlessPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UserVerificationRequirement
	}).(pulumi.StringPtrOutput)
}

type GetRealmWebAuthnPolicy struct {
	AcceptableAaguids               []string `pulumi:"acceptableAaguids"`
	AttestationConveyancePreference string   `pulumi:"attestationConveyancePreference"`
	AuthenticatorAttachment         string   `pulumi:"authenticatorAttachment"`
	AvoidSameAuthenticatorRegister  bool     `pulumi:"avoidSameAuthenticatorRegister"`
	CreateTimeout                   int      `pulumi:"createTimeout"`
	RelyingPartyEntityName          string   `pulumi:"relyingPartyEntityName"`
	RelyingPartyId                  string   `pulumi:"relyingPartyId"`
	RequireResidentKey              string   `pulumi:"requireResidentKey"`
	SignatureAlgorithms             []string `pulumi:"signatureAlgorithms"`
	UserVerificationRequirement     string   `pulumi:"userVerificationRequirement"`
}

// GetRealmWebAuthnPolicyInput is an input type that accepts GetRealmWebAuthnPolicyArgs and GetRealmWebAuthnPolicyOutput values.
// You can construct a concrete instance of `GetRealmWebAuthnPolicyInput` via:
//
//          GetRealmWebAuthnPolicyArgs{...}
type GetRealmWebAuthnPolicyInput interface {
	pulumi.Input

	ToGetRealmWebAuthnPolicyOutput() GetRealmWebAuthnPolicyOutput
	ToGetRealmWebAuthnPolicyOutputWithContext(context.Context) GetRealmWebAuthnPolicyOutput
}

type GetRealmWebAuthnPolicyArgs struct {
	AcceptableAaguids               pulumi.StringArrayInput `pulumi:"acceptableAaguids"`
	AttestationConveyancePreference pulumi.StringInput      `pulumi:"attestationConveyancePreference"`
	AuthenticatorAttachment         pulumi.StringInput      `pulumi:"authenticatorAttachment"`
	AvoidSameAuthenticatorRegister  pulumi.BoolInput        `pulumi:"avoidSameAuthenticatorRegister"`
	CreateTimeout                   pulumi.IntInput         `pulumi:"createTimeout"`
	RelyingPartyEntityName          pulumi.StringInput      `pulumi:"relyingPartyEntityName"`
	RelyingPartyId                  pulumi.StringInput      `pulumi:"relyingPartyId"`
	RequireResidentKey              pulumi.StringInput      `pulumi:"requireResidentKey"`
	SignatureAlgorithms             pulumi.StringArrayInput `pulumi:"signatureAlgorithms"`
	UserVerificationRequirement     pulumi.StringInput      `pulumi:"userVerificationRequirement"`
}

func (GetRealmWebAuthnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmWebAuthnPolicy)(nil)).Elem()
}

func (i GetRealmWebAuthnPolicyArgs) ToGetRealmWebAuthnPolicyOutput() GetRealmWebAuthnPolicyOutput {
	return i.ToGetRealmWebAuthnPolicyOutputWithContext(context.Background())
}

func (i GetRealmWebAuthnPolicyArgs) ToGetRealmWebAuthnPolicyOutputWithContext(ctx context.Context) GetRealmWebAuthnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmWebAuthnPolicyOutput)
}

func (i GetRealmWebAuthnPolicyArgs) ToGetRealmWebAuthnPolicyPtrOutput() GetRealmWebAuthnPolicyPtrOutput {
	return i.ToGetRealmWebAuthnPolicyPtrOutputWithContext(context.Background())
}

func (i GetRealmWebAuthnPolicyArgs) ToGetRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmWebAuthnPolicyOutput).ToGetRealmWebAuthnPolicyPtrOutputWithContext(ctx)
}

// GetRealmWebAuthnPolicyPtrInput is an input type that accepts GetRealmWebAuthnPolicyArgs, GetRealmWebAuthnPolicyPtr and GetRealmWebAuthnPolicyPtrOutput values.
// You can construct a concrete instance of `GetRealmWebAuthnPolicyPtrInput` via:
//
//          GetRealmWebAuthnPolicyArgs{...}
//
//  or:
//
//          nil
type GetRealmWebAuthnPolicyPtrInput interface {
	pulumi.Input

	ToGetRealmWebAuthnPolicyPtrOutput() GetRealmWebAuthnPolicyPtrOutput
	ToGetRealmWebAuthnPolicyPtrOutputWithContext(context.Context) GetRealmWebAuthnPolicyPtrOutput
}

type getRealmWebAuthnPolicyPtrType GetRealmWebAuthnPolicyArgs

func GetRealmWebAuthnPolicyPtr(v *GetRealmWebAuthnPolicyArgs) GetRealmWebAuthnPolicyPtrInput {
	return (*getRealmWebAuthnPolicyPtrType)(v)
}

func (*getRealmWebAuthnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRealmWebAuthnPolicy)(nil)).Elem()
}

func (i *getRealmWebAuthnPolicyPtrType) ToGetRealmWebAuthnPolicyPtrOutput() GetRealmWebAuthnPolicyPtrOutput {
	return i.ToGetRealmWebAuthnPolicyPtrOutputWithContext(context.Background())
}

func (i *getRealmWebAuthnPolicyPtrType) ToGetRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRealmWebAuthnPolicyPtrOutput)
}

type GetRealmWebAuthnPolicyOutput struct{ *pulumi.OutputState }

func (GetRealmWebAuthnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealmWebAuthnPolicy)(nil)).Elem()
}

func (o GetRealmWebAuthnPolicyOutput) ToGetRealmWebAuthnPolicyOutput() GetRealmWebAuthnPolicyOutput {
	return o
}

func (o GetRealmWebAuthnPolicyOutput) ToGetRealmWebAuthnPolicyOutputWithContext(ctx context.Context) GetRealmWebAuthnPolicyOutput {
	return o
}

func (o GetRealmWebAuthnPolicyOutput) ToGetRealmWebAuthnPolicyPtrOutput() GetRealmWebAuthnPolicyPtrOutput {
	return o.ToGetRealmWebAuthnPolicyPtrOutputWithContext(context.Background())
}

func (o GetRealmWebAuthnPolicyOutput) ToGetRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRealmWebAuthnPolicy) *GetRealmWebAuthnPolicy {
		return &v
	}).(GetRealmWebAuthnPolicyPtrOutput)
}

func (o GetRealmWebAuthnPolicyOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) []string { return v.AcceptableAaguids }).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPolicyOutput) AttestationConveyancePreference() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) string { return v.AttestationConveyancePreference }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPolicyOutput) AuthenticatorAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) string { return v.AuthenticatorAttachment }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPolicyOutput) AvoidSameAuthenticatorRegister() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) bool { return v.AvoidSameAuthenticatorRegister }).(pulumi.BoolOutput)
}

func (o GetRealmWebAuthnPolicyOutput) CreateTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) int { return v.CreateTimeout }).(pulumi.IntOutput)
}

func (o GetRealmWebAuthnPolicyOutput) RelyingPartyEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) string { return v.RelyingPartyEntityName }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPolicyOutput) RelyingPartyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) string { return v.RelyingPartyId }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPolicyOutput) RequireResidentKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) string { return v.RequireResidentKey }).(pulumi.StringOutput)
}

func (o GetRealmWebAuthnPolicyOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) []string { return v.SignatureAlgorithms }).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPolicyOutput) UserVerificationRequirement() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealmWebAuthnPolicy) string { return v.UserVerificationRequirement }).(pulumi.StringOutput)
}

type GetRealmWebAuthnPolicyPtrOutput struct{ *pulumi.OutputState }

func (GetRealmWebAuthnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRealmWebAuthnPolicy)(nil)).Elem()
}

func (o GetRealmWebAuthnPolicyPtrOutput) ToGetRealmWebAuthnPolicyPtrOutput() GetRealmWebAuthnPolicyPtrOutput {
	return o
}

func (o GetRealmWebAuthnPolicyPtrOutput) ToGetRealmWebAuthnPolicyPtrOutputWithContext(ctx context.Context) GetRealmWebAuthnPolicyPtrOutput {
	return o
}

func (o GetRealmWebAuthnPolicyPtrOutput) Elem() GetRealmWebAuthnPolicyOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) GetRealmWebAuthnPolicy {
		if v != nil {
			return *v
		}
		var ret GetRealmWebAuthnPolicy
		return ret
	}).(GetRealmWebAuthnPolicyOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) AcceptableAaguids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AcceptableAaguids
	}).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) AttestationConveyancePreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.AttestationConveyancePreference
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) AuthenticatorAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticatorAttachment
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) AvoidSameAuthenticatorRegister() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.AvoidSameAuthenticatorRegister
	}).(pulumi.BoolPtrOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) CreateTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.CreateTimeout
	}).(pulumi.IntPtrOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) RelyingPartyEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RelyingPartyEntityName
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) RelyingPartyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RelyingPartyId
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) RequireResidentKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RequireResidentKey
	}).(pulumi.StringPtrOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) SignatureAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) []string {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithms
	}).(pulumi.StringArrayOutput)
}

func (o GetRealmWebAuthnPolicyPtrOutput) UserVerificationRequirement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRealmWebAuthnPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.UserVerificationRequirement
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsManageMembersScopeInput)(nil)).Elem(), GroupPermissionsManageMembersScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsManageMembersScopePtrInput)(nil)).Elem(), GroupPermissionsManageMembersScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsManageMembershipScopeInput)(nil)).Elem(), GroupPermissionsManageMembershipScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsManageMembershipScopePtrInput)(nil)).Elem(), GroupPermissionsManageMembershipScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsManageScopeInput)(nil)).Elem(), GroupPermissionsManageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsManageScopePtrInput)(nil)).Elem(), GroupPermissionsManageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsViewMembersScopeInput)(nil)).Elem(), GroupPermissionsViewMembersScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsViewMembersScopePtrInput)(nil)).Elem(), GroupPermissionsViewMembersScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsViewScopeInput)(nil)).Elem(), GroupPermissionsViewScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPermissionsViewScopePtrInput)(nil)).Elem(), GroupPermissionsViewScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmInternationalizationInput)(nil)).Elem(), RealmInternationalizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmInternationalizationPtrInput)(nil)).Elem(), RealmInternationalizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmOtpPolicyInput)(nil)).Elem(), RealmOtpPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmOtpPolicyPtrInput)(nil)).Elem(), RealmOtpPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSecurityDefensesInput)(nil)).Elem(), RealmSecurityDefensesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSecurityDefensesPtrInput)(nil)).Elem(), RealmSecurityDefensesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSecurityDefensesBruteForceDetectionInput)(nil)).Elem(), RealmSecurityDefensesBruteForceDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSecurityDefensesBruteForceDetectionPtrInput)(nil)).Elem(), RealmSecurityDefensesBruteForceDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSecurityDefensesHeadersInput)(nil)).Elem(), RealmSecurityDefensesHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSecurityDefensesHeadersPtrInput)(nil)).Elem(), RealmSecurityDefensesHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSmtpServerInput)(nil)).Elem(), RealmSmtpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSmtpServerPtrInput)(nil)).Elem(), RealmSmtpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSmtpServerAuthInput)(nil)).Elem(), RealmSmtpServerAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmSmtpServerAuthPtrInput)(nil)).Elem(), RealmSmtpServerAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmWebAuthnPasswordlessPolicyInput)(nil)).Elem(), RealmWebAuthnPasswordlessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmWebAuthnPasswordlessPolicyPtrInput)(nil)).Elem(), RealmWebAuthnPasswordlessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmWebAuthnPolicyInput)(nil)).Elem(), RealmWebAuthnPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmWebAuthnPolicyPtrInput)(nil)).Elem(), RealmWebAuthnPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFederatedIdentityInput)(nil)).Elem(), UserFederatedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserFederatedIdentityArrayInput)(nil)).Elem(), UserFederatedIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInitialPasswordInput)(nil)).Elem(), UserInitialPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserInitialPasswordPtrInput)(nil)).Elem(), UserInitialPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsImpersonateScopeInput)(nil)).Elem(), UsersPermissionsImpersonateScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsImpersonateScopePtrInput)(nil)).Elem(), UsersPermissionsImpersonateScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsManageGroupMembershipScopeInput)(nil)).Elem(), UsersPermissionsManageGroupMembershipScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsManageGroupMembershipScopePtrInput)(nil)).Elem(), UsersPermissionsManageGroupMembershipScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsManageScopeInput)(nil)).Elem(), UsersPermissionsManageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsManageScopePtrInput)(nil)).Elem(), UsersPermissionsManageScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsMapRolesScopeInput)(nil)).Elem(), UsersPermissionsMapRolesScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsMapRolesScopePtrInput)(nil)).Elem(), UsersPermissionsMapRolesScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsUserImpersonatedScopeInput)(nil)).Elem(), UsersPermissionsUserImpersonatedScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsUserImpersonatedScopePtrInput)(nil)).Elem(), UsersPermissionsUserImpersonatedScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsViewScopeInput)(nil)).Elem(), UsersPermissionsViewScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersPermissionsViewScopePtrInput)(nil)).Elem(), UsersPermissionsViewScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClientDescriptionConverterProtocolMapperInput)(nil)).Elem(), GetClientDescriptionConverterProtocolMapperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClientDescriptionConverterProtocolMapperArrayInput)(nil)).Elem(), GetClientDescriptionConverterProtocolMapperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmInternationalizationInput)(nil)).Elem(), GetRealmInternationalizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmInternationalizationArrayInput)(nil)).Elem(), GetRealmInternationalizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmKeysKeyInput)(nil)).Elem(), GetRealmKeysKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmKeysKeyArrayInput)(nil)).Elem(), GetRealmKeysKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmOtpPolicyInput)(nil)).Elem(), GetRealmOtpPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmOtpPolicyPtrInput)(nil)).Elem(), GetRealmOtpPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSecurityDefenseInput)(nil)).Elem(), GetRealmSecurityDefenseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSecurityDefenseArrayInput)(nil)).Elem(), GetRealmSecurityDefenseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSecurityDefenseBruteForceDetectionInput)(nil)).Elem(), GetRealmSecurityDefenseBruteForceDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSecurityDefenseBruteForceDetectionArrayInput)(nil)).Elem(), GetRealmSecurityDefenseBruteForceDetectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSecurityDefenseHeaderInput)(nil)).Elem(), GetRealmSecurityDefenseHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSecurityDefenseHeaderArrayInput)(nil)).Elem(), GetRealmSecurityDefenseHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSmtpServerInput)(nil)).Elem(), GetRealmSmtpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSmtpServerArrayInput)(nil)).Elem(), GetRealmSmtpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSmtpServerAuthInput)(nil)).Elem(), GetRealmSmtpServerAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmSmtpServerAuthArrayInput)(nil)).Elem(), GetRealmSmtpServerAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmWebAuthnPasswordlessPolicyInput)(nil)).Elem(), GetRealmWebAuthnPasswordlessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmWebAuthnPasswordlessPolicyPtrInput)(nil)).Elem(), GetRealmWebAuthnPasswordlessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmWebAuthnPolicyInput)(nil)).Elem(), GetRealmWebAuthnPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRealmWebAuthnPolicyPtrInput)(nil)).Elem(), GetRealmWebAuthnPolicyArgs{})
	pulumi.RegisterOutputType(GroupPermissionsManageMembersScopeOutput{})
	pulumi.RegisterOutputType(GroupPermissionsManageMembersScopePtrOutput{})
	pulumi.RegisterOutputType(GroupPermissionsManageMembershipScopeOutput{})
	pulumi.RegisterOutputType(GroupPermissionsManageMembershipScopePtrOutput{})
	pulumi.RegisterOutputType(GroupPermissionsManageScopeOutput{})
	pulumi.RegisterOutputType(GroupPermissionsManageScopePtrOutput{})
	pulumi.RegisterOutputType(GroupPermissionsViewMembersScopeOutput{})
	pulumi.RegisterOutputType(GroupPermissionsViewMembersScopePtrOutput{})
	pulumi.RegisterOutputType(GroupPermissionsViewScopeOutput{})
	pulumi.RegisterOutputType(GroupPermissionsViewScopePtrOutput{})
	pulumi.RegisterOutputType(RealmInternationalizationOutput{})
	pulumi.RegisterOutputType(RealmInternationalizationPtrOutput{})
	pulumi.RegisterOutputType(RealmOtpPolicyOutput{})
	pulumi.RegisterOutputType(RealmOtpPolicyPtrOutput{})
	pulumi.RegisterOutputType(RealmSecurityDefensesOutput{})
	pulumi.RegisterOutputType(RealmSecurityDefensesPtrOutput{})
	pulumi.RegisterOutputType(RealmSecurityDefensesBruteForceDetectionOutput{})
	pulumi.RegisterOutputType(RealmSecurityDefensesBruteForceDetectionPtrOutput{})
	pulumi.RegisterOutputType(RealmSecurityDefensesHeadersOutput{})
	pulumi.RegisterOutputType(RealmSecurityDefensesHeadersPtrOutput{})
	pulumi.RegisterOutputType(RealmSmtpServerOutput{})
	pulumi.RegisterOutputType(RealmSmtpServerPtrOutput{})
	pulumi.RegisterOutputType(RealmSmtpServerAuthOutput{})
	pulumi.RegisterOutputType(RealmSmtpServerAuthPtrOutput{})
	pulumi.RegisterOutputType(RealmWebAuthnPasswordlessPolicyOutput{})
	pulumi.RegisterOutputType(RealmWebAuthnPasswordlessPolicyPtrOutput{})
	pulumi.RegisterOutputType(RealmWebAuthnPolicyOutput{})
	pulumi.RegisterOutputType(RealmWebAuthnPolicyPtrOutput{})
	pulumi.RegisterOutputType(UserFederatedIdentityOutput{})
	pulumi.RegisterOutputType(UserFederatedIdentityArrayOutput{})
	pulumi.RegisterOutputType(UserInitialPasswordOutput{})
	pulumi.RegisterOutputType(UserInitialPasswordPtrOutput{})
	pulumi.RegisterOutputType(UsersPermissionsImpersonateScopeOutput{})
	pulumi.RegisterOutputType(UsersPermissionsImpersonateScopePtrOutput{})
	pulumi.RegisterOutputType(UsersPermissionsManageGroupMembershipScopeOutput{})
	pulumi.RegisterOutputType(UsersPermissionsManageGroupMembershipScopePtrOutput{})
	pulumi.RegisterOutputType(UsersPermissionsManageScopeOutput{})
	pulumi.RegisterOutputType(UsersPermissionsManageScopePtrOutput{})
	pulumi.RegisterOutputType(UsersPermissionsMapRolesScopeOutput{})
	pulumi.RegisterOutputType(UsersPermissionsMapRolesScopePtrOutput{})
	pulumi.RegisterOutputType(UsersPermissionsUserImpersonatedScopeOutput{})
	pulumi.RegisterOutputType(UsersPermissionsUserImpersonatedScopePtrOutput{})
	pulumi.RegisterOutputType(UsersPermissionsViewScopeOutput{})
	pulumi.RegisterOutputType(UsersPermissionsViewScopePtrOutput{})
	pulumi.RegisterOutputType(GetClientDescriptionConverterProtocolMapperOutput{})
	pulumi.RegisterOutputType(GetClientDescriptionConverterProtocolMapperArrayOutput{})
	pulumi.RegisterOutputType(GetRealmInternationalizationOutput{})
	pulumi.RegisterOutputType(GetRealmInternationalizationArrayOutput{})
	pulumi.RegisterOutputType(GetRealmKeysKeyOutput{})
	pulumi.RegisterOutputType(GetRealmKeysKeyArrayOutput{})
	pulumi.RegisterOutputType(GetRealmOtpPolicyOutput{})
	pulumi.RegisterOutputType(GetRealmOtpPolicyPtrOutput{})
	pulumi.RegisterOutputType(GetRealmSecurityDefenseOutput{})
	pulumi.RegisterOutputType(GetRealmSecurityDefenseArrayOutput{})
	pulumi.RegisterOutputType(GetRealmSecurityDefenseBruteForceDetectionOutput{})
	pulumi.RegisterOutputType(GetRealmSecurityDefenseBruteForceDetectionArrayOutput{})
	pulumi.RegisterOutputType(GetRealmSecurityDefenseHeaderOutput{})
	pulumi.RegisterOutputType(GetRealmSecurityDefenseHeaderArrayOutput{})
	pulumi.RegisterOutputType(GetRealmSmtpServerOutput{})
	pulumi.RegisterOutputType(GetRealmSmtpServerArrayOutput{})
	pulumi.RegisterOutputType(GetRealmSmtpServerAuthOutput{})
	pulumi.RegisterOutputType(GetRealmSmtpServerAuthArrayOutput{})
	pulumi.RegisterOutputType(GetRealmWebAuthnPasswordlessPolicyOutput{})
	pulumi.RegisterOutputType(GetRealmWebAuthnPasswordlessPolicyPtrOutput{})
	pulumi.RegisterOutputType(GetRealmWebAuthnPolicyOutput{})
	pulumi.RegisterOutputType(GetRealmWebAuthnPolicyPtrOutput{})
}
