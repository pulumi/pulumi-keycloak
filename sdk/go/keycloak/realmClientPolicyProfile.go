// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows for managing Realm Client Policy Profiles.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-keycloak/sdk/v6/go/keycloak"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			realm, err := keycloak.NewRealm(ctx, "realm", &keycloak.RealmArgs{
//				Realm: pulumi.String("my-realm"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keycloak.NewRealmClientPolicyProfile(ctx, "profile", &keycloak.RealmClientPolicyProfileArgs{
//				Name:    pulumi.String("my-profile"),
//				RealmId: realm.ID(),
//				Executors: keycloak.RealmClientPolicyProfileExecutorArray{
//					&keycloak.RealmClientPolicyProfileExecutorArgs{
//						Name: pulumi.String("intent-client-bind-checker"),
//						Configuration: pulumi.StringMap{
//							"auto-configure": pulumi.String("true"),
//						},
//					},
//					&keycloak.RealmClientPolicyProfileExecutorArgs{
//						Name: pulumi.String("secure-session"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Attribute Arguments
//
// - `name` - (Required) The name of the attribute.
// - `realmId` - (Required) The realm id.
// - `executor` - (Optional) An ordered list of executors
//
// #### Executor Arguments
//
// - `name` - (Required) The name of the executor. NOTE! The executor needs to exist
// - `configuration` - (Optional) - A map of configuration values
//
// ## Import
//
// This resource currently does not support importing.
type RealmClientPolicyProfile struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput                      `pulumi:"description"`
	Executors   RealmClientPolicyProfileExecutorArrayOutput `pulumi:"executors"`
	Name        pulumi.StringOutput                         `pulumi:"name"`
	RealmId     pulumi.StringOutput                         `pulumi:"realmId"`
}

// NewRealmClientPolicyProfile registers a new resource with the given unique name, arguments, and options.
func NewRealmClientPolicyProfile(ctx *pulumi.Context,
	name string, args *RealmClientPolicyProfileArgs, opts ...pulumi.ResourceOption) (*RealmClientPolicyProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RealmId == nil {
		return nil, errors.New("invalid value for required argument 'RealmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RealmClientPolicyProfile
	err := ctx.RegisterResource("keycloak:index/realmClientPolicyProfile:RealmClientPolicyProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealmClientPolicyProfile gets an existing RealmClientPolicyProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealmClientPolicyProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealmClientPolicyProfileState, opts ...pulumi.ResourceOption) (*RealmClientPolicyProfile, error) {
	var resource RealmClientPolicyProfile
	err := ctx.ReadResource("keycloak:index/realmClientPolicyProfile:RealmClientPolicyProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RealmClientPolicyProfile resources.
type realmClientPolicyProfileState struct {
	Description *string                            `pulumi:"description"`
	Executors   []RealmClientPolicyProfileExecutor `pulumi:"executors"`
	Name        *string                            `pulumi:"name"`
	RealmId     *string                            `pulumi:"realmId"`
}

type RealmClientPolicyProfileState struct {
	Description pulumi.StringPtrInput
	Executors   RealmClientPolicyProfileExecutorArrayInput
	Name        pulumi.StringPtrInput
	RealmId     pulumi.StringPtrInput
}

func (RealmClientPolicyProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*realmClientPolicyProfileState)(nil)).Elem()
}

type realmClientPolicyProfileArgs struct {
	Description *string                            `pulumi:"description"`
	Executors   []RealmClientPolicyProfileExecutor `pulumi:"executors"`
	Name        *string                            `pulumi:"name"`
	RealmId     string                             `pulumi:"realmId"`
}

// The set of arguments for constructing a RealmClientPolicyProfile resource.
type RealmClientPolicyProfileArgs struct {
	Description pulumi.StringPtrInput
	Executors   RealmClientPolicyProfileExecutorArrayInput
	Name        pulumi.StringPtrInput
	RealmId     pulumi.StringInput
}

func (RealmClientPolicyProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realmClientPolicyProfileArgs)(nil)).Elem()
}

type RealmClientPolicyProfileInput interface {
	pulumi.Input

	ToRealmClientPolicyProfileOutput() RealmClientPolicyProfileOutput
	ToRealmClientPolicyProfileOutputWithContext(ctx context.Context) RealmClientPolicyProfileOutput
}

func (*RealmClientPolicyProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmClientPolicyProfile)(nil)).Elem()
}

func (i *RealmClientPolicyProfile) ToRealmClientPolicyProfileOutput() RealmClientPolicyProfileOutput {
	return i.ToRealmClientPolicyProfileOutputWithContext(context.Background())
}

func (i *RealmClientPolicyProfile) ToRealmClientPolicyProfileOutputWithContext(ctx context.Context) RealmClientPolicyProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmClientPolicyProfileOutput)
}

// RealmClientPolicyProfileArrayInput is an input type that accepts RealmClientPolicyProfileArray and RealmClientPolicyProfileArrayOutput values.
// You can construct a concrete instance of `RealmClientPolicyProfileArrayInput` via:
//
//	RealmClientPolicyProfileArray{ RealmClientPolicyProfileArgs{...} }
type RealmClientPolicyProfileArrayInput interface {
	pulumi.Input

	ToRealmClientPolicyProfileArrayOutput() RealmClientPolicyProfileArrayOutput
	ToRealmClientPolicyProfileArrayOutputWithContext(context.Context) RealmClientPolicyProfileArrayOutput
}

type RealmClientPolicyProfileArray []RealmClientPolicyProfileInput

func (RealmClientPolicyProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmClientPolicyProfile)(nil)).Elem()
}

func (i RealmClientPolicyProfileArray) ToRealmClientPolicyProfileArrayOutput() RealmClientPolicyProfileArrayOutput {
	return i.ToRealmClientPolicyProfileArrayOutputWithContext(context.Background())
}

func (i RealmClientPolicyProfileArray) ToRealmClientPolicyProfileArrayOutputWithContext(ctx context.Context) RealmClientPolicyProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmClientPolicyProfileArrayOutput)
}

// RealmClientPolicyProfileMapInput is an input type that accepts RealmClientPolicyProfileMap and RealmClientPolicyProfileMapOutput values.
// You can construct a concrete instance of `RealmClientPolicyProfileMapInput` via:
//
//	RealmClientPolicyProfileMap{ "key": RealmClientPolicyProfileArgs{...} }
type RealmClientPolicyProfileMapInput interface {
	pulumi.Input

	ToRealmClientPolicyProfileMapOutput() RealmClientPolicyProfileMapOutput
	ToRealmClientPolicyProfileMapOutputWithContext(context.Context) RealmClientPolicyProfileMapOutput
}

type RealmClientPolicyProfileMap map[string]RealmClientPolicyProfileInput

func (RealmClientPolicyProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmClientPolicyProfile)(nil)).Elem()
}

func (i RealmClientPolicyProfileMap) ToRealmClientPolicyProfileMapOutput() RealmClientPolicyProfileMapOutput {
	return i.ToRealmClientPolicyProfileMapOutputWithContext(context.Background())
}

func (i RealmClientPolicyProfileMap) ToRealmClientPolicyProfileMapOutputWithContext(ctx context.Context) RealmClientPolicyProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealmClientPolicyProfileMapOutput)
}

type RealmClientPolicyProfileOutput struct{ *pulumi.OutputState }

func (RealmClientPolicyProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RealmClientPolicyProfile)(nil)).Elem()
}

func (o RealmClientPolicyProfileOutput) ToRealmClientPolicyProfileOutput() RealmClientPolicyProfileOutput {
	return o
}

func (o RealmClientPolicyProfileOutput) ToRealmClientPolicyProfileOutputWithContext(ctx context.Context) RealmClientPolicyProfileOutput {
	return o
}

func (o RealmClientPolicyProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RealmClientPolicyProfileOutput) Executors() RealmClientPolicyProfileExecutorArrayOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfile) RealmClientPolicyProfileExecutorArrayOutput { return v.Executors }).(RealmClientPolicyProfileExecutorArrayOutput)
}

func (o RealmClientPolicyProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RealmClientPolicyProfileOutput) RealmId() pulumi.StringOutput {
	return o.ApplyT(func(v *RealmClientPolicyProfile) pulumi.StringOutput { return v.RealmId }).(pulumi.StringOutput)
}

type RealmClientPolicyProfileArrayOutput struct{ *pulumi.OutputState }

func (RealmClientPolicyProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RealmClientPolicyProfile)(nil)).Elem()
}

func (o RealmClientPolicyProfileArrayOutput) ToRealmClientPolicyProfileArrayOutput() RealmClientPolicyProfileArrayOutput {
	return o
}

func (o RealmClientPolicyProfileArrayOutput) ToRealmClientPolicyProfileArrayOutputWithContext(ctx context.Context) RealmClientPolicyProfileArrayOutput {
	return o
}

func (o RealmClientPolicyProfileArrayOutput) Index(i pulumi.IntInput) RealmClientPolicyProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RealmClientPolicyProfile {
		return vs[0].([]*RealmClientPolicyProfile)[vs[1].(int)]
	}).(RealmClientPolicyProfileOutput)
}

type RealmClientPolicyProfileMapOutput struct{ *pulumi.OutputState }

func (RealmClientPolicyProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RealmClientPolicyProfile)(nil)).Elem()
}

func (o RealmClientPolicyProfileMapOutput) ToRealmClientPolicyProfileMapOutput() RealmClientPolicyProfileMapOutput {
	return o
}

func (o RealmClientPolicyProfileMapOutput) ToRealmClientPolicyProfileMapOutputWithContext(ctx context.Context) RealmClientPolicyProfileMapOutput {
	return o
}

func (o RealmClientPolicyProfileMapOutput) MapIndex(k pulumi.StringInput) RealmClientPolicyProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RealmClientPolicyProfile {
		return vs[0].(map[string]*RealmClientPolicyProfile)[vs[1].(string)]
	}).(RealmClientPolicyProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealmClientPolicyProfileInput)(nil)).Elem(), &RealmClientPolicyProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmClientPolicyProfileArrayInput)(nil)).Elem(), RealmClientPolicyProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealmClientPolicyProfileMapInput)(nil)).Elem(), RealmClientPolicyProfileMap{})
	pulumi.RegisterOutputType(RealmClientPolicyProfileOutput{})
	pulumi.RegisterOutputType(RealmClientPolicyProfileArrayOutput{})
	pulumi.RegisterOutputType(RealmClientPolicyProfileMapOutput{})
}
