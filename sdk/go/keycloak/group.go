// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keycloak

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # .Group
//
// Allows for creating and managing Groups within Keycloak.
//
// Groups provide a logical wrapping for users within Keycloak. Users within a
// group can share attributes and roles, and group membership can be mapped
// to a claim.
//
// Attributes can also be defined on Groups.
//
// Groups can also be federated from external data sources, such as LDAP or Active Directory.
// This resource **should not** be used to manage groups that were created this way.
//
// ### Argument Reference
//
// The following arguments are supported:
//
// - `realmId` - (Required) The realm this group exists in.
// - `parentId` - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level.
// - `name` - (Required) The name of the group.
// - `attributes` - (Optional) A dict of key/value pairs to set as custom attributes for the group.
//
// ### Attributes Reference
//
// In addition to the arguments listed above, the following computed attributes are exported:
//
// - `path` - The complete path of the group. For example, the child group's path in the example configuration would be `/parent-group/child-group`.
type Group struct {
	pulumi.CustomResourceState

	Attributes pulumi.MapOutput       `pulumi:"attributes"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	ParentId   pulumi.StringPtrOutput `pulumi:"parentId"`
	Path       pulumi.StringOutput    `pulumi:"path"`
	RealmId    pulumi.StringOutput    `pulumi:"realmId"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil || args.RealmId == nil {
		return nil, errors.New("missing required argument 'RealmId'")
	}
	if args == nil {
		args = &GroupArgs{}
	}
	var resource Group
	err := ctx.RegisterResource("keycloak:index/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("keycloak:index/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	Attributes map[string]interface{} `pulumi:"attributes"`
	Name       *string                `pulumi:"name"`
	ParentId   *string                `pulumi:"parentId"`
	Path       *string                `pulumi:"path"`
	RealmId    *string                `pulumi:"realmId"`
}

type GroupState struct {
	Attributes pulumi.MapInput
	Name       pulumi.StringPtrInput
	ParentId   pulumi.StringPtrInput
	Path       pulumi.StringPtrInput
	RealmId    pulumi.StringPtrInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	Attributes map[string]interface{} `pulumi:"attributes"`
	Name       *string                `pulumi:"name"`
	ParentId   *string                `pulumi:"parentId"`
	RealmId    string                 `pulumi:"realmId"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	Attributes pulumi.MapInput
	Name       pulumi.StringPtrInput
	ParentId   pulumi.StringPtrInput
	RealmId    pulumi.StringInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}
